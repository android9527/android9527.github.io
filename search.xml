<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Aop的几种实现方式</title>
      <link href="/2018/10/20/2018-10-15-Aop%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/10/20/2018-10-15-Aop%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h3 id="一、AOP概念"><a href="#一、AOP概念" class="headerlink" title="一、AOP概念"></a>一、AOP概念</h3><p>百度百科中对AOP的解释如下:<br>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。 <a id="more"></a>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>AOP只是一种思想的统称，实现这种思想的方法有挺多。AOP通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，提高开发效率。</p><h4 id="（1）AOP与OOP的关系"><a href="#（1）AOP与OOP的关系" class="headerlink" title="（1）AOP与OOP的关系"></a>（1）AOP与OOP的关系</h4><p>OOP（面向对象编程）针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的逻辑单元划分。但是也有它的缺点，最明显的就是关注点聚焦时，面向对象无法简单的解决这个问题，一个关注点是面向所有而不是单一的类，不受类的边界的约束，因此OOP无法将关注点聚焦来解决，只能分散到各个类中。<br>AOP（面向切面编程）则是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。这两种设计思想在目标上有着本质的差异。<br>AOP并不是与OOP对立的，而是为了弥补OOP的不足。OOP解决了竖向的问题，AOP则解决横向的问题。因为有了AOP我们的调试和监控就变得简单清晰。</p><p>简单的来讲，AOP是一种：可以在不改变原来代码的基础上，通过“动态注入”代码，来改变原来执行结果的技术。</p><h4 id="（2）AOP主要应用场景"><a href="#（2）AOP主要应用场景" class="headerlink" title="（2）AOP主要应用场景"></a>（2）AOP主要应用场景</h4><p>日志记录，性能统计，安全控制，事务处理，异常处理等等。</p><h4 id="（3）主要目标"><a href="#（3）主要目标" class="headerlink" title="（3）主要目标"></a>（3）主要目标</h4><p>将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。</p><p><img src="/images/aop/aop2.png" alt="image"></p><p>上图是一个APP模块结构示例，按照照OOP的思想划分为“视图交互”，“业务逻辑”，“网络”等三个模块，而现在假设想要对所有模块的每个方法耗时（性能监控模块）进行统计。这个性能监控模块的功能就是需要横跨并嵌入众多模块里的，这就是典型的AOP的应用场景。</p><p>AOP的目标是把这些横跨并嵌入众多模块里的功能（如监控每个方法的性能） 集中起来，放到一个统一的地方来控制和管理。如果说，OOP如果是把问题划分到单个模块的话，那么AOP就是把涉及到众多模块的某一类问题进行统一管理。</p><p>对比：</p><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">OOP</th><th style="text-align:left">AOP</th></tr></thead><tbody><tr><td style="text-align:left">增加日志</td><td style="text-align:left">所有功能模块单独添加，容易出错</td><td style="text-align:left">能够将同一个关注点聚焦在一处解决</td></tr><tr><td style="text-align:left">修改日志</td><td style="text-align:left">功能代码分散，不方便调试</td><td style="text-align:left">能够实现一处修改，处处生效</td></tr></tbody></table><p>例如：在不改变 main 方法的同时通过代码注入的方式达到目的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Before</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// do something</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * After</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</div><div class="line">        <span class="comment">// do something</span></div><div class="line">        <span class="keyword">long</span> end = System.currentTimeMillis() - start;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="二、AOP代码注入时机"><a href="#二、AOP代码注入时机" class="headerlink" title="二、AOP代码注入时机"></a>二、AOP代码注入时机</h3><p>代码注入主要利用了Java的反射和注解机制，根据注解时机的不同，主要分为运行时、加载时和编译时。</p><p>运行时：你的代码对增强代码的需求很明确，比如，必须使用动态代理（这可以说并不是真正的代码注入）。<br>加载时：当目标类被Dalvik或者ART加载的时候修改才会被执行。这是对Java字节码文件或者Android的dex文件进行的注入操作。<br>编译时：在打包发布程序之前，通过向编译过程添加额外的步骤来修改被编译的类。</p><h3 id="三、AOP的几种实现方式"><a href="#三、AOP的几种实现方式" class="headerlink" title="三、AOP的几种实现方式"></a>三、AOP的几种实现方式</h3><ul><li>Java 中的动态代理，运行时动态创建 Proxy 类实例</li><li>APT，注解处理器，编译时生成 .java 代码</li><li>Javassist for Android：一个移植到Android平台的非常知名的操纵字节码的java库，对 class 字节码进行修改</li><li>AspectJ：和Java语言无缝衔接的面向切面的编程的扩展工具（可用于Android）。</li></ul><h4 id="一、动态代理"><a href="#一、动态代理" class="headerlink" title="一、动态代理"></a>一、动态代理</h4><h5 id="动态代理本质上还是java中的“代理设计模式”，不需要依赖其他类库，主要涉及到两个类"><a href="#动态代理本质上还是java中的“代理设计模式”，不需要依赖其他类库，主要涉及到两个类" class="headerlink" title="动态代理本质上还是java中的“代理设计模式”，不需要依赖其他类库，主要涉及到两个类"></a>动态代理本质上还是java中的“代理设计模式”，不需要依赖其他类库，主要涉及到两个类</h5><p><code>InvocationHandler.java</code>  InvocationHandler is the interface implemented by the invocation handler of a proxy instance.</p><p><code>Proxy.java</code>  Proxy provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all<br>            dynamic proxy classes created by those methods.</p><h5 id="编码实现步骤"><a href="#编码实现步骤" class="headerlink" title="编码实现步骤"></a>编码实现步骤</h5><p>（1）创建目标接口UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span></div><div class="line">&#123;</div><div class="line">    <span class="meta">@Log</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String name)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(String name)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>（2）创建具体实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span></div><div class="line">&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String name)</span></span></div><div class="line">    &#123;</div><div class="line">        System.out.println(<span class="string">"addUser "</span> + name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"remove "</span> + name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>（3）创建代理对象 implements InvocationHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></div><div class="line">        <span class="keyword">throws</span> Throwable &#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (method.isAnnotationPresent(Log.class)) &#123;</div><div class="line">        System.out.println(<span class="string">"before method do something..."</span>);</div><div class="line">        Object object = method.invoke(src, args);</div><div class="line">        System.out.println(<span class="string">"after method do something..."</span>);</div><div class="line">        <span class="keyword">return</span> object;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> method.invoke(src, args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>（4）客户端调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testProxy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 设置这个值，可以把生成的代理类，输出出来。</span></div><div class="line">    System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</div><div class="line">    UserService service = <span class="keyword">new</span> UserServiceImpl();</div><div class="line">    <span class="comment">//生成被代理类的接口的子类</span></div><div class="line">    UserService proxy = (UserService) Proxy.newProxyInstance(LogProxy.class.getClassLoader(), service.getClass().getInterfaces(),</div><div class="line">                    <span class="keyword">new</span> LogProxy(service));</div><div class="line">    proxy.addUser(<span class="string">"name1"</span>);</div><div class="line">    proxy.remove(<span class="string">"name2"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代理对象的生成实际上是在运行时利用反射获取构造函数，通过加载构造函数在内存中生成的，其中生成的对象持有调用处理器InvocationHandler，最后会调用h.invoke()方法</p><p><img src="/images/aop/aop1.jpeg" alt="image"></p><h5 id="想要实现特定方法写入日志，可以使用注解等方式。"><a href="#想要实现特定方法写入日志，可以使用注解等方式。" class="headerlink" title="想要实现特定方法写入日志，可以使用注解等方式。"></a>想要实现特定方法写入日志，可以使用注解等方式。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义日志注解，用于判断该方法执行前是否需要写入日志</div><div class="line"> */</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Target</span>(value = ElementType.METHOD)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log</div><div class="line">&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="二、编译时注解APT实现"><a href="#二、编译时注解APT实现" class="headerlink" title="二、编译时注解APT实现"></a>二、编译时注解APT实现</h4><p>代表项目：ButterKnife, Dagger2, DataBinding</p><h5 id="（1）APT的介绍"><a href="#（1）APT的介绍" class="headerlink" title="（1）APT的介绍"></a>（1）APT的介绍</h5><p>全名Annotation Processing Tool，注解处理器。对源代码文件进行检测找出其中的Annotation，使用Annotation进行额外的处理。<br>APT在处理Annotation时可以根据源文件中的Annotation生成额外的源文件和其它的文件(文件具体内容由Annotation处理器的编写者决定),APT还会编译生成的源文件和原来的源文件，将它们一起生成class文件。<br>总结一句话，就是在编译时候，根据注解生成对应需要的文件，这样在app运行的时候就不会导致性能损耗。</p><h5 id="（2）APT的处理要素"><a href="#（2）APT的处理要素" class="headerlink" title="（2）APT的处理要素"></a>（2）APT的处理要素</h5><p>注解处理器（AbstractProcess）+ 代码处理（javaPoet）+ 处理器注册（AutoService）+ apt</p><h5 id="（3）使用APT来处理annotation的流程"><a href="#（3）使用APT来处理annotation的流程" class="headerlink" title="（3）使用APT来处理annotation的流程"></a>（3）使用APT来处理annotation的流程</h5><p>1.定义注解（如@ViewBind）<br>2.定义注解处理器 继承 AbstractProcessor<br>3.在处理器里面完成处理方式，生成java代码。<br>4.注册 处理器 @AutoService(Processor.class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 要把处理器注册到javac中，需要打包一个特定的文件javax.annotation.processing.Processor到META-INF/services路径下</div><div class="line"> * AutoService 会自动生成配置文件，注册处理器</div><div class="line"> */</div><div class="line"><span class="meta">@AutoService</span>(Processor.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewBindProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理器的初始化方法，可以获取相关的工具类</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.init(processingEnv);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理器的主方法，用于扫描处理注解，生成java文件</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="三、Javassist-实现"><a href="#三、Javassist-实现" class="headerlink" title="三、Javassist 实现"></a>三、Javassist 实现</h4><p>代表项目：Hotfix   Instant Run</p><h5 id="（1）原理"><a href="#（1）原理" class="headerlink" title="（1）原理"></a>（1）原理</h5><p>Javassist 可以直接操作字节码，从而实现代码注入，所以使用 Javassist 的时机就是在构建工具 Gradle 将源文件编译成 .class 文件之后，将 .class 打包成 dex 文件之前。</p><p>该方式需要借助Google提供的Transform API</p><p>先说一下Transform是什么<br>gradle从1.5开始，gradle 插件包含了一个叫Transform的API，这个API允许第三方插件在class文件转为为dex文件前操作编译好的class文件，<br>这个API的目标是简化自定义类操作，而不必处理Task，并且在操作上提供更大的灵活性。<br>官方文档：<a href="http://google.github.io/android-gradle-dsl/javadoc/" target="_blank" rel="external">http://google.github.io/android-gradle-dsl/javadoc/</a></p><h5 id="（2）开发步骤："><a href="#（2）开发步骤：" class="headerlink" title="（2）开发步骤："></a>（2）开发步骤：</h5><p>1、创建自定义 Gradle plugin module<br>   新建Android library module 留下src/main和build.gradle，其他的文件删除<br>2、Gradle Transform API<br>    在main目录下创建groovy文件夹，然后在groovy目录下就可以创建我们的包名和groovy文件了,记得后缀要已.groovy结尾。在这个文件中引入创建的包名，然后写一个Class继承于Plugin&lt; Project &gt; 并重写apply方法<br>创建 MyPlugin.groovy 文件<br>3、利用 javassist 或者 ASM 修改原有的class文件或者新增class</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></div><div class="line"></div><div class="line">    <span class="keyword">void</span> apply(Project project) &#123;</div><div class="line">        System.out.println(<span class="string">"------------------开始----------------------"</span>);</div><div class="line"></div><div class="line">        <span class="comment">//AppExtension就是build.gradle中android&#123;...&#125;这一块</span></div><div class="line">        <span class="keyword">def</span> android = project.extensions.getByType(AppExtension)</div><div class="line"></div><div class="line">        <span class="comment">//注册一个Transform</span></div><div class="line">        <span class="keyword">def</span> classTransform = <span class="keyword">new</span> MyClassTransform(project)</div><div class="line">        android.registerTransform(classTransform)</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"------------------结束----------------------"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTransform</span> <span class="keyword">extends</span> <span class="title">Transform</span> &#123;</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">void</span> transform(Context context, Collection&lt;TransformInput&gt; inputs, Collection&lt;TransformInput&gt; referencedInputs, TransformOutputProvider outputProvider, <span class="keyword">boolean</span> isIncremental) <span class="keyword">throws</span> IOException, TransformException, InterruptedException &#123;</div><div class="line">        <span class="keyword">super</span>.transform(context, inputs, referencedInputs, outputProvider, isIncremental)</div><div class="line"></div><div class="line">        <span class="comment">// javassist 操作字节码</span></div><div class="line">        <span class="comment">//获取MainActivity.class</span></div><div class="line">        CtClass ctClass = pool.getCtClass(<span class="string">"io.github.android9527.javassistdemo.MainActivity"</span>);</div><div class="line">        <span class="keyword">if</span> (ctClass.isFrozen())</div><div class="line">            ctClass.defrost()</div><div class="line">        <span class="comment">//获取到OnCreate方法</span></div><div class="line">        CtMethod ctMethod = ctClass.getDeclaredMethod(<span class="string">"onCreate"</span>)</div><div class="line">        String insetBeforeStr = <span class="string">""" android.widget.Toast.makeText(this, "插入了Toast代码~", android.widget.Toast.LENGTH_SHORT).show();</span></div><div class="line">                                                        """</div><div class="line">        <span class="comment">//在方法开头插入代码</span></div><div class="line">        ctMethod.insertBefore(insetBeforeStr)</div><div class="line">        ctClass.writeFile(path)</div><div class="line">        ctClass.detach()<span class="comment">//释放</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>4、 配置plugin 在main目录下创建resources文件夹，继续在resources下创建META-INF文件夹，<br>继续在META-INF文件夹下创建<code>gradle-plugins</code>文件夹，最后在gradle-plugins文件夹下创建一个xxx.properties文件，<br>注意：这个xxx就是在app下的build.gradle中引入时的名字，例如：apply plugin: ‘xxx’。<br>在文件中写 <code>implementation-class=io.github.android9527.MyPlugin</code>。</p><p>5、 需改build.gradle 内容，uploadArchives是上传到maven库，然后执行uploadArchives这个task，就将我们的这个插件打包上传到了本地maven中，可以去本地的Maven库中查看</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'groovy'</span></div><div class="line">apply plugin: <span class="string">'maven'</span></div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="comment">// gradle sdk</span></div><div class="line">    <span class="keyword">compile</span> gradleApi()</div><div class="line">    <span class="comment">// groovy sdk</span></div><div class="line">    <span class="keyword">compile</span> localGroovy()</div><div class="line">    <span class="comment">// 可以引用其它库</span></div><div class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</div><div class="line"></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.tools.build:transform-api:1.5.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'javassist:javassist:3.12.1.GA'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.android.tools.build:gradle:3.1.2'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">uploadArchives&#123;</div><div class="line">    <span class="keyword">repositories</span>&#123;</div><div class="line">        mavenDeployer&#123;</div><div class="line">            repository(url:uri(<span class="string">'../repo'</span>))</div><div class="line">            pom.groupId = <span class="string">'com.android9527.plugin'</span> <span class="comment">// 组名</span></div><div class="line">            pom.artifactId = <span class="string">'test'</span> <span class="comment">// 插件名</span></div><div class="line">            pom.version = <span class="string">'1.0.1-SNAPSHOT'</span> <span class="comment">// 版本号</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">group</span>=<span class="string">'com.android9527.plugin'</span></div><div class="line">version=<span class="string">'1.0-SNAPSHOT'</span></div></pre></td></tr></table></figure><p>6、 运行项目，反编译之后查看字节码<br><img src="/images/aop/javassist.jpeg" alt="image"></p><h4 id="四、Android中使用-AspectJ"><a href="#四、Android中使用-AspectJ" class="headerlink" title="四、Android中使用 AspectJ"></a>四、Android中使用 AspectJ</h4><p>代表项目：Hugo(打印每个方法的执行时间)  sa-sdk-android（全埋点技术）</p><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>AspectJ 意思就是Java的Aspect，Java的AOP。它的核心是ajc（编译器 aspectjtools）和 weaver（织入器 aspectjweaver）。</p><p>ajc编译器：基于Java编译器之上的，它是用来编译.aj文件，aspectj在Java编译器的基础上增加了一些它自己的关键字和方法。因此，ajc也可以编译Java代码。<br>weaver织入器：为了在java编译器上使用AspectJ而不依赖于Ajc编译器，aspectJ 5出现了 @AspectJ，使用注释的方式编写AspectJ代码，可以在任何Java编译器上使用。<br>由于AndroidStudio默认是没有ajc编译器的，所以在Android中使用@AspectJ来编写。它在代码的编译期间扫描目标程序，根据切点（PointCut）匹配,将开发者编写的Aspect程序编织（Weave）到目标程序的.class文件中，对目标程序作了重构（重构单位是JoinPoint），目的就是建立目标程序与Aspect程序的连接（获得执行的对象、方法、参数等上下文信息），从而达到AOP的目的。</p><h5 id="AspectJ-术语"><a href="#AspectJ-术语" class="headerlink" title="AspectJ 术语"></a>AspectJ 术语</h5><p>切面（Aspect）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。其实就是共有功能的实现。如日志切面、权限切面、事务切面等。<br>通知（Advice）：是切面的具体实现。以目标方法为参照点，根据放置的地方不同，可分为前置通知（Before）、后置通知（AfterReturning）、异常通知（AfterThrowing）、最终通知（After）与环绕通知（Around）5种。在实际应用中通常是切面类中的一个方法，具体属于哪类通知由配置指定的。<br>切入点（Pointcut）：用于定义通知应该切入到哪些连接点上。不同的通知通常需要切入到不同的连接点上，这种精准的匹配是由切入点的正则表达式来定义的。<br>连接点（JoinPoint）：就是程序在运行过程中能够插入切面的地点。例如，方法调用、异常抛出或字段修改等。<br>目标对象（Target Object）：包含连接点的对象，也被称作被通知或被代理对象。这些对象中已经只剩下干干净净的核心业务逻辑代码了，所有的共有功能等代码则是等待AOP容器的切入。<br>AOP代理（AOP Proxy）：将通知应用到目标对象之后被动态创建的对象。可以简单地理解为，代理对象的功能等于目标对象的核心业务逻辑功能加上共有功能。代理对象对于使用者而言是透明的，是程序运行过程中的产物。<br>编织（Weaving）：将切面应用到目标对象从而创建一个新的代理对象的过程。这个过程可以发生在编译期、类装载期及运行期，当然不同的发生点有着不同的前提条件。譬如发生在编译期的话，就要求有一个支持这种AOP实现的特殊编译器（如AspectJ编译器）；发生在类装载期，就要求有一个支持AOP实现的特殊类装载器；只有发生在运行期，则可直接通过Java语言的反射机制与动态代理机制来动态实现（如Spring）。<br>引入（Introduction）：添加方法或字段到被通知的类。</p><h5 id="在Android项目中使用AspectJ"><a href="#在Android项目中使用AspectJ" class="headerlink" title="在Android项目中使用AspectJ"></a>在Android项目中使用AspectJ</h5><p>gradle配置<br>1、gradle配置的方式：引入AspectJ是有点复杂的，需要引入大量的gradle命令配置有点麻烦，在build文件中添加了一些脚本，文章出处：<a href="https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/" target="_blank" rel="external">https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/</a></p><p>2、使用 gradle 插件（也是对 gradle 命令进行了包装）：JakeWharton 大神的 hugo 项目（一款日志打印的插件）<br>                   上海沪江团队的 gradle_plugin_android_aspectjx 一个基于AspectJ并在此基础上扩展出来可应用于Android开发平台的AOP框架，可作用于java源码，class文件及jar包，同时支持kotlin的应用。</p><p>AOP的用处非常广，从spring到Android，各个地方都有使用，特别是在后端，Spring中已经使用的非常方便了，而且功能非常强大，但是在Android中，AspectJ的实现是略阉割的版本，并不是所有功能都支持，但对于一般的客户端开发来说，已经完全足够用了。</p><h5 id="以-AspectJX-接入说明"><a href="#以-AspectJX-接入说明" class="headerlink" title="以 AspectJX 接入说明"></a>以 AspectJX 接入说明</h5><ul><li>首先，需要在项目根目录的build.gradle中增加依赖：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:2.3.3&apos;</div><div class="line">        classpath &apos;com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.4&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>然后module项目的 build.gradle 中加入 AspectJ 的依赖：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;android-aspectjx&apos;</div><div class="line">dependencies &#123;</div><div class="line">        compile &apos;org.aspectj:aspectjrt:1.8.+&apos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">aspectjx &#123;</div><div class="line">    //排除所有package路径中包含`android.support`的class文件及库（jar文件）</div><div class="line">    exclude &apos;org.apache.httpcomponents&apos;</div><div class="line">    exclude &apos;android.support&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>具体配置参见github地址 <a href="https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx" target="_blank" rel="external">https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx</a></p><p>我们通过一段简单的代码来了解下基本的使用方法和功能，新建一个AspectTest类文件，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"xuyisheng"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* android.app.Activity.on**(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityMethodBefore</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        String key = joinPoint.getSignature().toString();</div><div class="line">        Log.e(TAG, <span class="string">"onActivityMethodBefore: "</span> + key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@After</span>(<span class="string">"execution(* android.app.Activity.on**(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityMethodAfter</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        String key = joinPoint.getSignature().toString();</div><div class="line">        Log.e(TAG, <span class="string">"onActivityMethodAfter: "</span> + key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* android.app.Activity.on**(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityMethodAfter</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        String key = joinPoint.getSignature().toString();</div><div class="line">        Log.e(TAG, <span class="string">"onActivityMethodBefore: "</span> + key);</div><div class="line">        joinPoint.proceed();</div><div class="line">        Log.e(TAG, <span class="string">"onActivityMethodAfter: "</span> + key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在类的最开始，我们使用 @Aspect 注解来定义这样一个AspectJ文件，编译器在编译的时候，就会自动去解析，并不需要主动去调用AspectJ类里面的代码。</p><h5 id="编织速度优化建议"><a href="#编织速度优化建议" class="headerlink" title="编织速度优化建议"></a>编织速度优化建议</h5><p>（1）尽量使用精确的匹配规则,降低匹配时间。<br>（2）排除不需要扫描的包。</p><p>通过这种方式编译后，我们来看下生成的代码是怎样的。AspectJ的原理实际上是在编译的时候，根据一定的规则解析，然后插入一些代码，通过aspectj生成的代码，会在Build目录下：</p><p><img src="/images/aop/aspectj_class.jpeg" alt="image"></p><p>我们可以发现，在onCreate的最前面，插入了一行AspectJ的代码。这个就是AspectJ的主要功能，抛开AOP的思想来说，我们想做的，实际上就是『在不侵入原有代码的基础上，增加新的代码』。</p><h3 id="四、总结："><a href="#四、总结：" class="headerlink" title="四、总结："></a>四、总结：</h3><p>动态代理：<br>优点<br>1、Java API 提供的，兼容性好，无需依赖其他库，<br>2、动态代理类的字节码在程序运行时由Java反射机制动态生成，无需程序员手工编写它的源代码。<br>3、动态代理类不仅简化了编程工作，而且提高了软件系统的可扩展性，因为Java 反射机制可以生成任意类型的动态代理类。</p><p>缺点<br>1、只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理，cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理。<br>2、没有代码注入步骤，必须手动实例化并应用，<br>3、功能有限，只能在方法前后执行一些代码</p><p>APT 优点：<br>任何你不想做的繁杂的工作，它可以帮你减少样板代码<br>生成代码位置的可控性（可以在任意包位置生成代码），与原有代码的关联性更为紧密方便</p><p>缺点：<br>只有被注解标记了的类或方法等，才可以被处理或收集信息。<br>APT可以自动生成代码，但在运行时却需要主动调用</p><p>Javassist ：<br>功能强大，使用方便，<br>由于Javassist可以直接操作修改编译后的字节码，直接绕过了java编译器，所以可以做很多突破限制的事情，例如，跨dex引用，解决热修复中CLASS_ISPREVERIFIED的问题。<br>运行时生成，减少不必要的生成开销；通过将切面逻辑写入字节码，减少了生成子类的开销，不会产生过多子类。运行时加入切面逻辑，产生性能开销。</p><p>Aspectj：<br>优点：<br>AspectJ除了hook之外，AspectJ还可以为目标类添加变量，接口。另外，AspectJ也有抽象，继承等各种更高级的玩法。它能够在编译期间直接修改源代码生成class，强大的团战切入功能，指哪打哪，鞭辟入里。有了此神器，编程亦如庖丁解牛，游刃而有余。</p><p>难点：<br>AspectJ语法比较多，但是掌握几个简单常用的，就能实现绝大多数切片，完全兼容Java（纯Java语言开发，然后使用AspectJ注解，简称@AspectJ。）</p><h3 id="五、参考资料："><a href="#五、参考资料：" class="headerlink" title="五、参考资料："></a>五、参考资料：</h3><p><a href="https://blog.csdn.net/woshimalingyi/article/details/73252013" target="_blank" rel="external">AOP之@AspectJ技术原理详解</a></p><p><a href="https://juejin.im/entry/581aec732e958a0054d08213" target="_blank" rel="external">安卓 AOP 三剑客: APT,AspectJ,Javassist</a></p><p><a href="https://www.jianshu.com/p/a6be7cdcfc65" target="_blank" rel="external">Android动态编译技术 Plugin Transform Javassist操作Class文件</a></p><p><a href="https://blog.csdn.net/innost/article/details/49387395" target="_blank" rel="external">深入理解Android之AOP</a></p><p><a href="http://www.jianshu.com/p/2779e3bb1f14" target="_blank" rel="external">归纳AOP在Android开发中的几种常见用法</a></p><p><a href="http://blog.csdn.net/eclipsexys/article/details/54425414" target="_blank" rel="external">看AspectJ在Android中的强势插入</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Aop </tag>
            
            <tag> Aspectj </tag>
            
            <tag> 面向切面编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android WebView缓存优化</title>
      <link href="/2018/07/13/2018-07-13-Android%20WebView%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96/"/>
      <url>/2018/07/13/2018-07-13-Android%20WebView%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><p>对于WebView的性能，给人最直观的莫过于：打开速度比native慢。<br>是的，当我们打开一个WebView页面，页面往往会慢吞吞的loading很久，若干秒后才出现你所需要看到的页面。这是为什么呢？</p><a id="more"></a><p>对于一个普通用户来讲，打开一个WebView通常会经历以下几个阶段：</p><ul><li>交互无反馈</li><li>到达新的页面，页面白屏</li><li>页面基本框架出现，但是没有数据；页面处于loading状态</li><li>出现所需的数据<br>如果从程序上观察，WebView启动过程大概分为以下几个阶段：</li></ul><p><img src="/images/webview_cache/webview_1.png" alt="image"><br>如何缩短这些过程的时间，就成了优化WebView性能的关键。</p><p>常规的前端和后端的性能优化已有前辈们总结过最佳实践，主要的是：</p><ul><li>降低请求量：合并资源，减少 HTTP 请求数，minify / gzip 压缩，webP。</li><li>加快请求速度：预解析DNS，减少域名数，并行加载，CDN 分发。</li><li>缓存：HTTP 协议缓存请求，离线缓存 manifest，离线数据缓存 localStorage。</li><li>渲染：JS/CSS优化，加载顺序，服务端渲染模板直出。</li></ul><h4 id="二、WebView的缓存类型"><a href="#二、WebView的缓存类型" class="headerlink" title="二、WebView的缓存类型"></a>二、WebView的缓存类型</h4><p>WebView主要包括两类缓存，一类是浏览器自带的网页数据缓存，这是所有的浏览器都支持的、由HTTP协议定义的缓存；另一类是H5缓存，这是由web页面的开发者设置的，H5缓存主要包括了App Cache、DOM Storage、Local Storage、Web SQL Database 存储机制等，这里我们主要介绍App Cache来缓存js文件。</p><h5 id="1、浏览器自带的网页数据缓存"><a href="#1、浏览器自带的网页数据缓存" class="headerlink" title="1、浏览器自带的网页数据缓存"></a>1、浏览器自带的网页数据缓存</h5><ul><li>浏览器缓存机制是通过HTTP协议Header里的Cache-Control（或Expires）和Last-Modified（或 Etag）等字段来控制文件缓存的机制。</li><li>WebView如何设置才能支持上面的协议</li></ul><p>Android WebView有下面几个Cache Mode：</p><ul><li>LOAD_DEFAULT：根据cache-control决定是否从网络上取数据。</li><li>LOAD_NORMAL：Deprecated，API level 17中已经废弃，从API level 11开始作用同LOAD_DEFAULT模式</li><li>LOAD_CACHE_ELSE_NETWORK：只要本地有，无论是否过期，都使用缓存中的数据。本地没有缓存时才从网络上获取。</li><li>LOAD_NO_CACHE：不使用缓存，只从网络获取数据。</li><li>LOAD_CACHE_ONLY： 不使用网络，只读取本地缓存数据。</li></ul><p>设置WebView缓存的Cache Mode示例代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> webSettings = webView.settings</div><div class="line">webSettings.cacheMode = WebSettings.LOAD_NO_CACHE</div><div class="line"></div><div class="line">webSettings.cacheMode = <span class="keyword">if</span> (YKNetworkUtil.isNetConnected()) &#123;</div><div class="line">    WebSettings.LOAD_NO_CACHE</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    WebSettings.LOAD_CACHE_ELSE_NETWORK</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="2、在手机里面的存储路径"><a href="#2、在手机里面的存储路径" class="headerlink" title="2、在手机里面的存储路径"></a>2、在手机里面的存储路径</h5><p>Android 6.0的目录：/data/data/包名/cache/org.chromium.android_webview/下面，如下图所示。<br><img src="/images/webview_cache/webview_path.jpeg" alt="image"></p><h5 id="Application-Cache-缓存机制"><a href="#Application-Cache-缓存机制" class="headerlink" title="Application Cache 缓存机制"></a>Application Cache 缓存机制</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// HTML 在头中通过 manifest 属性引用 manifest 文件</div><div class="line">// manifest 文件：就是上面以 appcache 结尾的文件，是一个普通文件文件，列出了需要缓存的文件</div><div class="line">// 浏览器在首次加载 HTML 文件时，会解析 manifest 属性，并读取 manifest 文件，获取 Section：CACHE MANIFEST 下要缓存的文件列表，再对文件缓存</div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">"cache/demo.appcache"</span>&gt;</span></div><div class="line"></div><div class="line">CACHE MANIFEST</div><div class="line">demo_time.js</div><div class="line">img_logo.gif</div><div class="line">NETWORK:</div><div class="line">*</div><div class="line">FALLBACK:</div><div class="line">404.html</div></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> webSettings = webView.settings</div><div class="line">webSettings.setAppCacheEnabled(<span class="literal">true</span>)</div></pre></td></tr></table></figure><h5 id="3、Dom-Storage-缓存机制"><a href="#3、Dom-Storage-缓存机制" class="headerlink" title="3、Dom Storage 缓存机制"></a>3、Dom Storage 缓存机制</h5><p>a. 通过存储字符串的 Key - Value 对来提供<br>DOM Storage 分为 sessionStorage &amp;  localStorage； 二者使用方法基本相同，区别在于作用范围不同：<br>a. sessionStorage：具备临时性，即存储与页面相关的数据，它在页面关闭后无法使用<br>b. localStorage：具备持久性，即保存的数据在页面关闭后也可以使用。</p><p>b. 特点<br>存储空间大（ 5MB）：存储空间对于不同浏览器不同，如Cookies 才 4KB<br>存储安全、便捷： Dom Storage 存储的数据在本地，不需要经常和服务器进行交互<br>c. 应用场景<br>存储临时、简单的数据</p><p>具体实现，前端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">localStorage.setItem("lastName", "HaHa");</div><div class="line">var lastName = localStorage.getItem("lastName");</div><div class="line"></div><div class="line">sessionStorage.setItem("lastName", "HaHa");</div><div class="line">var lastName = sessionStorage.getItem("lastName");</div></pre></td></tr></table></figure><p>Android端</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> webSettings = webView.settings</div><div class="line">webSettings.domStorageEnabled = <span class="literal">true</span></div></pre></td></tr></table></figure><h5 id="4、Web-SQL-Database-缓存机制"><a href="#4、Web-SQL-Database-缓存机制" class="headerlink" title="4、Web SQL Database 缓存机制"></a>4、Web SQL Database 缓存机制</h5><p>a. 原理<br>基于 SQL 的数据库存储机制</p><p>b. 特点<br>充分利用数据库的优势，可方便对数据进行增加、删除、修改、查询</p><p>c. 应用场景<br>存储适合数据库的结构化数据</p><p>d. 具体实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">        var db = openDatabase('testDB', '1.0', 'Test DB', 2 * 1024 * 1024);</div><div class="line">        var msg;</div><div class="line">        db.transaction(function (context) &#123;</div><div class="line">           context.executeSql('CREATE TABLE IF NOT EXISTS testTable (id unique, name)');</div><div class="line">           context.executeSql('INSERT INTO testTable (id, name) VALUES (0, "Byron")');</div><div class="line">           context.executeSql('INSERT INTO testTable (id, name) VALUES (1, "Casper")');</div><div class="line">           context.executeSql('INSERT INTO testTable (id, name) VALUES (2, "Frank")');</div><div class="line">         &#125;);</div><div class="line"></div><div class="line">        db.transaction(function (context) &#123;</div><div class="line">           context.executeSql('SELECT * FROM testTable', [], function (context, results) &#123;</div><div class="line">            var len = results.rows.length, i;</div><div class="line">            console.log('Got '+len+' rows.');</div><div class="line">               for (i = 0; i &lt; len; i++)&#123;</div><div class="line">              console.log('id: '+results.rows.item(i).id);</div><div class="line">              console.log('name: '+results.rows.item(i).name);</div><div class="line">            &#125;</div><div class="line">         &#125;);</div><div class="line">        &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> webSettings = webView.settings</div><div class="line">webSettings.databaseEnabled = <span class="literal">true</span></div></pre></td></tr></table></figure><p>特别说明<br>根据官方说明，Web SQL Database存储机制不再推荐使用（不再维护）,取而代之的是 IndexedDB缓存机制，下面会详细介绍</p><h5 id="5、indexedDB"><a href="#5、indexedDB" class="headerlink" title="5、indexedDB"></a>5、indexedDB</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">       function openDB (name) &#123;</div><div class="line">            var request=window.indexedDB.open(name);</div><div class="line">            request.onerror=function(e)&#123;</div><div class="line">                console.log('OPen Error!');</div><div class="line">            &#125;;</div><div class="line">            request.onsuccess=function(e)&#123;</div><div class="line">                myDB.db=e.target.result;</div><div class="line">            &#125;;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        var myDB=&#123;</div><div class="line">            name:'test',</div><div class="line">            version:1,</div><div class="line">            db:null</div><div class="line">        &#125;;</div><div class="line">        openDB(myDB.name);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="三、缓存机制汇总"><a href="#三、缓存机制汇总" class="headerlink" title="三、缓存机制汇总"></a>三、缓存机制汇总</h4><p><img src="/images/webview_cache/webview_cache_3.png" alt="image"></p><p>结论：综合各种缓存机制比较，对于静态文件，如 JS、CSS、字体、图片等，适合通过浏览器缓存机制来进行缓存，通过缓存文件可大幅提升 Web 的加载速度，且节省流量。但也有一些不足：缓存文件需要首次加载后才会产生；浏览器缓存的存储空间有限，缓存有被清除的可能；缓存的文件没有校验。</p><h4 id="四、APP端主要缓存方案"><a href="#四、APP端主要缓存方案" class="headerlink" title="四、APP端主要缓存方案"></a>四、APP端主要缓存方案</h4><h5 id="1、全局WebView，WebView独立进程"><a href="#1、全局WebView，WebView独立进程" class="headerlink" title="1、全局WebView，WebView独立进程"></a>1、全局WebView，WebView独立进程</h5><p>在客户端刚启动时，就初始化一个全局的WebView待用，并隐藏；<br>当用户访问了WebView时，直接使用这个WebView加载对应网页，并展示。<br>这种方法可以比较有效的减少WebView在App中的首次打开时间。当用户访问页面时，不需要初始化WebView的时间。</p><p>当然这也带来了一些问题，包括：</p><p>额外的内存消耗。<br>页面间跳转需要清空上一个页面的痕迹，更容易内存泄露。</p><h5 id="2、APP端代理网络请求"><a href="#2、APP端代理网络请求" class="headerlink" title="2、APP端代理网络请求"></a>2、APP端代理网络请求</h5><p>在客户端初始化WebView的同时，直接由APP端开始网络请求数据；<br>当页面初始化完成后，向客户端获取其代理请求的数据。</p><p>此方法虽然不能减小WebView初始化时间，但数据请求和WebView初始化可以并行进行，总体的页面加载时间就缩短了；缩短总体的页面加载时间：</p><h5 id="3、WebView采用和客户端API相同的域名"><a href="#3、WebView采用和客户端API相同的域名" class="headerlink" title="3、WebView采用和客户端API相同的域名"></a>3、WebView采用和客户端API相同的域名</h5><p>DNS会在系统级别进行缓存，对于WebView的地址，如果使用的域名与native的API相同，则可以直接使用缓存的DNS。</p><p>根据上面的统计，至少10%的用户打开WebView时耗费了60ms在DNS上面，如果WebView的域名与App的API域名统一，则可以让WebView的DNS时间全部达到1.3ms的量级。</p><p>静态资源同理，最好与客户端的资源域名保持一致。</p><h5 id="4、资源预加载"><a href="#4、资源预加载" class="headerlink" title="4、资源预加载"></a>4、资源预加载</h5><p>预加载WebView对象 &amp; 预加载H5资源</p><p>Application启动或者其他时机预加载WebView对象，WebView初始化之后，即使WebView已经释放，但一些公用的资源仍未释放</p><p>构建WebView对象池，采用多个WebView对象重复使用，而不需要每次打开H5都创建对象</p><h5 id="5、离线资源包等"><a href="#5、离线资源包等" class="headerlink" title="5、离线资源包等"></a>5、离线资源包等</h5><ul><li>事先将更新频率较低、常用 &amp; 固定的H5静态资源 文件（如JS、CSS文件、图片等） 放到本地</li><li>拦截H5页面的资源网络请求 并进行检测</li><li>如果检测到本地具有相同的静态资源 就 直接从本地读取进行替换 而 不发送该资源的网络请求 到 服务器获取</li><li>资源包更新策略，增量更新等</li></ul><p>目前客户端缓存策略：</p><p>H5加载—拦截网络请求进行资源监测—本地是否具有相同的资源—-Y —- 不发送网络请求—-取本地资源—-结束<br>                                                  —-N —- 继续发送网络请求—资源缓存本地—-结束</p><p>具体实现：重写<code>WebViewClient</code>的<code>shouldInterceptRequest</code>方法，进行本地资源监测和替换</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">shouldInterceptRequest</span><span class="params">(view: <span class="type">WebView</span>, url: <span class="type">String</span>?)</span></span>: WebResourceResponse? &#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (!mIsEnableCache) &#123;</div><div class="line">        <span class="keyword">super</span>.shouldInterceptRequest(view, url)</div><div class="line">    &#125; <span class="keyword">else</span> webViewCacheManage.getWebResourceResponse(<span class="keyword">this</span>, url)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@TargetApi(Build.VERSION_CODES.LOLLIPOP)</span></div><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">shouldInterceptRequest</span><span class="params">(view: <span class="type">WebView</span>, request: <span class="type">WebResourceRequest</span>?)</span></span>: WebResourceResponse? &#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (!mIsEnableCache) &#123;</div><div class="line">        <span class="keyword">super</span>.shouldInterceptRequest(view, request)</div><div class="line">    &#125; <span class="keyword">else</span> webViewCacheManage.getWebResourceResponse(<span class="keyword">this</span>, request?.url?.toString())</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>优点：</p><ul><li>有效解决 H5页面静态资源 加载速度慢 &amp; 流量消耗多的问题</li><li>开发成本低，没有改变前端H5的任何代码，只需APP端开发</li><li>配置灵活，支持自定义缓存策略，自定义缓存类型等</li></ul><p>缺点：</p><ul><li>缓存的Key依赖前端资源中的url，如果前端资源需要更新则必须要更改名字</li><li>资源文件的缓存只有在第二次打开页面才会生效</li></ul><p>TODO：</p><ul><li>资源预加载方案，WebView预初始化</li><li>针对单个页面独立配置</li><li>完善资源缓存方案</li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://tech.meituan.com/WebViewPerf.html" target="_blank" rel="external">WebView性能、体验分析与优化</a><br><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&amp;mid=2651229156&amp;idx=1&amp;sn=fdd48acd893ddd11ccd2460c46a3c2d1" target="_blank" rel="external">WebView缓存原理分析和应用</a><br><a href="https://www.jianshu.com/p/5e7075f4875f" target="_blank" rel="external">Android：手把手教你构建 全面的WebView 缓存机制 &amp; 资源加载方案</a></p>]]></content>
      
      <categories>
          
          <category> WebView </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> WebView </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自签名证书实现HTTPS单双向认证</title>
      <link href="/2018/06/02/2018-06-02-%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%AE%9E%E7%8E%B0HTTPS%E5%8D%95%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81/"/>
      <url>/2018/06/02/2018-06-02-%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%AE%9E%E7%8E%B0HTTPS%E5%8D%95%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81/</url>
      <content type="html"><![CDATA[<h4 id="自签名证书生成过程"><a href="#自签名证书生成过程" class="headerlink" title="自签名证书生成过程"></a>自签名证书生成过程</h4><p>对于向权威机构申请过证书的网络地址,用OkHttp或者HttpsURLConnection都可以直接访问，不需要做额外的事情。但是申请证书要$$的，所以开发的时候我们接口经常是使用自签名证书，或者即使上线了也还是用自签名的</p><h4 id="使用keytool生成证书"><a href="#使用keytool生成证书" class="headerlink" title="使用keytool生成证书"></a>使用keytool生成证书</h4><p>keytool是JDK提供的管理加密密钥、X.509证书链和可信证书密钥库的简便工具。可以直接在终端或DOC窗口输入keytool命令来查看帮助。<br><a id="more"></a></p><h4 id="单向认证"><a href="#单向认证" class="headerlink" title="单向认证"></a>单向认证</h4><h5 id="一、生成密钥对"><a href="#一、生成密钥对" class="headerlink" title="一、生成密钥对"></a>一、生成密钥对</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkey -alias server -keyalg RSA -keystore server.jks</div></pre></td></tr></table></figure><p>-alias后面跟的是唯一别名，-keystore后面填保存秘钥对的文件路径<br>还可以添加一个-validity 天数声明有效期</p><p>需要注意的地方：执行命令之后第一个问题让你输入名字的地方最好设置成域名，比如这样baidu.com</p><h5 id="二、导出证书"><a href="#二、导出证书" class="headerlink" title="二、导出证书"></a>二、导出证书</h5><p>上面生成了服务端使用的密钥对，现在可以通过它生成证书给客户端使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -export -alias server -storepass 123456 -keystore server.jks -file server.cer</div></pre></td></tr></table></figure><p>-storepass后面跟的是你刚才设置的密码,不加这个也没关系，它会主动问你！；-file设置了保存证书的路径</p><h5 id="三、服务端配置"><a href="#三、服务端配置" class="headerlink" title="三、服务端配置"></a>三、服务端配置</h5><p>这里我使用tomcat8进行测试，它的配置很简单，修改tomcat目录下的conf/server.xml文件，添加如下内容，这里设置了端口号为8443</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</div><div class="line">            maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</div><div class="line">            clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot;</div><div class="line">            keystoreFile=&quot;密钥库文件路径，也就是.jks文件&quot;</div><div class="line">            keystorePass=&quot;密码&quot; /&gt;</div></pre></td></tr></table></figure><h5 id="四、安卓端配置"><a href="#四、安卓端配置" class="headerlink" title="四、安卓端配置"></a>四、安卓端配置</h5><p>此时PC端访问服务器时提示警告</p><p><img src="/images/https/单向验证提示.jpeg" alt="单向验证提示"></p><p>在客户端未配置前采用HTTPS请求服务器时抛出异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">05-31 15:47:41.190 26222-26616/io.github.android9527.httpsapplication I/System.out: OKHTTP3 ----&gt;&lt;-- HTTP FAILED: javax.net.ssl.SSLHandshakeException: Handshake failed</div><div class="line">05-31 15:47:41.190 26222-26616/io.github.android9527.httpsapplication W/System.err: javax.net.ssl.SSLHandshakeException: Handshake failed</div><div class="line">        at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:396)</div><div class="line">        at okhttp3.internal.connection.RealConnection.connectTls(RealConnection.java:302)</div><div class="line">        at okhttp3.internal.connection.RealConnection.establishProtocol(RealConnection.java:270)</div><div class="line">        at okhttp3.internal.connection.RealConnection.connect(RealConnection.java:162)</div><div class="line">        at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)</div><div class="line">        at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)</div><div class="line">        at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)</div><div class="line">        at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)</div><div class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</div><div class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</div></pre></td></tr></table></figure></p><ul><li><p>加载证书<br>把之前生成的证书（.cer）放到安卓项目的assets或者raw目录下，读取文件流用以下方法获取SSLSocketFactory 。</p></li><li><p>OkHttpClient配置<br>在OkHttp中使用很简单，获取SSLSocketFactory之后通过OkHttp的构建方法传入就行了。<br>使用的OkHttp版本是3.10.0。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = new OkHttpClient.Builder()</div><div class="line">                .sslSocketFactory(sslSocketFactory)</div><div class="line">                .build();</div><div class="line"></div><div class="line">HttpsURLConnection.setSSLSocketFactory(sslSocketFactory);</div></pre></td></tr></table></figure><p>设置完之后你就可以访问该证书对应的域名地址了，不需要别的附加操作了。</p><h4 id="双向验证"><a href="#双向验证" class="headerlink" title="双向验证"></a>双向验证</h4><p>双向认证需要两个密钥实体，一个放服务端一个放客户端。<br>前面我们已经实现单向的认证，现在只需要给客户端生成一个密钥库，并且让服务端信任客户端就可以了。</p><h5 id="一、生成客户端密钥"><a href="#一、生成客户端密钥" class="headerlink" title="一、生成客户端密钥"></a>一、生成客户端密钥</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkey -alias android -keyalg RSA -keystore android.jks</div></pre></td></tr></table></figure><h5 id="二、导出客户端证书（字符串形式）"><a href="#二、导出客户端证书（字符串形式）" class="headerlink" title="二、导出客户端证书（字符串形式）"></a>二、导出客户端证书（字符串形式）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -keystore android.jks -alias android -exportcert -rfc &gt; android.pem</div></pre></td></tr></table></figure><p>将导出的证书添加信任到服务端的密钥库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -importcert -trustcacerts -alias android -keystore server.jks -file android.pem</div></pre></td></tr></table></figure></p><h5 id="三、服务端配置-1"><a href="#三、服务端配置-1" class="headerlink" title="三、服务端配置"></a>三、服务端配置</h5><p>修改tomcat目录下的conf/server.xml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</div><div class="line">            maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</div><div class="line">            sslProtocol=&quot;TLS&quot;</div><div class="line">            keystoreFile=&quot;密钥库文件路径，也就是.jks文件&quot;</div><div class="line">            keystorePass=&quot;密码&quot;</div><div class="line">            //修改两条内容，其它和之前单向认证一样就行</div><div class="line">            clientAuth=&quot;true&quot;</div><div class="line">            truststoreFile=&quot;和keystoreFile填一样&quot; /&gt;</div></pre></td></tr></table></figure><h5 id="四、安卓端配置-1"><a href="#四、安卓端配置-1" class="headerlink" title="四、安卓端配置"></a>四、安卓端配置</h5><p>此时PC端访问服务器时提示警告</p><p><img src="/images/https/双向验证提示.jpeg" alt="双向验证提示"></p><p>在未配置前采用HTTPS请求服务器时抛出异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">05-31 15:47:41.190 26222-26616/io.github.android9527.httpsapplication I/System.out: OKHTTP3 ----&gt;&lt;-- HTTP FAILED: javax.net.ssl.SSLHandshakeException: Handshake failed</div><div class="line">05-31 15:47:41.190 26222-26616/io.github.android9527.httpsapplication W/System.err: javax.net.ssl.SSLHandshakeException: Handshake failed</div><div class="line">        at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:396)</div><div class="line">        at okhttp3.internal.connection.RealConnection.connectTls(RealConnection.java:302)</div><div class="line">        at okhttp3.internal.connection.RealConnection.establishProtocol(RealConnection.java:270)</div><div class="line">        at okhttp3.internal.connection.RealConnection.connect(RealConnection.java:162)</div><div class="line">        at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)</div><div class="line">        at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)</div><div class="line">        at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)</div><div class="line">        at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)</div><div class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</div><div class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</div></pre></td></tr></table></figure><p>刚才生成了客户端的密钥库android.jks。但是安卓默认是不支持jks格式的！比较常规的解决方式是用<code>Portecle</code>工具将它转换成bks文件。</p><p>点这里下载<code>Portecle</code>工具（<a href="https://sourceforge.net/projects/portecle/?source=typ_redirect）" target="_blank" rel="external">https://sourceforge.net/projects/portecle/?source=typ_redirect）</a></p><p>下载完之后解压并在目录下运行命令：java -jar portecle.jar 打开</p><p>运行之后就会出来UI界面，用它打开android.jks然后选菜单 Tools –&gt; Change Keystore Type –&gt; BKS 在弹出框输入密码进行转换，最后别忘记选菜单 File –&gt; Save Keystore As 将它另存为android.kbs(名字随意)</p><p>生成kbs文件之后，把它放到安卓的目录下assets或者raw。</p><p>然后把获取SSLSocketFactory的方法改成下面这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">String keyStoreType2 = <span class="string">"BKS"</span>;</div><div class="line">KeyStore keyStore2 = KeyStore.getInstance(keyStoreType2);</div><div class="line">keyStore2.load(key, keyPassword.toCharArray());</div><div class="line"></div><div class="line">String kmfAlgorithm = KeyManagerFactory.getDefaultAlgorithm();</div><div class="line">KeyManagerFactory kmf = KeyManagerFactory.getInstance(kmfAlgorithm);</div><div class="line">kmf.init(keyStore2,keyPassword.toCharArray());</div><div class="line"></div><div class="line">sslContext = SSLContext.getInstance(<span class="string">"TLS"</span>);</div><div class="line">sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), <span class="keyword">null</span>);</div></pre></td></tr></table></figure><p>上面的都改完之后，双向验证的配置就完成了。你可以打开浏览器访问下你配置好的地址，应该不能访问，提示你:不接受您的登录证书，或者您的登录证书可能已过期。因为你的系统没有加入刚才生成的客户端密钥库，安卓端像上面一样设置完SSLSocketFactory就可以正常访问了。</p><h4 id="源码地址-https-github-com-android9527-HttpsApplication"><a href="#源码地址-https-github-com-android9527-HttpsApplication" class="headerlink" title="源码地址 (https://github.com/android9527/HttpsApplication/)"></a>源码地址 (<a href="https://github.com/android9527/HttpsApplication/" target="_blank" rel="external">https://github.com/android9527/HttpsApplication/</a>)</h4><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://blog.majiajie.me/2016/05/11/Android-%E5%81%B6%E9%81%87HTTPS/" target="_blank" rel="external">Android 偶遇HTTPS</a></p><p><a href="http://pingguohe.net/2016/02/26/Android-App-secure-ssl.html" target="_blank" rel="external">苹果核 - Android App 安全的HTTPS 通信</a></p>]]></content>
      
      <categories>
          
          <category> HTTPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android App 安全的HTTPS 通信</title>
      <link href="/2018/06/01/2018-06-01-Android%20App%20%E5%AE%89%E5%85%A8%E7%9A%84HTTPS%20%E9%80%9A%E4%BF%A1/"/>
      <url>/2018/06/01/2018-06-01-Android%20App%20%E5%AE%89%E5%85%A8%E7%9A%84HTTPS%20%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<h5 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h5><p>对于数字证书相关概念、Android 里 https 通信代码就不再复述了，直接讲问题。缺少相应的安全校验很容易导致中间人攻击，而漏洞的形式主要有以下3种：</p><ul><li>自定义<code>X509TrustManager</code>。<br>在使用HttpsURLConnection发起 HTTPS 请求的时候，提供了一个自定义的X509TrustManager，<br>未实现安全校验逻辑，下面片段就是常见的容易犯错的代码片段。如果不提供自定义的X509TrustManager，<br>代码运行起来可能会报异常（原因下文解释），初学者就很容易在不明真相的情况下提供了一个自定义的X509TrustManager，<br>却忘记正确地实现相应的方法。本文重点介绍这种场景的处理方式。<a id="more"></a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义X509TrustManager，存在安全漏洞</div><div class="line"> * 跳过证书校验</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnSafeTrustManager</span> <span class="keyword">implements</span> <span class="title">X509TrustManager</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</div><div class="line">        <span class="comment">//do nothing，接受任意客户端证书</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</div><div class="line">        <span class="comment">//do nothing，接受任意服务端证书</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[]&#123;&#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>自定义了<code>HostnameVerifier</code>。<br>在握手期间，如果 URL 的主机名和服务器的标识主机名不匹配，则验证机制可以回调此接口的实现程序来确定是否应该允许此连接。<br>如果回调内实现不恰当，默认接受所有域名，则有安全风险。代码示例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenfeiyue on 2018/6/1.</div><div class="line"> * Description ：UnSafeHostnameVerifier</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnSafeHostnameVerifier</span> <span class="keyword">implements</span> <span class="title">HostnameVerifier</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String hostname, SSLSession session)</span> </span>&#123;</div><div class="line">        <span class="comment">// Always return true，接受任意域名服务器</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">HttpsURLConnection.setDefaultHostnameVerifier(<span class="keyword">new</span> UnSafeHostnameVerifier());</div></pre></td></tr></table></figure><h4 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h4><p>分而治之，针对不同的漏洞点分别描述，这里就讲的修复方案主要是针对非浏览器App，非浏览器 App 的服务端通信对象比较固定，一般都是自家服务器，可以做很多特定场景的定制化校验。如果是浏览器 App，校验策略就有更通用一些。</p><ul><li>自定义X509TrustManager。前面说到，当发起 HTTPS 请求时，可能抛起一个异常，以下面这段代码为例（来自官方文档）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    URL url = <span class="keyword">new</span> URL(<span class="string">"https://certs.cac.washington.edu/CAtest/"</span>);</div><div class="line">    URLConnection urlConnection = url.openConnection();</div><div class="line">    InputStream in = urlConnection.getInputStream();</div><div class="line">    copyInputStreamToOutputStream(in, System.out);</div><div class="line">&#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copyInputStreamToOutputStream</span><span class="params">(InputStream in, PrintStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span> ((c = in.read(buffer)) != -<span class="number">1</span>) &#123;</div><div class="line">        out.write(buffer, <span class="number">0</span>, c);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>它会抛出一个<code>SSLHandshakeException</code>的异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">javax.net.ssl.SSLHandshakeException: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.</div><div class="line">    at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:322)</div><div class="line">    at com.android.okhttp.Connection.upgradeToTls(Connection.java:201)</div><div class="line">    at com.android.okhttp.Connection.connect(Connection.java:155)</div><div class="line">    at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:276)</div><div class="line">    at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:211)</div><div class="line">    at com.android.okhttp.internal.http.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:382)</div><div class="line">    at com.android.okhttp.internal.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:332)</div><div class="line">    at com.android.okhttp.internal.http.HttpURLConnectionImpl.getInputStream(HttpURLConnectionImpl.java:199)</div><div class="line">    at com.android.okhttp.internal.http.DelegatingHttpsURLConnection.getInputStream(DelegatingHttpsURLConnection.java:210)</div><div class="line">    at com.android.okhttp.internal.http.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:25)</div><div class="line">    at me.longerian.abcandroid.datetimepicker.TestDateTimePickerActivity$1.run(TestDateTimePickerActivity.java:236)</div><div class="line">Caused by: java.security.cert.CertificateException: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.</div><div class="line">    at com.android.org.conscrypt.TrustManagerImpl.checkTrusted(TrustManagerImpl.java:318)</div><div class="line">    at com.android.org.conscrypt.TrustManagerImpl.checkServerTrusted(TrustManagerImpl.java:219)</div><div class="line">    at com.android.org.conscrypt.Platform.checkServerTrusted(Platform.java:114)</div><div class="line">    at com.android.org.conscrypt.OpenSSLSocketImpl.verifyCertificateChain(OpenSSLSocketImpl.java:550)</div><div class="line">    at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)</div><div class="line">    at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:318)</div><div class="line"> ... 10 more</div><div class="line">Caused by: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.</div><div class="line"> ... 16 more</div></pre></td></tr></table></figure><p>Android 手机有一套共享证书的机制，如果目标 URL 服务器下发的证书不在已信任的证书列表里，或者该证书是自签名的，不是由权威机构颁发，那么会出异常。对于我们这种非浏览器 app 来说，如果提示用户去下载安装证书，可能会显得比较诡异。幸好还可以通过自定义的验证机制让证书通过验证。验证的思路有两种：</p><h5 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h5><p>不论是权威机构颁发的证书还是自签名的，打包一份到 app 内部，比如存放在 asset 里。通过这份内置的证书初始化一个KeyStore，然后用这个KeyStore去引导生成的TrustManager来提供验证，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">  CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</div><div class="line">  <span class="comment">// uwca.crt 打包在 asset 中，该证书可以从https://itconnect.uw.edu/security/securing-computer/install/safari-os-x/下载</span></div><div class="line">  InputStream caInput = <span class="keyword">new</span> BufferedInputStream(getAssets().open(<span class="string">"uwca.crt"</span>));</div><div class="line">  Certificate ca;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">      ca = cf.generateCertificate(caInput);</div><div class="line">      Log.i(<span class="string">"Longer"</span>, <span class="string">"ca="</span> + ((X509Certificate) ca).getSubjectDN());</div><div class="line">      Log.i(<span class="string">"Longer"</span>, <span class="string">"key="</span> + ((X509Certificate) ca).getPublicKey();</div><div class="line">  &#125; <span class="keyword">finally</span> &#123;</div><div class="line">      caInput.close();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// Create a KeyStore containing our trusted CAs</span></div><div class="line">  String keyStoreType = KeyStore.getDefaultType();</div><div class="line">  KeyStore keyStore = KeyStore.getInstance(keyStoreType);</div><div class="line">  keyStore.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">  keyStore.setCertificateEntry(<span class="string">"ca"</span>, ca);</div><div class="line"></div><div class="line">  <span class="comment">// Create a TrustManager that trusts the CAs in our KeyStore</span></div><div class="line">  String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();</div><div class="line">  TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmfAlgorithm);</div><div class="line">  tmf.init(keyStore);</div><div class="line"></div><div class="line">  <span class="comment">// Create an SSLContext that uses our TrustManager</span></div><div class="line">  SSLContext context = SSLContext.getInstance(<span class="string">"TLSv1"</span>,<span class="string">"AndroidOpenSSL"</span>);</div><div class="line">  context.init(<span class="keyword">null</span>, tmf.getTrustManagers(), <span class="keyword">null</span>);</div><div class="line"></div><div class="line">  URL url = <span class="keyword">new</span> URL(<span class="string">"https://certs.cac.washington.edu/CAtest/"</span>);</div><div class="line">  HttpsURLConnection urlConnection =</div><div class="line">          (HttpsURLConnection)url.openConnection();</div><div class="line">  urlConnection.setSSLSocketFactory(context.getSocketFactory());</div><div class="line">  InputStream in = urlConnection.getInputStream();</div><div class="line">  copyInputStreamToOutputStream(in, System.out);</div><div class="line">&#125; <span class="keyword">catch</span> (CertificateException e) &#123;</div><div class="line">  e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">  e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">  e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (KeyStoreException e) &#123;</div><div class="line">  e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (KeyManagementException e) &#123;</div><div class="line">  e.printStackTrace();</div><div class="line">&#125; <span class="keyword">catch</span> (NoSuchProviderException e) &#123;</div><div class="line">  e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h5><p>同方案1，打包一份到证书到 app 内部，但不通过<code>KeyStore</code>去引导生成的<code>TrustManager</code>，而是干脆直接自定义一个<code>TrustManager</code>，自己实现校验逻辑；校验逻辑主要包括：</p><ul><li>服务器证书是否过期</li><li>证书签名是否合法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</div><div class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</div><div class="line"><span class="keyword">import</span> java.security.NoSuchProviderException;</div><div class="line"><span class="keyword">import</span> java.security.SignatureException;</div><div class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</div><div class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</div><div class="line"></div><div class="line"><span class="keyword">import</span> javax.net.ssl.X509TrustManager;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenfeiyue on 2018/6/1.</div><div class="line"> * Description ：自定义TrustManager 校验服务端证书，有效期等</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SafeTrustManager</span> <span class="keyword">implements</span> <span class="title">X509TrustManager</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SafeTrustManager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/* 此处存放服务器证书密钥 */</span></div><div class="line"><span class="comment">//    private static final String PUB_KEY =</span></div><div class="line"><span class="comment">//            "30820122300d06092a864886f70d01010105000382010f003082010a0282010100add086cfc3df3bcf54bffb4e044a911cc0eadbab61ead529a96525833a1a00f75df3d746e11666dbdf4ed8594c4f9194456a49a32a3dce999d9679d2cbc59cf9082935517e35a0706f1041ad053b727c9c92a47507d0313cf5b3788c609733255a89d40c6a8b8d1a90f0761e7dacf117e43fe1b5ae093e160f902a42433ebd57f91cf27b88cd46dcebb85aa0b33c6a48771ca445ace6f6668626d60156eecd1fc2feb282809f8f835b5f5c457890694f495fbf1620070b4a18094c44680beafac05c59ba062b2e889cc8e6a5feca13c3e473700858aceeac0e25f2ba0bfdf44b1040a9ecb15a3f7ea91a366baeeed02f0af78f982d5d0db854bf9476db5f15c10203010001";</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</div><div class="line">        <span class="keyword">for</span> (X509Certificate cert : chain) &#123;</div><div class="line"></div><div class="line">            <span class="comment">// Make sure that it hasn't expired.</span></div><div class="line">            cert.checkValidity();</div><div class="line"></div><div class="line">            <span class="comment">// Verify the certificate's public key chain.</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                X509Certificate x509Certificate = TLSSocketFactory.getX509Certificate(mContext);</div><div class="line">                cert.verify(x509Certificate.getPublicKey());</div><div class="line">            &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">catch</span> (NoSuchProviderException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>同样上述代码只能访问 certs.cac.washington.edu 相关域名地址，如果访问 <a href="https://www.taobao.com/" target="_blank" rel="external">https://www.taobao.com/</a> 或者 <a href="https://www.baidu.com/" target="_blank" rel="external">https://www.baidu.com/</a> ，则会在cert.verify(((X509Certificate) ca).getPublicKey());处抛异常，导致连接失败。</p><ul><li>自定义HostnameVerifier，简单的话就是根据域名进行字符串匹配校验；业务复杂的话，还可以结合配置中心、白名单、黑名单、正则匹配等多级别动态校验；总体来说逻辑还是比较简单的，反正只要正确地实现那个方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">HostnameVerifier hnv = <span class="keyword">new</span> HostnameVerifier() &#123;</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String hostname, SSLSession session)</span> </span>&#123;</div><div class="line">    <span class="comment">//示例</span></div><div class="line">    <span class="keyword">if</span>(<span class="string">"yourhostname"</span>.equals(hostname))&#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      HostnameVerifier hv =</div><div class="line">            HttpsURLConnection.getDefaultHostnameVerifier();</div><div class="line">      <span class="keyword">return</span> hv.verify(hostname, session);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://pingguohe.net/2016/02/26/Android-App-secure-ssl.html" target="_blank" rel="external">苹果核 - Android App 安全的HTTPS 通信</a><br><a href="https://developer.android.com/training/articles/security-ssl" target="_blank" rel="external">通过 HTTPS 和 SSL 确保安全</a></p>]]></content>
      
      <categories>
          
          <category> HTTPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SSL单向认证和双向认证说明</title>
      <link href="/2018/06/01/2018-06-01-SSL%E5%8D%95%E5%90%91%E8%AE%A4%E8%AF%81%E5%92%8C%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81%E8%AF%B4%E6%98%8E/"/>
      <url>/2018/06/01/2018-06-01-SSL%E5%8D%95%E5%90%91%E8%AE%A4%E8%AF%81%E5%92%8C%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81%E8%AF%B4%E6%98%8E/</url>
      <content type="html"><![CDATA[<h4 id="SSL单向认证具体过程"><a href="#SSL单向认证具体过程" class="headerlink" title="SSL单向认证具体过程"></a>SSL单向认证具体过程</h4><ul><li>客户端的浏览器向服务器传送客户端SSL协议的版本号，加密算法的种类，产生的随机数，以及其他服务器和客户端之间通讯所需要的各种信息。</li><li>服务器向客户端传送SSL协议的版本号，加密算法的种类，随机数以及其他相关信息，同时服务器还将向客户端传 送自己的证书。</li><li>客户利用服务器传过来的信息验证服务器的合法性，服务器的合法性包括：证书是否过期，发行服务器证书的CA是否可靠，发行者证书的公钥能否正确解开服务器证书的”发行者的数字签名，服务器证书的域名是否和服务器的<a id="more"></a></li><li>实际域名相匹配。如果合法性验证没有通过，通讯将断开;如果合法性验证通过，将继续进行第四步。</li><li>用户端随机产生一个用于后面通讯的”对称密码”，然后用服务器的公钥(服务器的公钥从第二步中的服务器的证书中获得)对其加密，然后将加密后的”预主密码”传给服务器。</li><li>如果服务器要求客户的身份认证(在握手过程中为可选)，用户可以建立一个随机数然后对其进行数据签名，将这个含有签名的随机数和客户自己的证书以及加密过的”预主密码”一起传给服务器。</li></ul><h4 id="SSL双向认证具体过程"><a href="#SSL双向认证具体过程" class="headerlink" title="SSL双向认证具体过程"></a>SSL双向认证具体过程</h4><ul><li>浏览器发送一个连接请求给安全服务器。</li><li>服务器将自己的证书，以及同证书相关的信息发送给客户浏览器。</li><li>客户浏览器检查服务器送过来的证书是否是由自己信赖的CA中心所签发的。如果是，就继续执行协议; 如果不是，客户浏览器就给客户一个警告消息：警告客户这个证书不是可以信赖的，询问客户是否需要继续。</li><li>接着客户浏览器比较证书里的消息，例如域名和公钥，与服务器刚刚发送的相关消息是否一致，如果是一致的，</li><li>客户浏览器认可这个服务器的合法身份。</li><li>服务器要求客户发送客户自己的证书。收到后，服务器验证客户的证书，如果没有通过验证，拒绝连接;如果通过验证，服务器获得用户的公钥。</li><li>客户浏览器告诉服务器自己所能够支持的通讯对称密码方案。</li><li>服务器从客户发送过来的密码方案中，选择一种加密程度最高的密码方案，用客户的公钥加过密后通知浏览器。</li><li>浏览器针对这个密码方案，选择一个通话密钥，接着用服务器的公钥加过密后发送给服务器。</li><li>服务器接收到浏览器送过来的消息，用自己的私钥解密，获得通话密钥。</li><li>服务器、浏览器接下来的通讯都是用对称密码方案，对称密钥是加过密的。</li></ul><p>双向认证则是需要服务端与客户端提供身份认证，只能是服务端允许的客户能去访问，安全性相对较高一些</p>]]></content>
      
      <categories>
          
          <category> HTTPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> HTTPS </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Fiddler抓取HTTPS原理</title>
      <link href="/2018/05/21/2018-05-21-%EF%BB%BFFiddler%E6%8A%93%E5%8F%96HTTPS%E5%8E%9F%E7%90%86/"/>
      <url>/2018/05/21/2018-05-21-%EF%BB%BFFiddler%E6%8A%93%E5%8F%96HTTPS%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h4 id="Fiddler抓取HTTPS原理"><a href="#Fiddler抓取HTTPS原理" class="headerlink" title="Fiddler抓取HTTPS原理"></a>Fiddler抓取HTTPS原理</h4><ul><li>首先fiddler截获客户端浏览器发送给服务器的https请求， 此时还未建立握手。</li><li>fiddler向服务器发送请求进行握手， 获取到服务器的CA证书， 用根证书公钥进行解密， 验证服务器数据签名， 获取到服务器CA证书公钥。</li><li>fiddler伪造自己的CA证书， 冒充服务器证书传递给客户端浏览器， 客户端浏览器做跟fiddler一样的事。</li><li>客户端浏览器生成https通信用的对称密钥， 用fiddler伪造的证书公钥加密后传递给服务器， 被fiddler截获。<a id="more"></a></li><li>fiddler将截获的密文用自己伪造证书的私钥解开， 获得https通信用的对称密钥。</li><li>fiddler将对称密钥用服务器证书公钥加密传递给服务器， 服务器用私钥解开后建立信任， 握手完成， 用对称密钥加密消息， 开始通信。</li><li>fiddler接收到服务器发送的密文， 用对称密钥解开， 获得服务器发送的明文。再次加密， 发送给客户端浏览器。</li><li>客户端向服务器发送消息， 用对称密钥加密， 被fidller截获后， 解密获得明文。由于fiddler一直拥有通信用对称密钥， 所以在整个https通信过程中信息对其透明。</li></ul><h4 id="为什么使用了HTTPS还是可以被抓包"><a href="#为什么使用了HTTPS还是可以被抓包" class="headerlink" title="﻿为什么使用了HTTPS还是可以被抓包"></a>﻿为什么使用了HTTPS还是可以被抓包</h4><ul><li>https把流量加密了，正常抓包，你看到的内容是一堆乱码。</li><li>https的加密没有安全问题，但它只是用来防止通信过程中被第三方获取明文。如果黑客能直接控制通信的双方（你的电脑，或服务器)，那么黑客肯定能看到https明文的。</li><li>所以，你用charles之所以能看到https明文，是因为你允许了charles在你的电脑上做手脚，关键就是你同意charles在你电脑上安装证书。</li><li>具体一点，charles通过使用了https代理功能，来完成查看https明文的目的，也就是SSL中间人攻击。简单来说，你并不是直接与https的另一端通信，而是与charles通信，charles再与另一端通信，这种结构下，charles才能看到通信明文。这个问题的原理比较复杂，涉及到整套RSA系统，想了解原理的话，建议去看【信息安全】相关书籍，但这类书籍的门槛非常高。另外Fiddle也有这个功能，而且原理也一样。</li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.zhihu.com/question/24484809/answer/70126366" target="_blank" rel="external">Fiddler抓取HTTPS原理</a></p>]]></content>
      
      <categories>
          
          <category> HTTPS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kotlin语法小结(1)</title>
      <link href="/2018/04/10/2018-04-10-Kotlin%E8%AF%AD%E6%B3%95%E5%B0%8F%E7%BB%93(1)/"/>
      <url>/2018/04/10/2018-04-10-Kotlin%E8%AF%AD%E6%B3%95%E5%B0%8F%E7%BB%93(1)/</url>
      <content type="html"><![CDATA[<h4 id="Kotlin语法特点"><a href="#Kotlin语法特点" class="headerlink" title="Kotlin语法特点"></a>Kotlin语法特点</h4><ul><li>兼容性：Kotlin 与 JDK 6 完全兼容，保障了 Kotlin 应用程序可以在较旧的 Android 设备上运行而无任何问题。Kotlin 工具在 Android Studio 中会完全支持，并且兼容 Android 构建系统。</li><li>性能：由于非常相似的字节码结构，Kotlin 应用程序的运行速度与 Java 类似。 随着 Kotlin 对内联函数的支持，使用 lambda 表达式的代码通常比用 Java 写的代码运行得更快。<a id="more"></a></li><li>互操作性：Kotlin 可与 Java 进行 100％ 的互操作，允许在 Kotlin 应用程序中使用所有现有的 Android 库 。这包括注解处理，所以数据绑定和 Dagger 也是一样。</li><li>占用：Kotlin 具有非常紧凑的运行时库，可以通过使用 ProGuard 进一步减少。 在实际应用程序中，Kotlin 运行时只增加几百个方法以及 .apk 文件不到 100K 大小。</li><li>编译时长：Kotlin 支持高效的增量编译，所以对于清理构建会有额外的开销，增量构建通常与 Java 一样快或者更快。</li></ul><h4 id="为什么选择-Kotlin？"><a href="#为什么选择-Kotlin？" class="headerlink" title="为什么选择 Kotlin？"></a>为什么选择 Kotlin？</h4><ul><li>简洁</li></ul><p>使用一行代码创建一个包含 getters、 setters、 equals()、 hashCode()、 toString() 以及 copy() 的 POJO：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> email: String, <span class="keyword">val</span> company: String)</div></pre></td></tr></table></figure><p>或者使用 lambda 表达式来过滤列表：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> positiveNumbers = list.filter &#123; it &gt; <span class="number">0</span> &#125;</div></pre></td></tr></table></figure><p>想要单例？创建一个 object 就可以了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">object</span> ThisIsASingleton &#123;</div><div class="line">    <span class="keyword">val</span> companyName: String = <span class="string">"JetBrains"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>安全</li></ul><p>彻底告别那些烦人的 NPE(NullPointerException)。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> output: String</div><div class="line">output = <span class="literal">null</span>   <span class="comment">// 编译错误</span></div></pre></td></tr></table></figure><p>Kotlin 可以保护你避免对可空类型的误操作。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> name: String? = <span class="literal">null</span>    <span class="comment">// 可空类型</span></div><div class="line">println(name.length())      <span class="comment">// 编译错误</span></div></pre></td></tr></table></figure><p>智能类型转换，编译器会为你做自动类型转换。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</div><div class="line">    <span class="keyword">if</span> (obj <span class="keyword">is</span> String) &#123;</div><div class="line">        <span class="comment">// `obj` 在该条件分⽀内⾃动转换成 `String`</span></div><div class="line">        <span class="keyword">return</span> obj.length</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 在离开类型检测分⽀后，`obj` 仍然是 `Any` 类型</span></div><div class="line">    <span class="keyword">return</span> <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>互操作性</li></ul><p>使用 JVM 上的任何现有库，因为有 100％ 的兼容性，包括 SAM(Single Abstract Method) 支持。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> io.reactivex.Flowable</div><div class="line"><span class="keyword">import</span> io.reactivex.schedulers.Schedulers</div><div class="line"></div><div class="line">Flowable</div><div class="line">    .fromCallable &#123;</div><div class="line">        Thread.sleep(<span class="number">1000</span>) <span class="comment">//  模仿高开销的计算</span></div><div class="line">        <span class="string">"Done"</span></div><div class="line">    &#125;</div><div class="line">    .subscribeOn(Schedulers.io())</div><div class="line">    .observeOn(Schedulers.single())</div><div class="line">    .subscribe(::println, Throwable::printStackTrace)</div></pre></td></tr></table></figure><p>无论是 JVM 还是 JavaScript 目标平台，都可用 Kotlin 写代码然后部署到你想要的地方</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> kotlin.browser.window</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">onLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    window.document.body!!.innerHTML += <span class="string">"&lt;br/&gt;Hello, Kotlin!"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>工具友好</li></ul><p>一门语言需要工具化，而在 JetBrains，这正是我们做得最好的地方！<br><img src="/images/kotlin/kotlin1.png" alt="TCP"></p><p><img src="/images/kotlin/kotlin2.png" alt="TCP"></p><p>Kotlin相关知识</p><h4 id="一、基础语法"><a href="#一、基础语法" class="headerlink" title="一、基础语法"></a>一、基础语法</h4><h5 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h5><ul><li>基本数据类型<br>在 Kotlin 中，所有东西都是对象，在这个意义上讲我们可以在任何变量上调⽤成员函数和属性。<br>Kotlin 处理数字在某种程度上接近 Java， 但是并不完全相同。 例如， 对于数字没有隐式拓宽转换 （如 Java 中 int 可以隐式转换为 long)， 另外有些情况的字⾯值略有不同。<br>Kotlin 提供了如下的内置类型来表⽰数字 （与 Java 很相近）</li></ul><style>table th:first-of-type {    width: 100px;}th:nth-of-type(2) {    width: 200px;}</style><table><thead><tr><th style="text-align:left">Type</th><th style="text-align:left">Bit width</th></tr></thead><tbody><tr><td style="text-align:left">Double</td><td style="text-align:left">64</td></tr><tr><td style="text-align:left">Float</td><td style="text-align:left">32</td></tr><tr><td style="text-align:left">Long</td><td style="text-align:left">64</td></tr><tr><td style="text-align:left">Int</td><td style="text-align:left">32</td></tr><tr><td style="text-align:left">Short</td><td style="text-align:left">16</td></tr><tr><td style="text-align:left">Byte</td><td style="text-align:left">8</td></tr></tbody></table><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// kotlin 没有隐式转换</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(l: <span class="type">Long</span>)</span></span> &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">val</span> i = <span class="number">10</span></div><div class="line">    test(i.toLong())</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>字符串<br>字符串⽤ String 类型表⽰。 字符串是不可变的。 字符串的元素⸺字符可以使⽤索引运算符访问: s[i] 。 可以⽤ for 循环迭代字符串:</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (c <span class="keyword">in</span> name) &#123;</div><div class="line">    println(c)</div><div class="line">&#125;</div><div class="line"><span class="comment">// Kotlin 有两种类型的字符串字⾯值: 转义字符串, 以及原⽣字符串可以包含换⾏和任意⽂本。转义字符串很像 Java 字符串:</span></div><div class="line"><span class="keyword">val</span> s = <span class="string">"Hello, world!\n"</span></div><div class="line"></div><div class="line"><span class="comment">// 引用原⽣字符串 使⽤三个引号（ """ ） 分界符括起来， 内部没有转义并且可以包含换⾏和任何其他字符:</span></div><div class="line"><span class="keyword">val</span> text = <span class="string">""" \n</span></div><div class="line">    for (c in "foo")</div><div class="line">        print(c) """</div></pre></td></tr></table></figure><p>你可以通过 trimMargin() 函数去除前导空格：</p><ul><li>字符串模板<br>字符串可以包含模板表达式 ， 即⼀些⼩段代码， 会求值并把结果合并到字符串中。 模板表达式以美元符 （ $ ） 开头， 由⼀个简单的名字构成:</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> string = <span class="string">"Hello World"</span></div><div class="line">println(<span class="string">"result is <span class="variable">$string</span>"</span>)</div><div class="line">println(<span class="string">"result is <span class="subst">$&#123;string.replace(" ", "")&#125;</span>"</span>)</div></pre></td></tr></table></figure><h5 id="2、语法定义"><a href="#2、语法定义" class="headerlink" title="2、语法定义"></a>2、语法定义</h5><ul><li>定义包、定义函数、定义常量、变量、变长参数vararg</li></ul><p>（1）定义包：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> my.demo</div><div class="line"><span class="keyword">import</span> java.util.*</div><div class="line"><span class="comment">//...</span></div></pre></td></tr></table></figure><p>包名不必和文件夹路径一致：源文件可以放在任意位置。</p><p>（2）定义函数</p><p>定义一个函数接受两个 int 型参数，返回值为 int ：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span> , b: <span class="type">Int</span>)</span></span> : <span class="built_in">Int</span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>该函数只有一个表达式函数体以及一个自推导型的返回值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">  println(<span class="string">"sum of 19 and 23 is <span class="subst">$&#123;sum(<span class="number">19</span>, <span class="number">23</span>)&#125;</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>kotlin没有void关键字，用Unit表示返回一个没有意义的值， Unit 的返回类型可以省略：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Unit</span> &#123;</div><div class="line">   println(<span class="string">"sum of <span class="variable">$a</span> and <span class="variable">$b</span> is <span class="subst">$&#123;a + b&#125;</span>"</span>)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> &#123;</div><div class="line">   println(<span class="string">"sum of <span class="variable">$a</span> and <span class="variable">$b</span> is <span class="subst">$&#123;a + b&#125;</span>"</span>)</div><div class="line"> &#125;</div></pre></td></tr></table></figure><p>（3）定义变量、常量</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">   <span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">1</span>  <span class="comment">// 立即初始化</span></div><div class="line">   <span class="keyword">val</span> b = <span class="number">2</span>   <span class="comment">// 推导出Int型</span></div><div class="line">   <span class="keyword">val</span> c: <span class="built_in">Int</span>  <span class="comment">// 当没有初始化值时必须声明类型</span></div><div class="line">   c = <span class="number">3</span>       <span class="comment">// 赋值</span></div><div class="line">   println(<span class="string">"a = <span class="variable">$a</span>, b = <span class="variable">$b</span>, c = <span class="variable">$c</span>"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">   <span class="keyword">var</span> x = <span class="number">5</span> <span class="comment">// 推导出Int类型</span></div><div class="line">   x += <span class="number">1</span></div><div class="line">   println(<span class="string">"x = <span class="variable">$x</span>"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>（4）变长参数 vararg</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * kotlin 变长参数</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(<span class="keyword">vararg</span> arg: <span class="type">Int</span>, string: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">    arg.forEach &#123; n -&gt;</div><div class="line">        sum += n</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum</div><div class="line">&#125;</div><div class="line"></div><div class="line">test(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, string = <span class="string">""</span>)</div></pre></td></tr></table></figure><p>在java中变长参数必须放在所有参数的后面，kotlin由于具名参数的存在可以放在任何位置</p><ul><li>注释</li></ul><p>注释正如Java 和 JavaScript， Kotlin ⽀持⾏注释及块注释。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这是⼀个⾏注释</span></div><div class="line"><span class="comment">/* 这是⼀个多⾏的</span></div><div class="line"> 块注释。 */</div><div class="line"><span class="comment">/** /** */</span> */</div></pre></td></tr></table></figure><p>  与 Java 不同的是， Kotlin 的块注释可以嵌套。</p><ul><li>可空类型 String?<br>当某个变量的值可以为 null 的时候， 必须在声明处的类型后添加 ? 来标识该引⽤可为空。<br>如果 str 的内容不是数字返回 null：</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parseInt</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span>? &#123;</div><div class="line">    <span class="comment">// ……</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="3、import引用，区间使用（参见控制流）"><a href="#3、import引用，区间使用（参见控制流）" class="headerlink" title="3、import引用，区间使用（参见控制流）"></a>3、import引用，区间使用（参见控制流）</h5><p>源⽂件通常以包声明开头:package foo.bar</p><ul><li>默认导⼊</li></ul><p>有多个包会默认导⼊到每个 Kotlin ⽂件中：<br>kotlin.<em><br>kotlin.annotation.</em><br>…<br>kotlin.io.<em><br>kotlin.text.</em><br>根据⽬标平台还会导⼊额外的包：<br>JVM:<br>java.lang.<em><br>kotlin.jvm.</em><br>JS:<br>kotlin.js.*</p><ul><li><p>也可以导⼊⼀个作⽤域下的所有内容 （包、 类、 对象等） :<br>import foo.* // “foo”中的⼀切都可访问<br>如果出现名字冲突， 可以使⽤ as 关键字在本地重命名冲突项来消歧义：<br>import foo.Bar // Bar 可访问<br>import bar.Bar as bBar // bBar 代表“bar.Bar”</p></li><li><p>import 并不仅限于导⼊类； 也可⽤它来导⼊其他声明：<br>顶层函数及属性；<br>在对象声明中声明的函数和属性;<br>枚举常量。</p></li><li><p>与 Java 不同， Kotlin 没有单独的 “import static” 语法； 所有这些声明都⽤ import 关键字导⼊。</p></li></ul><h4 id="二、程序结构"><a href="#二、程序结构" class="headerlink" title="二、程序结构"></a>二、程序结构</h4><h5 id="1、Kotlin访问控制修饰符"><a href="#1、Kotlin访问控制修饰符" class="headerlink" title="1、Kotlin访问控制修饰符"></a>1、Kotlin访问控制修饰符</h5><p>在Kotlin中拥有public、internal、protected、private修饰符，作用也和Java几乎一样，与Java不同的是，在Kotlin中，类的声明默认是public的。</p><table><thead><tr><th>修饰符</th><th>类成员</th><th>顶级声明</th></tr></thead><tbody><tr><td>public(default)</td><td>任何地方可见</td><td>任何地方可见</td></tr><tr><td>internal</td><td>在同一module中可见</td><td>在同一module中可见</td></tr><tr><td>protected</td><td>在子类中可见</td><td>-</td></tr><tr><td>private</td><td>在类内部可见</td><td>在当前文件中可见</td></tr></tbody></table><h5 id="2、控制流：-if、-when、-for、-while、-do-while"><a href="#2、控制流：-if、-when、-for、-while、-do-while" class="headerlink" title="2、控制流： if、 when、 for、 while、 do while"></a>2、控制流： if、 when、 for、 while、 do while</h5><ul><li>if表达式</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testIf</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> a : <span class="built_in">Int</span> = <span class="number">1</span></div><div class="line">    <span class="keyword">val</span> b : <span class="built_in">Int</span> = <span class="number">1</span></div><div class="line">    <span class="keyword">var</span> max = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</div><div class="line">    <span class="keyword">if</span> (a &gt; b)</div><div class="line">        max = a</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>when表达式，替代Java switch</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testWhen</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// 1、简单用法</span></div><div class="line">    <span class="keyword">val</span> x: <span class="built_in">Int</span> = <span class="number">1</span></div><div class="line">    <span class="keyword">when</span> (x) &#123;</div><div class="line">        <span class="number">1</span> -&gt; println(<span class="string">"x == 1"</span>)</div><div class="line">        <span class="number">2</span> -&gt; println(<span class="string">"x == 2"</span>)</div><div class="line">        <span class="keyword">else</span> -&gt; &#123;</div><div class="line">            println(<span class="string">"x is neither 1 nor 2"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 2、如果很多分支需要相同的方式处理，则可以把多个分支条件放在一起，用逗号分隔：</span></div><div class="line">    <span class="keyword">when</span> (x) &#123;</div><div class="line">        <span class="number">0</span>, <span class="number">1</span> -&gt; println(<span class="string">"x == 0 or x == 1"</span>)</div><div class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">"otherwise"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 3、可以用任意表达式（而不只是常量）作为分支条件</span></div><div class="line">    <span class="keyword">when</span> (x) &#123;</div><div class="line">        parseInt(<span class="string">"10"</span>) -&gt; println(<span class="string">"s encodes x"</span>)</div><div class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">"s does not encode x"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 4、可以检测一个值在（in）或者不在（!in）某个区间或者集合</span></div><div class="line">    <span class="keyword">val</span> y: Any = <span class="string">"a"</span></div><div class="line">    <span class="keyword">when</span> (y) &#123;</div><div class="line">        <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> -&gt; println(<span class="string">"x is in the range"</span>)</div><div class="line">        !<span class="keyword">in</span> <span class="number">10.</span><span class="number">.20</span> -&gt; println(<span class="string">"x is outside the range"</span>)</div><div class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">"none of the above"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 5、检测一个值是（is）或者不是（!is）某个特定类型的值，由于智能转换，你可以访问该类型的方法和属性而需任何额外的检测。</span></div><div class="line">    <span class="keyword">val</span> result = <span class="keyword">when</span> (y) &#123;</div><div class="line">        <span class="keyword">is</span> String -&gt; y.startsWith(<span class="string">"prefix"</span>)</div><div class="line">        <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; y + <span class="number">1</span></div><div class="line">        <span class="keyword">else</span> -&gt; <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">    println(result)</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>for循环</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testFor</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// 1、遍历某个区间</span></div><div class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.4</span>)<span class="comment">//为闭区间[0,4]</span></div><div class="line">        println(i)</div><div class="line"></div><div class="line">    <span class="comment">// 2、通过索引遍历一个数组或者一个 list，你可以这么做：</span></div><div class="line">    <span class="keyword">val</span> array = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> array.indices)</div><div class="line">        println(array[i])</div><div class="line"></div><div class="line">    <span class="comment">// 3、Arrays库函数 withIndex ：</span></div><div class="line">    <span class="keyword">for</span> ((index, value) <span class="keyword">in</span> array.withIndex()) &#123;</div><div class="line">        println(<span class="string">"the element at <span class="variable">$index</span> is <span class="variable">$value</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>while、 do while使用方法不变</li></ul><h5 id="3、返回和跳转"><a href="#3、返回和跳转" class="headerlink" title="3、返回和跳转"></a>3、返回和跳转</h5><p>Kotlin 有三种结构化跳转表达式：<br>return。默认从最直接包围它的函数或者匿名函数返回。<br>break。终止最直接包围它的循环。<br>continue。继续下一次最直接包围它的循环。</p><h5 id="4、lateinit延迟初始化成员变量"><a href="#4、lateinit延迟初始化成员变量" class="headerlink" title="4、lateinit延迟初始化成员变量"></a>4、lateinit延迟初始化成员变量</h5><p>Java 定义的类成员变量如果不初始化，那么基本类型被初始化为其默认值，比如 int 初始化为 0，boolean 初始化为 false，非基本类型的成员则会被初始化为 null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> name: String? = <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用了可空类型，副作用就是后面每次你想要用 name 的时候，都需要判断其是否为 null。如果不使用可空类型，需要加 lateinit 关键字：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> name: String</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>lateinit</code> 是用来告诉编译器，name 这个变量后续会妥善处置的。</p><p>对于 final 的成员变量，Java 要求它们必须在构造方法或者构造块当中对他们进行初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name = <span class="string">"Peter"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>也就是说，如果我要想定义一个可以延迟到一定实际再使用并初始化的 final 变量，这在 Java 中是做不到的。</p><p>Kotlin 有办法，使用 lazy 这个 delegate 即可：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">val</span> name <span class="keyword">by</span> lazy (LazyThreadSafetyMode.SYNCHRONIZED)&#123;</div><div class="line">        NameProvider.getName()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>只有使用到 name 这个属性的时候，lazy 后面的 Lambda 才会执行，name 的值才会真正计算出来。</p><h5 id="5、异常捕获"><a href="#5、异常捕获" class="headerlink" title="5、异常捕获"></a>5、异常捕获</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenfeiyue on 2018/4/13.</div><div class="line"> * Description: Exception</div><div class="line"> * Kotlin中的try关键字就像 if 和 when 一样，引入了一个表达式</div><div class="line"> */</div><div class="line"><span class="meta">@Throws(Exception::class)</span></div><div class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(string: <span class="type">String</span>)</span></span> &#123;</div><div class="line">    string.toInt()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> result = <span class="keyword">try</span> &#123;</div><div class="line">        <span class="number">10</span></div><div class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</div><div class="line">        e.printStackTrace()</div><div class="line">        <span class="number">-1</span></div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">    &#125;</div><div class="line">    print(result)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * kotlin不区分受检异常和未受检异常，不必指定函数抛出的异常，可以处理也可以不处理异常。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">write</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> file = File(<span class="string">"test.txt"</span>)</div><div class="line">    <span class="keyword">var</span> outputStream: OutputStream? = <span class="literal">null</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        file.createNewFile()</div><div class="line">        outputStream = FileOutputStream(file)</div><div class="line">        <span class="keyword">val</span> b = <span class="string">"Hello World"</span>.toByteArray(charset(<span class="string">"UTF-8"</span>))</div><div class="line">        outputStream.write(b)</div><div class="line">    &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</div><div class="line">            outputStream.close()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="三、-面向对象"><a href="#三、-面向对象" class="headerlink" title="三、 面向对象"></a>三、 面向对象</h4><h5 id="类和继承"><a href="#类和继承" class="headerlink" title="类和继承"></a>类和继承</h5><p>Kotlin 中使⽤关键字 <code>class</code> 声明类<br>类声明由类名、 类头 （指定其类型参数、 主构造函数等） 和由⼤括号包围的类体构成。 类头和类体都是可选的； 如果⼀个类没有类体， 可以省略花括号。</p><ul><li>构造函数</li></ul><p>在 Kotlin 中的⼀个类可以有⼀个主构造函数和⼀个或多个次构造函数。 主构造函数是类头的⼀部分： 它跟在类名 （和可选的类型参数） 后。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 常规用法</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">constructor</span></span>(firstName: String) &#123;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 如果主构造函数没有任何注解或者可⻅性修饰符， 可以省略这个 constructor 关键字。</span></div><div class="line"></div><div class="line"><span class="comment">// 当主构造函数有注解或者可见性修饰符，需加 constructor 关键字</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People2</span> <span class="keyword">public</span> <span class="meta">@Inject</span> <span class="keyword">constructor</span></span>(name: String) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//若主构造函数中，不进行初始化, 可放在init&#123;&#125;中</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People3</span></span>(name: String) &#123;</div><div class="line">    <span class="keyword">val</span> name: String</div><div class="line"></div><div class="line">    init &#123;</div><div class="line">        println(<span class="string">"initialize"</span>)</div><div class="line">        <span class="keyword">this</span>.name = name</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 如果类有一个主构造函数（无论有无参数），每个次构造函数需要直接或间接委托给主构造函数，用this关键字</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People4</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        println(<span class="string">"constructor"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">constructor</span>(name: String) : <span class="keyword">this</span>() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">constructor</span>(name: String, age: <span class="built_in">Int</span>) : <span class="keyword">this</span>(name) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>局部函数和顶层函数<br>Kotlin 支持局部函数，即一个函数在另一个函数内部<br>Kotlin中通过使用顶层函数和顶层属性减少Java中常见的静态工具类，使我们的代码更加整洁</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(i: <span class="type">Int</span>)</span></span> &#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(m :<span class="type">Int</span>, n : <span class="type">Int</span>)</span></span> : <span class="built_in">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> m + n</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">val</span> result = add(i, <span class="number">5</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>局部函数可以访问外部函数的局部变量，所以在上例中，n 可以是局部变量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(i: <span class="type">Int</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> n = <span class="number">10</span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(m :<span class="type">Int</span>)</span></span> : <span class="built_in">Int</span> &#123;</div><div class="line">        <span class="keyword">return</span> m + n</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">val</span> result = add(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>抽象类<br>类和其中的某些成员可以声明为 abstract。 抽象成员在本类中可以不⽤实现。 需要注意的是， 我们并不需要⽤ open 标注⼀个抽象类或者抽象函数</li></ul><h5 id="open"><a href="#open" class="headerlink" title="open"></a>open</h5><p>open 关键字与java 中的 final相反:它允许别的类继承这个类。默认情形下，kotlin 中所有的类和函数都是 final</p><ul><li>覆盖⽅法</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</div><div class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">()</span></span> &#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">nv</span><span class="params">()</span></span> &#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span></span>() : Base() &#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">()</span></span> &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Derived.v() 函数上必须加上 <code>override</code>标注。 如果没写， 编译器将会报错。 如果函数没有标注 open 如 Base.nv() ， 则⼦类中不允许定义相同签名的函数，不论加不加 override。 在⼀个 final 类中 （没有⽤ open 标注的类） ， 开放成员是禁⽌的</p><ul><li>覆盖属性<br>属性覆盖与⽅法覆盖类似； 在超类中声明然后在派⽣类中重新声明的属性必须以 override 开头， 并且它们必须具有兼容的类型。 每个声明的属性可以由<br>具有初始化器的属性或者具有 getter ⽅法的属性覆盖。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</div><div class="line">    <span class="keyword">open</span> <span class="keyword">val</span> x: <span class="built_in">Int</span> <span class="keyword">get</span>() = <span class="number">1</span></div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar1</span> : <span class="type">Foo</span></span>() &#123;</div><div class="line">    <span class="keyword">override</span> <span class="keyword">val</span> x: <span class="built_in">Int</span> = <span class="number">3</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><p>Kotlin 的接口与 Java 8 类似，既包含抽象方法的声明，也包含实现。与抽象类不同的是，接口无法保存状态。它可以有属性但必须声明为抽象或提供访问器实现。<br>使用关键字 interface 来定义接口</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</div><div class="line">      <span class="comment">// 可选的方法体</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>实现接口</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">MyInterface &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">// 方法体</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>TODO函数<br>调用含有<code>TODO</code>关键字的方法将直接抛出异常</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</div><div class="line">        TODO(<span class="string">"not implemented!"</span>)</div><div class="line">    &#125;</div><div class="line">    test()</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>接口中的属性</li></ul><p>你可以在接口中定义属性。在接口中声明的属性要么是抽象的，要么提供访问器的实现。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</div><div class="line">    <span class="keyword">val</span> prop: <span class="built_in">Int</span> <span class="comment">// 抽象的,需要子类重写</span></div><div class="line"></div><div class="line">    <span class="keyword">val</span> propertyWithImplementation: String</div><div class="line">        <span class="keyword">get</span>() = <span class="string">"foo"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</div><div class="line">        print(prop)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">MyInterface &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="keyword">val</span> prop: <span class="built_in">Int</span> = <span class="number">29</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>解决覆盖冲突</li></ul><p>实现多个接口时，可能会遇到同一方法继承多个实现的问题。例如</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; print(<span class="string">"A"</span>) &#125;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; print(<span class="string">"B"</span>) &#125;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; print(<span class="string">"bar"</span>) &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> : <span class="type">A &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; print(<span class="string">"bar"</span>) &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> : <span class="type">A</span>, <span class="type">B &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>&lt;A&gt;.foo()</div><div class="line">        <span class="keyword">super</span>&lt;B&gt;.foo()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>&lt;B&gt;.bar()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上例中，接口 A 和 B 都定义了方法 foo() 和 bar()。 两者都实现了 foo(), 但是只有 B 实现了 bar()，(bar() 在 A 中没有标记为抽象， 因为没有方法体时默认为抽象）。因为 C 是一个实现了 A 的具体类，所以必须要重写 bar() 并实现这个抽象方法。<br>然而，如果我们从 A 和 B 派生 D，我们需要实现我们从多个接口继承的所有方法，并指明 D 应该如何实现它们。这一规则既适用于继承单个实现（bar()）的方法也适用于继承多个实现（foo()）的方法。</p><h5 id="data-class，object-class，伴生对象和内部类"><a href="#data-class，object-class，伴生对象和内部类" class="headerlink" title="data class，object class，伴生对象和内部类"></a>data class，object class，伴生对象和内部类</h5><ul><li>data class</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 减少样板代码</span></div><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</div></pre></td></tr></table></figure><ul><li>object class</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 对象声明是定义单例的一种形式</div><div class="line"> * object class 等同于java 饿汉式单例</div><div class="line"> * public static final ObjectTest INSTANCE = new ObjectTest();</div><div class="line"> */</div><div class="line"><span class="keyword">object</span> ObjectTest : ArrayList&lt;String&gt;() &#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>与 Java 或 C# 不同， 在 Kotlin 中类没有静态⽅法。 在⼤多数情况下，它建议简单地使⽤包级函数。</p><ul><li><p>伴生对象和静态成员</p></li><li><p>内部类 静态非静态，匿名内部类</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 内部类</div><div class="line"> * 1.kotlin 默认内部类为public static final，不能持有外部类的状态（属性、方法等）</div><div class="line"> * 2.给内部类加上inner关键词之后，就会变成非静态内部类，可以访问外部类的属性和方法</div><div class="line"> * 3.非静态内部类想访问外部类的属性，可以使用 this@外部类名.外部类属性名 的形式访问</div><div class="line"> * 4.非静态内部类可以访问到外部静态内部类的方法和属性，静态内部类访问不到外部所有的属性和方法</div><div class="line"> *</div><div class="line"> * 注意调用方式及内存泄漏相关</div><div class="line"> *</div><div class="line"> * 对象表达式用来替代Java的匿名内部类</div><div class="line"> */</div><div class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</div><div class="line">     <span class="keyword">val</span> helloWorld = <span class="string">"Hello World"</span></div><div class="line">     inner <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</div><div class="line">         <span class="function"><span class="keyword">fun</span> <span class="title">getOuter</span><span class="params">()</span></span>: Outer &#123;</div><div class="line">             <span class="keyword">return</span> <span class="keyword">this</span><span class="symbol">@Outer</span></div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">     <span class="keyword">val</span> outer = Outer()</div><div class="line">     <span class="keyword">val</span> innerClass = outer.Inner()</div><div class="line">     <span class="keyword">val</span> view = View()</div><div class="line">     <span class="comment">// kotlin匿名内部类，可以继承一个类，实现多个接口</span></div><div class="line">     view.setOnClickListener(<span class="keyword">object</span> : Any(), View.OnClickListener &#123;</div><div class="line">         <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(view: <span class="type">View</span>)</span></span> &#123;</div><div class="line">         &#125;</div><div class="line">     &#125;)</div><div class="line"> &#125;</div></pre></td></tr></table></figure><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><ul><li>函数重载overload和默认参数</li></ul><p>Kotlin允许包级函数一级函数参数存在默认值<br>函数参数可以有默认值，当省略相应的参数时使用默认值。与其他语言相比，这可以减少重载数量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">read</span><span class="params">(b: <span class="type">Array</span>&lt;<span class="type">Byte</span>&gt;, off: <span class="type">Int</span> = <span class="number">0</span>, len: <span class="type">Int</span> = b.size)</span></span> &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>默认值通过类型后面的 = 及给出的值来定义。<br>覆盖方法总是使用与基类型方法相同的默认参数值。 当覆盖一个带有默认参数值的方法时，必须从签名中省略默认参数值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(i: <span class="type">Int</span> = <span class="number">10</span>)</span></span> &#123;  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> : <span class="type">A</span></span>() &#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(i: <span class="type">Int</span>)</span></span> &#123;  &#125;  <span class="comment">// 不能有默认值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>具名参数<br>调用函数时, 可以通过参数名来指定参数. 当函数参数很多, 或者存在默认参数时, 指定参数名是一种非常便利的功能</li></ul><p>可以在调用函数时使用命名的函数参数。当一个函数有大量的参数或默认参数时这会非常方便。<br>给定以下函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">reformat</span><span class="params">(str: <span class="type">String</span>,</span></span></div><div class="line">             normalizeCase: <span class="type">Boolean</span> = <span class="literal">true</span>,</div><div class="line">             upperCaseFirstLetter: <span class="type">Boolean</span> = <span class="literal">true</span>,</div><div class="line">             divideByCamelHumps: <span class="type">Boolean</span> = <span class="literal">false</span>,</div><div class="line">             wordSeparator: <span class="type">Char</span> = <span class="string">' '</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 我们可以使用默认参数来调用它</span></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="comment">// 我们可以使用默认参数来调用它</span></div><div class="line">    reformat(str)</div><div class="line">    <span class="comment">// 然而，当使用非默认参数调用它时，该调用看起来就像</span></div><div class="line">    reformat(str, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">'_'</span>)</div><div class="line">    <span class="comment">// 使用命名参数我们可以使代码更具有可读性</span></div><div class="line">    reformat(str,</div><div class="line">            normalizeCase = <span class="literal">true</span>,</div><div class="line">            upperCaseFirstLetter = <span class="literal">true</span>,</div><div class="line">            divideByCamelHumps = <span class="literal">false</span>,</div><div class="line">            wordSeparator = <span class="string">'_'</span>)</div><div class="line">    <span class="comment">// 并且如果我们不需要所有的参数</span></div><div class="line">    reformat(str, wordSeparator = <span class="string">'_'</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>请注意，在调用 Java 函数时不能使用命名参数语法，因为 Java 字节码并不总是保留函数参数的名称。</p><ul><li><p>中缀表示法 （函数还可以用中缀表示法调，当满足以下条件时）</p></li><li><p>他们是成员函数或扩展函数</p></li><li>他们只有一个参数</li><li>他们用 infix 关键字标注</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 给 Int 定义扩展</span></div><div class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">shl</span><span class="params">(x: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> x</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 用中缀表示法调用扩展函数</span></div><div class="line"><span class="number">1</span> shl <span class="number">2</span></div><div class="line"><span class="comment">// 等同于这样</span></div><div class="line"><span class="number">1.</span>shl(<span class="number">2</span>)</div></pre></td></tr></table></figure><ul><li>Kotlin 支持函数扩展和属性扩展<br>扩展实际上并没有修改它所扩展的类。定义一个扩展，你并没有在类中插入一个新的成员，只是让这个类的实例对象能够通过.调用新的函数。<br>注意，由于扩展并不会真正给类添加了成员属性，因此也没有办法让扩展属性拥有一个备份字段(backing field).这也是为什么初始化函数不允许有扩展属性。扩展属性只能够通过明确提供 getter 和 setter方法来进行定义.<br>如果有同名同参数的成员函数和扩展函数，调用的时候必然会使用成员函数</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> bd = <span class="string">"3"</span>.bd</div><div class="line">    <span class="keyword">val</span> d = <span class="number">4.00</span>.bd</div><div class="line">    println(bd.add(d))</div><div class="line">    println(bd.addAndMul(d))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 对Double属性扩展</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">val</span> <span class="built_in">Double</span>.bd : BigDecimal</div><div class="line">    <span class="keyword">get</span>() = BigDecimal(<span class="keyword">this</span>.toString())</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">val</span> String.bd : BigDecimal</div><div class="line">    <span class="keyword">get</span>() = BigDecimal(<span class="keyword">this</span>)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 对BigDecimal函数扩展,增加相加然后相乘的方法</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">fun</span> BigDecimal.<span class="title">addAndMul</span><span class="params">(parm: <span class="type">BigDecimal</span>)</span></span> : BigDecimal &#123;</div><div class="line">    <span class="keyword">var</span> temp = <span class="keyword">this</span> + parm</div><div class="line">    temp *= parm</div><div class="line">    <span class="keyword">return</span> temp</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="属性代理"><a href="#属性代理" class="headerlink" title="属性代理"></a>属性代理</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenfeiyue on 18/2/12.</div><div class="line"> * Description: 属性代理</div><div class="line"> * 语法结构是： val/var &lt;property name&gt;: &lt;Type&gt; by &lt;expression&gt; 在 by 后面的属性就是代理，</div><div class="line"> * 这样这个属性的 get() 和 set() 方法就代理给了它。</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// 系统提供的代理</span></div><div class="line">    <span class="keyword">val</span> hello <span class="keyword">by</span> lazy(LazyThreadSafetyMode.SYNCHRONIZED) &#123;</div><div class="line">        println(<span class="string">"hello by lazy"</span>)</div><div class="line">        <span class="string">"Hello World"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">val</span> x: String <span class="keyword">by</span> Delegate()</div><div class="line">    <span class="keyword">var</span> y <span class="keyword">by</span> Delegate()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> test = Test()</div><div class="line">    println(test.x)</div><div class="line">    test.y = <span class="string">"y"</span></div><div class="line">    println(test.y)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 具体实现</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Delegate</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> value: String? = <span class="literal">null</span></div><div class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</div><div class="line">        <span class="comment">// 读取缓存、数据库等</span></div><div class="line">        <span class="keyword">return</span> value ?: <span class="string">"default value"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(any: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;, value: <span class="type">String</span>?)</span></span> &#123;</div><div class="line">        <span class="keyword">this</span>.value = value</div><div class="line">        <span class="comment">// 写入缓存等</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="Kotlin的inline内联函数"><a href="#Kotlin的inline内联函数" class="headerlink" title="Kotlin的inline内联函数"></a>Kotlin的inline内联函数</h5><ul><li><p>方法调用流程<br>调用一个方法是一个压栈和出栈的过程，调用方法时将栈针压入方法栈，然后执行方法体，方法结束时将栈针出栈，这个压栈和出栈的过程会耗费资源，这个过程中传递形参也会耗费资源。</p></li><li><p>为什么需要inline<br>有些简单的方法会被频繁调用，会增加方法调用的开销，内联函数在编译器直接将方法体插入在函数调用的地方。</p></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.kotlincn.net/" target="_blank" rel="external">Kotlin中文站</a></p><p><a href="http://blog.csdn.net/jhj_24/article/details/53896224" target="_blank" rel="external">Kotlin控制流</a></p>]]></content>
      
      <categories>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android财富星球APP改进部分</title>
      <link href="/2018/03/15/2018-03-15-Android%E6%94%B9%E8%BF%9B%E9%83%A8%E5%88%86/"/>
      <url>/2018/03/15/2018-03-15-Android%E6%94%B9%E8%BF%9B%E9%83%A8%E5%88%86/</url>
      <content type="html"><![CDATA[<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>主要回顾一下项目中修改的地方，以及目前存在的问题和改进的方向</p><a id="more"></a><h4 id="一、gradle依赖库版本统一管理，所有support包使用同一版本v4、v7、RecycleView减少冲突"><a href="#一、gradle依赖库版本统一管理，所有support包使用同一版本v4、v7、RecycleView减少冲突" class="headerlink" title="一、gradle依赖库版本统一管理，所有support包使用同一版本v4、v7、RecycleView减少冲突"></a>一、gradle依赖库版本统一管理，所有support包使用同一版本v4、v7、RecycleView减少冲突</h4><p>依赖库版本不同容易引起冲突</p><h4 id="二、所有接口json数据序列化修改"><a href="#二、所有接口json数据序列化修改" class="headerlink" title="二、所有接口json数据序列化修改"></a>二、所有接口json数据序列化修改</h4><p>增加YKResponseDataWrapper<t>类，增加统一的成功、错误处理，TokenError等</t></p><p>YKJsonUtil实体类数据解析功能，使用泛型解决数据类型转换问题</p><p>修改前后对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YKMyInfoParser</span> <span class="keyword">extends</span> <span class="title">YKBaseJsonParser</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"YKMyInfoParser"</span>;</div><div class="line">    <span class="keyword">private</span> YKUserInfo userInfo = <span class="keyword">new</span> YKUserInfo();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseData</span><span class="params">()</span> </span>&#123;</div><div class="line">        JsonObject dataObj = getResultJsonObject();</div><div class="line">        <span class="keyword">if</span> (dataObj.has(<span class="string">"headPortraitUrl"</span>)) &#123;</div><div class="line">            userInfo.headPortraitUrl = dataObj.get(<span class="string">"headPortraitUrl"</span>).getAsString();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dataObj.has(<span class="string">"nickName"</span>)) &#123;</div><div class="line">            userInfo.nickName = dataObj.get(<span class="string">"nickName"</span>).getAsString();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dataObj.has(<span class="string">"mobile"</span>)) &#123;</div><div class="line">            userInfo.mobile = dataObj.get(<span class="string">"mobile"</span>).getAsString();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (dataObj.has(<span class="string">"realName"</span>)) &#123;</div><div class="line">            userInfo.userName = dataObj.get(<span class="string">"realName"</span>).getAsString();</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> YKUserInfo <span class="title">getUserInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> userInfo;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 个人信息</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleUserData</span><span class="params">(<span class="keyword">data</span>: <span class="type">ByteArray</span>, encode: <span class="type">String</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> dataWrapper = YKJsonUtil.parseResponse(<span class="keyword">data</span>, YKNewMineDataEntity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">encode) ?: return</span></span></div><div class="line"></div><div class="line">    <span class="comment">// TODO 使用MOCK数据</span></div><div class="line">    <span class="comment">// val dataWrapper = YKJsonUtil.parseResponse(MineDataMock.getMockData(), YKNewMineDataEntity::class.java)</span></div><div class="line">    <span class="keyword">if</span> (!dataWrapper.isSuccess) &#123;</div><div class="line">        YKToastUtil.showShort(dataWrapper.message)</div><div class="line">        <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>注意：</p><ul><li>1、要特别注意数据字段类型和字段名要和服务端对应</li><li>2、使用-keep class 防止字段名混淆</li></ul><h4 id="三、把一些常用功能以及基础UI和工具库（网络模块、缓存管理、线程池管理、主题样式、自定义控件等）提取到单独的module中"><a href="#三、把一些常用功能以及基础UI和工具库（网络模块、缓存管理、线程池管理、主题样式、自定义控件等）提取到单独的module中" class="headerlink" title="三、把一些常用功能以及基础UI和工具库（网络模块、缓存管理、线程池管理、主题样式、自定义控件等）提取到单独的module中"></a>三、把一些常用功能以及基础UI和工具库（网络模块、缓存管理、线程池管理、主题样式、自定义控件等）提取到单独的module中</h4><p>ykdata、ykcommon等可以直接移植到其他项目中使用，也是进行项目模块化的第一步</p><p>部分依赖库上传至maven服务器，使用aar集成形式，一定程度上加快编译速度</p><h4 id="四、模块化（参考https-zhuanlan-zhihu-com-p-26744821）"><a href="#四、模块化（参考https-zhuanlan-zhihu-com-p-26744821）" class="headerlink" title="四、模块化（参考https://zhuanlan.zhihu.com/p/26744821）"></a>四、模块化（参考<a href="https://zhuanlan.zhihu.com/p/26744821）" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/26744821）</a></h4><p><img src="http://android9527.github.io/images/app_optimize/image3.png" alt="image"></p><p>（1）整个项目分为三层，从下至上分别是：<br>Basic Component Layer: 基础组件层，顾名思义就是一些基础组件，包含了各种开源库以及和业务无关的各种自研工具库；<br>Business Component Layer: 业务组件层，这一层的所有组件都是业务相关的，例如上图中的支付组件 AnjukePay、数据模拟组件 DataSimulator 等等；<br>Business Module Layer: 业务 Module 层，在 Android Studio 中每块业务对应一个单独的 Module。例如安居客用户 App 我们就可以拆分成新房 Module、二手房 Module、IM Module 等等，每个单独的 Business Module 都必须准遵守我们自己的 MVP 架构。</p><p>对于模块化项目，每个单独的 Business Module 都可以单独编译成 APK。在开发阶段需要单独打包编译，项目发布的时候又需要它作为项目的一个 Module 来整体编译打包。简单的说就是开发时是 Application，发布时是 Library。因此需要在 Business Module 的 build.gradle 中加入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (IsBuildModule.toBoolean()) &#123;</div><div class="line">    apply plugin: &apos;com.android.application&apos;</div><div class="line">&#125; else &#123;</div><div class="line">    apply plugin: &apos;com.android.library&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>isBuildModule 在项目根目录的 gradle.properties 中定义:<br>isBuildModule=false<br>同样 Manifest.xml 也需要有两套：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sourceSets &#123;</div><div class="line">    main &#123;</div><div class="line">        jniLibs.srcDirs = [&apos;libs&apos;]</div><div class="line">        if (IsBuildModule.toBoolean()) &#123;</div><div class="line">            manifest.srcFile &apos;src/main/module/AndroidManifest.xml&apos;</div><div class="line">        &#125; else &#123;</div><div class="line">            manifest.srcFile &apos;src/main/AndroidManifest.xml&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>（2）问题及建议</p><h5 id="1、重复依赖"><a href="#1、重复依赖" class="headerlink" title="1、重复依赖"></a>1、重复依赖</h5><p>模块化的过程中我们常常会遇到重复依赖的问题，如果是通过 aar 依赖， gradle 会自动帮我们找出新版本，而抛弃老版本的重复依赖。如果是以 project 的方式依赖，则在打包的时候会出现重复类。对于这种情况我们可以在 build.gradle 中将 compile 改为 provided，只在最终的项目中 compile 对应的 library ；<br>其实从前面的安居客模块化设计图上能看出来，我们的设计方案能一定程度上规避重复依赖的问题。比如我们所有的第三方库的依赖都会放到 OpenSourceLibraries 中，其他需要用到相关类库的项目，只需要依赖 OpenSourceLibraries 就好了。</p><h5 id="2、模块化过程中的建议"><a href="#2、模块化过程中的建议" class="headerlink" title="2、模块化过程中的建议"></a>2、模块化过程中的建议</h5><p>对于大型的商业项目，在重构过程中可能会遇到业务耦合严重，难以拆分的问题。我们需要先理清业务，再动手拆分业务模块。比如可以先在原先的项目中根据业务分包，在一定程度上将各业务解耦后拆分到不同的 package 中。比如之前新房和二手房由于同属于 app module，因此他们之前是通过隐式的 intent 跳转的，现在可以先将他们改为通过 Router 来实现跳转。又比如新房和二手房中公用的模块可以先下放到 Business Component Layer 或者 Basic Component Layer 中。在这一系列工作完成后再将各个业务拆分成多个 module 。<br>模块化重构需要渐进式的展开，不可一触而就，不要想着将整个项目推翻重写。线上成熟稳定的业务代码，是经过了时间和大量用户考验的；全部推翻重写往往费时费力，实际的效果通常也很不理想，各种问题层出不穷得不偿失。对于这种项目的模块化重构，我们需要一点点的改进重构，可以分散到每次的业务迭代中去，逐步淘汰掉陈旧的代码。<br>各业务模块间肯定会有公用的部分，按照我前面的设计图，公用的部分我们会根据业务相关性下放到业务组件层（Business Component Layer）或者基础组件层（Common Component Layer）。对于太小的公有模块不足以构成单独组件或者模块的，我们先放到类似于 CommonBusiness 的组件中，在后期不断的重构迭代中视情况进行进一步的拆分。过程中完美主义可以有，切记不可过度。<br>以上就是我在模块化探索实践方面的一些经验，不住之处还望大家指出。<br>模块化示例项目 ModularizationProject 源码地址：<a href="https://github.com/BaronZ88/ModularizationProject" target="_blank" rel="external">https://github.com/BaronZ88/ModularizationProject</a><br>路由框架 Router 源码地址：<a href="https://github.com/BaronZ88/Router" target="_blank" rel="external">https://github.com/BaronZ88/Router</a></p><h4 id="五、模块间跳转通讯（Router）"><a href="#五、模块间跳转通讯（Router）" class="headerlink" title="五、模块间跳转通讯（Router）"></a>五、模块间跳转通讯（Router）</h4><p>目前采用阿里ARouter实现页面跳转以及传值问题<br>ARouter使用及问题（<a href="https://github.com/alibaba/ARouter）" target="_blank" rel="external">https://github.com/alibaba/ARouter）</a><br>EventBus消息模型</p><h4 id="六、Module间资源名冲突"><a href="#六、Module间资源名冲突" class="headerlink" title="六、Module间资源名冲突"></a>六、Module间资源名冲突</h4><p>对于多个Module 中资源名冲突的问题，可以通过在 build.gradle 定义前缀的方式解决：<br>defaultConfig { … resourcePrefix “common_” … }</p><h4 id="七、项目结构梳理"><a href="#七、项目结构梳理" class="headerlink" title="七、项目结构梳理"></a>七、项目结构梳理</h4><p>之前项目存在问题：</p><ul><li>1、Activity/Fragment过于臃肿</li><li>2、包含网络请求以及业务处理、UI显示逻辑、用户交互事件</li><li>3、一个YKMineLoginFragment页面有近千行代码，给重构及增加功能带来很大困难</li></ul><h5 id="参考MVP模式，改进步骤："><a href="#参考MVP模式，改进步骤：" class="headerlink" title="参考MVP模式，改进步骤："></a>参考MVP模式，改进步骤：</h5><p>（1）引入简易MVP结构</p><ul><li>1、增加BaseFragment、BasePresenter关联，增加相关的生命周期管理</li><li>2、逐步分离Activity/Fragment以及业务逻辑，使用Fragment主要是用于解决碎片化问题 、更加轻量级</li><li>3、增加BaseView 接口，增加startLoading() finishLoading() showToast()等通用接口以及默认实现<br>View接口是Fragment与Presenter层的中间层，它的作用是根据具体业务的需要，为Presenter提供调用Fragment中具体UI逻辑操作的方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YKBaseFragmentJava</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">YKBasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span></span></div><div class="line">        <span class="title">HasComponent</span>, <span class="title">BaseMVPContract</span>.<span class="title">IBaseView</span>, <span class="title">View</span>.<span class="title">OnClickListener</span> &#123;</div><div class="line"></div><div class="line">    <span class="meta">@Inject</span></div><div class="line">    <span class="keyword">public</span> T mPresenter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line">        <span class="keyword">if</span> (mPresenter != <span class="keyword">null</span>) &#123;</div><div class="line">            mPresenter.create();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        <span class="keyword">if</span> (mPresenter != <span class="keyword">null</span>) &#123;</div><div class="line">            mPresenter.resume();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>YKBasePresenter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">YKBasePresenter</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BaseMVPContract</span>.<span class="title">IBaseView</span>&gt; <span class="keyword">implements</span> <span class="title">BaseMVPContract</span>.<span class="title">Presenter</span>, <span class="title">YKConnectionItemListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> T mView;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setView</span><span class="params">(T view)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mView = view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getView</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resume</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(YKNetworkError networkError, YKConnectionItem connectionItem)</span> </span>&#123;</div><div class="line">        <span class="comment">// view判断</span></div><div class="line">        <span class="keyword">if</span> (mView == <span class="keyword">null</span> || !mView.isViewAdd()) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        mView.finishLoading();</div><div class="line">        handleResponse(networkError, connectionItem);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理请求结果，子类重写</div><div class="line">     * <span class="doctag">@param</span> networkError networkError</div><div class="line">     * <span class="doctag">@param</span> connectionItem connectionItem</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(YKNetworkError networkError, YKConnectionItem connectionItem)</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        YKNetInterface.getInstance().removeConnectionItem(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样基本完成一个简单的V-MP的结构，存在的问题：</p><ul><li>1、结构不完善、未增加Model层逻辑</li><li>2、将网络请求及数据解析等逻辑放在了Presenter层，导致Presenter过重</li><li>3、重用性不友好，对于包含部分相同业务逻辑的场景需要多次编写相同代码<br>如：多个页面需要获取用户信息做不同处理的场景</li></ul><p>同样无法优雅处理在一个Fragment引用多个Presenter业务逻辑<br>如果需要对数据做不同处理，这样很有可能需要修改presenterA、PresenterB的逻辑，容易引起错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentC</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">ViewA</span>,<span class="title">ViewB</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> PresenterA presenterA;</div><div class="line">  <span class="keyword">private</span> PresenterB presenterB;</div><div class="line">  ...</div><div class="line">  ...</div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">      presenterA.getData();</div><div class="line">      presenterB.getData();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>（2）增加简单Model层逻辑</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by chenfeiyue on 17/12/11.</div><div class="line"> * Description ：主页接口相关</div><div class="line"> */</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MainRepository</span> : <span class="type">BaseRepository &#123;</span></span></div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">MainRequestListener</span> : <span class="type">RepositoryRequestListener</span></span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取启动屏幕配置</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getSplashPic</span><span class="params">(listener: <span class="type">MainRequestListener</span>, activity: <span class="type">Activity</span>)</span></span></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取首页数据</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getHomeData</span><span class="params">(listener: <span class="type">MainRequestListener</span>)</span></span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在Presenter引用相应的多个Model就好，各自单独处理数据</p><p><img src="http://android9527.github.io/images/app_optimize/mvp1.png" alt="image"></p><ul><li>（3）继续优化改进<br><img src="http://android9527.github.io/images/app_optimize/mvp2.png" alt="image"></li></ul><p>优化之后的Model层是一个庞大而且独立的模块，对外提供统一的请求数据方法与请求规则，这样做的好处有很多：</p><ul><li>1、数据请求单独编写，无需配合上层界面测试。</li><li>2、同一个模块统一管理，修改方便。</li><li>3、实现不同数据源(NetAPI,cache,database)的无缝切换。</li></ul><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li>1、各个层次之间的职责更加单一清晰，同时也很大程度上降低了代码的耦合度（可配合使用dagger2）目前的Presenter和Repository是由dagger2注入生成的</li><li>2、各个层次单独编写、测试，无需依赖其他。</li><li>3、实现不同数据源(cache，database)的无缝切换。</li><li>4、复用性高 各个层次均可一定程度的复用</li></ul><h5 id="弊端："><a href="#弊端：" class="headerlink" title="弊端："></a>弊端：</h5><ul><li>1、可读性降低 各层之间大量依赖接口调用，不方便调试</li><li>2、代码量增加 简单的功能按照MVP模式会增加许多代码</li></ul><h4 id="其他改进部分："><a href="#其他改进部分：" class="headerlink" title="其他改进部分："></a>其他改进部分：</h4><p>增加glide使用volley网络请求框架，配置缓存等，volley默认最大连接数是4<br>BaseListFragment统一控制列表加载和刷新组件<br>接口YKJsonBuilder约束，自动增加useId、token等参数</p><h4 id="一些需要注意的地方："><a href="#一些需要注意的地方：" class="headerlink" title="一些需要注意的地方："></a>一些需要注意的地方：</h4><ul><li>1、添加的监听器及时移除，add/remove，register/unregister等</li><li>2、在Android library中不能使用switch-case语句访问资源ID<br>ButterKnife在library中的使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BindView</span>(R2.id.tab_tv_left)</div><div class="line">TextView mTabTvLeft;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> i = view.getId();</div><div class="line">    <span class="keyword">if</span> (i == R.id.act_base_back_ib) &#123;</div><div class="line">        mClickListener.onLeftViewClicked();</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == R.id.act_base_right_view_tv) &#123;</div><div class="line">        mClickListener.onRightViewClicked();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>3、有些时候不能使用Application的Context，不然会报错（比如启动Activity，显示Dialog等）</li><li>4、不要通过Bundle和Msg传递大的对象，尽量避免传递Serializable类型数据（集合类除外）</li><li>5、在引入一个地方库的时候，一定要看文档在proguard文件中加入混淆配置，并且打release安装验证</li></ul><h4 id="待处理问题："><a href="#待处理问题：" class="headerlink" title="待处理问题："></a>待处理问题：</h4><ul><li>1、Glide图片库中间层，图片框架升级</li><li>2、事件连续点击处理</li><li>3、单个Request定制HTTP Header信息以及其他信息</li><li>4、增加同步请求方式，将网络请求和数据解析由调用者自由控制切换线程</li><li>5、目前所有分页数据接口部分存在逻辑漏洞</li></ul><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://zhuanlan.zhihu.com/p/26744821" target="_blank" rel="external">Android 模块化探索与实践</a><br><a href="https://blog.csdn.net/baron_leizhang/article/details/58071773" target="_blank" rel="external">安居客Android项目架构演进</a><br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/2017/1020/8625.html" target="_blank" rel="external">Android MVP架构搭建</a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android多屏幕设计</title>
      <link href="/2017/11/12/2017-11-12-Android%E5%A4%9A%E5%B1%8F%E5%B9%95%E8%AE%BE%E8%AE%A1/"/>
      <url>/2017/11/12/2017-11-12-Android%E5%A4%9A%E5%B1%8F%E5%B9%95%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>Android 可在各种具有不同屏幕尺寸和密度的设备上运行。对于应用，Android 系统在不同设备中提供一致的开发环境，可以处理大多数工作，将每个应用的用户界面调整为适应其显示的屏幕。 同时，系统提供 API，可用于控制应用适用于特定屏幕尺寸和密度的 UI，以针对不同屏幕配置优化 UI 设计。 例如，您可能想要不同于手机 UI 的平板电脑 UI。</p><p>虽然系统为使您的应用适用于不同的屏幕，会进行缩放和大小调整，但您应针对不同的屏幕尺寸和密度优化应用。 这样可以最大程度优化所有设备上的用户体验，用户会 认为您的应用实际上是专为他们的设备而设计，而不是 简单地拉伸以适应其设备屏幕。<br><a id="more"></a></p><h4 id="术语和概念"><a href="#术语和概念" class="headerlink" title="术语和概念"></a>术语和概念</h4><h5 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h5><p>屏幕尺寸指屏幕的对角线的长度，单位是英寸，1英寸=2.54厘米</p><p>比如常见的屏幕尺寸有4.0、5.0、5.5、6.0等</p><p>为简便起见，Android 将所有实际屏幕尺寸分组为四种通用尺寸：小、 正常、大和超大。</p><ul><li>超大屏幕至少为 960dp x 720dp</li><li>大屏幕至少为 640dp x 480dp</li><li>正常屏幕至少为 470dp x 320dp</li><li>小屏幕至少为 426dp x 320dp</li></ul><p><img src="/images/multi_screen/multi_screen_1.jpg" alt="multi_screen"></p><h5 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h5><p>屏幕上物理像素的总数。单位是px，1px=1个像素点。一般以纵向像素*横向像素，如1960*1080。<br>添加对多种屏幕的支持时， 应用不会直接使用分辨率；而只应关注通用尺寸和密度组指定的屏幕尺寸及密度。</p><h5 id="屏幕密度-dpi"><a href="#屏幕密度-dpi" class="headerlink" title="屏幕密度 (dpi)"></a>屏幕密度 (dpi)</h5><p>屏幕像素密度是指每英寸上的像素点数，单位是dpi，即“dot per inch”的缩写。屏幕像素密度与屏幕尺寸和屏幕分辨率有关，在单一变化条件下，屏幕尺寸越小、分辨率越高，像素密度越大，反之越小。<br>为简便起见，Android 将所有屏幕密度分组为六种通用密度： 低、中、高、超高、超超高和超超超高。</p><h5 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h5><p>从用户视角看屏幕的方向，即横屏还是 竖屏，分别表示屏幕的纵横比是宽还是高。请注意， 不仅不同的设备默认以不同的方向操作，而且 方向在运行时可随着用户旋转设备而改变。</p><h5 id="密度无关像素-dip"><a href="#密度无关像素-dip" class="headerlink" title="密度无关像素 (dip)"></a>密度无关像素 (dip)</h5><p>是Density independent pixel的缩写，指的是抽象意义上的像素。跟设备的屏幕密度有关系。<br>在定义 UI 布局时应使用的虚拟像素单位，用于以密度无关方式表示布局维度 或位置。<br>密度无关像素等于 160 dpi 屏幕上的一个物理像素，这是 系统为“中”密度屏幕假设的基线密度。在运行时，系统 根据使用中屏幕的实际密度按需要以透明方式处理 dp 单位的任何缩放 。dp 单位转换为屏幕像素很简单： px = dp * (dpi / 160)。 例如，在 240 dpi 屏幕上，1 dp 等于 1.5 物理像素。在定义应用的 UI 时应始终使用 dp 单位 ，以确保在不同密度的屏幕上正常显示 UI。</p><h5 id="dp、dip、dpi、sp、px"><a href="#dp、dip、dpi、sp、px" class="headerlink" title="dp、dip、dpi、sp、px"></a>dp、dip、dpi、sp、px</h5><p>px我们应该是比较熟悉的，前面的分辨率就是用的像素为单位，大多数情况下，比如UI设计、Android原生API都会以px作为统一的计量单位，像是获取屏幕宽高等。</p><p>dip和dp是一个意思，都是Density Independent Pixels的缩写，即密度无关像素，上面我们说过，dpi是屏幕像素密度，假如一英寸里面有160个像素，这个屏幕的像素密度就是160dpi，那么在这种情况下，dp和px如何换算呢？在Android中，规定以160dpi为基准，1dip=1px，如果密度是320dpi，则1dip=2px，以此类推。</p><p>假如同样都是画一条320px的线，在480<em>800分辨率手机上显示为2/3屏幕宽度，在320</em>480的手机上则占满了全屏，如果使用dp为单位，在这两种分辨率下，160dp都显示为屏幕一半的长度。这也是为什么在Android开发中，写布局的时候要尽量使用dp而不是px的原因。</p><p>而sp，即scale-independent pixels，与dp类似，但是可以根据文字大小首选项进行放缩，是设置字体大小的御用单位。</p><h5 id="支持的屏幕范围"><a href="#支持的屏幕范围" class="headerlink" title="支持的屏幕范围"></a>支持的屏幕范围</h5><p>从 Android 1.6（API 级别 4）开始，Android 支持多种屏幕尺寸和密度，反映设备可能具有的多种不同屏幕配置。 您可以使用 Android 系统的功能优化应用在各种屏幕配置下的用户界面 ，确保应用不仅正常渲染，而且在每个屏幕上提供 最佳的用户体验。</p><p>为简化您为多种屏幕设计用户界面的方式，Android 将实际屏幕尺寸和密度的范围 分为：<br>几种通用的密度：</p><ul><li>mdpi（中）120dpi~160dpi</li><li>hdpi（高）160dpi~240dpi</li><li>xhdpi（超高）240dpi~320dpi</li><li>xxhdpi（超超高）320dpi~480dpi</li><li>xxxhdpi（超超超高）480dpi~640dpi</li></ul><p>要针对不同的屏幕尺寸和密度优化应用的 UI，可为任何通用的尺寸和密度提供备用资源。 通常，应为某些不同的屏幕尺寸提供替代布局，为不同的屏幕密度提供替代位图图像。 在运行时，系统会根据当前设备屏幕的通用 尺寸或密度对应用使用适当的资源。</p><p>无需为屏幕尺寸和 密度的每个组合提供备用资源。系统提供强大的兼容性功能，可处理在任何设备屏幕上 渲染应用的大多数工作，前提是您已经使用 可以适当调整大小的技术实现 UI（如下面的最佳做法所述）。</p><p>在设计图标时，对于五种主流的像素密度（mdpi、hdpi、xhdpi、xxhdpi 和 xxxhdpi）应按照 1:1.5:2:3:4 的比例进行缩放。</p><p><img src="/images/multi_screen/multi_screen_2.jpg" alt="multi_screen"></p><h5 id="密度独立性"><a href="#密度独立性" class="headerlink" title="密度独立性"></a>密度独立性</h5><p>应用显示在密度不同的屏幕上时，如果它保持用户界面元素的物理尺寸（从 用户的视角），便可实现“密度独立性” 。</p><p>保持密度独立性很重要，因为如果没有此功能，UI 元素（例如 按钮）在低密度屏幕上看起来较大，在高密度屏幕上看起来较小。这些 密度相关的大小变化可能给应用布局和易用性带来问题。图 2 和 3 分别显示了应用不提供密度独立性和 提供密度独立性时的差异。</p><p>Android 系统可帮助您的应用以两种方式实现密度独立性：</p><ul><li>系统根据当前屏幕密度扩展 dp 单位数</li><li>系统在必要时可根据当前屏幕 密度将可绘制对象资源扩展到适当的大小</li></ul><p>大多数情况下，确保应用中的屏幕独立性很简单，只需以适当的密度独立像素（dp 单位）或 “wrap_content” 指定所有 布局尺寸值。系统然后根据适用于当前屏幕密度的缩放比例适当地缩放位图可绘制对象，以 适当的大小显示。</p><p>但位图缩放可能导致模糊或像素化位图，您或许已经在上面的屏幕截图中 发现了这些问题。为避免这些伪影，应为 不同的密度提供替代的位图资源。例如，应为高密度 屏幕提供分辨率较高的位图，然后系统对中密度 屏幕将使用这些位图，而无需调整位图大小。下一节详细说明如何为 不同的屏幕配置提供备用资源。</p><h4 id="主要解决方案"><a href="#主要解决方案" class="headerlink" title="主要解决方案"></a>主要解决方案</h4><h4 id="1-支持不同屏幕尺寸"><a href="#1-支持不同屏幕尺寸" class="headerlink" title="(1)支持不同屏幕尺寸"></a>(1)支持不同屏幕尺寸</h4><p>介绍如何让设计的布局能够适应多种不同的屏幕尺寸（为视图、 RelativeLayout、屏幕尺寸和屏幕方向限定符、别名过滤器和九宫格位图使用灵活的尺寸）。</p><h4 id="2-支持不同屏幕密度"><a href="#2-支持不同屏幕密度" class="headerlink" title="(2)支持不同屏幕密度"></a>(2)支持不同屏幕密度</h4><p>介绍如何支持具有不同像素密度的屏幕（使用密度无关像素并提供与每一种密度相适的位图）。</p><h4 id="3-实现自适应用户界面"><a href="#3-实现自适应用户界面" class="headerlink" title="(3)实现自适应用户界面"></a>(3)实现自适应用户界面</h4><p>介绍如何让实现的 UI 流自行适应多种屏幕尺寸/密度组合（运行时检测活动布局、根据当前布局作出反应、处理屏幕配置变更）。</p><p>Android 支持多种屏幕的基础是它能够管理针对当前屏幕配置 以适当方式渲染应用的布局和位图 可绘制对象。系统可处理大多数工作，通过适当地 缩放布局以适应屏幕尺寸/密度和根据屏幕密度缩放位图可绘制对象 ，在每种屏幕配置中渲染您的应用。但是，为了更适当地处理不同的屏幕配置 ，还应该：</p><h5 id="一、支持不同屏幕尺寸"><a href="#一、支持不同屏幕尺寸" class="headerlink" title="一、支持不同屏幕尺寸"></a>一、支持不同屏幕尺寸</h5><h6 id="1-在清单中显式声明声明屏幕尺寸支持"><a href="#1-在清单中显式声明声明屏幕尺寸支持" class="headerlink" title="1. 在清单中显式声明声明屏幕尺寸支持"></a>1. 在清单中显式声明声明屏幕尺寸支持</h6><p>通过声明您的应用支持哪些屏幕尺寸，可确保只有 其屏幕受支持的设备才能下载您的应用。声明对 不同屏幕尺寸的支持也可影响系统如何在较大 屏幕上绘制您的应用 — 特别是，您的应用是否在屏幕兼容模式中运行。<br>要声明应用支持的屏幕尺寸，应在清单文件中包含 <supports-screens> 元素。</supports-screens></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;supports-screens android:smallScreens=[&quot;true&quot; | &quot;false&quot;]</div><div class="line">                  android:normalScreens=[&quot;true&quot; | &quot;false&quot;]</div><div class="line">                  android:largeScreens=[&quot;true&quot; | &quot;false&quot;]</div><div class="line">                  android:xlargeScreens=[&quot;true&quot; | &quot;false&quot;]</div><div class="line">                  android:anyDensity=[&quot;true&quot; | &quot;false&quot;]</div><div class="line">                  android:requiresSmallestWidthDp=&quot;integer&quot;</div><div class="line">                  android:compatibleWidthLimitDp=&quot;integer&quot;</div><div class="line">                  android:largestWidthLimitDp=&quot;integer&quot;/&gt;</div></pre></td></tr></table></figure><p>在对不同的屏幕尺寸实现您的布局后，在 清单文件中声明您的应用支持哪些屏幕相当重要。</p><p>与用于屏幕尺寸的新配置限定符一起，Android 3.2 为 <supports-screens> 清单元素引入了新的属性：</supports-screens></p><p>android:requiresSmallestWidthDp<br>指定需要的最小 smallestWidth。smallestWidth 是必须为您的应用 UI 提供的 屏幕空间的最短尺寸（dp 单位）—即 可用屏幕的两个尺寸中的最短者。因此，为使设备 与您的应用兼容，设备的 smallestWidth 必须等于或大于此 值。（通常，无论屏幕的当前方向如何， 此值都是布局支持的“最小宽度”。）<br>例如，如果您的应用只用于最小可用宽度为 600dp 的平板电脑样式设备：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;manifest ... &gt;</div><div class="line">    &lt;supports-screens android:requiresSmallestWidthDp=&quot;600&quot; /&gt;</div><div class="line">    ...</div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure><p>但是，如果您的应用支持 Android 支持的所有屏幕尺寸（小至 426dp x 320dp），则无需声明此属性，因为应用 需要的最小宽度就是任何设备上可以实现的最小宽度。</p><p>注意：Android 系统不关注此 属性，因为它不影响应用在运行时的行为，而是被用于 在服务（例如 Google Play）上过滤您的应用。但是， Google Play 目前不支持此属性用于过滤（在 Android 3.2 上），因此如果您的应用不支持 小屏幕，您应继续使用其他尺寸属性。</p><p>android:compatibleWidthLimitDp<br>此属性可让您指定用户支持的最大“最小宽度”，将屏幕兼容性模式用作 用户可选的功能 。如果设备可用屏幕的最小边大于您在这里的值， 用户仍可安装您的应用，但提议在屏幕兼容性模式下运行。默认 情况下，屏幕兼容性模式会停用，并且您的布局照例会调整大小以 适应屏幕，但按钮会显示在系统栏中，可让用户打开和关闭屏幕兼容性 模式。<br>注：如果您的应用可针对大 屏幕正确调整大小，则无需使用此属性。建议不要使用此 属性，而是按照本文档的 建议，确保您的布局针对较大屏幕调整大小。</p><p>android:largestWidthLimitDp<br>此属性可让您指定应用支持的最大“最小宽度”来强制启用屏幕兼容性模式。 如果设备可用屏幕的最小 边大于您在这里的值，应用将在屏幕 兼容性模式下运行，且用户无法停用该模式。<br>注：如果您的应用可针对大 屏幕正确调整大小，则无需使用此属性。建议不要使用此 属性，而是按照本文档的 建议，确保您的布局针对较大屏幕调整大小。</p><p>注意：针对 Android 3.2 及更高版本开发时，您 应改为将旧屏幕尺寸属性与上列 属性结合使用。同时使用新属性和旧尺寸属性可能导致 非预期的行为。</p><p>如需了解每个属性的更多信息，请跟随上面各自的链接。</p><h6 id="2-线性布局LinearLayout"><a href="#2-线性布局LinearLayout" class="headerlink" title="2. 线性布局LinearLayout"></a>2. 线性布局LinearLayout</h6><p>使用<code>wrap_content</code>、<code>match_parent</code>、<code>layout_weight</code> 等属性和值</p><p>要确保布局的灵活性并适应各种尺寸的屏幕，应使用 “wrap_content” 和 “match_parent” 控制某些视图组件的宽度和高度。</p><p>使用 “wrap_content”，系统就会将视图的宽度或高度设置成所需的最小尺寸以适应视图中的内容，而 “match_parent”（在低于 API 级别 8 的级别中称为 “fill_parent”）则会展开组件以匹配其父视图的尺寸。</p><p>如果使用 “wrap_content” 和 “match_parent” 尺寸值而不是硬编码的尺寸，视图就会相应地仅使用自身所需的空间或展开以填满可用空间。此方法可让布局正确适应各种屏幕尺寸和屏幕方向。</p><p><img src="/images/multi_screen/multi_screen_3.jpg" alt="multi_screen"></p><p>下图是在横纵屏切换的时候的显示效果，我们可以看到这样可以很好的适配屏幕尺寸的变化。</p><p><img src="/images/multi_screen/multi_screen_4.jpg" alt="multi_screen"></p><p><code>layout_weight</code>是线性布局的一个独特的属性，我们可以使用这个属性来按照比例对界面进行分配，完成一些特殊的需求。</p><p><img src="/images/multi_screen/multi_screen_5.jpg" alt="multi_screen"></p><p>我们在布局里面设置为线性布局，横向排列，然后放置两个宽度为0dp的按钮，分别设置weight为1和2，在效果图中，我们可以看到两个按钮按照1：2的宽度比例正常排列了，这也是我们经常使用到的场景，这是时候很好理解，Button1的宽度就是1/(1+2) = 1/3，Button2的宽度则是2/(1+2) = 2/3，我们可以很清楚的明白这种情景下的占比如何计算。</p><p>如果是垂直方向，那么我们应该改变的是layout_height的属性，下面是0dp的显示效果</p><p><img src="/images/multi_screen/multi_screen_6.jpg" alt="multi_screen"></p><h6 id="3-使用相对布局RelativeLayout"><a href="#3-使用相对布局RelativeLayout" class="headerlink" title="3. 使用相对布局RelativeLayout"></a>3. 使用相对布局RelativeLayout</h6><p>在开发中，我们大部分时候使用的都是线性布局、相对布局和帧布局，绝对布局由于适配性极差，所以极少使用。</p><p>由于各种布局的特点不一样，所以不能说哪个布局好用，到底应该使用什么布局只能根据实际需求来确定。我们可以使用 LinearLayout 的嵌套实例并结合 “wrap_content” 和 “match_parent”，以便构建相当复杂的布局。不过，我们无法通过 LinearLayout 精确控制子视图的特殊关系；系统会将 LinearLayout 中的视图直接并排列出。</p><p>如果我们需要将子视图排列出各种效果而不是一条直线，通常更合适的解决方法是使用 RelativeLayout，这样就可以根据各组件之间的特殊关系指定布局了。例如，我们可以将某个子视图对齐到屏幕左侧，同时将另一个视图对齐到屏幕右侧。</p><p>在小尺寸屏幕的显示<br><img src="/images/multi_screen/multi_screen_7.jpg" alt="multi_screen"></p><p>在平板的大尺寸上的显示效果<br><img src="/images/multi_screen/multi_screen_8.jpg" alt="multi_screen"></p><p>虽然控件的大小由于屏幕尺寸的增加而发生了改变，但是我们可以看到，由于使用了相对布局，所以控件之前的位置关系并没有发生什么变化，这说明我们的适配成功了。</p><h6 id="4-使用百分比布局-PercentRelativeLayout-PercentFrameLayout"><a href="#4-使用百分比布局-PercentRelativeLayout-PercentFrameLayout" class="headerlink" title="4. 使用百分比布局 PercentRelativeLayout  PercentFrameLayout"></a>4. 使用百分比布局 PercentRelativeLayout  PercentFrameLayout</h6><p>android-support-percent</p><p>app:layout_heightPercent=”20%”<br>app:layout_widthPercent=”70%” </p><p>app:layout_marginLeftPercent<br>app:layout_marginTopPercent<br>app:layout_marginRightPercent<br>app:layout_marginBottomPercent</p><p><img src="/images/multi_screen/percent_preview_1.png" alt="multi_screen"></p><h6 id="5-使用约束布局-ConstraintLayout"><a href="#5-使用约束布局-ConstraintLayout" class="headerlink" title="5. 使用约束布局 ConstraintLayout"></a>5. 使用约束布局 ConstraintLayout</h6><h6 id="6-为不同屏幕尺寸提供不同的布局"><a href="#6-为不同屏幕尺寸提供不同的布局" class="headerlink" title="6. 为不同屏幕尺寸提供不同的布局"></a>6. 为不同屏幕尺寸提供不同的布局</h6><p>默认情况下，Android 会调整应用布局的大小以适应当前设备屏幕。大多数 情况下效果很好。但有时 UI 可能看起来不太好，需要针对 不同的屏幕尺寸进行调整。例如，在较大屏幕上，您可能要调整 某些元素的位置和大小，以利用其他屏幕空间，或者在较小屏幕上， 可能需要调整大小以使所有内容纳入屏幕。<br>可用于提供尺寸特定资源的配置限定符包括 small、normal、large 和 xlarge。例如，超大屏幕的布局应使用 layout-xlarge/。<br>从 Android 3.2（API 级别 13）开始，以上尺寸组已弃用，您 应改为使用 sw<n>dp 配置限定符来定义布局资源 可用的最小宽度。例如，如果多窗格平板电脑布局 需要至少 600dp 的屏幕宽度，应将其放在 layout-sw600dp/ 中。声明适用于 Android 3.2 的平板电脑布局一节将进一步讨论如何使用新技术声明布局资源。</n></p><h6 id="7-使用资源限定符"><a href="#7-使用资源限定符" class="headerlink" title="7. 使用资源限定符"></a>7. 使用资源限定符</h6><p>Android 支持多种配置限定符，可让您控制系统 如何根据当前设备屏幕的特性选择备用资源。配置限定符是可以附加到 Android 项目中资源目录的字符串，用于指定在其中设计资源的配置。</p><p>要使用配置限定符：</p><p>在项目的 res/ 目录中新建一个目录，并使用以下 格式命名： <resources_name>-<qualifier></qualifier></resources_name></p><p><resources_name> 是标准资源名称（例如 drawable 或 layout）。</resources_name></p><p><qualifier> 是下表 1 中的配置限定符，用于指定 要使用这些资源的屏幕配置（例如 hdpi 或 xlarge）。<br>您可以一次使用多个 <qualifier> — 只需使用短划线分隔每个 限定符。<br>将适当的配置特定资源保存在此新目录下。这些资源 文件的名称必须与默认资源文件完全一样。<br>例如，xlarge 是超大屏幕的配置限定符。将 此字符串附加到资源目录名称（例如 layout-xlarge）时，它指向 要在具有超大屏幕的设备上使用这些资源的系统。</qualifier></qualifier></p><p>表 1. 可用于为 不同屏幕配置提供特殊资源的配置限定符。</p><p><img src="/images/multi_screen/multi_screen_11.jpg" alt="multi_screen"></p><p>请注意，当 Android 系统在运行时选择使用哪些资源时，它会使用 特定逻辑确定“最佳匹配”资源。也就是说，您使用的限定符无 需在所有情况下精确匹配当前屏幕配置，系统也可 使用它们。特别是，根据屏幕尺寸限定符选择资源时，如果没有更好的匹配资源，则系统将 使用专为小于当前屏幕的屏幕而设计的 资源（例如，如有必要，大尺寸屏幕将使用标准尺寸的屏幕 资源）。但是，如果唯一可用的资源大于当前屏幕， 则系统不会使用这些资源，并且如果没有其他资源与设备 配置匹配，应用将会崩溃（例如，如果所有布局资源均用 xlarge 限定符标记， 但设备是标准尺寸的屏幕）</p><ul><li>使用尺寸限定符</li></ul><p>虽然这些布局可以拉伸组件内外的空间以适应各种屏幕，但它们不一定能为每种屏幕都提供最佳的用户体验。因此，我们的应用不仅仅只实施灵活布局，还应该应针对各种屏幕配置提供一些备用布局。</p><p>如何做到这一点呢？我们可以通过使用配置限定符，在运行时根据当前的设备配置自动选择合适的资源了，例如根据各种屏幕尺寸选择不同的布局。</p><p>很多应用会在较大的屏幕上实施“双面板”模式，即在一个面板上显示项目列表，而在另一面板上显示对应内容。平板电脑和电视的屏幕已经大到可以同时容纳这两个面板了，但手机屏幕就需要分别显示。因此，我们可以使用以下文件以便实施这些布局：</p><p>res/layout/main.xml，单面板（默认）布局：</p><p>res/layout-large/main.xml，双面板布局：</p><ul><li>使用最小宽度限定符</li></ul><p>最小宽度限定符可让您通过指定某个最小宽度（以 dp 为单位）来定位屏幕。例如，标准 7 英寸平板电脑的最小宽度为 600 dp，因此如果您要在此类屏幕上的用户界面中使用双面板（但在较小的屏幕上只显示列表），您可以使用上文中所述的单面板和双面板这两种布局，但您应使用 sw600dp 指明双面板布局仅适用于最小宽度为 600 dp 的屏幕，而不是使用 large 尺寸限定符。</p><p>res/layout-sw600dp/main.xml，双面板布局：  smallestWidth</p><p>也就是说，对于最小宽度大于等于 600 dp 的设备，系统会选择 layout-sw600dp/main.xml（双面板）布局，否则系统就会选择 layout/main.xml（单面板）布局。</p><ul><li>使用布局别名</li></ul><p>最小宽度限定符仅适用于 Android 3.2 及更高版本。因此，如果我们仍需使用与较低版本兼容的概括尺寸范围（小、正常、大和特大）。例如，如果要将用户界面设计成在手机上显示单面板，但在 7 英寸平板电脑、电视和其他较大的设备上显示多面板，那么我们就需要提供以下文件：</p><p>res/layout/main.xml: 单面板布局<br>res/layout-large: 多面板布局<br>res/layout-sw600dp: 多面板布局<br>后两个文件是相同的，因为其中一个用于和 Android 3.2 设备匹配，而另一个则是为使用较低版本 Android 的平板电脑和电视准备的。</p><p>要避免平板电脑和电视的文件出现重复（以及由此带来的维护问题），您可以使用别名文件。例如，您可以定义以下布局：</p><p>res/layout/main.xml，单面板布局<br>res/layout/main_twopanes.xml，双面板布局<br>然后添加这两个文件：</p><p>res/values-large/layout.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line">    &lt;item name=&quot;main_layout&quot; type=&quot;layout&quot;&gt;@layout/twopanes&lt;/item&gt;</div><div class="line">    &lt;bool name=&quot;has_two_panes&quot;&gt;true&lt;/bool&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure><p>res/values-sw600dp/layout.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line">    &lt;item name=&quot;main_layout&quot; type=&quot;layout&quot;&gt;@layout/twopanes&lt;/item&gt;</div><div class="line">    &lt;bool name=&quot;has_two_panes&quot;&gt;true&lt;/bool&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure><p>它们只是将 main 设置成了twopanes 的别名。</p><ul><li>使用屏幕方向限定符</li></ul><p>values-large-land values-large-port</p><h6 id="8-使用自动拉伸位图-9图"><a href="#8-使用自动拉伸位图-9图" class="headerlink" title="8. 使用自动拉伸位图 .9图"></a>8. 使用自动拉伸位图 .9图</h6><p>支持不同屏幕尺寸通常意味着您的图像资源也必须能够适应不同的尺寸。 例如，按钮背景必须能够适应其所应用到的任何一种按钮形状。</p><p>如果您在可能改变尺寸的组件上使用简单图像，您很快会发现效果有些差强人意，因为运行组件会均匀地拉伸或缩小您的图像。 解决方案是使用九宫格位图，这种特殊格式的 PNG 文件会指示哪些区域可以拉伸，哪些区域不可以拉伸。</p><p>因此，在设计将用于尺寸可变组件的位图时，请一律使用九宫格位图。</p><p><img src="/images/multi_screen/multi_screen_9.jpg" alt="multi_screen"></p><h6 id="9-使用矢量图"><a href="#9-使用矢量图" class="headerlink" title="9. 使用矢量图"></a>9. 使用矢量图</h6><p>SVG是指可伸缩矢量图形 (Scalable Vector Graphics)，它不同于传统的位图，不是通过存储图像中每一点的像素值来保存与使用图形，而是通过 XML 文件来定义一个图形，通过一些特定的语法和规则来绘制出我们所需的图像——同样是使用一张图片，SVG 的方式是事先定义好怎么去画这个图，然后等要用的时候再把它去画出来，而使用传统的位图的话就是已经有了画出来的图，然后要用的时候直接把画好的图拿出来用。这样一来的话我们就很容易可以分析出它们两种方式之间的优劣之处：</p><ul><li>SVG 是在要用图的时候再把图画出来，所以理所当然的在图片显示的时候会花费更多的时间消耗更多的资源。</li><li>同样由于上一个原因， SVG并不太适合层次过于复杂细节过于繁多的图片。</li><li>位图是事先已经画好的图片，所以适应性必然没有 SVG 好，同一张图片在不同分辨率下显示会有差异。</li><li>SVG 的文件里存储了绘制图片的相关信息，所以我们能够对图片的线条有一个非常清晰的感知，这在做动画的时候特别有用。</li><li>SVG 没有存储任何图像的像素信息，所以 SVG 的文件体积远小于传统的位图文件。</li><li>SVG 的文件画出来的图像是矢量图，所以不会存在失真的问题，理论上支持任何级别的缩放。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    defaultConfig &#123;</div><div class="line">        vectorDrawables.useSupportLibrary = true</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">dependencies &#123;</div><div class="line">  compile &apos;com.android.support:appcompat-v7:23.2.0&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="二、支持各种屏幕密度"><a href="#二、支持各种屏幕密度" class="headerlink" title="二、支持各种屏幕密度"></a>二、支持各种屏幕密度</h5><h6 id="1-使用非密度制约像素"><a href="#1-使用非密度制约像素" class="headerlink" title="1. 使用非密度制约像素"></a>1. 使用非密度制约像素</h6><p>由于各种屏幕的像素密度都有所不同，因此相同数量的像素在不同设备上的实际大小也有所差异，这样使用像素定义布局尺寸就会产生问题。因此，请务必使用 dp 或 sp 单位指定尺寸。</p><h6 id="2-提供备用图片资源"><a href="#2-提供备用图片资源" class="headerlink" title="2. 提供备用图片资源"></a>2. 提供备用图片资源</h6><p>由于运行 Android 的设备具有多种屏幕密度，您应始终提供能够根据各种通用密度级别（低密度、中密度、高密度和超高密度）进行定制的位图资源。这有助于您在所有屏幕密度上获得良好的图形质量和性能。</p><p>目标设备 xxhdpi</p><p>xxhdpi    jpg解码<br>bmp.width —- &gt; 1080<br>bmp.height —- &gt; 1920<br>bmp.rowBytes * bmp.height —- &gt; 4147200     4050KB</p><p>xhdpi  </p><p>bmp.width —- &gt; 1620              1.5<br>bmp.height —- &gt; 2880             1.5<br>bmp.rowBytes * bmp.height —- &gt; 9331200     2.25倍</p><p>hdpi   4倍</p><p>mdpi   9倍</p><p>基本上每个应用都应该具有不同密度的替代可绘制对象 资源，因为基本上每个应用都有启动器图标，而且该图标应该在 所有屏幕密度中看起来都很好。同样，如果您的应用中包含其他位图可绘制对象（例如 应用中的菜单图标或其他图形），则应该为不同密度提供替代版本或 每种密度一个版本。</p><p>默认情况下，Android 会缩放位图可绘制对象（.png、.jpg 和 .gif 文件）和九宫格可绘制对象（.9.png 文件），使它们以适当的 物理尺寸显示在每部设备上。例如，如果您的应用只为 基线中密度屏幕 (mdpi) 提供位图可绘制对象，则在高密度 屏幕上会增大位图，在低密度屏幕上会缩小位图。这种缩放可能在 位图中造成伪影。为确保位图的最佳显示效果，应针对 不同屏幕密度加入不同分辨率的替代版本。<br>可用于密度特定资源的配置限定符（在下面详述） 包括 ldpi（低）、mdpi（中）、 hdpi（高）、xhdpi（超高）、xxhdpi （超超高）和 xxxhdpi（超超超高）。例如，高密度屏幕的位图应使用 drawable-hdpi/。<br>注：仅当要在 xxhdpi 设备上提供比正常位图大的启动器图标时才需要提供 mipmap-xxxhdpi 限定符。无需为所有应用的图像提供 xxxhdpi 资源。</p><p>有些设备会将启动器图标增大 25%。例如，如果您的最高 密度启动器图标已是超超高密度，缩放处理会降低其 清晰度。因此应在 mipmap-xxxhdpi 目录中提供更高密度的启动器图标，系统将改为增大较小 的图标。<br>请参阅提供 xxx-高密度启动器图标以了解详细信息。对启动程序图标以外的 UI 元素不应使用 xxxhdpi 限定符。<br>注：将您的所有启动器图标放在 res/mipmap-[density]/ 文件夹中，而非 res/drawable-[density]/ 文件夹中。无论安装应用的设备屏幕分辨率如何，Android 系统都会将资源保留在这些密度特定的文件夹中，例如 mipmap-xxxhdpi。此 行为可让启动器应用为您的应用选择要显示在主 屏幕上的最佳分辨率图标。</p><p>尺寸和密度配置限定符对应于 前面支持的屏幕范围中所述的通用尺寸和密度。</p><p>在运行时，系统通过 以下程序确保任何给定资源在当前屏幕上都能保持尽可能最佳的显示效果：</p><ul><li><p>系统使用适当的备用资源</p><p>根据当前屏幕的尺寸和密度，系统将使用您的应用中提供的任何尺寸和 密度特定资源。例如，如果设备有 高密度屏幕，并且应用请求可绘制对象资源，系统将查找 与设备配置最匹配的可绘制对象资源目录。根据可用的其他 备用资源，包含 hdpi 限定符（例如 drawable-hdpi/）的资源目录可能是最佳匹配项，因此系统将使用此 目录中的可绘制对象资源。</p></li><li><p>如果没有匹配的资源，系统将使用默认资源，并按需要向上 或向下扩展，以匹配当前的屏幕尺寸和密度。</p></li></ul><p>“默认”资源是指未标记配置限定符的资源。例如，drawable/ 中的资源是默认可绘制资源。 系统假设默认资源设计用于基线屏幕尺寸和密度，即 正常屏幕尺寸和中密度。 因此，系统对于高密度屏幕向上扩展默认密度 资源，对于低密度屏幕向下扩展。<br>当系统查找密度特定的资源但在 密度特定目录中未找到时，不一定会使用默认资源。系统在缩放时可能 改用其他密度特定资源提供更好的 效果。例如，查找低密度资源但该资源不可用时， 系统会缩小资源的高密度版本，因为 系统可轻松以 0.5 为系数将高密度资源缩小至低密度资源，与以 0.75 为系数 缩小中密度资源相比，伪影更少。<br>如需有关 Android 如何通过使配置限定符与设备配置匹配来选择备用资源的更多信息，请参阅Android 如何查找最佳匹配资源。</p><h5 id="三、实施自适应用户界面流程"><a href="#三、实施自适应用户界面流程" class="headerlink" title="三、实施自适应用户界面流程"></a>三、实施自适应用户界面流程</h5><p>UI 流可能视您的应用当前显示的布局而有所不同。例如，如果您的应用处于双窗格模式，点击左侧窗格中的某个项目会直接在右侧窗格中显示内容；如果是处于单窗格模式，内容应该会独立显示（在不同的 Activity 中）。</p><ul><li>确定当前布局</li></ul><p>由于您对每个布局的实现都略有差异，您需要优先完成的一项工作可能是确定用户目前查看的布局。 例如，您可能想了解用户是处于“单窗格”模式还是“双窗格”模式。 您可以通过查询给定视图是否存在并且是否可见来实现此目的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsReaderActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>&#123;    </div><div class="line"></div><div class="line">    <span class="comment">// 标记当前面板类型    </span></div><div class="line">    <span class="keyword">boolean</span> mIsDualPane;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.main_layout);</div><div class="line">        </div><div class="line">        View articleView = findViewById(R.id.article);</div><div class="line">        mIsDualPane = articleView != <span class="keyword">null</span> &amp;&amp;</div><div class="line">                        articleView.getVisibility() == View.VISIBLE;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>请注意，这段代码用于查询“article”面板是否可用，与针对具体布局的硬编码查询相比，这段代码的灵活性要大得多。</p><ul><li>根据当前布局作出反应</li></ul><p>某些操作可能视当前布局而有不同的结果。例如，在 News Reader 示例应用中，如果 UI 处于双窗格模式，则点击标题列表中的某个标题会在右侧窗格中打开该文章，但如果 UI 处于单窗格模式，则会启动不同的 Activity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onHeadlineSelected</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">    mArtIndex = index;</div><div class="line">    <span class="keyword">if</span> (mIsDualPane) &#123;</div><div class="line">        <span class="comment">/* display article on the right pane */</span></div><div class="line">        mArticleFragment.displayArticle(mCurrentCat.getArticle(index));</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">/* start a separate activity */</span></div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ArticleActivity.class);</div><div class="line">        intent.putExtra(<span class="string">"catIndex"</span>, mCatIndex);</div><div class="line">        intent.putExtra(<span class="string">"artIndex"</span>, index);</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>在其他 Activity 中重复使用 Fragment</li></ul><p>在面向多种屏幕的设计中采用的一种固定模式是，让界面的某一部分在一些屏幕配置下以窗格形式实现，在其他配置下则以一个单独 Activity 的形式实现。 例如，在 News Reader 示例应用中，新闻文章文字在较大屏幕上显示在右侧窗格中，但在较小屏幕上则显示在一个单独的 Activity 内。</p><p>在这类情况下，您通常可以通过在几个 Activity 中重复使用同一 Fragment 子类来避免代码重复。例如，双窗格布局中使用了 ArticleFragment：</p><p>并在适用于较小屏幕的 Activity 布局 (ArticleActivity) 中重复使用ArticleFragment</p><ul><li>处理屏幕配置变更</li></ul><p>如果您要使用不同的 Activity 来实现界面的不同部分，您需要牢记的是，可能需要对某些配置变更（如旋转变化）作出反应，以便保持界面的一致性。</p><p>例如，在一台运行 Android 3.0 或更高版本的典型 7 英寸平板电脑上，当平板电脑在纵向模式下运行时，News Reader 示例应用使用单独的 Activity 来显示新闻文章，但在横向模式下则使用双窗格布局。</p><p>这意味着当用户处于纵向模式，并且用于查看文章的 Activity 位于屏幕上时，您需要检测屏幕方向已变为横向模式的情况并作出相应的反应：结束该 Activity 并返回主 Activity，以便内容可以显示在双窗格布局中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> mCatIndex, mArtIndex;</div><div class="line">        </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        mCatIndex = getIntent().getExtras().getInt(<span class="string">"catIndex"</span>, <span class="number">0</span>);</div><div class="line">        mArtIndex = getIntent().getExtras().getInt(<span class="string">"artIndex"</span>, <span class="number">0</span>);</div><div class="line"></div><div class="line">        <span class="comment">// If should be in two-pane mode, finish to return to main activity</span></div><div class="line">        <span class="keyword">if</span> (getResources().getBoolean(R.bool.has_two_panes)) &#123;</div><div class="line">            finish();</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="最佳做法"><a href="#最佳做法" class="headerlink" title="最佳做法"></a>最佳做法</h4><h5 id="1-对布局尺寸使用-wrap-content、match-parent-或-dp-单位"><a href="#1-对布局尺寸使用-wrap-content、match-parent-或-dp-单位" class="headerlink" title="1. 对布局尺寸使用 wrap_content、match_parent 或 dp 单位"></a>1. 对布局尺寸使用 wrap_content、match_parent 或 dp 单位</h5><p>为 XML 布局文件中的视图定义 android:layout_width 和 android:layout_height 时，使用 “wrap_content”、 “match_parent” 或 dp 单位可确保在当前设备屏幕上为 视图提供适当的尺寸。</p><p>例如，layout_width=”100dp” 的视图在 中密度屏幕上测出宽度为 100 像素，在高密度屏幕上系统会将其扩展至 150 像素宽， 因此视图在屏幕上占用的物理空间大约相同。</p><p>类似地，您应选择 sp（缩放独立的像素）来定义文本 大小。sp 缩放系数取决于用户设置，系统 会像处理 dp 一样缩放大小。</p><h5 id="2-不要在应用代码中使用硬编码的像素值"><a href="#2-不要在应用代码中使用硬编码的像素值" class="headerlink" title="2. 不要在应用代码中使用硬编码的像素值"></a>2. 不要在应用代码中使用硬编码的像素值</h5><p>由于性能的原因和简化代码的需要，Android 系统使用像素作为 表示尺寸或坐标值的标准单位。这意味着， 视图的尺寸在代码中始终以像素表示，但始终基于当前的屏幕密度。 例如，如果 myView.getWidth() 返回 10，则表示视图在 当前屏幕上为 10 像素宽，但在更高密度的屏幕上，返回的值可能是 15。如果 在应用代码中使用像素值来处理预先未针对 当前屏幕密度缩放的位图，您可能需要缩放代码中使用的像素值，以与 未缩放的位图来源匹配。</p><p>如果应用在运行时操作位图或处理像素值，请参阅 下面有关其他密度注意事项的一节。</p><h5 id="3-使用RelativeLayout、ConstraintLayout等"><a href="#3-使用RelativeLayout、ConstraintLayout等" class="headerlink" title="3. 使用RelativeLayout、ConstraintLayout等"></a>3. 使用RelativeLayout、ConstraintLayout等</h5><p>与其他布局小工具不同，AbsoluteLayout 会强制 使用固定位置放置其子视图，很容易导致 在不同显示屏上显示效果不好的用户界面。因此，AbsoluteLayout 在 Android 1.5（API 级别 3）上便已弃用。</p><p>您应改用 RelativeLayout，它会使用相对定位 来放置其子视图。例如，您可以指定按钮小部件显示在文本小工具的“右边”。</p><h5 id="4-使用尺寸和密度特定资源"><a href="#4-使用尺寸和密度特定资源" class="headerlink" title="4. 使用尺寸和密度特定资源"></a>4. 使用尺寸和密度特定资源</h5><h5 id="5-为不同屏幕密度提供替代位图可绘制对象"><a href="#5-为不同屏幕密度提供替代位图可绘制对象" class="headerlink" title="5. 为不同屏幕密度提供替代位图可绘制对象"></a>5. 为不同屏幕密度提供替代位图可绘制对象</h5><p>虽然系统会根据当前屏幕 配置扩展布局，但您在不同的屏幕尺寸上可能要调整 UI，以及提供 针对不同密度优化的可绘制对象。这基本上是重申 本文档前面的信息。</p><p>如果需要精确控制应用在不同 屏幕配置上的外观，请在配置特定的 资源目录中调整您的布局和位图可绘制对象。例如，考虑要显示在 中密度和高密度屏幕上的图标。只需创建两种不同大小的图标 （例如中密度使用 100x100，高密度使用 150x150），然后使用适当的限定符 以适当的方向放置两个 变体：</p><p>res/drawable-mdpi/icon.png   //for medium-density screens<br>res/drawable-hdpi/icon.png   //for high-density screens<br>注：如果密度限定符在目录名称中未定义， 系统会假设该目录中的资源是针对基线中 密度而设计，对于其他密度将会适当地缩放。</p><h5 id="6-动态自适应用户界面"><a href="#6-动态自适应用户界面" class="headerlink" title="6. 动态自适应用户界面"></a>6. 动态自适应用户界面</h5><h4 id="其他密度注意事项"><a href="#其他密度注意事项" class="headerlink" title="其他密度注意事项"></a>其他密度注意事项</h4><p>本节详细说明 Android 如何在不同 屏幕密度上对位图可绘制对象执行缩放，以及如何进一步控制在不同密度屏幕上位图的绘制。 本节信息对大多数应用应该不怎么重要，除非您的 应用在不同屏幕密度上运行或 操控图形时遇到了问题。</p><p>为更好地了解在运行时 操控图形时如何支持多种密度，您应该先了解，系统通过以下方式帮助确保正确 缩放位图：</p><h5 id="1-资源（例如位图可绘制对象）的预缩放"><a href="#1-资源（例如位图可绘制对象）的预缩放" class="headerlink" title="1. 资源（例如位图可绘制对象）的预缩放"></a>1. 资源（例如位图可绘制对象）的预缩放</h5><p>根据当前屏幕的密度，系统将使用您的应用中提供的任何尺寸或 密度特定资源，并且不加缩放而显示它们。如果没有可用于正确密度 的资源，系统将加载默认资源，并按需要向上或向下扩展，以 匹配当前屏幕的密度。系统假设默认资源（ 没有配置限定符的目录中的资源）针对基线屏幕密度 (mdpi) 而设计， 除非它们加载自密度特定的资源目录。因此，系统 会执行预缩放，以将位图调整至适应当前屏幕 密度的大小。<br>如果您请求预缩放的资源的尺寸，系统将返回 代表缩放后尺寸的值。例如，针对 mdpi 屏幕以 50x50 像素 设计的位图在 hdpi 屏幕上将扩展至 75x75 像素（如果没有 用于 hdpi 的备用资源），并且系统会这样报告大小。<br>有时您可能不希望 Android 预缩放 资源。避免预缩放最简单的方法是将资源放在 有 nodpi 配置限定符的资源目录中。例如：<br>res/drawable-nodpi/icon.png<br>当系统使用此文件夹中的 icon.png 位图时，不会 根据当前设备密度缩放。</p><h5 id="2-像素尺寸和坐标的自动缩放"><a href="#2-像素尺寸和坐标的自动缩放" class="headerlink" title="2. 像素尺寸和坐标的自动缩放"></a>2. 像素尺寸和坐标的自动缩放</h5><p>应用可通过在清单中将 android:anyDensity 设置为 “false” 或者通过将 inScaled 设置为 “false” 对 Bitmap 编程来停用预缩放。在此情况下，系统在绘制时会自动缩放任何绝对的像素坐标和像素 尺寸值。缩放的目的是确保像素定义的屏幕元素仍 以它们在基线屏幕密度 (mdpi) 下的大致相同物理尺寸显示。系统会对应用透明地处理此缩放，并且 向应用报告缩放后的像素尺寸，而不是物理像素尺寸。<br>例如，假设设备具有 480x800 的 WVGA 高密度屏幕，大约 与传统 HVGA 屏幕的尺寸一样，但它运行的应用停用了 预缩放。在此情况下，系统在查询屏幕尺寸时会对应用“撒谎” ，报告 320x533（屏幕密度的近似 mdpi 转换值）。然后，当 应用执行绘制操作时，例如作废从 (10,10) 到 (100, 100) 的矩形，系统会将它们缩放适当的量以转变坐标，并且实际 作废区域 (15,15) 到 (150, 150)。如果应用直接操控缩放的位图， 此差异可能会导致非预期的行为，但这被视为 确保应用最佳性能所需的合理权衡。如果遇到此 情况，请参阅将 dp 单位转换为像素 单位一节。<br>通常，不应停用预缩放。支持多种 屏幕的最佳方法是采用上面如何支持 多种屏幕中所述的基本技术。<br>如果您的应用操控位图或以某种其他方式直接与 屏幕上的像素交互，您可能需要采取其他步骤支持不同的屏幕密度。例 如，如果您通过计算手指滑过的像素数 来响应触控手势，则需使用适当的密度独立像素值，而不是实际 像素。</p><h5 id="3-缩放运行时创建的位图对象"><a href="#3-缩放运行时创建的位图对象" class="headerlink" title="3.缩放运行时创建的位图对象"></a>3.缩放运行时创建的位图对象</h5><p>如果您的应用创建内存中位图（Bitmap 对象）， 系统在默认情况下假设位图是针对基线中密度屏幕而设计，然后 在绘制时自动缩放位图。当位图具有不明的密度属性时，系统会对 Bitmap 应用“自动缩放”。如果未正确 考虑当前设备的屏幕密度和指定位图的密度属性， 自动缩放可能导致缩放伪影，就像未提供备用资源一样。</p><h5 id="4-将-dp-单位转换为像素单位"><a href="#4-将-dp-单位转换为像素单位" class="headerlink" title="4.将 dp 单位转换为像素单位"></a>4.将 dp 单位转换为像素单位</h5><p>在某些情况下，您需要以 dp 表示尺寸，然后将它们转换为 像素。设想一个在用户 手指移动至少 16 像素之后可以识别滚动或滑动手势的应用。在基线屏幕上，用户必须移动 16 pixels / 160 dpi（等于一英寸的 1/10 或 2.5 毫米），然后才会识别该手势。在 具有高密度显示屏 (240dpi) 的设备上，用户必须移动 16 pixels / 240 dpi（等于 一英寸的 1/15 或 1.7 毫米）。此距离更短，应用因此 似乎对用户更灵敏。<br>要修复此问题，手势阈值必须在代码中以 dp 表示，然后 转换为实际像素。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://developer.android.com/about/dashboards/index.html#Screens" target="_blank" rel="external">Android屏幕尺寸和密度</a><br><a href="https://developer.android.com/training/multi_screen/index.html" target="_blank" rel="external">针对Android多种屏幕的设计</a><br><a href="https://developer.android.com/guide/practices/screens_support.html" target="_blank" rel="external">支持多种屏幕</a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 布局 </tag>
            
            <tag> 分辨率 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android界面性能调优手册(1)</title>
      <link href="/2017/11/06/2017-11-06-Android%E7%95%8C%E9%9D%A2%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E6%89%8B%E5%86%8C(1)/"/>
      <url>/2017/11/06/2017-11-06-Android%E7%95%8C%E9%9D%A2%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E6%89%8B%E5%86%8C(1)/</url>
      <content type="html"><![CDATA[<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>界面是 Android 应用中直接影响用户体验最关键的部分。如果代码实现得不好，界面容易发生卡顿且导致应用占用大量内存。<br><a id="more"></a></p><h4 id="Android渲染知识"><a href="#Android渲染知识" class="headerlink" title="Android渲染知识"></a>Android渲染知识</h4><h5 id="1-1-绘制原理"><a href="#1-1-绘制原理" class="headerlink" title="1.1 绘制原理"></a>1.1 绘制原理</h5><p>Android系统要求每一帧都要在 16ms 内绘制完成，平滑的完成一帧意味着任何特殊的帧需要执行所有的渲染代码（包括 framework 发送给 GPU 和 CPU 绘制到缓冲区的命令）都要在 16ms 内完成，保持流畅的体验。这个速度允许系统在动画和输入事件的过程中以约 60 帧每秒（ 1秒 / 0.016帧每秒 = 62.5帧/秒 ）的平滑帧率来渲染。<br><img src="/images/draw/draw_1.png" alt="draw"></p><p>如果你的应用没有在 16ms 内完成这一帧的绘制，假设你花了 24ms 来绘制这一帧，那么就会出现掉帧的情况。<br><img src="/images/draw/draw_2.png" alt="draw"></p><p>系统准备将新的一帧绘制到屏幕上，但是这一帧并没有准备好，所有就不会有绘制操作，画面也就不会刷新。反馈到用户身上，就是用户盯着同一张图看了 32ms 而不是 16ms ，也就是说掉帧发生了。</p><h5 id="1-2-掉帧"><a href="#1-2-掉帧" class="headerlink" title="1.2 掉帧"></a>1.2 掉帧</h5><p>掉帧是用户体验中一个非常核心的问题。丢弃了当前帧，并且之后不能够延续之前的帧率，这种不连续的间隔会容易会引起用户的注意，也就是我们常说的卡顿、不流畅。</p><p>引起掉帧的原因非常多，比如：</p><ul><li><p>花了非常多时间重新绘制界面中的大部分东西，这样非常浪费CPU周期；<br><img src="/images/draw/draw_3.png" alt="draw"></p></li><li><p>过度绘制严重，在绘制用户看不到的对象上花费了太多的时间</p></li><li><p>有一大堆动画重复了一遍又一遍，消耗 CPU 、 GPU 资源；</p></li><li><p>频繁的触发垃圾回收；</p></li></ul><h5 id="1-3-为什么是60Fps？"><a href="#1-3-为什么是60Fps？" class="headerlink" title="1.3 为什么是60Fps？"></a>1.3 为什么是60Fps？</h5><p>Android系统要求每一帧都要在 16ms 内绘制完成，那么1秒的帧率就是约 60 帧每秒（ 1秒 / 0.016帧每秒 = 62.5帧/秒 ），那为什么要以 60 Fps来作为 App 性能的衡量标准呢？这是因为人眼和大脑之间的协作无法感知到超过 60 Fps的画面更新。</p><p>市面上绝大多数Android设备的屏幕刷新频率是 60 HZ。当然，超过 60 Fps 是没有意义的，人眼感知不到区别。24 Fps 是人眼能感知的连续线性的运动，所以是电影胶圈的常用帧率，因为这个帧率已经足够支撑大部分电影画面所要表达的内容，同时能最大限度地减少费用支出。但是，低于 30 Fps 是无法顺畅表现绚丽的画面内容的，此时就需要用到 60 Fps 来达到想要表达的效果。</p><p>应用的界面性能目标就是保持 60 Fps，这意味着每一帧你只有 16 ms（1秒 / 60帧率）的时间来处理所有的任务。</p><h5 id="1-4-垃圾回收"><a href="#1-4-垃圾回收" class="headerlink" title="1.4 垃圾回收"></a>1.4 垃圾回收</h5><p>垃圾回收器是一个在应用运行期间自动释放那些不再引用的内存的机制，常称 GC 。频繁的 GC 也是导致严重性能问题的罪魁祸首之一。<br>前面提到，平滑的完成一帧意味着所有渲染代码都必须在 16ms 内完成。频繁的 GC 会严重限制一帧时间内的剩余时间，如果 GC 所做的工作超过了那些必须的工作，那么留给应用平滑的帧率的时间就越少。越接近 16ms ，在垃圾回收事件触发的时候，就越容易导致卡顿。</p><p>注意，Android4.4 引进了新的 ART 虚拟机来取代 Dalvik 虚拟机。它们的机制大有不同，简单而言：</p><ul><li>Dalvik 虚拟机的 GC 是非常耗资源的，并且在正常的情况下一个硬件性能不错的Android设备也会很容易耗费掉 10 – 20 ms 的时间；</li><li>ART 虚拟机的GC会动态提升垃圾回收的效率，在 ART 中的中断，通常在 2 – 3 ms 间。 比 Dalvik 虚拟机有很大的性能提升；<br>ART 虚拟机相对于 Dalvik 虚拟机来说的垃圾回收来说有一个很大的性能提升，但 2 – 3 ms 的回收时间对于超过16ms帧率的界限也是足够的。因此，尽管垃圾回收在 Android 5.0 之后不再是耗资源的行为，但也是始终需要尽可能避免的，特别是在执行动画的情况下，可能会导致一些让用户明显感觉的丢帧。 </li></ul><h5 id="1-5-UI-线程"><a href="#1-5-UI-线程" class="headerlink" title="1.5 UI 线程"></a>1.5 UI 线程</h5><p>UI 线程是应用的主线程，很多的性能和卡顿问题是由于我们在主线程中做了大量的工作。<br>所以，所有耗资源的操作，比如 IO 操作、网络操作、SQL 操作、列表刷新等，都应该用后台进程去实现，不能占用主线程，主线程是 UI 线程，是保持程序流畅的关键；<br>在 Android 5.0 版本里，Android 框架层引入了 “ Render Thread ” ，用于向 GPU 发送实际渲染的操作。这个线程减轻了一些 UI 线程减少的操作。但是输入、滚动和动画仍然在 UI thread，因为 Thread 必须能够响应操作。</p><h5 id="1-6-垂直同步"><a href="#1-6-垂直同步" class="headerlink" title="1.6 垂直同步"></a>1.6 垂直同步</h5><p>垂直同步是 Android4.1 通过 Project Butter 在 UI 架构中引入的新技术，同期引入的还有 Triple Buffer 和 HWComposer 等技术，都是为提高 UI 的流畅性而生。</p><p>举个例子，你拍了一张照片，然后旋转5度再拍另外一张照片，将两照片的中间剪开并拼接在一起，得到下图：<br>中间这部分有明显区别的部分，等价于设备刷新率和帧速率不一致的结果。</p><p>一般而言， GPU 的帧速率应高于刷新率，才不会卡顿或掉帧。如果屏幕刷新率比帧速率还快，屏幕会在两帧中显示同一个画面，这种断断续续情况持续发生时，用户将会很明显地感觉到动画的卡顿或者掉帧，然后又恢复正常，我们常称之为闪屏、跳帧、延迟。应用应避免这些帧率下降的情况，以确保 GPU 能在屏幕刷新之前完成数据的获取及写入，保证动画流畅。</p><h5 id="1-7-UI-绘制机制与栅格化"><a href="#1-7-UI-绘制机制与栅格化" class="headerlink" title="1.7 UI 绘制机制与栅格化"></a>1.7 UI 绘制机制与栅格化</h5><p>绝大多数渲染操作都依赖两个硬件： CPU 、 GPU 。 CPU 负责 Measure 、 layout 、 Record 、 Execute 的计算操作， GPU 负责栅格化（ Rasterization ）操作。 非必需的视图组件会带来多余的 CPU 计算操作，还会占用多余的 GPU 资源。</p><p>栅格化（ Rasterization ）能将 Button 、 Shape 、 Path 、 Bitmap 等资源组件拆分到不同的像素上进行显示。这个操作很费时，所以引入了 GPU 来加快栅格化的操作。</p><p>CPU 负责把 UI 组件计算成多边形（ Polygons ），纹理（ Texture ），然后交给 GPU 进行栅格化渲染，再将处理结果传到屏幕上显示</p><p>在 Android 里的那些资源组件的显示（比如 Bitmaps 、 Drawable ），都是一起打包到统一的纹理（ Texture ）当中，然后再传递到 GPU 里面。</p><p>图片的显示，则是先经过 CPU 的计算加载到内存中，再传给 GPU 进行渲染。文字的显示，则是先经过 CPU 换算成纹理（ Texture ），再传给 GPU 进行渲染，返回到 CPU 绘制单个字符的时候，再重新引用经过 GPU 渲染的内容。动画的显示更加复杂，我们需要在 16 ms 内处理完所有 CPU 和 GPU 的计算、绘制、渲染等操作，才能获得应用的流畅体验。</p><h4 id="二-To检测和解决"><a href="#二-To检测和解决" class="headerlink" title="二. To检测和解决"></a>二. To检测和解决</h4><h5 id="2-1-检测维度"><a href="#2-1-检测维度" class="headerlink" title="2.1 检测维度"></a>2.1 检测维度</h5><p>根据业务的不同与所需要的测试粒度的不同，就会有不同的检测维度。目前我所在业务所需的界面性能检测维度如下：</p><ul><li>界面过度绘制；（检测过度绘制）</li><li>渲染性能；（检测严格模式下的UI渲染性能呈现）</li><li>布局边界合理性；（检测元素显示的合理性）</li><li>还有专项测试中某些用户场景可能还包含着另外一些隐形的检测维度，比如：</li><li>OpenGL 跟踪分析；</li><li>GPU 视图更新合理性；</li><li>Flash 硬件层更新合理性；</li><li>动画加 / 减速状态问题点检测；</li><li>……</li></ul><h5 id="2-2-调试工具"><a href="#2-2-调试工具" class="headerlink" title="2.2 调试工具"></a>2.2 调试工具</h5><p>检测和解决界面性能问题很大程度上依赖于你的应用程序架构，幸运的是，Andorid 提供了很多调试工具，知道并学会使用这些工具很重要，它们可以帮助我们调试和分析界面性能问题，以让应用拥有更好的性能体验。下面列举Android常见的界面性能调试工具：</p><h6 id="2-2-1-Hierarchy-View"><a href="#2-2-1-Hierarchy-View" class="headerlink" title="2.2.1  Hierarchy View"></a>2.2.1  Hierarchy View</h6><p>Hierarchy View 在Android SDK里自带，常用来查看界面的视图结构是否过于复杂，用于了解哪些视图过度绘制，又该如何进行改进</p><h6 id="2-2-2-Lint"><a href="#2-2-2-Lint" class="headerlink" title="2.2.2 Lint"></a>2.2.2 Lint</h6><p>Lint 是 ADT 自带的静态代码扫描工具，可以给 XML 布局文件和 项目代码中不合理的或存在风险的模块提出改善性建议。官方关于 Lint 的实际使用的提示，列举几点如下：</p><ul><li>包含无用的分支，建议去除；</li><li>包含无用的父控件，建议去除；</li><li>警告该布局深度过深；</li><li>建议使用 compound drawables ；</li><li>建议使用 merge 标签</li><li>……</li></ul><h6 id="2-2-3-Systrace"><a href="#2-2-3-Systrace" class="headerlink" title="2.2.3 Systrace"></a>2.2.3 Systrace</h6><p> Systrace 在Android DDMS 里自带，可以用来跟踪 graphics 、view 和 window 的信息，发现一些深层次的问题。很麻烦，限制大，实际调试中我基本用不到。</p><h6 id="2-2-4-Track"><a href="#2-2-4-Track" class="headerlink" title="2.2.4 Track"></a>2.2.4 Track</h6><p> Track 在 Android DDMS里自带，是个很棒的用来跟踪构造视图的时候哪些方法费时，精确到每一个函数，无论是应用函数还是系统函数，我们可以很容易地看到掉帧的地方以及那一帧所有函数的调用情况，找出问题点进行优化。</p><h6 id="2-2-5-OverDraw"><a href="#2-2-5-OverDraw" class="headerlink" title="2.2.5 OverDraw"></a>2.2.5 OverDraw</h6><p> 通过在 Android 设备的设置 APP 的开发者选项里打开 “ 调试 GPU 过度绘制 ” ，来查看应用所有界面及分支界面下的过度绘制情况，方便进行优化。</p><h6 id="2-2-6-GPU-呈现模式分析"><a href="#2-2-6-GPU-呈现模式分析" class="headerlink" title="2.2.6 GPU 呈现模式分析"></a>2.2.6 GPU 呈现模式分析</h6><p>通过在 Android 设备的设置 APP 的开发者选项里启动 “ GPU 呈现模式分析 ” ，可以得到最近 128 帧 每一帧渲染的时间，分析性能渲染的性能及性能瓶颈。</p><h6 id="2-2-7-StrictMode"><a href="#2-2-7-StrictMode" class="headerlink" title="2.2.7 StrictMode　　"></a>2.2.7 StrictMode　　</h6><p>通过在 Android 设备的设置 APP 的开发者选项里启动 “ 严格模式 ” ，来查看应用哪些操作在主线程上执行时间过长。当一些操作违背了严格模式时屏幕的四周边界会闪烁红色，同时输出 StrictMode 的相关信息到 LOGCAT 日志中。</p><h6 id="2-2-8-Animator-duration-scale"><a href="#2-2-8-Animator-duration-scale" class="headerlink" title="2.2.8 Animator duration scale　　"></a>2.2.8 Animator duration scale　　</h6><p>通过在 Android 设备的设置 APP 的开发者选项里打开 “ 窗口动画缩放 ” / “ 过渡动画缩放 ” / “ 动画程序时长缩放 ”，来加速或减慢动画的时间，以查看加速或减慢状态下的动画是否会有问题。</p><h5 id="2-3-如何解决"><a href="#2-3-如何解决" class="headerlink" title="2.3 如何解决　　"></a>2.3 如何解决　　</h5><p>前面提到过我司的目前所需的测试维度如下：</p><ul><li>界面过度绘制；（检测过度绘制）</li><li>渲染性能；（检测严格模式下的UI渲染性能呈现） 故接下来将围绕这两点，分别从概念、追踪、挖掘根源以及排查的工具来具体讲述如何解决，以及给开发的优化建议。</li></ul><h4 id="三-界面过度绘制（OverDraw）"><a href="#三-界面过度绘制（OverDraw）" class="headerlink" title="三. 界面过度绘制（OverDraw）"></a>三. 界面过度绘制（OverDraw）</h4><h5 id="3-1-过度绘制概念"><a href="#3-1-过度绘制概念" class="headerlink" title="3.1 过度绘制概念"></a>3.1 过度绘制概念</h5><p>过度绘制是一个术语，表示某些组件在屏幕上的一个像素点的绘制次数超过 1 次。</p><p>通俗来讲，绘制界面可以类比成一个涂鸦客涂鸦墙壁，涂鸦是一件工作量很大的事情，墙面的每个点在涂鸦过程中可能被涂了各种各样的颜色，但最终呈现的颜色却只可能是 1 种。这意味着我们花大力气涂鸦过程中那些非最终呈现的颜色对路人是不可见的，是一种对时间、精力和资源的浪费，存在很大的改善空间。绘制界面同理，花了太多的时间去绘制那些堆叠在下面的、用户看不到的东西，这样是在浪费CPU周期和渲染时间！</p><p>官方例子，被用户激活的卡片在最上面,而那些没有激活的卡片在下面，在绘制用户看不到的对象上花费了太多的时间。</p><h5 id="3-2-追踪过度绘制"><a href="#3-2-追踪过度绘制" class="headerlink" title="3.2 追踪过度绘制"></a>3.2 追踪过度绘制</h5><p>通过在 Android 设备的设置 APP 的开发者选项里打开 “ 调试 GPU 过度绘制 ” ，来查看应用所有界面及分支界面下的过度绘制情况，方便进行优化。</p><p>Android 会在屏幕上显示不同深浅的颜色来表示过度绘制：</p><ul><li>没颜色：没有过度绘制，即一个像素点绘制了 1 次，显示应用本来的颜色；</li><li>蓝色：1倍过度绘制，即一个像素点绘制了 2 次；</li><li>绿色：2倍过度绘制，即一个像素点绘制了 3 次；</li><li>浅红色：3倍过度绘制，即一个像素点绘制了 4 次；</li><li>深红色：4倍过度绘制及以上，即一个像素点绘制了 5 次及以上； 设备的硬件性能是有限的，当过度绘制导致应用需要消耗更多资源（超过了可用资源）的时候性能就会降低，表现为卡顿、不流畅、ANR 等。为了最大限度地提高应用的性能和体验，就需要尽可能地减少过度绘制，即更多的蓝色色块而不是红色色块。 　　<br>实际测试，常用以下两点来作为过度绘制的测试指标，将过度绘制控制在一个约定好的合理范围内：</li><li>应用所有界面以及分支界面均不存在超过4X过度绘制（深红色区域）；</li><li>应用所有界面以及分支界面下，3X过度绘制总面积（浅红色区域）不超过屏幕可视区域的1/4；</li></ul><h5 id="3-3-过度绘制的根源"><a href="#3-3-过度绘制的根源" class="headerlink" title="3.3 过度绘制的根源"></a>3.3 过度绘制的根源</h5><p>过度绘制很大程度上来自于视图相互重叠的问题，其次还有不必要的背景重叠。</p><p>官方例子，比如一个应用所有的View都有背景的话，就会看起来像第一张图中那样，而在去除这些不必要的背景之后（指的是Window的默认背景、Layout的背景、文字以及图片的可能存在的背景），效果就像第二张图那样，基本没有过度绘制的情况。</p><h5 id="3-4-不合理的xml布局对绘制的影响"><a href="#3-4-不合理的xml布局对绘制的影响" class="headerlink" title="3.4 不合理的xml布局对绘制的影响"></a>3.4 不合理的xml布局对绘制的影响</h5><p>当布局文件的节点树的深度越深，XML 中的标签和属性设置越多，对界面的显示有灾难性影响。</p><p>一个界面要显示出来，第一步会进行解析布局，在 requestLayout 之后还要进行一系列的 measure 、 layout 、 draw 操作，若布局文件嵌套过深、拥有的标签属性过于臃肿，每一步的执行时间都会受到影响，而界面的显示是进行完这些操作后才会显示的，所以每一步操作的时间增长，最终显示的时间就会越长。</p><h5 id="3-5-源码相关"><a href="#3-5-源码相关" class="headerlink" title="3.5 源码相关"></a>3.5 源码相关</h5><p>有能力且有兴趣看源码的童鞋，过度绘制的源码位置在: /frameworks/base/libs/hwui/OpenGLRenderer.cpp ，有兴趣的可以去研究查看。</p><h4 id="四-渲染性能（Rendering）"><a href="#四-渲染性能（Rendering）" class="headerlink" title="四. 渲染性能（Rendering）"></a>四. 渲染性能（Rendering）</h4><h5 id="4-1-渲染性能概念"><a href="#4-1-渲染性能概念" class="headerlink" title="4.1 渲染性能概念"></a>4.1 渲染性能概念</h5><p>渲染性能往往是掉帧的罪魁祸首，这种问题很常见，让人头疼。好在 Android 给我们提供了一个强大的工具，帮助我们非常容易追踪性能渲染问题，看到究竟是什么导致你的应用出现卡顿、掉帧。</p><h5 id="4-2-追踪渲染性能"><a href="#4-2-追踪渲染性能" class="headerlink" title="4.2 追踪渲染性能"></a>4.2 追踪渲染性能</h5><p>通过在 Android 设备的设置 APP 的开发者选项里打开 “ GPU 呈现模式分析 ” 选项，选择 ” 在屏幕上显示为条形图 “ 。</p><p>这个工具会在Android 设备的屏幕上实时显示当前界面的最近 128 帧 的 GPU 绘制图形数据，包括 StatusBar 、 NavBar 、 当前界面的 GPU 绘制图形柱状图数据。我们一般只需关心当前界面的 GPU 绘制图形数据即可。</p><p>界面上一共有 128 个小柱状图，代表的是当前界面最近的 128 帧 GPU 绘制图形数据。一个小柱状图代表的这一帧画面渲染的耗时，柱状图越高代表耗时越长。随着界面的刷新，柱状图信息也会实时滚动刷新。</p><p>中间有一条绿线，代表 16 ms ，保持动画流畅的关键就在于让这些垂直的柱状条尽可能地保持在绿线下面,任何时候超过绿线,你就有可能丢失一帧的内容。</p><p>每一个柱状图都是由三种颜色构成：蓝、红、黄。</p><ul><li>蓝色代表的是这一帧绘制 Display List 的时间。通俗来说，就是记录了需要花费多长时间在屏幕上更新视图。用代码语言来说，就是执行视图的 onDraw 方法，创建或更新每一个视图的 Display List 的时间。</li><li>红色代表的是这一帧 OpenGL 渲染 Display List 所需要的时间。通俗来说，就是记录了执行视图绘制的耗时。用代码语言来说，就是 Android 用 OpenGL ES 的 API 接口进行 2D 渲染 Display List 的时间。</li><li>黄色代表的是这一帧 CPU 等待 GPU 处理的时间。通俗来说，就是 CPU 等待 GPU 发出接到命令的回复的等待时间。用代码语言来说，就是这是一个阻塞调用。 　　<br>实际测试，常用以下两点来作为渲染性能的测试指标，将渲染性能控制在一个约定好的合理范围内：</li><li>执行应用的所有功能及分支功能，操作过程中涉及的柱状条区域应至少 90 % 保持到绿线下面；</li><li>从用户体检的角度主观判断应用在 512 M 内存的 Android 设备下所有操作过程中的卡顿感是否能接受，不会感觉突兀怪异；<h5 id="4-3-渲染性能差的根源"><a href="#4-3-渲染性能差的根源" class="headerlink" title="4.3 渲染性能差的根源"></a>4.3 渲染性能差的根源</h5></li></ul><p>当你看到蓝色的线较高的时候，可能是由于你的视图突然无效了需要重新绘制，或者是自定义的视图过于复杂耗时过长。</p><p>当你看到红色的线较高的时候，可能是由于你的视图重新提交了需要重新绘制导致的（比如屏幕从竖屏旋转成横屏后当前界面重新创建），或者是自定义的视图很复杂，绘制起来很麻烦，导致耗时过长。比如下面这种视图：</p><p>当你看到黄色的线较高的时候，那就意味着你给 GPU 太多的工作，太多的负责视图需要 OpenGL 命令去绘制和处理，导致 CPU 迟迟没等到 GPU 发出接到命令的回复。</p><h5 id="4-4-检测说明"><a href="#4-4-检测说明" class="headerlink" title="4.4 检测说明"></a>4.4 检测说明</h5><p>这个工具能够很好地帮助你找到渲染相关的问题，帮助你找到卡顿的性能瓶颈，追踪究竟是什么导致被测应用出现卡顿、变慢的情况，以便在代码层面进行优化。甚至让负责产品设计的人去改善他的设计，以获得良好的用户体验。</p><p>检测渲染性能时，常伴随着开启“ 严格模式 ” 查看应用哪些情景在 UI 线程（主线程）上执行时间过长。</p><p>另外有些强大但可能少用的工具在测试性能渲染时辅助分析，比如：</p><ul><li><p>HierarchyViewer：这个工具常用来查看界面的视图结构是否过于复杂，用于了解哪些视图过度绘制，又该如何进行改进；</p></li><li><p>Tracer for OpenGL：这个工具收集了所有UI界面发给GPU的绘制命令。常用于辅助开发人员 DEBUG 、定位一些 HierarchyViewer 工具定位不了的疑难渲染细节问题。</p></li></ul><h4 id="五-给开发的界面优化-Advice"><a href="#五-给开发的界面优化-Advice" class="headerlink" title="五. 给开发的界面优化 Advice"></a>五. 给开发的界面优化 Advice</h4><h5 id="5-1-优化布局的结构"><a href="#5-1-优化布局的结构" class="headerlink" title="5.1 优化布局的结构"></a>5.1 优化布局的结构</h5><p>布局结构太复杂，会减慢渲染的速度，造成性能瓶颈。我们可以通过以下这些惯用、有效的布局原则来优化：</p><ul><li>避免复杂的View层级。布局越复杂就越臃肿，就越容易出现性能问题，寻找最节省资源的方式去展示嵌套的内容；</li><li>尽量避免在视图层级的顶层使用相对布局 RelativeLayout 。相对布局 RelativeLayout 比较耗资源，因为一个相对布局 RelativeLayout 需要两次度量来确保自己处理了所有的布局关系，而且这个问题会伴随着视图层级中的相对布局 RelativeLayout 的增多，而变得更严重；</li><li>布局层级一样的情况建议使用线性布局 LinearLayout 代替相对布局 RelativeLayout，因为线性布局 LinearLayout 性能要更高一些；确实需要对分支进行相对布局 RelativeLayout 的时候，可以考虑更优化的网格布局 GridLayout ，它已经预处理了分支视图的关系，可以避免两次度量的问题；</li><li>相对复杂的布局建议采用相对布局 RelativeLayout ，相对布局 RelativeLayout 可以简单实现线性布局 LinearLayout 嵌套才能实现的布局；</li><li>不要使用绝对布局 AbsoluteLayout ；</li><li>将可重复使用的组件抽取出来并用 标签进行重用。如果应用多个地方的 UI 用到某个布局，就将其写成一个布局部件，便于各个 UI 重用。</li><li>使用 merge 标签减少布局的嵌套层次。</li><li>去掉多余的不可见背景。有多层背景颜色的布局，只留最上层的对用户可见的颜色即可，其他用户不可见的底层颜色可以去掉，减少无效的绘制操作；</li><li>尽量避免使用 layout_weight 属性。使用包含 layout_weight 属性的线性布局 LinearLayout 每一个子组件都需要被测量两次，会消耗过多的系统资源。在使用 ListView 标签与 GridView 标签的时候，这个问题显的尤其重要，因为子组件会重复被创建。平分布局可以使用相对布局 RelativeLayout 里一个 0dp 的 view 做分割线来搞定，如果不行，那就……；</li><li>合理的界面的布局结构应是宽而浅，而不是窄而深；<h5 id="5-2-优化处理逻辑"><a href="#5-2-优化处理逻辑" class="headerlink" title="5.2 优化处理逻辑"></a>5.2 优化处理逻辑</h5></li><li>按需载入视图。某些不怎么重用的耗资源视图，可以等到需要的时候再加载，提高UI渲染速度；</li><li>使用 ViewStub 标签来加载一些不常用的布局；</li><li>动态地 inflation view 性能要比用 ViewStub 标签的 setVisiblity 性能要好，当然某些功能的实现采用 ViewStub 标签更合适；</li><li>尽量避免不必要的耗资源操作，节省宝贵的运算时间；</li><li>避免在 UI 线程进行繁重的操作。耗资源的操作（比如 IO 操作、网络操作、SQL 操作、列表刷新等）耗资源的操作应用后台进程去实现，不能占用 UI 线程，UI 线程是主线程，主线程是保持程序流畅的关键，应该只操作那些核心的 UI 操作，比如处理视图的属性和绘制；</li><li>最小化唤醒机制。我们常用广播来接收那些期望响应的消息和事件，但过多的响应超过本身需求的话，会消耗多余的 Android 设备性能和资源。所以应该最小化唤醒机制，当应用不关心这些消失和事件时，就关闭广播，并慎重选择那些要响应的 Intent 。</li><li>为低端设备考虑，比如 512M 内存、双核 CPU 、低分辨率，确保你的应用可以满足不同水平的设备。</li><li>优化应用的启动速度。当应用启动一个应用时，界面的尽快反馈显示可以给用户一个良好的体验。为了启动更快，可以延迟加载一些 UI 以及避免在应用 Application 层级初始化代码。<h5 id="5-3-善用-DEBUG-工具"><a href="#5-3-善用-DEBUG-工具" class="headerlink" title="5.3 善用 DEBUG 工具"></a>5.3 善用 DEBUG 工具</h5></li><li>多使用Android提供的一些调试工具去追踪应用主要功能的性能情况；</li><li>多使用Android提供的一些调试工具去追踪应用主要功能的内存分配情况；</li></ul><p>ps：本文转载自听云博客</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://yq.aliyun.com/articles/152066?spm=5176.8067842.tagmain.57.1K9u3l&amp;do=login" target="_blank" rel="external">Android界面性能调优手册</a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 性能 </tag>
            
            <tag> 布局 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>简析TCP的三次握手与四次分手</title>
      <link href="/2017/09/15/2017-09-15-%E7%AE%80%E6%9E%90TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E5%88%86%E6%89%8B/"/>
      <url>/2017/09/15/2017-09-15-%E7%AE%80%E6%9E%90TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E5%88%86%E6%89%8B/</url>
      <content type="html"><![CDATA[<h4 id="TCP是什么"><a href="#TCP是什么" class="headerlink" title="TCP是什么"></a>TCP是什么</h4><p>TCP （传输控制协议）<br>本词条由“科普中国”百科科学词条编写与应用工作项目 审核 。<br>TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，用户数据报协议（UDP）是同一层内[1]  另一个重要的传输协议。在因特网协议族（Internet protocol suite）中，TCP层是位于IP层之上，应用层之下的中间层。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换。<br><a id="more"></a></p><p>首先来看看OSI的七层模型：<br><img src="/images/tcp/TCP1.jpg" alt="TCP"></p><p>我们需要知道TCP工作在网络OSI的七层模型中的第四层——Transport层，IP在第三层——Network层，ARP在第二层——Data Link层；在第二层上的数据，我们把它叫Frame，在第三层上的数据叫Packet，第四层的数据叫Segment。 同时，我们需要简单的知道，数据从应用层发下来，会在每一层都会加上头部信息，进行封装，然后再发送到数据接收端。这个基本的流程你需要知道，就是每个数据都会经过数据的封装和解封装的过程。 在OSI七层模型中，每一层的作用和对应的协议如下：<br><img src="/images/tcp/TCP2.jpg" alt="TCP"></p><p>TCP是一个协议，那这个协议是如何定义的，它的数据格式是什么样子的呢？要进行更深层次的剖析，就需要了解，甚至是熟记TCP协议中每个字段的含义。<br><img src="/images/tcp/TCP3.jpg" alt="TCP"></p><p>上面就是TCP协议头部的格式，由于它太重要了，是理解其它内容的基础，下面就将每个字段的信息都详细的说明一下。</p><ul><li>Source Port和Destination Port:分别占用16位，表示源端口号和目的端口号；用于区别主机中的不同进程，而IP地址是用来区分不同的主机的，源端口号和目的端口号配合上IP首部中的源IP地址和目的IP地址就能唯一的确定一个TCP连接；</li><li>Sequence Number:用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节在数据流中的序号；主要用来解决网络报乱序的问题；</li><li>Acknowledgment Number:32位确认序列号包含发送确认的一端所期望收到的下一个序号，因此，确认序号应当是上次已成功收到数据字节序号加1。不过，只有当标志位中的ACK标志（下面介绍）为1时该确认序列号的字段才有效。主要用来解决不丢包的问题；</li><li>Offset:给出首部中32 bit字的数目，需要这个值是因为任选字段的长度是可变的。这个字段占4bit（最多能表示15个32bit的的字，即4*15=60个字节的首部长度），因此TCP最多有60字节的首部。然而，没有任选字段，正常的长度是20字节；</li><li>TCP Flags:TCP首部中有6个标志比特，它们中的多个可同时被设置为1，主要是用于操控TCP的状态机的，依次为URG，ACK，PSH，RST，SYN，FIN。每个标志位的意思如下：<ul><li>URG：此标志表示TCP包的紧急指针域（后面马上就要说到）有效，用来保证TCP连接不被中断，并且督促中间层设备要尽快处理这些数据；</li><li>ACK：此标志表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中；有两个取值：0和1，为1的时候表示应答域有效，反之为0；</li><li>PSH：这个标志位表示Push操作。所谓Push操作就是指在数据包到达接收端以后，立即传送给应用程序，而不是在缓冲区中排队；</li><li>RST：这个标志表示连接复位请求。用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据包；</li><li>SYN：表示同步序号，用来建立连接。SYN标志位和ACK标志位搭配使用，当连接请求的时候，SYN=1，ACK=0；连接被响应的时候，SYN=1，ACK=1；这个标志的数据包经常被用来进行端口扫描。扫描者发送一个只有SYN的数据包，如果对方主机响应了一个数据包回来 ，就表明这台主机存在这个端口；但是由于这种扫描方式只是进行TCP三次握手的第一次握手，因此这种扫描的成功表示被扫描的机器不很安全，一台安全的主机将会强制要求一个连接严格的进行TCP的三次握手；</li><li>FIN： 表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送FIN标志位的TCP数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。</li></ul></li><li>Window:窗口大小，也就是有名的滑动窗口，用来进行流量控制；这是一个复杂的问题，这篇博文中并不会进行总结的；<br>好了，基本知识都已经准备好了，开始下一段的征程吧。</li></ul><h4 id="三次握手又是什么？"><a href="#三次握手又是什么？" class="headerlink" title="三次握手又是什么？"></a>三次握手又是什么？</h4><p>TCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。这就是面试中经常会被问到的TCP三次握手。只是了解TCP三次握手的概念，对你获得一份工作是没有任何帮助的，你需要去了解TCP三次握手中的一些细节。先来看图说话。</p><p><img src="/images/tcp/TCP4.jpg" alt="TCP"></p><p>多么清晰的一张图，当然了，也不是我画的，我也只是引用过来说明问题了。</p><ul><li>第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；</li><li>第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；</li><li>第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</li><li>完成了三次握手，客户端和服务器端就可以开始传送数据。以上就是TCP三次握手的总体介绍。</li></ul><h4 id="那四次分手呢？"><a href="#那四次分手呢？" class="headerlink" title="那四次分手呢？"></a>那四次分手呢？</h4><p>当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。</p><ul><li>第一次分手：主机1（可以使客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入’FIN_WAIT_1’状态；这表示主机1没有数据要发送给主机2了；</li><li>第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入’FIN_WAIT_2’状态；主机2告诉主机1，我“同意”你的关闭请求；</li><li>第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；</li><li>第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。<br>至此，TCP的四次分手就这么愉快的完成了。当你看到这里，你的脑子里会有很多的疑问，很多的不懂，感觉很凌乱；没事，我们继续总结。</li></ul><h4 id="为什么要三次握手"><a href="#为什么要三次握手" class="headerlink" title="为什么要三次握手"></a>为什么要三次握手</h4><p>既然总结了TCP的三次握手，那为什么非要三次呢？怎么觉得两次就可以完成了。那TCP为什么非要进行三次连接呢？在谢希仁的《计算机网络》中是这样说的：</p><p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p><p>在书中同时举了一个例子，如下：</p><p>“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</p><p>这就很明白了，防止了服务器端的一直等待而浪费资源。</p><h4 id="为什么要四次分手"><a href="#为什么要四次分手" class="headerlink" title="为什么要四次分手"></a>为什么要四次分手</h4><p>那四次分手又是为何呢？TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当主机1发出FIN报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕了；但是，这个时候主机1还是可以接受来自主机2的数据；当主机2返回ACK报文段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的；当主机2也发送了FIN报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。如果要正确的理解四次分手的原理，就需要了解四次分手过程中的状态变化。</p><ul><li>‘FIN_WAIT_1’: 这个状态要好好解释一下，其实’FIN_WAIT_1’和’FIN_WAIT_2’状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别是：’FIN_WAIT_1’状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET即进入到’FIN_WAIT_1’状态。而当对方回应ACK报文后，则进入到’FIN_WAIT_2’状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应ACK报文，所以’FIN_WAIT_1’状态一般是比较难见到的，而’FIN_WAIT_2’状态还有时常常可以用netstat看到。（主动方）</li><li>‘FIN_WAIT_2’：上面已经详细解释了这种状态，实际上’FIN_WAIT_2’状态下的SOCKET，表示半连接，也即有一方要求close连接，但另外还告诉对方，我暂时还有点数据需要传送给你(ACK信息)，稍后再关闭连接。（主动方）</li><li>CLOSE_WAIT：这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以 close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。（被动方）</li><li>LAST_ACK: 这个状态还是比较容易好理解的，它是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，也即可以进入到CLOSED可用状态了。（被动方）</li><li>TIME_WAIT: 表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。如果FINWAIT1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过’FIN_WAIT_2’状态。（主动方）</li><li>CLOSED: 表示连接中断。<br>我想你应该懂了</li></ul><p>总结到这里，也该结束了，但是对于TCP的学习远还没有结束。TCP是一个非常复杂的协议，这里稍微总结了一下TCP的连接与断开连接是发生的事情，其中还有很多的“坑”，让我们后续有时间再继续填吧</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.jellythink.com/archives/705" target="_blank" rel="external">简析TCP的三次握手与四次分手</a></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gradle实战:发布包到maven仓库</title>
      <link href="/2017/09/10/2017-09-10-Gradle%E5%AE%9E%E6%88%98:%E5%8F%91%E5%B8%83%E5%8C%85%E5%88%B0maven%E4%BB%93%E5%BA%931/"/>
      <url>/2017/09/10/2017-09-10-Gradle%E5%AE%9E%E6%88%98:%E5%8F%91%E5%B8%83%E5%8C%85%E5%88%B0maven%E4%BB%93%E5%BA%931/</url>
      <content type="html"><![CDATA[<h4 id="Gradle实战-发布包到maven仓库"><a href="#Gradle实战-发布包到maven仓库" class="headerlink" title="Gradle实战:发布包到maven仓库"></a>Gradle实战:发布包到maven仓库</h4><h4 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h4><h4 id="参考链接：http-xiedeliang-com-2017-07-30-Maven简介"><a href="#参考链接：http-xiedeliang-com-2017-07-30-Maven简介" class="headerlink" title="参考链接：http://xiedeliang.com/2017/07/30/Maven简介"></a>参考链接：<a href="http://xiedeliang.com/2017/07/30/Maven简介" target="_blank" rel="external">http://xiedeliang.com/2017/07/30/Maven简介</a></h4><h4 id="AAR简介"><a href="#AAR简介" class="headerlink" title="AAR简介"></a>AAR简介</h4><p>AAR文件是Google为Android开发所设计的一种library格式，全名为Android Archive Library，与Java Jar Library不同的是，aar除了java code之外还包含资源文件，即xml文件、图片、文字等。<br><a id="more"></a></p><h4 id="Jar简介"><a href="#Jar简介" class="headerlink" title="Jar简介"></a>Jar简介</h4><p>JAR 文件格式以流行的 ZIP 文件格式为基础。与 ZIP 文件不同的是，JAR 文件不仅用于压缩和发布，而且还用于部署和封装库、组件和插件程序，并可被像编译器和 JVM 这样的工具直接使用。在 JAR 中包含特殊的文件，如 manifests 和部署描述符，用来指示工具如何处理特定的 JAR。</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul><li>开发工具 Android Studio</li><li>Maven仓库</li><li>工程必须是lib工程，即该工程对应的build.gradle文件中要引用：apply plugin: ‘com.android.library’</li><li>在根目录的build.gradle文件中添加如下配置：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    apply plugin: &apos;idea&apos;</div><div class="line">    apply plugin: &apos;maven&apos;</div><div class="line">       configurations &#123;</div><div class="line">        deployerJars</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">configurations.all &#123;</div><div class="line">       resolutionStrategy.cacheChangingModulesFor 0, &apos;seconds&apos;//不使用缓存，使用仓库中最新的包</div><div class="line">&#125;</div><div class="line"></div><div class="line">subprojects &#123;  //表示除主工程外所有子模块</div><div class="line">    dependencies &#123;</div><div class="line">        deployerJars &quot;org.apache.maven.wagon:wagon-http:2.2&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ext &#123; //仓库选择标记</div><div class="line">    repoType = &quot;remote&quot; //发布到远程仓库（下文中会用到）</div><div class="line">    // repoType = &quot;local&quot; //发布到本地仓库，方便调试，避免调试期间频繁上传到maven仓库（下文中会用到）</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>在gradle.properties文件中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">releaseRepositoryUrl=xxx  //正式包仓库地址（下文中会用到）</div><div class="line">snapshotRepositoryUrl=xxx //测试包仓库地址（下文中会用到）</div><div class="line">repositoryGroup=com.company.appname // 定义要上传的aar所在仓库的Group，可自定义，但后续引用处要与此一致</div></pre></td></tr></table></figure></li><li><p>在工程根目录下新建一个名为“mavenAccount.properties”文件，并将该文件加入到ignore 中，该文件用于存放访问maven仓库的账户和密码以及本地仓库地址，只有该模块的开发者才有权发布该aar包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">repositoryUserName=xxx</div><div class="line">repositoryPassword=xxx</div><div class="line">localRepositoryUrl=file:///Users/admin/Documents/Android/repo/</div></pre></td></tr></table></figure></li><li><p>编写上传脚本:</p></li><li><p>生成AAR包：在工程根目录下新建一个名为“release-as-aar.gradle”的文件，其中脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">uploadArchives() &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenDeployer &#123;</div><div class="line">            configuration = configurations.deployerJars</div><div class="line">            println &apos;repoType : &apos; + rootProject.ext.repoType</div><div class="line">            if ((rootProject.ext.repoType).equals(&quot;remote&quot;)) &#123; //发布到远程仓库</div><div class="line">                snapshotRepository(url: snapshotRepositoryUrl) &#123; // 测试包</div><div class="line">                //从本地文件读取仓库账号和密码</div><div class="line">            def File propFile = new File(&apos;../mavenAccount.properties&apos;)</div><div class="line">            if (propFile.canRead()) &#123;</div><div class="line">                def Properties props = new Properties()</div><div class="line">                props.load(new FileInputStream(propFile))</div><div class="line">                    if (props != null &amp;&amp; props.containsKey(&apos;repositoryUserName&apos;) &amp;&amp; props.containsKey(&apos;repositoryPassword&apos;)) &#123;</div><div class="line">                   def repositoryUserName = props[&apos;repositoryUserName&apos;]</div><div class="line">                    def repositoryPassword = props[&apos;repositoryPassword&apos;]</div><div class="line">                    authentication(userName: repositoryUserName, password: repositoryPassword)</div><div class="line">                    println &apos;上传到远程仓库&apos;</div><div class="line">                &#125; else &#123;</div><div class="line">                println &apos;没有发布权限&apos;</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                   println &apos;没有发布权限&apos;</div><div class="line">            &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            repository(url: releaseRepositoryUrl) &#123; // 正式包</div><div class="line">            def File propFile = new File(&apos;../mavenAccount.properties&apos;)</div><div class="line">            if (propFile.canRead()) &#123;</div><div class="line">                   def Properties props = new Properties()</div><div class="line">                props.load(new FileInputStream(propFile))</div><div class="line">                    if (props != null &amp;&amp; props.containsKey(&apos;repositoryUserName&apos;) &amp;&amp; props.containsKey(&apos;repositoryPassword&apos;)) &#123;</div><div class="line">                def repositoryUserName = props[&apos;repositoryUserName&apos;]</div><div class="line">                def repositoryPassword = props[&apos;repositoryPassword&apos;]</div><div class="line">                authentication(userName: repositoryUserName, password: repositoryPassword)</div><div class="line">                println &apos;上传到远程仓库&apos;</div><div class="line">                &#125; else &#123;</div><div class="line">                    println &apos;没有发布权限&apos;</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                println &apos;没有发布权限&apos;</div><div class="line">            &#125;</div><div class="line">            &#125;</div><div class="line">            &#125; else &#123; // 发布到本地仓库</div><div class="line">                def localRepositoryUrl</div><div class="line">                def File propFile = new File(&apos;../mavenAccount.properties&apos;)</div><div class="line">                if (propFile.canRead()) &#123;</div><div class="line">                   def Properties props = new Properties()</div><div class="line">                props.load(new FileInputStream(propFile))</div><div class="line">                if (props != null &amp;&amp; props.containsKey(&apos;localRepositoryUrl&apos;)) &#123;</div><div class="line">                    localRepositoryUrl = props[&apos;localRepositoryUrl&apos;]</div><div class="line">                    snapshotRepository(url: localRepositoryUrl)</div><div class="line">                    repository(url: localRepositoryUrl)</div><div class="line">                    println &apos;上传到本地仓库&apos;</div><div class="line">                &#125; else &#123;</div><div class="line">                    println &apos;没有发布权限&apos;</div><div class="line">                &#125;</div><div class="line">                &#125; else &#123;</div><div class="line">                println &apos;没有发布权限&apos;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>生成Jar包：在工程根目录下新建一个名为“release-as-jar.gradle”的文件，其中脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">task androidJavadocs(type: Javadoc) &#123;</div><div class="line">    failOnError = false</div><div class="line">    source = android.sourceSets.main.java.srcDirs</div><div class="line">    ext.androidJar = &quot;$&#123;android.sdkDirectory&#125;/platforms/$&#123;android.compileSdkVersion&#125;/android.jar&quot;</div><div class="line">    classpath += files(ext.androidJar)</div><div class="line">&#125;</div><div class="line">task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) &#123;</div><div class="line">    classifier = &apos;javadoc&apos;</div><div class="line">    from androidJavadocs.destinationDir</div><div class="line">&#125;</div><div class="line"></div><div class="line">task androidSourcesJar(type: Jar) &#123;</div><div class="line">    classifier = &apos;sources&apos;</div><div class="line">    from android.sourceSets.main.java.srcDirs</div><div class="line">&#125;</div><div class="line"></div><div class="line">uploadArchives &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenDeployer &#123;</div><div class="line">            configuration = configurations.deployerJars</div><div class="line">            println &apos;repoType : &apos; + rootProject.ext.repoType</div><div class="line">            if ((rootProject.ext.repoType).equals(&quot;remote&quot;)) &#123; //发布到远程仓库</div><div class="line">                snapshotRepository(url: snapshotRepositoryUrl) &#123;</div><div class="line">                    def File propFile = new File(&apos;../mavenAccount.properties&apos;)</div><div class="line">                    if (propFile.canRead()) &#123;</div><div class="line">                        def Properties props = new Properties()</div><div class="line">                        props.load(new FileInputStream(propFile))</div><div class="line">                        if (props != null &amp;&amp; props.containsKey(&apos;repositoryUserName&apos;) &amp;&amp; props.containsKey(&apos;repositoryPassword&apos;)) &#123;</div><div class="line">                            def repositoryUserName = props[&apos;repositoryUserName&apos;]</div><div class="line">                            def repositoryPassword = props[&apos;repositoryPassword&apos;]</div><div class="line">                            authentication(userName: repositoryUserName, password: repositoryPassword)</div><div class="line">                            println &apos;上传到远程仓库&apos;</div><div class="line">                        &#125; else &#123;</div><div class="line">                            println &apos;sorry，你没有上传aar包的权限&apos;</div><div class="line">                        &#125;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        println &apos;sorry，你没有上传aar包的权限&apos;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                repository(url: releaseRepositoryUrl) &#123;</div><div class="line">                    def File propFile = new File(&apos;../mavenAccount.properties&apos;)</div><div class="line">                    if (propFile.canRead()) &#123;</div><div class="line">                        def Properties props = new Properties()</div><div class="line">                        props.load(new FileInputStream(propFile))</div><div class="line"></div><div class="line">                        if (props != null &amp;&amp; props.containsKey(&apos;repositoryUserName&apos;) &amp;&amp; props.containsKey(&apos;repositoryPassword&apos;)) &#123;</div><div class="line">                            def repositoryUserName = props[&apos;repositoryUserName&apos;]</div><div class="line">                            def repositoryPassword = props[&apos;repositoryPassword&apos;]</div><div class="line">                            authentication(userName: repositoryUserName, password: repositoryPassword)</div><div class="line">                            println &apos;上传到远程仓库&apos;</div><div class="line">                        &#125; else &#123;</div><div class="line">                            println &apos;sorry，你没有上传aar包的权限&apos;</div><div class="line">                        &#125;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        println &apos;sorry，你没有上传aar包的权限&apos;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;//发布到本地仓库</div><div class="line">                def localRepositoryUrl</div><div class="line">                def File propFile = new File(&apos;../mavenAccount.properties&apos;)</div><div class="line">                if (propFile.canRead()) &#123;</div><div class="line">                    def Properties props = new Properties()</div><div class="line">                    props.load(new FileInputStream(propFile))</div><div class="line">                    if (props != null &amp;&amp; props.containsKey(&apos;localRepositoryUrl&apos;)) &#123;</div><div class="line">                        localRepositoryUrl = props[&apos;localRepositoryUrl&apos;]</div><div class="line">                        snapshotRepository(url: localRepositoryUrl)</div><div class="line">                        repository(url: localRepositoryUrl)</div><div class="line">                        println &apos;上传到本地仓库&apos;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        println &apos;sorry，本地仓库路径不存在&apos;</div><div class="line">                    &#125;</div><div class="line">                &#125; else &#123;</div><div class="line">                    println &apos;sorry，本地仓库路径不存在&apos;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">artifacts &#123;</div><div class="line">    archives androidSourcesJar</div><div class="line">    archives androidJavadocsJar</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li><p>子模块中相关配置：在子模块的build.gradle文件中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">group repositoryGroup</div><div class="line">//version &apos;0.0.1&apos;</div><div class="line">version &apos;0.0.1-SNAPSHOT&apos; //表示测试版，正式发版时去掉“-SNAPSHOT”</div><div class="line">//打成aar格式</div><div class="line">apply from: &apos;../release-as-aar.gradle&apos; //引用上传插件</div><div class="line">//打成jar格式</div><div class="line">//apply from: &apos;../release-as-jar.gradle&apos;</div><div class="line">打包上传</div></pre></td></tr></table></figure></li><li><p>编译通过后，打开android studio自带的终端，进入相应的module目录下，输入：</p></li></ul><p>gradle uploadArchives<br>主项目引用</p><p>在根目录的build.gradle文件中添加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">maven &#123;</div><div class="line">  url &apos;http://maven.xxxx.xxxx:1111/nexus/content/groups/public/&apos;</div><div class="line">   &#125; </div><div class="line">在项目的build.gradle文件中添加如下引用：</div><div class="line"></div><div class="line">debugCompile &apos;groupId:lib-name:version-SNAPSHOT&apos;</div><div class="line">releaseCompile &apos;groupId:lib-name:version&apos;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gradle maven配置</title>
      <link href="/2017/09/10/2017-09-10-Gradle%20maven%E9%85%8D%E7%BD%AE/"/>
      <url>/2017/09/10/2017-09-10-Gradle%20maven%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="gradle-maven配置"><a href="#gradle-maven配置" class="headerlink" title="gradle maven配置"></a>gradle maven配置</h3><h4 id="1、上传library到maven仓库"><a href="#1、上传library到maven仓库" class="headerlink" title="1、上传library到maven仓库"></a>1、上传library到maven仓库</h4><p>library module 中配置build.gradle增加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;maven&apos;</div><div class="line"></div><div class="line">uploadArchives &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenDeployer &#123;</div><div class="line">            // maven仓库地址，使用本地相对路径maven仓库</div><div class="line">            repository(url: uri(&apos;../maven&apos;))</div><div class="line">            pom.version = &apos;1.0-release&apos;</div><div class="line">            // 包名</div><div class="line">            pom.groupId = &apos;groupId&apos;</div><div class="line">            // sdk名</div><div class="line">            pom.artifactId = &apos;artifactId&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><a id="more"></a><p>执行 gradlew uploadArchives 上传到远程仓库</p><h4 id="2、引用"><a href="#2、引用" class="headerlink" title="2、引用"></a>2、引用</h4><ul><li><p>在项目级build.gradle 中配置maven仓库地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenLocal()</div><div class="line">        jcenter()</div><div class="line">        // 使用本地相对路径maven仓库</div><div class="line">        maven &#123;</div><div class="line">            url uri(&apos;../maven&apos;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>在module级build.gradle中引用，重新同步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile(&apos;groupId:artifactId:1.0-release@aar&apos;) &#123; transitive = true &#125;</div></pre></td></tr></table></figure></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何正确地写出单例模式</title>
      <link href="/2017/07/29/2017-07-29-how-to-correctly-write-singleton-pattern/"/>
      <url>/2017/07/29/2017-07-29-how-to-correctly-write-singleton-pattern/</url>
      <content type="html"><![CDATA[<h4 id="如何正确地写出单例模式"><a href="#如何正确地写出单例模式" class="headerlink" title="如何正确地写出单例模式"></a>如何正确地写出单例模式</h4><p>单例模式算是设计模式中最容易理解，也是最容易手写代码的模式了吧。但是其中的坑却不少，所以也常作为面试题来考。本文主要对几种单例写法的整理，并分析其优缺点。很多都是一些老生常谈的问题，但如果你不知道如何创建一个线程安全的单例，不知道什么是双检锁，那这篇文章可能会帮助到你。<br><a id="more"></a></p><h4 id="懒汉式，线程不安全"><a href="#懒汉式，线程不安全" class="headerlink" title="懒汉式，线程不安全"></a>懒汉式，线程不安全</h4><p>当被问到要实现一个单例模式时，很多人的第一反应是写出如下的代码，包括教科书上也是这样教我们的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">         instance = <span class="keyword">new</span> Singleton();</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这段代码简单明了，而且使用了懒加载模式，但是却存在致命的问题。当有多个线程并行调用 getInstance() 的时候，就会创建多个实例。也就是说在多线程下不能正常工作。</p><h4 id="懒汉式，线程安全"><a href="#懒汉式，线程安全" class="headerlink" title="懒汉式，线程安全"></a>懒汉式，线程安全</h4><p>为了解决上面的问题，最简单的方法是将整个 getInstance() 方法设为同步（synchronized）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public static synchronized Singleton getInstance() &#123;</div><div class="line">    if (instance == null) &#123;</div><div class="line">        instance = new Singleton();</div><div class="line">    &#125;</div><div class="line">    return instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>虽然做到了线程安全，并且解决了多实例的问题，但是它并不高效。因为在任何时候只能有一个线程调用 getInstance() 方法。但是同步操作只需要在第一次调用时才被需要，即第一次创建单例实例对象时。这就引出了双重检验锁。</p><h4 id="双重检验锁"><a href="#双重检验锁" class="headerlink" title="双重检验锁"></a>双重检验锁</h4><p>双重检验锁模式（double checked locking pattern），是一种使用同步块加锁的方法。程序员称其为双重检查锁，因为会有两次检查 instance == null，一次是在同步块外，一次是在同步块内。为什么在同步块内还要再检验一次？因为可能会有多个线程一起进入同步块外的 if，如果在同步块内不进行二次检验的话就会生成多个实例了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public static Singleton getSingleton() &#123;</div><div class="line">    if (instance == null) &#123;                         //Single Checked</div><div class="line">        synchronized (Singleton.class) &#123;</div><div class="line">            if (instance == null) &#123;                 //Double Checked</div><div class="line">                instance = new Singleton();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这段代码看起来很完美，很可惜，它是有问题。主要在于<code>instance = new Singleton()</code>这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。</p><ul><li>给 instance 分配内存</li><li>调用 Singleton 的构造函数来初始化成员变量</li><li>将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了） </li></ul><p>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。</p><p>我们只需要将 instance 变量声明成 volatile 就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance; <span class="comment">//声明成 volatile</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;                         </div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;       </div><div class="line">                    instance = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>有些人认为使用 volatile 的原因是可见性，也就是可以保证线程在本地不会存有 instance 的副本，每次都是去主内存中读取。但其实是不对的。使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。比如上面的例子，取操作必须在执行完 1-2-3 之后或者 1-3-2 之后，不存在执行到 1-3 然后取到值的情况。从「先行发生原则」的角度理解的话，就是对于一个 volatile 变量的写操作都先行发生于后面对这个变量的读操作（这里的“后面”是时间上的先后顺序）。</p><p>但是特别注意在 Java 5 以前的版本使用了 volatile 的双检锁还是有问题的。其原因是 Java 5 以前的 JMM （Java 内存模型）是存在缺陷的，即时将变量声明成 volatile 也不能完全避免重排序，主要是 volatile 变量前后的代码仍然存在重排序问题。这个 volatile 屏蔽重排序的问题在 Java 5 中才得以修复，所以在这之后才可以放心使用 volatile。</p><p>相信你不会喜欢这种复杂又隐含问题的方式，当然我们有更好的实现线程安全的单例模式的办法。</p><h4 id="饿汉式-static-final-field"><a href="#饿汉式-static-final-field" class="headerlink" title="饿汉式 static final field"></a>饿汉式 static final field</h4><p>这种方法非常简单，因为单例的实例被声明成 static 和 final 变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">    <span class="comment">//类加载时就初始化</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这种写法如果完美的话，就没必要在啰嗦那么多双检锁的问题了。缺点是它不是一种懒加载模式（lazy initialization），单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance()方法。饿汉式的创建方式在一些场景中将无法使用：譬如 Singleton 实例的创建是依赖参数或者配置文件的，在 getInstance() 之前必须调用某个方法设置参数给它，那样这种单例写法就无法使用了。</p><h4 id="静态内部类-static-nested-class"><a href="#静态内部类-static-nested-class" class="headerlink" title="静态内部类 static nested class"></a>静态内部类 static nested class</h4><p>我比较倾向于使用静态内部类的方法，这种方法也是《Effective Java》上所推荐的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE; </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这种写法仍然使用JVM本身机制保证了线程安全问题；由于 SingletonHolder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本。</p><h4 id="枚举-Enum"><a href="#枚举-Enum" class="headerlink" title="枚举 Enum"></a>枚举 Enum</h4><p>用枚举写单例实在太简单了！这也是它最大的优点。下面这段代码就是声明枚举实例的通常做法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EasySingleton&#123;</div><div class="line">    INSTANCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们可以通过EasySingleton.INSTANCE来访问实例，这比调用getInstance()方法简单多了。创建枚举默认就是线程安全的，所以不需要担心double checked locking，而且还能防止反序列化导致重新创建新的对象。但是还是很少看到有人这样写。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>一般来说，单例模式有五种写法：懒汉、饿汉、双重检验锁、静态内部类、枚举。上述所说都是线程安全的实现，文章开头给出的第一种方法不算正确的写法。</p><p>就我个人而言，一般情况下直接使用饿汉式就好了，如果明确要求要懒加载（lazy initialization）会倾向于使用静态内部类，如果涉及到反序列化创建对象时会试着使用枚举的方式来实现单例。</p><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern" target="_blank" rel="external">如何正确地写出单例模式</a></p><p><a href="http://javarevisited.blogspot.sg/2014/05/double-checked-locking-on-singleton-in-java.html" target="_blank" rel="external">Double Checked Locking on Singleton Class in Java</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Aop技术在Android中的应用</title>
      <link href="/2017/07/27/2017-07-27-Aop%E6%8A%80%E6%9C%AF%E5%9C%A8Android%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2017/07/27/2017-07-27-Aop%E6%8A%80%E6%9C%AF%E5%9C%A8Android%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h4><p>百度百科中对AOP的解释如下:<br>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。 <a id="more"></a>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>说白了，AOP其实就是OOP的补充，OOP从横向上区分出一个个的类来，而AOP则从纵向上向对象中加入特定的代码。</p><h4 id="AOP-和-OOP"><a href="#AOP-和-OOP" class="headerlink" title="AOP 和 OOP"></a>AOP 和 OOP</h4><p>面向对象的特点是继承、多态和封装。为了符合单一职责的原则，OOP将功能分散到不同的对象中去。让不同的类设计不同的方法，这样代码就分散到一个个的类中。可以降低代码的复杂程度，提高类的复用性。</p><p>但是在分散代码的同时，也增加了代码的重复性。比如说，我们在两个类中，可能都需要在每个方法中做日志。按照OOP的设计方法，我们就必须在两个类的方法中都加入日志的内容。也许他们是完全相同的，但是因为OOP的设计让类与类之间无法联系，而不能将这些重复的代码统一起来。然而AOP就是为了解决这类问题而产生的，它是在运行时动态地将代码切入到类的指定方法、指定位置上的编程思想。</p><p>如果说，面向过程的编程是一维的，那么面向对象的编程就是二维的。OOP从横向上区分出一个个的类，相比过程式增加了一个维度。而面向切面结合面向对象编程是三维的，相比单单的面向对象编程则又增加了“方面”的维度。从技术上来说，AOP基本上是通过代理机制实现的。</p><h4 id="在Android项目中使用AspectJ"><a href="#在Android项目中使用AspectJ" class="headerlink" title="在Android项目中使用AspectJ"></a>在Android项目中使用AspectJ</h4><p>本文采用上海沪江公司徐宜生团队开源的gradle插件<br>以下引用部分原文</p><p>AOP的用处非常广，从spring到Android，各个地方都有使用，特别是在后端，Spring中已经使用的非常方便了，而且功能非常强大，但是在Android中，AspectJ的实现是略阉割的版本，并不是所有功能都支持，但对于一般的客户端开发来说，已经完全足够用了。</p><p>在Android上集成AspectJ实际上是比较复杂的，不是一句话就能compile，但是，鄙司已经给大家把这个问题解决了，大家现在直接使用这个SDK就可以很方便的在Android Studio中使用AspectJ了。Github地址如下：<br><a href="https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx" target="_blank" rel="external">https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx</a><br>另外一个比较成功的使用AOP的库是JakeWharton大神的Hugo：<br><a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">https://github.com/JakeWharton/hugo</a></p><h4 id="接入说明"><a href="#接入说明" class="headerlink" title="接入说明"></a>接入说明</h4><ul><li><p>首先，需要在项目根目录的build.gradle中增加依赖：<br>完整代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:2.3.3&apos;</div><div class="line">        classpath &apos;com.hujiang.aspectjx:gradle-android-plugin-aspectjx:1.0.10&apos;</div><div class="line"></div><div class="line">        // NOTE: Do not place your application dependencies here; they belong</div><div class="line">        // in the individual module build.gradle files</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>然后再主项目或者库的build.gradle中增加AspectJ的依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;org.aspectj:aspectjrt:1.8.10&apos;</div></pre></td></tr></table></figure></li><li><p>同时在build.gradle中加入AspectJX模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;android-aspectjx&apos;</div></pre></td></tr></table></figure><p>这样就把整个Android Studio中的AspectJ的环境配置完毕了，如果在编译的时候，遇到一些『can’t determine superclass of missing type xxxxx』这样的错误，请参考项目README中关于excludeJarFilter的使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">aspectjx &#123;</div><div class="line">    //includes the libs that you want to weave</div><div class="line">    includeJarFilter &apos;universal-image-loader&apos;, &apos;AspectJX-Demo/library&apos;</div><div class="line"></div><div class="line">    //excludes the libs that you don&apos;t want to weave</div><div class="line">    excludeJarFilter &apos;universal-image-loader&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>运行时如果出现<code>Task &#39;transformClassesWithExtractJarsForDebug&#39; not found in project &#39;:app&#39;.</code>的错误,需要关闭Instant Run功能<br><a href="https://github.com/HujiangTechnology/AspectJX-Demo/issues/1" target="_blank" rel="external">https://github.com/HujiangTechnology/AspectJX-Demo/issues/1</a></p><p>具体配置参见github地址 <a href="https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx" target="_blank" rel="external">https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx</a></p><h4 id="AspectJ入门"><a href="#AspectJ入门" class="headerlink" title="AspectJ入门"></a>AspectJ入门</h4><p>我们通过一段简单的代码来了解下基本的使用方法和功能，新建一个AspectTest类文件，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"xuyisheng"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* android.app.Activity.on**(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityMethodBefore</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        String key = joinPoint.getSignature().toString();</div><div class="line">        Log.d(TAG, <span class="string">"onActivityMethodBefore: "</span> + key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在类的最开始，我们使用@Aspect注解来定义这样一个AspectJ文件，编译器在编译的时候，就会自动去解析，并不需要主动去调用AspectJ类里面的代码。</p><p>我的原始代码很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过这种方式编译后，我们来看下生成的代码是怎样的。AspectJ的原理实际上是在编译的时候，根据一定的规则解析，然后插入一些代码，通过aspectj生成的代码，会在Build目录下：<br> <img src="/images/aspectj/aspectj1.jpeg" alt="aspectj-1"></p><p>通过反编译工具查看下生成内容：<br> <img src="/images/aspectj/aspectj2.png" alt="aspectj-2"></p><p>我们可以发现，在onCreate的最前面，插入了一行AspectJ的代码。这个就是AspectJ的主要功能，抛开AOP的思想来说，我们想做的，实际上就是『在不侵入原有代码的基础上，增加新的代码』。</p><h4 id="使用AOP防止按钮连续点击"><a href="#使用AOP防止按钮连续点击" class="headerlink" title="使用AOP防止按钮连续点击"></a>使用AOP防止按钮连续点击</h4><ul><li><p>首先定义一个防止多次点击的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoDoubleClickUtils</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> lastClickTime = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SPACE_TIME = <span class="number">500</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDoubleClick</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> currentTime = System.currentTimeMillis();</div><div class="line">        <span class="keyword">boolean</span> isClick2 = currentTime - lastClickTime &lt;= SPACE_TIME;</div><div class="line">        lastClickTime = currentTime;</div><div class="line">        <span class="keyword">return</span> isClick2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>然后使用AspectJ对OnclickListener进行插桩，</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Around(&quot;execution(* android.view.View.OnClickListener.onClick(..))&quot;)</div><div class="line">public void onClickListener(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;</div><div class="line">    Log.e(TAG, &quot;OnClick&quot;);</div><div class="line">    if (!NoDoubleClickUtils.isDoubleClick()) &#123;</div><div class="line">        proceedingJoinPoint.proceed();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>运行程序，多次点击按钮后，log如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">07-27 12:38:37.789 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</div><div class="line">07-27 12:38:37.789 24084-24084/com.example.androidaspectjdemo E/MainActivity: execute click</div><div class="line">07-27 12:38:38.053 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</div><div class="line">07-27 12:38:38.290 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</div><div class="line">07-27 12:38:38.538 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</div><div class="line">07-27 12:38:38.771 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</div><div class="line">07-27 12:38:39.006 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</div><div class="line">07-27 12:38:39.257 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</div></pre></td></tr></table></figure></li></ul><p>通过log可以看出onClickListener执行了多次，但使用click的的地方只执行了一次。这样，就可以在不改变原来代码的情况下，实现防止连续点击的功能。</p><ul><li><p>但是当又有需求：要求部分按钮是可以连续点击的，该怎么办呢？这个时候只要加个注解文件就好。</p></li><li><p>首先定义个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DoubleClick &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>并且修改之前的AspectTest文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">private View mLastView;</div><div class="line">private boolean canDoubleClick = false;</div><div class="line"></div><div class="line">@Before(&quot;@annotation(com.example.spectjde.annotation.DoubleClick)&quot;)</div><div class="line">public void beforeEnableDoubleClick(JoinPoint joinPoint) throws Throwable &#123;</div><div class="line">    canDoubleClick = true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Around(&quot;execution(* android.view.View.OnClickListener.onClick(..))  &amp;&amp; target(Object) &amp;&amp; this(Object)&quot;)</div><div class="line">public void onDoubleClickListener(ProceedingJoinPoint joinPoint) throws Throwable &#123;</div><div class="line">    Object[] objects = joinPoint.getArgs();</div><div class="line">    View view = objects.length == 0 ? null : (View) objects[0];</div><div class="line">    if (view != mLastView || canDoubleClick || !NoDoubleClickUtils.isDoubleClick()) &#123;</div><div class="line">        joinPoint.proceed();</div><div class="line">        canDoubleClick = false;</div><div class="line">    &#125;</div><div class="line">    mLastView = view;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>现在只要在可以连续点击的按钮的onclick前加一个@DoubleClick的注解就好</p><h4 id="使用注解实现方法运行在异步线程"><a href="#使用注解实现方法运行在异步线程" class="headerlink" title="使用注解实现方法运行在异步线程"></a>使用注解实现方法运行在异步线程</h4><ul><li><p>首先定义注解作用在Method上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;METHOD&#125;)</div><div class="line"><span class="meta">@Retention</span>(CLASS)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Async &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>创建AsyncAspect.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncAspect</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Around</span>(<span class="string">"execution(!synthetic * *(..)) &amp;&amp; onAsyncMethod()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAsyncMethod</span><span class="params">(<span class="keyword">final</span> ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        asyncMethod(joinPoint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@within(com.example.spectjde.annotation.Async)||@annotation(com.example.spectjde.annotation.Async)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAsyncMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">asyncMethod</span><span class="params">(<span class="keyword">final</span> ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 使用Rxjava实现线程切换</span></div><div class="line">        Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Object&gt;() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Object&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                                <span class="keyword">try</span> &#123;</div><div class="line">                                    joinPoint.proceed();</div><div class="line">                                &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</div><div class="line">                                    throwable.printStackTrace();</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                , BackpressureStrategy.BUFFER)</div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>在要切换的方法上加上注解即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Async</div><div class="line">void testAsync() &#123;</div><div class="line">    Log.e(TAG, Thread.currentThread().getName());</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h4 id="实现所有方法耗时统计"><a href="#实现所有方法耗时统计" class="headerlink" title="实现所有方法耗时统计"></a>实现所有方法耗时统计</h4><ul><li><p>创建Aspect class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectJSpectControler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = AspectJSpectControler.class.getSimpleName();</div><div class="line"></div><div class="line">    <span class="meta">@Around</span>(value = <span class="string">"execution(* com.example..*.*(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">weavePatchLogic</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="keyword">if</span> (BuildConfig.DEBUG) &#123; <span class="comment">//debug    状态下计算方法耗时</span></div><div class="line">            <span class="keyword">long</span> startT = System.currentTimeMillis();</div><div class="line">            Object proceed = joinPoint.proceed();</div><div class="line">            <span class="keyword">long</span> consume = System.currentTimeMillis() - startT;</div><div class="line">            Log.d(TAG, <span class="string">"AspectJSpectControler: "</span> + consume + <span class="string">" ms "</span> + joinPoint.getSignature());</div><div class="line">            <span class="keyword">return</span> proceed;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> joinPoint.proceed();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>运行app，过滤log查看方法耗时,打印log过滤关键字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">D/AspectTest: AspectJSpectControler: 127 ms void com.example.androidaspectjdemo.MainActivity.onCreate(Bundle)</div><div class="line">D/AspectTest: AspectJSpectControler: 20 ms void com.example.spectjde.AsyncAspect.asyncMethod</div></pre></td></tr></table></figure></li></ul><p>Demo地址  <a href="https://github.com/android9527/AndroidAspectjDemo" target="_blank" rel="external">https://github.com/android9527/AndroidAspectjDemo</a></p><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://www.cnblogs.com/yxx123/p/6675567.html" target="_blank" rel="external">Android防止按钮连续点击方案之AOP</a></p><p><a href="http://www.jianshu.com/p/2779e3bb1f14" target="_blank" rel="external">归纳AOP在Android开发中的几种常见用法</a></p><p><a href="http://blog.csdn.net/eclipsexys/article/details/54425414" target="_blank" rel="external">看AspectJ在Android中的强势插入</a></p><p><a href="http://glanwang.com/2017/07/18/Android/AOP%E6%8A%80%E6%9C%AF%E5%9C%A8%E7%BD%91%E6%98%93%E6%96%B0%E9%97%BB%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/" target="_blank" rel="external">AOP技术在网易新闻中的应用</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Aop </tag>
            
            <tag> Aspectj </tag>
            
            <tag> 面向切面编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jenkins+fir 上传更新日志</title>
      <link href="/2017/07/17/2017-07-17-Jenkins+fir%20%E4%B8%8A%E4%BC%A0%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/"/>
      <url>/2017/07/17/2017-07-17-Jenkins+fir%20%E4%B8%8A%E4%BC%A0%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>在日常开发中持续集成可以节省开发者很多时间和精力，fir下载地址和邮件没有更新日志内容，这样无法通知测试人员具体修改内容，造成了很多不便，所以有了这个需求</p> <a id="more"></a><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>前提：首先你得先折腾好打包工具吧，现在的教程都已经很多了</p><ul><li><p>首先安装插件：Environment Injector Plugin (<a href="http://updates.jenkins-ci.org/download/plugins/envinject/)，下载成功后打开`Jenkins-&gt;系统管理-&gt;管理插件-&gt;高级-&gt;拖至页面底部上传插件-&gt;选中文件点击上传`，提示成功后返回首页。" target="_blank" rel="external">http://updates.jenkins-ci.org/download/plugins/envinject/)，下载成功后打开`Jenkins-&gt;系统管理-&gt;管理插件-&gt;高级-&gt;拖至页面底部上传插件-&gt;选中文件点击上传`，提示成功后返回首页。</a></p><p><img src="/images/jenkins/upload_log_1.jpeg" alt="jenkins-1"></p></li><li><p>进入现有的项目，输出commit日志内容：<code>增加构建步骤-&gt;Execute shell</code>-&gt;在Command输入以下内容（注意替换username和password）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GIT_LOG=$(git log --pretty=format:&quot;%cd : %s&quot; --no-merges -3)</div><div class="line">echo GIT_LOG=$GIT_LOG &gt; log.txt</div></pre></td></tr></table></figure><p><img src="/images/jenkins/upload_log_2.jpeg" alt="jenkins-1"></p></li></ul><ul><li><p>设置commit日志保存路径：增加构建步骤-&gt;Inject environment variables-&gt;在Properties File Path输入log.txt。</p><p><img src="/images/jenkins/upload_log_3.jpeg" alt="jenkins-1"></p></li><li><p>获取到commit日志后发给fir:<code>增加构建后操作步骤-&gt;Upload to fir.im-&gt;在fir.im Token</code>中输入你从fir获得的token，然后在<code>Build Notes</code>中输入:<br>$GIT_LOG</p></li></ul><h4 id="自动获取git分支变化时构建项目"><a href="#自动获取git分支变化时构建项目" class="headerlink" title="自动获取git分支变化时构建项目,"></a>自动获取git分支变化时构建项目,</h4><p> 在”<code>构建触发器</code>“中选择”<code>Build when a change is pushed to GitHub</code> “和”<code>Poll SCM</code> “，这两项的作用分别是当GitHub有版本库更新时触发Jenkins进行构建和定期检查版本库是否有更新，如果有更新则触发Jenkins进行构建。这里要注意Schedule语法，例如”<code>*/2 * * * *</code>“表示每隔2分钟检查一次。</p><h4 id="Jenkins邮箱配置"><a href="#Jenkins邮箱配置" class="headerlink" title="Jenkins邮箱配置"></a>Jenkins邮箱配置</h4><ol><li>Override Global Settings：如果不选，该插件将使用默认的E-mail Notification通知选项。反之，您可以通过指定不同于( 默认选项)的设置来进行覆盖。</li><li>Default Content Type：指定构建后发送邮件内容的类型，有Text和HTML两种.</li><li>Use List-ID Email Header：为所有的邮件设置一个List-ID的邮件信头，这样你就可以在邮件客户端使用过滤。它也能阻止邮件发件人大部分的自动回复(诸如离开办公室、休假等等)。你可以使用你习惯的任何名称或者ID号，但是他们必须符合如下其中一种格式(真实的ID必须要包含在&lt;和&gt;标记里)：<br><ci-notifications.company.org><br>Build Notifications <ci-notifications.company.org><br>“Build Notifications” <ci-notifications.company.org></ci-notifications.company.org></ci-notifications.company.org></ci-notifications.company.org></li><li>Add ‘Precedence: bulk’ Email Header：设置优先级,</li><li>Default Recipients：自定义默认电子邮件收件人列表。如果没有被项目配置覆盖,该插件会使用这个列表。您可以在项目配置使用$ DEFAULT_RECIPIENTS参数包括此默认列表，以及添加新的地址在项目级别。添加抄送：cc:电子邮件地址例如,CC:someone@somewhere.com</li><li>Reply To List：回复列表, A comma separated list of e-mail addresses to use in the Reply-To header of the email. This value will be available as $DEFAULT_REPLYTO in the project configuration.</li><li>Emergency reroute：如果这个字段不为空，所有的电子邮件将被单独发送到该地址（或地址列表）。</li><li>Excluded Committers：防止邮件被邮件系统认为是垃圾邮件,邮件列表应该没有扩展的账户名(如:@domain.com),并且使用逗号分隔</li><li>Default Subject：自定义邮件通知的默认主题名称。该选项能在邮件的主题字段中替换一些参数，这样你就可以在构建中包含指定的输出信息。</li><li>Maximum Attachment Size：邮件最大附件大小。</li><li>Default Content：自定义邮件通知的默认内容主体。该选项能在邮件的内容中替换一些参数，这样你就可以在构建中包含指定的输出信息。</li><li>Default Pre-send Script：默认发送前执行的脚本（注：grooy脚本，这是我在某篇文章上看到的，不一定准确）。</li><li>Enable Debug Mode：启用插件的调试模式。这将增加额外的日志输出，构建日志以及Jenkins的日志。在调试时是有用的，但不能用于生产。</li><li>Enable Security：启用时，会禁用发送脚本的能力，直接进入Jenkins实例。如果用户试图访问Jenkins管理对象实例，将抛出一个安全异常。</li><li>Content Token Reference：邮件中可以使用的变量，所有的变量都是可选的。</li></ol><p>项目基本配置参数说明：<br>当插件激活后你就能编辑如下字段（只列出常用的字段）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Project Recipient List：这是一个以逗号(或者空格)分隔的收件人邮件的邮箱地址列表。允许您为每封邮件指定单独的列表。Ps：如果你想在默认收件人的基础上添加收件人：$DEFAULT_RECIPIENTS,&lt;新的收件人&gt;</div><div class="line">Default Subject：允许你配置此项目邮件的主题。</div><div class="line">Default Content：跟Default Subject的作用一样，但是是替换邮件内容。</div><div class="line">Attach Build Log：附件构建日志。</div><div class="line">Compress Build Log before sending：发送前压缩生成日志（zip格式）。</div></pre></td></tr></table></figure></p><h4 id="附email-ext邮件通知模板"><a href="#附email-ext邮件通知模板" class="headerlink" title="附email-ext邮件通知模板"></a>附email-ext邮件通知模板</h4><p>发现一个很好的邮件通知模板，如下：</p><p>Default Subject：</p><p>构建通知:${BUILD_STATUS} - ${PROJECT_NAME} - Build # ${BUILD_NUMBER} !<br>Default Content：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;ENV, var="JOB_NAME"&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">leftmargin</span>=<span class="string">"8"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">topmargin</span>=<span class="string">"8"</span> <span class="attr">marginheight</span>=<span class="string">"4"</span></span></div><div class="line">    <span class="attr">offset</span>=<span class="string">"0"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"95%"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span></span></div><div class="line">        <span class="attr">style</span>=<span class="string">"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>(本邮件是程序自动下发的，请勿回复！)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0000FF"</span>&gt;</span>构建结果 - $&#123;BUILD_STATUS&#125;<span class="tag">&lt;/<span class="name">font</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>构建信息<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目名称&amp;nbsp;：&amp;nbsp;$&#123;PROJECT_NAME&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建编号&amp;nbsp;：&amp;nbsp;第$&#123;BUILD_NUMBER&#125;次构建<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>SVN&amp;nbsp;版本：&amp;nbsp;$&#123;SVN_REVISION&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>触发原因：&amp;nbsp;$&#123;CAUSE&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建日志：&amp;nbsp;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;BUILD_URL&#125;console"</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建&amp;nbsp;&amp;nbsp;Url&amp;nbsp;：&amp;nbsp;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;BUILD_URL&#125;"</span>&gt;</span>$&#123;BUILD_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>工作目录&amp;nbsp;：&amp;nbsp;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;PROJECT_URL&#125;ws"</span>&gt;</span>$&#123;PROJECT_URL&#125;ws<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目&amp;nbsp;&amp;nbsp;Url&amp;nbsp;：&amp;nbsp;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;PROJECT_URL&#125;"</span>&gt;</span>$&#123;PROJECT_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>Changes Since Last</div><div class="line">                        Successful Build:<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>历史变更记录 : <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;PROJECT_URL&#125;changes"</span>&gt;</span>$&#123;PROJECT_URL&#125;changes<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> $&#123;CHANGES_SINCE_LAST_SUCCESS,reverse=true, format="Changes for Build #%n:<span class="tag">&lt;<span class="name">br</span> /&gt;</span>%c<span class="tag">&lt;<span class="name">br</span> /&gt;</span>",showPaths=true,changesFormat="<span class="tag">&lt;<span class="name">pre</span>&gt;</span>[%a]<span class="tag">&lt;<span class="name">br</span> /&gt;</span>%m<span class="tag">&lt;/<span class="name">pre</span>&gt;</span>",pathFormat="&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;%p"&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Failed Test Results<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">pre</span></span></div><div class="line">                    <span class="attr">style</span>=<span class="string">"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif"</span>&gt;$FAILED_TESTS<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>构建日志 (最后 100行):<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &lt;tr&gt;</span></div><div class="line">            &lt;td&gt;Test Logs (if test has ran): &lt;a</div><div class="line">                href="$&#123;PROJECT_URL&#125;ws/TestResult/archive_logs/Log-Build-$&#123;BUILD_NUMBER&#125;.zip"&gt;$&#123;PROJECT_URL&#125;/ws/TestResult/archive_logs/Log-Build-$&#123;BUILD_NUMBER&#125;.zip&lt;/a&gt;</div><div class="line">                &lt;br /&gt;</div><div class="line">            &lt;br /&gt;</div><div class="line">            &lt;/td&gt;</div><div class="line">        &lt;/tr&gt; --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"80"</span> <span class="attr">rows</span>=<span class="string">"30"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span></span></div><div class="line">                    <span class="attr">style</span>=<span class="string">"font-family: Courier New"</span>&gt;$&#123;BUILD_LOG, maxLines=100&#125;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://www.jianshu.com/p/c3c769c5b8f2" target="_blank" rel="external">Jenkins+fir 上传更新日志</a><br><a href="http://www.cnblogs.com/yangxia-test/p/4366172.html" target="_blank" rel="external">Jenkins 邮件配置</a></p>]]></content>
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> Jenkins </tag>
            
            <tag> fir </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>fir.im Jenkins 插件使用方法</title>
      <link href="/2017/07/07/2017-07-07-fir.im%20Jenkins%20%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2017/07/07/2017-07-07-fir.im%20Jenkins%20%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h4 id="fir-im-Jenkins-插件"><a href="#fir-im-Jenkins-插件" class="headerlink" title="fir.im Jenkins 插件"></a>fir.im Jenkins 插件</h4><p>使用fir.im Jenkins 插件可以更快速地上传 apk/ipa 安装包到 fir.im.</p> <a id="more"></a><h4 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h4><ol><li><p>方法一：直接下载安装包</p><p>Download Jenkins <a href="https://jenkins.io/index.html" target="_blank" rel="external">https://jenkins.io/index.html</a><br>安装完成后在 Terminal 中输入，即可打开 Jenkins。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open /Applications/Jenkins/jenkins.war</div></pre></td></tr></table></figure></li><li><p>方法二：使用命令行安装</p><p>安装 homebrew</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure><p>安装 Jenkins</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install jenkins</div></pre></td></tr></table></figure><p>启动 Jenkins</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ jenkins</div></pre></td></tr></table></figure></li></ol><h4 id="访问-Jenkins"><a href="#访问-Jenkins" class="headerlink" title="访问 Jenkins"></a>访问 Jenkins</h4><p>请在浏览器输入地址:<br><a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a><br>使用安装包安装后会自动打开，如果端口冲突那么请修改端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write /Library/Preferences/org.jenkins-ci httpPort xxxx</div></pre></td></tr></table></figure></p><p>如果下载的是war的包，用这个命令更改端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar jenkins.war --httpPort=8090</div></pre></td></tr></table></figure></p><h4 id="安装-fir-im-的上传插件"><a href="#安装-fir-im-的上传插件" class="headerlink" title="安装 fir.im 的上传插件"></a>安装 fir.im 的上传插件</h4><h4 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h4><p>该插件主要功能有2点：</p><ol><li>上传 apk/ipa 安装包 到 fir.im</li><li>上传符号表到 BugHD，方便查看混淆后的 Log 日志</li></ol><p>注意：在使用之前，请确认自己创建的 Jenkins 项目可以正常编译生成 ipa/apk 文件。 该插件的一般使用情景是编译完生成 apk/ipa 后，如果未指定 apk/ipa 生成目录，插件会默认选择 Jenkins 项目目录。</p><h4 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h4><p>Jenkins 插件下载地址 <a href="http://7xju1s.com1.z0.glb.clouddn.com/fir-plugin-1.9.5.hpi" target="_blank" rel="external">http://7xju1s.com1.z0.glb.clouddn.com/fir-plugin-1.9.5.hpi</a></p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><ul><li>进入 Jenkins 管理界面后，点击左侧进入 <code>系统管理</code><br><img src="/images/jenkins/jenkins-1.jpg" alt="jenkins-1"></li><li>然后找到 <code>管理插件</code> 并点击进入<br><img src="/images/jenkins/jenkins-2.jpg" alt="jenkins-2"></li><li>进入插件管理后，点击 <code>高级</code> 选项卡<br><img src="/images/jenkins/jenkins-3.jpg" alt="jenkins-3"></li><li>然后在页面找到 <code>上传插件</code>，选择已下载好的 <code>fir.im jenkins 插件文件路径</code>，并点击 <code>上传</code> 等待安装成功。<br><img src="/images/jenkins/jenkins-4.jpg" alt="jenkins-4"></li><li>安装成功后，如果没有创建 Jenkins 项目，请先创建项目。如果需要配置已存在的项目，请进入在 <code>配置</code> 中找到 <code>增加构建后操作步骤</code> ，并选择 <code>Upload to fir.im</code> 添加到 Jenkins 项目中。<br><img src="/images/jenkins/jenkins-5.jpg" alt="jenkins-5"></li><li>添加成功后开始配置各种参数，如图显示：<br><img src="/images/jenkins/jenkins-6.jpg" alt="jenkins-6"></li></ul><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><ul><li><p>fir.im Token（必填）<br>fir.im Token 查看方法：直接点击 <code>API token</code> (<a href="http://fir.im/apps/apitoken" target="_blank" rel="external">http://fir.im/apps/apitoken</a>) 进行查看.<br><img src="/images/jenkins/plugins-1.jpg" alt="plugins-1"></p></li><li><p>IPA/APK Files（可选）<br>接下来，选择生成 <code>ipa/apk</code> 文件路径<br>注意：如果没有填写该选项，插会件自动默认查找 Jenkins 创建的项目目录下的 <code>apk/ipa</code> 文件</p></li><li><p>BugHD token（可选）<br>作用：BugHD上传 mapping.txt/dSYM 文件 API 的调用权限<br>注意：如果需要上传符号表则是必填项；不需要上传混淆表，则不需要填写<br><code>BugHD token 查看方法</code>：请访问 <code>BugHD API token</code> <a href="http://bughd.com/account" target="_blank" rel="external">http://bughd.com/account</a> ，登录后进行查看。<br><img src="/images/jenkins/plugins-3.jpg" alt="plugins-1"></p></li><li><p>BugHD project ID(可选)<br>作用：判断具体上传到指定的 bughd 项目<br>注意：如果需要上传符号表，则是必填项；不需要上传则不用填写<br><code>BugHD project ID</code> 查看方法： 请访问 <code>BugHD Projects</code> <a href="http://bughd.com/projects" target="_blank" rel="external">http://bughd.com/projects</a> ，登录后找到你要上传符号表的项目，进入该项目，选择 <code>项目设置</code> 选项卡进行查看。<br><img src="/images/jenkins/plugins-4.jpg" alt="plugins-1"></p></li><li><p>dSYM File or mapping File(可选)<br>作用：选择生成 dSYM/mapping.txt 文件路径<br>注意：如果需要上传符号表，则是必填项；不需要上传则不用填写</p></li><li><p>Build Notes(可选)<br>作用：上传 fir.im 后，可显示出更新日志</p></li></ul><h4 id="Jenkins-插件更新日志"><a href="#Jenkins-插件更新日志" class="headerlink" title="Jenkins 插件更新日志"></a>Jenkins 插件更新日志</h4><ul><li>2015-11-13      V1.1     上线</li><li>2015-11-25      V1.2     修复 slave 状态下上传失败的Bug</li><li>2015-11-30      V1.3     修复 上传 apk 图标过小的问题</li><li>2015-12-01      V1.4     修复 ipa文件解析 icon 出错的问题</li><li>2015-12-08      V1.5     增加 上传apk/ipa文件的过滤条件</li><li>2015-12-16      V1.6     Bug fix</li><li>2016-01-08      V1.7     Bug fix</li><li>2016-03-14      V1.9.1   修复 解析图标失败后导致无法上传 &amp; 获取git log失败的问题</li><li>2016-03-18      V1.9.2   更新 dsym/mapping 路径支持环境变量 changelog支持环境变量</li><li>2016-06-29      V1.9.2.3   修复 应用上传问题</li><li>2016-09-06      V1.9.3   修复 apk/ipa解析的错误</li><li>2016-09-16      V1.9.4   修复 ChangeLog选项环境变量不变的bug</li><li>2016-11-09      V1.9.4   修复 解析ipa的问题<br>最后，关于更多 Jenkins 的问题推荐阅读 fir.im 的用户写的 Jenkins+GitHub+Xcode+fir搭了一个持续集成环境<a href="http://www.jianshu.com/p/a17167274463" target="_blank" rel="external">http://www.jianshu.com/p/a17167274463</a>)</li></ul><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://blog.fir.im/jenkins" target="_blank" rel="external">fir.im Jenkins 插件使用方法</a></p>]]></content>
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> Jenkins </tag>
            
            <tag> fir </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Kotlin与Dagger2 ButterKnife冲突解决</title>
      <link href="/2017/06/25/2017-06-25-Kotlin%E4%B8%8EDagger2%20ButterKnife%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/"/>
      <url>/2017/06/25/2017-06-25-Kotlin%E4%B8%8EDagger2%20ButterKnife%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<h4 id="1-Kotlin-与-Dagger2冲突"><a href="#1-Kotlin-与-Dagger2冲突" class="headerlink" title="1. Kotlin 与 Dagger2冲突"></a>1. Kotlin 与 Dagger2冲突</h4><p>在kotlin中加入dagger注入代码时出现<br>Unresolved reference dagger的错误时<br>需要在 Kotlin 中则需要添加 kotlin-kapt 插件激活 kapt，并使用 kapt 替换 annotationProcessor：<br>在app/build.gradle文件中增加</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;kotlin-kapt&apos;</div><div class="line"></div><div class="line">kapt &#123;</div><div class="line">    generateStubs = true</div><div class="line">&#125;</div><div class="line">dependencies &#123;</div><div class="line">    kapt &quot;com.google.dagger:dagger-compiler:$dagger-version&quot;</div><div class="line">    compile &quot;com.google.dagger:dagger:$&#123;daggerVersion&#125;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>特别提示：kapt 也能够处理 Java 文件，所以不需要再保留 annotationProcessor 的依赖。</p><h4 id="2-出现ButterKnife不生效问题处理"><a href="#2-出现ButterKnife不生效问题处理" class="headerlink" title="2.出现ButterKnife不生效问题处理"></a>2.出现ButterKnife不生效问题处理</h4><p>在项目级 build.gradle中增加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 Kotlin 中使用 ButterKnife 与 Java 中完全一致。 在 Gradle 构建脚本的修改如下，后面将重点介绍代码部分的差异。<br>在 Gradle 依赖中添加 kotlin-kapt 插件，并使用 kapt 替代 annotationProcessor。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">apply plugin: ‘kotlin-kapt‘</div><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile &quot;com.jakewharton:butterknife:$butterknife-version&quot;</div><div class="line">    kapt &quot;com.jakewharton:butterknife-compiler:$butterknife-version&quot;</div><div class="line">    </div><div class="line"> // 处理butterknife与support-compat冲突</div><div class="line">    compile (&quot;com.jakewharton:butterknife:$butterknife-version&quot;) &#123;</div><div class="line">        exclude group: &apos;com.android.support&apos;, module: &apos;support-compat&apos;</div><div class="line">    &#125;</div><div class="line">//    apt &quot;com.jakewharton:butterknife-compiler:$butterknife-version&quot;</div><div class="line">    kapt &quot;com.jakewharton:butterknife-compiler:$butterknife-version&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Android </category>
          
          <category> Kotlin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> Dagger2 </tag>
            
            <tag> ButterKnife </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Glide 设置超时时间</title>
      <link href="/2017/06/22/2017-06-22-Glide%E8%AE%BE%E7%BD%AE%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4/"/>
      <url>/2017/06/22/2017-06-22-Glide%E8%AE%BE%E7%BD%AE%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<p>Glide 系列文章<br><a href="https://mrfu.me/2016/02/27/Glide_Request_Priorities/" target="_blank" rel="external">https://mrfu.me/2016/02/27/Glide_Request_Priorities/</a></p><p>Glide默认使用HttpUrlConnection作为协议栈进行网络连接默认超时时间为2500ms<br>设置超时时间方法</p><a id="more"></a><p>1、使用Volley作为协议栈<br>compile ‘com.github.bumptech.glide:volley-integration:1.5.0@aar’<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomGlideModule</span> <span class="keyword">implements</span> <span class="title">GlideModule</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyOptions</span><span class="params">(Context context, GlideBuilder builder)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerComponents</span><span class="params">(Context context, Glide glide)</span> </span>&#123;</div><div class="line">        RequestQueue queue = <span class="keyword">new</span> RequestQueue( <span class="comment">// params hardcoded from Volley.newRequestQueue()</span></div><div class="line">                <span class="keyword">new</span> DiskBasedCache(<span class="keyword">new</span> File(context.getCacheDir(), <span class="string">"volley"</span>)),</div><div class="line">                <span class="keyword">new</span> BasicNetwork(<span class="keyword">new</span> HurlStack())) &#123;</div><div class="line">            <span class="meta">@Override</span> <span class="keyword">public</span> &lt;T&gt; <span class="function">Request&lt;T&gt; <span class="title">add</span><span class="params">(Request&lt;T&gt; request)</span> </span>&#123;</div><div class="line">                request.setRetryPolicy(<span class="keyword">new</span> DefaultRetryPolicy(<span class="number">10000</span>, <span class="number">1</span>, <span class="number">1</span>));</div><div class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.add(request);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        queue.start();</div><div class="line">        glide.register(GlideUrl.class, InputStream.class, <span class="keyword">new</span> VolleyUrlLoader.Factory(queue));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">    android:name=&quot;&#123;packageName&#125;.CustomGlideModule&quot;</div><div class="line">    android:value=&quot;GlideModule&quot; /&gt;</div></pre></td></tr></table></figure><p>2、使用OkHttp作为协议栈<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &apos;com.github.bumptech.glide:okhttp-integration:1.5.0@aar&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class CustomGlideModule extends GlideModule &#123;</div><div class="line">    @Override</div><div class="line">    public void applyOptions(Context context, GlideBuilder builder) &#123;</div><div class="line">        // stub</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void registerComponents(Context context, Glide glide) &#123;</div><div class="line">        final OkHttpClient.Builder builder = new OkHttpClient.Builder();</div><div class="line"></div><div class="line">        // set your timeout here</div><div class="line">        builder.readTimeout(30, TimeUnit.SECONDS);</div><div class="line">        builder.writeTimeout(30, TimeUnit.SECONDS);</div><div class="line">        builder.connectTimeout(30, TimeUnit.SECONDS);</div><div class="line"></div><div class="line">        glide.register(GlideUrl.class, InputStream.class, new OkHttpUrlLoader.Factory(builder.build()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">    android:name=&quot;&#123;packageName&#125;.CustomGlideModule&quot;</div><div class="line">    android:value=&quot;GlideModule&quot; /&gt;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Android </category>
          
          <category> Glide </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> Glide </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>理解Android中的SharedPreferences</title>
      <link href="/2017/05/13/2017-05-13-%E7%90%86%E8%A7%A3Android%E4%B8%AD%E7%9A%84SharedPreferences/"/>
      <url>/2017/05/13/2017-05-13-%E7%90%86%E8%A7%A3Android%E4%B8%AD%E7%9A%84SharedPreferences/</url>
      <content type="html"><![CDATA[<p>SharedPreferences作为Android中数据存储方式的一种，我们经常会用到，它适合用来保存那些少量的数据，特别是键值对数据，比如配置信息，登录信息等。不过要想做到正确使用SharedPreferences，就需要弄清楚下面几个问题： </p><a id="more"></a><p>（1）每次调用getSharedPreferences时都会创建一个SharedPreferences对象吗？这个对象具体是哪个类对象？<br>（2）在UI线程中调用getXXX有可能导致ANR吗？<br>（3）为什么SharedPreferences只适合用来存放少量数据，为什么不能把SharedPreferences对应的xml文件当成普通文件一样存放大量数据？<br>（4）commit和apply有什么区别？<br>（5）SharedPreferences每次写入时是增量写入吗？</p><p>要想弄清楚上面几个问题，需要查看SharedPreferences的源码实现才能解决。先从Context的getSharedPreferences开始：<br>我们知道Android中的Context类体系其实是使用了装饰者模式，而被装饰对象就这个mBase，它其实就是一个ContextImpl对象，ContextImpl的getSharedPreferences方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public SharedPreferences getSharedPreferences(String name, int mode) &#123;</div><div class="line">        SharedPreferencesImpl sp;</div><div class="line">        synchronized (ContextImpl.class) &#123;</div><div class="line">            if (sSharedPrefs == null) &#123;</div><div class="line">                sSharedPrefs = new ArrayMap&lt;String, ArrayMap&lt;String, SharedPreferencesImpl&gt;&gt;();</div><div class="line">            &#125;</div><div class="line">            final String packageName = getPackageName();</div><div class="line">            ArrayMap&lt;String, SharedPreferencesImpl&gt; packagePrefs = sSharedPrefs.get(packageName);</div><div class="line">            if (packagePrefs == null) &#123;</div><div class="line">                packagePrefs = new ArrayMap&lt;String, SharedPreferencesImpl&gt;();</div><div class="line">                sSharedPrefs.put(packageName, packagePrefs);</div><div class="line">            &#125;</div><div class="line">            // At least one application in the world actually passes in a null</div><div class="line">            // name.  This happened to work because when we generated the file name</div><div class="line">            // we would stringify it to &quot;null.xml&quot;.  Nice.</div><div class="line">            if (mPackageInfo.getApplicationInfo().targetSdkVersion &lt;</div><div class="line">                    Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">                if (name == null) &#123;</div><div class="line">                    name = &quot;null&quot;;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            sp = packagePrefs.get(name);</div><div class="line">            if (sp == null) &#123;</div><div class="line">                File prefsFile = getSharedPrefsFile(name);</div><div class="line">                sp = new SharedPreferencesImpl(prefsFile, mode);</div><div class="line">                packagePrefs.put(name, sp);</div><div class="line">                return sp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if ((mode &amp; Context.MODE_MULTI_PROCESS) != 0 ||</div><div class="line">            getApplicationInfo().targetSdkVersion &lt; android.os.Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class="line">            // If somebody else (some other process) changed the prefs</div><div class="line">            // file behind our back, we reload it.  This has been the</div><div class="line">            // historical (if undocumented) behavior.</div><div class="line">            sp.startReloadIfChangedUnexpectedly();</div><div class="line">        &#125;</div><div class="line">        return sp;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>使用到了单例模式，sSharedPrefs 是一个ArrayMap，packagePrefs也是一个ArrayMap，它们的关系是这样的：<br>packagePrefs存放文件name与SharedPreferencesImpl键值对，sSharedPrefs存放包名与ArrayMap键值对。注意sSharedPrefs是static变量，也就是一个类只有一个实例，因此你每次getSharedPreferences其实拿到的都是同一个SharedPreferences对象。这里回答第一个问题，对于一个相同的SharedPreferences name，获取到的都是同一个SharedPreferences对象，它其实是SharedPreferencesImpl对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">SharedPreferencesImpl(File file, int mode) &#123;</div><div class="line">    mFile = file;</div><div class="line">    mBackupFile = makeBackupFile(file);</div><div class="line">    mMode = mode;</div><div class="line">    mLoaded = false;</div><div class="line">    mMap = null;</div><div class="line">    startLoadFromDisk();</div><div class="line">&#125;</div><div class="line">private void startLoadFromDisk() &#123;</div><div class="line">    synchronized (this) &#123;</div><div class="line">        mLoaded = false;</div><div class="line">    &#125;</div><div class="line">    new Thread(&quot;SharedPreferencesImpl-load&quot;) &#123;</div><div class="line">        public void run() &#123;</div><div class="line">            synchronized (SharedPreferencesImpl.this) &#123;</div><div class="line">                loadFromDiskLocked();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>第一次调用getSharedPreferences时会去创建一个SharedPreferencesImpl对象，它会开启一个子线程，然后去把指定的SharedPreferences文件中的键值对全部读取出来，存放在一个Map中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SharedPreferences sp = getSharedPreferences(&quot;test&quot;, Context.MODE_PRIVATE);</div><div class="line">String name = sp.getString(&quot;name&quot;, null);</div></pre></td></tr></table></figure></p><p>调用getString时那个SharedPreferencesImpl构造方法开启的子线程可能还没执行完（比如文件比较大时全部读取会比较久），这时getString当然还不能获取到相应的值，必须阻塞到那个子线程读取完为止，getString方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public String getString(String key, @Nullable String defValue) &#123;</div><div class="line">        synchronized (this) &#123;</div><div class="line">            awaitLoadedLocked();</div><div class="line">            String v = (String)mMap.get(key);</div><div class="line">            return v != null ? v : defValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>显然这个awaitLoadedLocked方法就是用来等this这个锁的，在loadFromDiskLocked方法的最后我们也可以看到它调用了notifyAll方法，这时如果getString之前阻塞了就会被唤醒。那么现在这里有一个问题，我们的getString是写在UI线程中，如果那个getString被阻塞太久了，比如60s，这时就会出现ANR，因此要根据具体情况考虑是否需要把SharedPreferences的读写放在子线程中。这里回答第二个问题，在UI线程中调用getXXX可能会导致ANR。同时可以回答第三个问题，SharedPreferences只能用来存放少量数据，如果一个SharedPreferences对应的xml文件很大的话，在初始化时会把这个文件的所有数据都加载到内存中，这样就会占用大量的内存，有时我们只是想读取某个xml文件中一个key的value，结果它把整个文件都加载进来了，显然如果必要的话这里需要进行相关优化处理。</p><p>SharedPreferences的初始化和读取比较简单，写操作就相对复杂了点，我们知道写一个SharedPreferences文件都是先要调用edit方法获取到一个Editor对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public Editor edit() &#123;</div><div class="line">    synchronized (this) &#123;</div><div class="line">        awaitLoadedLocked();</div><div class="line">    &#125;</div><div class="line">    return new EditorImpl();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其实拿到的是一个EditorImpl对象，它是SharedPreferencesImpl的内部类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public final class EditorImpl implements Editor &#123;</div><div class="line">    private final Map&lt;String, Object&gt; mModified = Maps.newHashMap();</div><div class="line">    private boolean mClear = false;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看到它有一个Map对象mModified，用来保存“脏数据”，也就是你每次put的时候其实是把那个键值对放到这个mModified 中，最后调用apply或者commit才会真正把数据写入文件中，比如看putString：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public Editor putString(String key, @Nullable String value) &#123;</div><div class="line">    synchronized (this) &#123;</div><div class="line">        mModified.put(key, value);</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其它putXXX代码基本也是一样的。EditorImpl类的关键就是apply和commit，不过它们有一些区别，先看commit方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public boolean commit() &#123;</div><div class="line">            MemoryCommitResult mcr = commitToMemory();</div><div class="line">            SharedPreferencesImpl.this.enqueueDiskWrite(</div><div class="line">                mcr, null /* sync write on this thread okay */);</div><div class="line">            try &#123;</div><div class="line">                mcr.writtenToDiskLatch.await();</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">            notifyListeners(mcr);</div><div class="line">            return mcr.writeToDiskResult;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p><p>关键有两步，先调用commitToMemory，再调用enqueueDiskWrite，commitToMemory就是产生一个“合适”的MemoryCommitResult对象mcr，然后调用enqueueDiskWrite时需要把这个对象传进去，commitToMemory方法：</p><p>这里需要弄清楚两个对象mMap和mModified，mMap是存放当前SharedPreferences文件中的键值对，而mModified是存放此时edit时put进去的键值对。mDiskWritesInFlight表示正在等待写的操作数量。可以看到这个方法中首先处理了clear标志，它调用的是mMap.clear()，然后再遍历mModified将新的键值对put进mMap，也就是说在一次commit事务中，如果同时put一些键值对和调用clear，那么clear掉的只是之前的键值对，这次put进去的键值对还是会被写入的。遍历mModified时，需要处理一个特殊情况，就是如果一个键值对的value是this（SharedPreferencesImpl）或者是null那么表示将此键值对删除，这个在remove方法中可以看到：</p><p>commit接下来就是调用enqueueDiskWrite方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">private void enqueueDiskWrite(final MemoryCommitResult mcr,</div><div class="line">                              final Runnable postWriteRunnable) &#123;</div><div class="line">    final Runnable writeToDiskRunnable = new Runnable() &#123;</div><div class="line">            public void run() &#123;</div><div class="line">                synchronized (mWritingToDiskLock) &#123;</div><div class="line">                    writeToFile(mcr);</div><div class="line">                &#125;</div><div class="line">                synchronized (SharedPreferencesImpl.this) &#123;</div><div class="line">                    mDiskWritesInFlight--;</div><div class="line">                &#125;</div><div class="line">                if (postWriteRunnable != null) &#123;</div><div class="line">                    postWriteRunnable.run();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    final boolean isFromSyncCommit = (postWriteRunnable == null);</div><div class="line">    // Typical #commit() path with fewer allocations, doing a write on</div><div class="line">    // the current thread.</div><div class="line">    if (isFromSyncCommit) &#123;</div><div class="line">        boolean wasEmpty = false;</div><div class="line">        synchronized (SharedPreferencesImpl.this) &#123;</div><div class="line">            wasEmpty = mDiskWritesInFlight == 1;</div><div class="line">        &#125;</div><div class="line">        if (wasEmpty) &#123;</div><div class="line">            writeToDiskRunnable.run();</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    QueuedWork.singleThreadExecutor().execute(writeToDiskRunnable);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>先定义一个Runnable，注意实现Runnable与继承Thread的区别，Runnable表示一个任务，不一定要在子线程中执行，一般优先考虑使用Runnable。这个Runnable中先调用writeToFile进行写操作，写操作需要先获得mWritingToDiskLock，也就是写锁。然后执行mDiskWritesInFlight–，表示正在等待写的操作减少1。最后判断postWriteRunnable是否为null，调用commit时它为null，而调用apply时它不为null。<br>Runnable定义完，就判断这次是commit还是apply，如果是commit，即isFromSyncCommit为true，而且有1个写操作需要执行，那么就调用writeToDiskRunnable.run()，注意这个调用是在当前线程中进行的。如果不是commit，那就是apply，这时调用QueuedWork.singleThreadExecutor().execute(writeToDiskRunnable)，这个QueuedWork类其实很简单，里面有一个SingleThreadExecutor，用于异步执行这个writeToDiskRunnable。<br>这里就可以回答第四个问题了，commit的写操作是在调用线程中执行的，而apply内部是用一个单线程的线程池实现的，因此写操作是在子线程中执行的。</p><p>说一下那个mBackupFile，SharedPreferences在写入时会先把之前的xml文件改成名成一个备份文件，然后再将要写入的数据写到一个新的文件中，如果这个过程执行成功的话，就会把备份文件删除。由此可见每次即使只是添加一个键值对，也会重新写入整个文件的数据，这也说明SharedPreferences只适合保存少量数据，文件太大会有性能问题。这里回答第五个问题，SharedPreferences每次写入都是整个文件重新写入，不是增量写入。</p><p>SharedPreferences几种模式：<br>Context.MODE_PRIVATE：应用私有，只有相同的UID才能进行读写<br>Context.MODE_MULTI_PROCESS：多进程安全标志，Android2.3之前该标志是默认被设置的，Android2.3开始需要自己设置。<br>MODE_APPEND：首次创建时如果文件存在不会删除文件。<br>注意这些模式可以使用位与进行设置，比如MODE_PRIVATE | MODE_APPEND。</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
          <category> SharedPreferences </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 分享 </tag>
            
            <tag> Blog </tag>
            
            <tag> 存储 </tag>
            
            <tag> SharedPreferences </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android内存优化相关</title>
      <link href="/2017/04/13/2017-04-13-Android%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3/"/>
      <url>/2017/04/13/2017-04-13-Android%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h4 id="Java内存分配策略概述"><a href="#Java内存分配策略概述" class="headerlink" title="Java内存分配策略概述"></a>Java内存分配策略概述</h4><p><img src="/images/memory/memory.jpeg" alt="Overdraw"></p><a id="more"></a><ul><li><p>虚拟机栈（Stack）<br>存放基本数据类型和局部变量引用，但是对象本身不存放在栈中，而是存放在堆中。<br>当一个方法即将被运行时，Java虚拟机栈首先会在Java虚拟机栈中为该方法创建一块“栈帧”，栈帧中包含局部变量表、操作数栈、动态链接、方法出口信息等。当方法在运行过程中需要创建局部变量时，就将局部变量的值存入栈帧的局部变量表中。当方法执行完毕后，这个方法所对应的栈帧将会出栈，并释放内存空间。<br>Java虚拟机栈会出现两种异常：StackOverFlowError和OutOfMemoryError。<br>Java虚拟机栈也是线程私有的，每个线程都有各自的Java虚拟机栈，而且随着线程的创建而创建，随着线程的死亡而死亡。</p></li><li><p>堆（Heap）<br>在堆上分配内存的过程称作内存动态分配过程。在Java中堆用于存放由new创建的对象和数组。堆中分配的内存，由java虚拟机自动垃圾回收器（GC）来管理(可见我们要进行的内存优化主要就是对堆内存进行优化)。堆是不连续的内存区域（因为系统是用链表来存储空闲内存地址，自然不是连续的），堆大小受限于计算机系统中有效的虚拟内存。</p></li><li><p>方法区（Method Area）<br>方法区也是线程共享的区域，用于存储已经被虚拟机加载的类信息，常量，静态变量和即时编译器（JIT）编译后的代码等数据。</p></li><li><p>运行时常量池（Runtime Constant Pool）<br>是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。运行期间也可能将新的常量放入池中。</p></li></ul><h4 id="JVM垃圾回收"><a href="#JVM垃圾回收" class="headerlink" title="JVM垃圾回收"></a>JVM垃圾回收</h4><ol><li><p>垃圾对象的判定</p><p>Java堆中存放着几乎所有的对象实例，垃圾收集器对堆中的对象进行回收前，要先确定这些对象是否还有用，判定对象是否为垃圾对象有如下算法：</p><ul><li><p>引用计数算法</p><p>  给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加1，当引用失效时，计数器值就减1，任何时刻计数器都为0的对象就是不可能再被使用的。<br>引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的选择，当Java语言并没有选择这种算法来进行垃圾回收，主要原因是它很难解决对象之间的相互循环引用问题。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Main &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        MyObject object1 = new MyObject();</div><div class="line">        MyObject object2 = new MyObject();</div><div class="line">        object1.object = object2;</div><div class="line">        object2.object = object1;</div><div class="line">        object1 = null;</div><div class="line">        object2 = null;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">class MyObject&#123;</div><div class="line">    public Object object = null;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><p>根搜索算法</p><p>  Java和C#中都是采用根搜索算法来判定对象是否存活的。这种算法的基本思路是通过一系列名为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，就证明此对象是不可用的。在Java语言里，可作为GC Roots的对象包括下面几种：<br>1、栈（栈帧中的本地变量表）中引用的对象。<br>2、方法区中的静态成员。<br>3、方法区中的常量引用的对象<br>4、本地方法栈中JNI（一般说的Native方法）引用的对象。</p></li></ul></li><li><p>垃圾对象回收</p><ul><li><p>标记-清除</p><p>  该算法有如下缺点：<br>（1）标记和清除过程的效率都不高。<br>（2）标记清除后会产生大量不连续的内存碎片，当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不触发另一次垃圾收集动作。<br><img src="/images/memory/mark_sweep.jpg" alt="mark_sweep"></p></li><li>复制算法<br><img src="/images/memory/copying.jpg" alt="copying"></li><li>标记-整理<br><img src="/images/memory/mark_compact.jpg" alt="mark_compact"></li><li>分代回收算法</li></ul></li></ol><h4 id="Android的内存区域"><a href="#Android的内存区域" class="headerlink" title="Android的内存区域"></a>Android的内存区域</h4><ol><li><p>Dalvik Heap，这部分的内存区域是由Dalvik虚拟机管理，通过Java中 new 关键字来申请一块新内存。这块区域的内存是由GC直接管理，能够自动回收内存。这块内存的大小会受到系统限制，当内存超过APP最大可用内存时会OOM</p></li><li><p>Native Heap，这部分内存区域是在C++中申请的，它不受限于APP的最大可用内存限制，而只是受限于设备的物理可用内存限制。它的缺点在于没有自动回收机制，只能通过C++语法来释放申请的内存</p></li><li><p>Ashmem（Android匿名共享内存），这部分内存类似于Native内存区，但是它是受Android系统底层管理的。</p></li></ol><p>Android Dalvik Heap与原生Java一样，将堆的内存空间分为三个区域，Young Generation，Old Generation， Permanent Generation。<br>最近分配的对象会存放在Young Generation区域，对象在某个时机触发GC回收垃圾，而没有回收的就根据不同规则，有可能被移动到Old Generation，最后积累一定时间再移动到Permanent Generation区域。系统会根据不同的内存数据类型分别采用不同的回收机制。每一个Generation的内存区域都有固定的大小。执行GC占用的时间和它发生在哪一个Generation的内存区域有关，Young Generation中的每次GC操作时间是最短的，Old Generation其次，Permanent Generation最长。同时GC的执行时间也和当前Generation中的对象数量有关，数量越多，执行时间越长。<br>GC时会导致线程暂停，导致卡顿，在ART中对GC过程做了优化，据说内存分配的效率提高了10倍，GC的效率提高了2-3倍，不过主要还是优化中断和阻塞的时间，频繁的GC还是会导致卡顿。</p><h4 id="Android-App为什么会OOM呢？"><a href="#Android-App为什么会OOM呢？" class="headerlink" title="Android App为什么会OOM呢？"></a>Android App为什么会OOM呢？</h4><p>其实就是申请的内存超过了Dalvik Heap的最大值。于是也诞生了一些比较”黑科技”的内存优化方案，比如将耗内存的操作放到Native层，或者使用分进程的方式突破每个进程的Dalvik Heap内存限制。</p><h4 id="自身内存占用监控"><a href="#自身内存占用监控" class="headerlink" title="自身内存占用监控"></a>自身内存占用监控</h4><p>对于onLowMemory()与onTrimMemory(int)等是针对整个系统而言的。<br>通过Runtime.totalMemory-freeMemory即为当前应用使用的内存。<br>Runtime.getRuntime().maxMemory();<br>Runtime.getRuntime().totalMemory(); Runtime.getRuntime().freeMemory();</p><h4 id="避免内存泄漏"><a href="#避免内存泄漏" class="headerlink" title="避免内存泄漏"></a>避免内存泄漏</h4><p>内存泄漏是指应用不再使用的内存对象，但垃圾回收时没有辨认出来，不能及时回收，一直保留在内存中长期占用一定的空间不能释放。</p><h4 id="内存泄露的危害："><a href="#内存泄露的危害：" class="headerlink" title="内存泄露的危害："></a>内存泄露的危害：</h4><ul><li>过多的内存泄露最终会导致内存溢出（OOM）</li><li>内存泄露导致可用内存不足，会触发频繁GC，不管是Android2.2以前的单线程GC还是现在的CMS和G1，都有一部分的操作会导致用户线程停止（就是所谓的Stop the world），从而导致UI卡顿。</li></ul><h4 id="常见内存泄漏场景"><a href="#常见内存泄漏场景" class="headerlink" title="常见内存泄漏场景"></a>常见内存泄漏场景</h4><ol><li><p>及时关闭资源性对象<br>Cursor File往往都使用了一些缓冲，在不使用时，应该及时关闭，以便它们的缓存数据能够及时回收。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Cursor cursor = null;</div><div class="line">try&#123;</div><div class="line">    cursor = mContext.getContentResolver().query(uri,null,null,null,null);</div><div class="line">    if (cursor != null) &#123;</div><div class="line">        // 处理数据</div><div class="line">    &#125;</div><div class="line">&#125; catch (Exception e)&#123;</div><div class="line">    e.printStatckTrace();</div><div class="line">&#125; finally &#123;</div><div class="line">    if (cursor != null)&#123;</div><div class="line">        cursor.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>注册对象未注销<br>广播接收器、注册观察者等</p></li><li><p>单例Context、static变量等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">private static Resources mResources;</div><div class="line">@Override</div><div class="line">protected void onCreate(Bundle state) &#123;</div><div class="line">    super.onCreate(state);</div><div class="line">    if (mResources == null) &#123;</div><div class="line">        mResources = this.getResources();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>Handler，AsyncTAsk，TimeTask等内部类<br>当Activity退出时，消息队列中还有未处理的消息或者正在处理的消息，并且消息队列中Message持有Handler的实例，handler持有Activity的引用，导致Activity无法被回收。</p><p>需要修改两个地方</p><p>1）使用静态Handler内部类，如果你需要在Handler子类中调用外部类的方法，可以让Handler持有一个外部类的WeakReference对Handler持有的对象使用弱引用，这样在回收时，也可以回收Handler持有的对象。</p><p>2）在Activity的onDestory时，应该移除消息队列中的消息，避免Looper线程的消息队列中有待处理的消息。asyncTask.cancel()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class WeakRefHandler extends Handler</div><div class="line">&#123;</div><div class="line">    WeakReference&lt;Context&gt; mWeakContext; </div><div class="line">    public WeakRefHandler(Context context)</div><div class="line">    &#123;</div><div class="line">        mWeakContext = newWeakReference&lt;Context&gt;(context);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void handleMessage(Message msg)</div><div class="line">    &#123;</div><div class="line">        if((mWeakContext.get() instanceofActivity )&amp;&amp; ((Activity)mWeakContext.get()).isFinishing())</div><div class="line">                return ;</div><div class="line">        if(mWeakContext==null)&#123;</div><div class="line">            return ;</div><div class="line">        &#125;</div><div class="line">        super.handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>集合中的对象没有清理造成的内存泄漏，特别是静态集合</p></li><li><p>SensorManager等系统服务</p><p>系统服务可以通过Context.getSystemService 获取。通过Context.getSystemService()可以获取系统服务。这些服务工作在各自的进程中，帮助应用处理后台任务，处理硬件交互。部分服务使用时需要注册监听器，会导致服务持有了Context的引用，如果在Activity销毁的时候没有注销这些监听器，会导致内存泄漏。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">void registerListener() &#123;</div><div class="line">           SensorManager sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);</div><div class="line">           Sensor sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ALL);</div><div class="line">           sensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_FASTEST);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li><li><p>Bitmap及时调用recycle()</p><p>在不使用Bitmap对象时，需要调用recycle()释放内存，然后将它设置为null。</p></li></ol><h4 id="内存泄漏监控"><a href="#内存泄漏监控" class="headerlink" title="内存泄漏监控"></a>内存泄漏监控</h4><p>LeakCanary是一个检测内存的开源类库，实际上就是在本机上自动做了Heap Dump，然后分析生成的hprof文件，展示结果。</p><ul><li>实现监控<br>导入SDK，builder.gradle文件中加入相关引用<br>LeakCanary对应用的性能有一定的影响，特别是Heap Dump操作会消耗更多的系统资源，并且会引起卡顿现象。<br>配置还releaseCompile和testCompile的依赖，就不需要担心对正式版本性能产生影响。</li></ul><p><code>LeakCanary.install()</code>会安装一个Leaks的APK，返回一个预定义的RefWatcher，同时也启用一个<code>ActivityRefWatvher</code>，用于自动监控<code>Activity.onDestory()</code>之后泄漏的对象。其原理是设置<code>Application的ActivityLifecycleCallbacks</code>方法监控所有Activity的生命周期回调。</p><p>默认情况下，只对Activity进行了检测。如果想要监控Fragment实例或者其他自定义的组件，可以在<code>Fragment.onDestory</code>方法，或者自定义组件的周期结束回调中加入如下实现：<code>Application.getRefWatcher().watch(this);</code></p><p>也可以监控BroadcastReceiver，Service等其他有生命周期的对象等</p><ul><li><p>自定义处理结果<br>仅仅依靠默认的监控处理方式，在实际的开发和测试过程中体验不是很好，必须以来安装的Leaks应用，并且不好定制化，因此实现自定义的监控结果处理就很有必要。<br>首先继承DisplayLeakService实现一个自定义的监控处理Service</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class LeakCanaryService extends DisplayLeakService &#123;</div><div class="line">    @Override</div><div class="line">    protected void afterDefaultHandling(HeapDump heapDump, AnalysisResult result, String leakInfo) &#123;</div><div class="line">        super.afterDefaultHandling(heapDump, result, leakInfo);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>重写afterDefaultHanding方法<br>heapDump：堆内存文件，可以拿到完成的hprof文件，使用MAT分析等。<br>result：监控到内存的状态，如是否泄漏等。<br>leakInfo：leak trace详细信息，除了内存泄漏对象，还有设备信息等。<br>然后在install时，使用自定义的LeakCanaryService，如下：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RefWatcher watcher = LeakCanary.refWatcher(this).</div><div class="line">listenerServiceClass(LeakCanaryService.class).buildAndInstall();</div></pre></td></tr></table></figure><p> 就可以实现自己的处理方式，如丰富提示信息、把数据保存到本地、上传到服务器分析等。</p></li></ul><h4 id="优化内存空间"><a href="#优化内存空间" class="headerlink" title="优化内存空间"></a>优化内存空间</h4><ol><li><p>序列化 Serializable Parcelable<br>Serializable 序列化时会调用ObjectOutputStream.writeObject 反序列化会调用ObjectInputStream.readObject()引用了大量反射机制，导致GC频繁触发。<br>自己实现序列化与反序列化过程需要重写writeObject()和readObject()</p></li><li><p>避免AutoBoxing</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Integer num = 0;</div><div class="line">for(int i = 0; i &lt; 100; i ++)&#123;</div><div class="line">    num += i;    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>基础整型int占用4个字节，而Integer对象有16字节。</p></li><li><p>Adapter进行优化</p><p>复用convertView。<br>当快速滑动列表时（SCROLL_STATE_FLING），item中的图片或获取需要消耗资源的view，可以不显示出来；而处于停止滚动状 态（SCROLL_STATE_IDLE）则将那些view显示出来。</p></li><li><p>少用静态变量</p><p>静态变量属于全局变量，不会被GC回收，它们会一直占用内存。</p></li><li><p>内存复用</p><p>1). 有效利用系统自带的资源<br>重用系统资源：</p><ul><li>利用系统定义的id</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:id=&quot;@android:id/list&quot;</div></pre></td></tr></table></figure><ul><li><p>利用系统的图片资源</p></li><li><p>利用系统的字符串资源</p></li><li><p>利用系统的Style</p></li><li><p>利用系统的颜色定义</p></li></ul><p>2) 选用对象池<br>对象池：如果某个对象在创建时，需要较大的资源开销，那么可以将其放入对象池，即将对象保存起来，下次需要时直接取出使用，而不用再次创建对象。当然，维护对象池也需要一定开销，故要衡量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Message.obtain()</div><div class="line">Handler.obtainMessage()</div></pre></td></tr></table></figure></li></ol><p>使用对象池需要需要注意几点：<br>将对象放回池中，注意初始化对象的数据，防止存在脏数据<br>合理控制池的增长，避免过大，导致很多对象处于闲置状态<br>3）线程池：将线程对象放在池中供反复使用，减少反复创建线程的开销。<br>线程的创建和销毁都需要时间，当有大量的线程创建和销毁时，那么这些时间的消耗则比较明显，将导致性能上的缺失</p><ol><li><p>单线程模型中，使用非线程安全的类，如：StringBuilder，ArrayList等。</p></li><li><p>ViewPager限制加载数量<br>ViewPager同时缓存page数如果过多，那么第一次显示时，ViewPager所初始化的pager就会很多，这样pager累积渲染耗时就会增多，看起来就卡。</p></li><li><p>for循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for(int i = 0; i &lt; getCount(); i ++)&#123;</div><div class="line">    try&#123;        </div><div class="line">    &#125;catch()&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>getCount()方法提取</li><li>避免循环内部创建临时变量</li><li>避免循环内部try{}catch()</li></ul></li><li><p>使用注解替代枚举<br>android.support.annotation.IntDef，StringDef</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//先定义 常量</div><div class="line">public static final int SUNDAY = 0;</div><div class="line">public static final int MONDAY = 1;</div><div class="line">public static final int TUESDAY = 2;</div><div class="line">public static final int WEDNESDAY = 3;</div><div class="line">public static final int THURSDAY = 4;</div><div class="line">public static final int FRIDAY = 5;</div><div class="line">public static final int SATURDAY = 6;</div><div class="line">@IntDef(&#123;SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY&#125;)</div><div class="line">@Retention(RetentionPolicy.SOURCE)</div><div class="line">public @interface WeekDays &#123;</div><div class="line">&#125;</div><div class="line">@WeekDays</div><div class="line">private int currentDay = SUNDAY;</div><div class="line">@WeekDays</div><div class="line">public int getCurrentDay() &#123;</div><div class="line">    return currentDay;</div><div class="line">&#125;</div><div class="line">public void setCurrentDay(@WeekDays int currentDay) &#123;</div><div class="line">    this.currentDay = currentDay;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>减少父类声明<br>减少List list = new ArrayList();<br>如果事先知道集合大小，则可以在构造方法中设置初始大小。</p></li><li><p>更优的数据结构<br>ArrayMap及SparseArray是Android的系统API，用于在一定情况下取代HashMap而达到节省内存的目的，对于key为int的HashMap尽量使用SparceArray替代，大概可以省30%的内存，而对于其他类型，ArrayMap对内存的节省实际并不明显，10%左右，但是数据量在千级以上时，查找速度可能会变慢。　</p></li><li><p>谨慎使用多进程<br>现在很多App都不是单进程，为了保活，或者提高稳定性都会进行一些进程拆分，通常我们在Application的onCreate方法中会做很多初始化操作,但是多进程会导致Application初始化多次，为了避免不必要的初始化，建议按照进程(通过判断当前进程名)对应初始化。<br>Android应用可以支持开启多个进程。 通常的做法是这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;service</div><div class="line">android:name=&quot;.PushService&quot;</div><div class="line">android:process=&quot;:remote&quot;/&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class MyApplication extends Application &#123;</div><div class="line">    private static final String LOGTAG = &quot;MyApplication&quot;;</div><div class="line">    @Override</div><div class="line">    public void onCreate() &#123;</div><div class="line">        super.onCreate();</div><div class="line">        String currentProcessName = getCurrentProcessName();</div><div class="line">        if (getPackageName().equals(currentProcessName)) &#123;</div><div class="line">            //init for default process</div><div class="line">        &#125; else if (currentProcessName.endsWith(&quot;:remote&quot;)) &#123;</div><div class="line">            //init for netowrk process</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>合理使用StringBuffer,StringBuilder,String<br>在简单的字符串拼接中，String的效率是最高的，例如String s = “hello” + “world”;<br>如果你的字符串是来自另外的String对象的话，速度就没那么快了，例如：<br>   String str2 = “This is”;<br>   String str3 = “ a ”;<br>   String str4 = “ test”;<br>   String str1 = str2 +str3 + str4;<br>这里就要求使用StringBuilder了。　　</p></li><li><p>珍惜Services资源<br>如果你的应用需要在后台使用service，除非它被触发并执行一个任务，否则其他时候Service都应该是停止状态。另外需要注意当这个service完成任务之后因为停止service失败而引起的内存泄漏。 当你启动一个Service，系统会倾向为了保留这个Service而一直保留Service所在的进程。IntentService。</p></li><li><p>减少bitmap占用的内存<br>BitmapFactory在解码图片时，可以带一个Options，有一些比较有用的功能，比如：</p><ul><li>inSampleSize<br>如果采样率为 2，那么读出来的图片只有原始图片的 1/4 大小，<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options options = new Options();</div><div class="line">options.inSampleSize = 2;</div><div class="line">Bitmap bitmap = BitmapFactory.decodeResource(getResources(), resId, options);</div></pre></td></tr></table></figure></li></ul><p>宽高降为1 / 2，像素数降为1 / 4</p><ul><li>inJustDecodeBounds</li></ul><p>有时如果只是为了获取图片的大小就可以用这个，而不必直接加载整张图片。</p><ul><li>inPreferredConfig 指定图片格式</li></ul><p>支持的图片格式</p><p>| 格式 | 描述 |<br>| :—- | :—- |<br>|ALPHA_8|        只有一个alpha通道<br>|ARGB_4444|    这个从API 13开始已经废弃，因为质量太差<br>|ARGB_8888|    ARGB四个通道，每个通道8bit<br>|RGB_565|        每个像素占2Byte，其中红色占5bit，绿色占6bit，蓝色占5bit</p><p>默认会使用ARGB_8888，在这个模式下一个像素点将会占用4个byte，而对一些没有透明度要求或者图片质量要求不高的图片，可以使用RGB_565，一个像素只会占用2个byte，可以省下50%内存。</p><ul><li>使用Ashmem内存</li></ul><p>Ashmem内存区域是不能被Java应用直接使用的，但这其中有一些例外，而Bitmap是其中一个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options options = new BitmapFactory.Options();</div><div class="line">options.inPurgeable = true;</div><div class="line">options.inInputShareable = true;</div><div class="line">Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, options);</div></pre></td></tr></table></figure><p>缺点：<br>当系统内存不足时回收这个bitmap，如果一个被回收的bitmap在之后又要被使用，系统会重新decode，但是这个decode操作是发生在UI线程中的可能会造成掉帧现象，因此改做法已经被Google废弃掉，推荐使用 inBitmap。</p><ul><li>inBitmap<br>告知bitmap解码器去尝试使用已经存在的内存区域，新解码的bitmap会尝试去使用之前那张bitmap在heap中所占据的<code>pixel data</code>内存区域，而不是去问内存重新申请一块区域来存放bitmap。<br>使用<code>inBitmap</code>需要注意几个限制条件：<br>在<code>SDK 11 -&gt; 18</code>之间，重用的bitmap大小必须是一致的，例如给inBitmap赋值的图片大小为100x100，那么新申请的bitmap必须也为100x100才能够被重用。从<code>SDK19</code>开始，新申请的bitmap大小必须小于或者等于已经赋值过的bitmap大小。 新申请的bitmap与旧的bitmap必须有相同的解码格式，如果前面的bitmap是8888，那么就不能支持4444与565格式的bitmap了。</li><li>使用软引用对bitmap做缓存</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">private Map&lt;String, SoftReference&lt;Bitmap&gt;&gt; imageCache = new HashMap&lt;String, SoftReference&lt;Bitmap&gt;&gt;();</div><div class="line">public void addBitmapToCache(String path) &#123;</div><div class="line">    // 强引用的Bitmap对象</div><div class="line">    Bitmap bitmap = BitmapFactory.decodeFile(path);</div><div class="line">    // 软引用的Bitmap对象</div><div class="line">    SoftReference&lt;Bitmap&gt; softBitmap = new SoftReference&lt;Bitmap&gt;(bitmap);</div><div class="line">    // 添加该对象到Map中使其缓存</div><div class="line">    imageCache.put(path, softBitmap);</div><div class="line">&#125;</div><div class="line">// 通过SoftReference的get()方法得到Bitmap对象</div><div class="line">public Bitmap getBitmapByPath(String path) &#123;</div><div class="line">    // 从缓存中取软引用的Bitmap对象</div><div class="line">    SoftReference&lt;Bitmap&gt; softBitmap = imageCache.get(path);</div><div class="line">    if (softBitmap == null) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">    // 取出Bitmap对象，如果由于内存不足Bitmap被回收，将取得空</div><div class="line">    Bitmap bitmap = softBitmap.get();</div><div class="line">    return bitmap;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用软引用以后，在OutOfMemory异常发生之前，这些缓存的图片资源的内存空间可以被释放掉的，从而避免Crash发生。<br>需要注意的是，在垃圾回收器对这个Java对象回收前，SoftReference类所提供的get方法会返回Java对象的强引用，一旦垃圾线程回收该Java对象之后，get方法将返回null。所以在获取软引用对象的代码中，一定要判断是否为null，以免出现NullPointerException异常导致应用崩溃。</p><ul><li>图片缓存策略：内存缓存、硬盘缓存等</li></ul></li></ol><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://developer.android.com/topic/performance/memory.html" target="_blank" rel="external">https://developer.android.com/topic/performance/memory.html</a></p><p><a href="http://blog.csdn.net/qq_23191031/article/details/63685756" target="_blank" rel="external">Android性能优化详解内存优化的来龙去脉</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=2653578816&amp;idx=1&amp;sn=20b6160e92167dde676561f3a43d0860&amp;chksm=84b3b447b3c43d51c8042b58fef7dcb2755bdb4ceffaf8244b1e88acc6231411e3e9a5f0368f&amp;mpshare=1&amp;scene=24&amp;srcid=0407gek6TWkslG13uVNKgWnp&amp;key=3b2e3b347972bda0160ce87a12f2ac4023e07bae8d2643824f5099d643f67bc11fda267841bc5d474d01ae1bb79b1a07ea270e4f0e22c2a233e564a8f0513fdc8774006a07712f5dd523b4a48d7fb994&amp;ascene=0&amp;uin=MzU5MTI3NQ%3D%3D&amp;devicetype=iMac+MacBookPro11%2C5+OSX+OSX+10.11.6+build(15G1108" target="_blank" rel="external">Android 内存优化总结</a>)</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
          <category> 内存优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 分享 </tag>
            
            <tag> Blog </tag>
            
            <tag> 内存优化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>创建 Android 库</title>
      <link href="/2017/03/20/2017-05-01-Create%20an%20Android%20Library/"/>
      <url>/2017/03/20/2017-05-01-Create%20an%20Android%20Library/</url>
      <content type="html"><![CDATA[<h4 id="创建-Android-库"><a href="#创建-Android-库" class="headerlink" title="创建 Android 库"></a>创建 Android 库</h4><p>Android 库在结构上与 Android 应用模块相同。它可以提供构建应用所需的一切内容，包括源代码、资源文件和 Android 清单。不过，Android 库将编译到您可以用作 Android 应用模块依赖项的 Android 归档 (AAR) 文件，而不是在设备上运行的 APK。与 JAR 文件不同，AAR 文件可以包含 Android 资源和一个清单文件，这样，除了 Java 类与方法外，您还可以捆绑布局和可绘制对象等共享资源。</p><a id="more"></a><p>库模块在以下情况下非常有用：</p><ul><li>构建使用某些相同组件（例如 Activity、服务或 UI 布局）的多个应用。</li><li>构建存在多个 APK 变体（例如免费版本和付费版本）的应用并且需要在两种版本中使用相同的核心组件。<br>在任何一种情况下，只需要将您希望重用的文件移动到库模块中，然后以依赖项的形式为每个应用模块添加库。本页面将说明如何执行这两个操作。</li></ul><h4 id="创建库模块"><a href="#创建库模块" class="headerlink" title="创建库模块"></a>创建库模块</h4><p>要在您的项目中创建一个新的库模块，请按以下步骤操作：</p><ol><li>点击 File &gt; New &gt; New Module。</li><li>在出现的 <code>Create New Module</code> 窗口中，依次点击 Android Library 和 Next。<br>还存在一个用于创建 Java 库的选项，可以构建传统的 JAR 文件。尽管 JAR 文件在大多数项目中都非常实用（尤其在您希望与其他平台共享代码时），但这种文件不允许您包含 Android 资源或清单文件，而后者对于 Android 项目中的代码重用非常有用。因此，本指南将侧重论述创建 Android 库。</li><li>为您的库命名，并为库中代码选择一个最低的 SDK 版本，然后点击 Finish。<br>在 Gradle 项目同步完成后，库模块将显示左侧的 Project 面板中。如果您未看到新模块文件夹，请确保将视图切换为 Android 视图。</li></ol><h4 id="将应用模块转换为库模块"><a href="#将应用模块转换为库模块" class="headerlink" title="将应用模块转换为库模块"></a>将应用模块转换为库模块</h4><p>如果您现有的应用模块包含您希望重用的所有代码，则可以按照以下步骤将其转换为库模块：</p><ol><li><p>打开现有应用模块的 build.gradle 文件。您应在顶部看到以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.application&apos;</div></pre></td></tr></table></figure></li></ol><ol><li><p>按照下面所示更改插件分配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.library&apos;</div></pre></td></tr></table></figure></li><li><p>点击 Sync Project with Gradle Files。<br>就这么简单。模块的整个结构仍然相同，但是现在它将作为 Android 库运行，构建也将创建一个 AAR 文件，而不是 APK。</p></li></ol><h4 id="以依赖项形式添加您的库"><a href="#以依赖项形式添加您的库" class="headerlink" title="以依赖项形式添加您的库"></a>以依赖项形式添加您的库</h4><p>要在另一个应用模块中使用您的 Android 库的代码，请按以下步骤操作：</p><ol><li><p>通过两种方式之一将库添加到您的项目（如果您是在相同项目中创建的库模块，则该模块已经存在，您可以跳过此步骤）：</p><ul><li><p>添加已编译的 AAR（或 JAR）文件：</p><ul><li>点击 File &gt; New Module。</li><li>依次点击 Import .JAR/.AAR Package 和 Next。</li><li>输入 AAR 或 JAR 文件的位置，然后点击 Finish。</li></ul></li><li>将库模块导入到您的项目中：<ul><li>点击 File &gt; New &gt; Import Module。</li><li>输入库模块目录的位置，然后点击 Finish。<br>库模块将复制到您的项目中，因此您可以尽管编辑库代码。如果您希望维护一个版本的库代码，则此方法可能不是您想要的，您应按照上文所述导入编译的 AAR 文件。</li></ul></li></ul></li><li><p>确保库列在您 settings.gradle 文件的顶部，如下面名为“my-library-module”的库所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include &apos;:app&apos;, &apos;:my-library-module&apos;</div></pre></td></tr></table></figure></li><li><p>打开应用模块的 build.gradle 文件，并向 dependencies 块中添加一行新代码，如下面的片段所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile project(&quot;:my-library-module&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>点击 Sync Project with Gradle Files。<br>在上面的示例中，名为 my-library- module 的 Android 库模块成为 build.gradle 文件所在模块的构建依赖项。</p></li></ol><p>您的应用模块现在可以访问 Android 库中的任何代码和资源，库 AAR 文件在构建时已捆绑到您的 APK 中。</p><p>不过，如果希望单独共享 AAR 文件，则可以在 项目名称/模块名称/build/outputs/aar/ 中找到它，也可以通过点击 Build &gt; Make Project 的方式重新生成此文件。</p><h4 id="选择要设为公开的资源"><a href="#选择要设为公开的资源" class="headerlink" title="选择要设为公开的资源"></a>选择要设为公开的资源</h4><p>库中的所有资源在默认情况下均处于公开状态。要将所有资源隐式设为私有，您必须至少将一个特定的属性定义为公开。资源包括您项目的 res/ 目录中的所有文件，例如图像。要阻止您的库用户访问仅供内部使用的资源，您应通过声明一个或多个公开资源的方式来使用这种自动私有标识机制。</p><p>要删除某个公开资源，请将一个 声明添加到您的库的 public.xml 文件中。如果您之前尚未添加公开资源，则需要在您的库的 res/values/ 目录中创建 public.xml 文件。</p><p>下面的示例代码可以创建两个名称分别为 mylib_app_name 和 mylib_public_string 的公开字符串资源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line">    &lt;public name=&quot;mylib_app_name&quot; type=&quot;string&quot;/&gt;</div><div class="line">    &lt;public name=&quot;mylib_public_string&quot; type=&quot;string&quot;/&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p><p>如果希望任何资源保持对使用您的库的开发者可见，您应当将其设为公开。例如，尽管 <code>v7 appcompat</code> 库中的大多数资源都是私有资源，但是为了支持 <code>Material Design</code>，控制工具栏小部件的属性应当公开。</p><p>将属性隐式设为私有不仅可以阻止您的库用户从内部库资源获得代码自动完成建议，还让您能够在不中断您的库客户端的情况下重命名或移除私有资源。私有资源不在代码自动完成和 Theme Editor 的作用范围内，并且如果您尝试引用私有资源，Lint 将显示警告。</p><h4 id="开发注意事项"><a href="#开发注意事项" class="headerlink" title="开发注意事项"></a>开发注意事项</h4><p>在开发您的库模块和相关应用时，请注意以下行为和限制。</p><p>将库模块引用添加至您的 Android 应用模块后，您可以设置它们的相对优先级。构建时，库会按照一次一个的方式与应用合并，并按照从低到高的优先级顺序。</p><ul><li>资源合并冲突<br>构建工具会将库模块中的资源与相关应用模块的资源合并。如果在两个模块中均定义了给定资源 ID，将使用应用中的资源。<br>如果多个 AAR 库之间发生冲突，将使用依赖项列表首先列出（位于 dependencies 块顶部）的库中的资源。<br>为了避免常用资源 ID 的资源冲突，请使用在模块（或在所有项目模块）中具有唯一性的前缀或其他一致的命名方案。</li><li>库模块可以包含 JAR 库<br>您可以开发一个自身包含 JAR 库的库模块；不过，您需要手动编辑相关应用模块的构建路径，并添加 JAR 文件的路径。</li><li>库模块可以依赖外部 JAR 库<br>您可以开发一个依赖于外部库（例如 Maps 外部库）的库模块。在这种情况下，相关应用必须针对包含外部库（例如 Google API 插件）的目标构建。另外也要注意，库模块和相关应用都必须在其清单文件的 <uses- library=""> 元素中声明外部库。</uses-></li><li>库模块不得包含原始资源<br>工具不支持在库模块中使用原始资源文件（保存在 assets/ 目录中）。应用使用的任何原始资源都必须存储在应用模块自身的 assets/ 目录中。</li><li>应用模块的 <code>minSdkVersion</code> 必须大于或等于库定义的版本<br>库作为相关应用模块的一部分编译，因此，库模块中使用的 API 必须与应用模块支持的平台版本兼容。</li><li>每个库模块都会创建自己的 R 类<br>在您构建相关应用模块时，库模块将先编译到 AAR 文件中，然后再添加到应用模块中。因此，每个库都有其自己的 R 类，并根据库的软件包名称命名。从主模块和库模块生成的 R 类会在所需的所有软件包（包括主模块的软件包和库的软件包）中创建。</li><li>库模块可能包含自己的 ProGuard 配置文件<br>通过将 ProGuard 配置文件添加到包含其 ProGuard 指令的库，您可以在自己的库上启用代码压缩。构建工具会为库模块将此文件嵌入到生成的 AAR 文件中。在您将库添加到应用模块时，库的 ProGuard 文件将附加至应用模块的 ProGuard 配置文件 (proguard.txt)。<br>通过将 ProGuard 文件嵌入到您的库模块中，您可以确保依赖于此库的应用模块不必手动更新其 ProGuard 文件即可使用库。当 ProGuard 在 Android 应用模块上运行时，它会同时使用来自应用模块和库的指令，因此您不应当只在库上运行 ProGuard。<br>要指定您的库的配置文件名称，请将其添加到 consumerProguardFiles 方法中，此方法位于您的库的 build.gradle 文件的 defaultConfig 块内。例如，以下片段会将 lib-proguard-rules.txt 设置为库的 ProGuard 配置文件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    defaultConfig &#123;</div><div class="line">        consumerProguardFiles &apos;lib-proguard-rules.txt&apos;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><p>默认情况下，应用模块会使用库的发布构建，即使在使用应用模块的调试构建类型时亦是如此。要使用库中不同的构建类型，您必须将依赖项添加到应用的 build.gradle 文件的 dependencies 块中，并在库的 build.gradle 文件中将 publishNonDefault 设置为 true。例如，您应用的 build.gradle 文件中的以下代码段会使应用在应用模块于调试模式下构建时使用库的调试构建类型，以及在应用模块于发布模式下构建时使用库的发布构建类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    debugCompile project(path: &apos;:library&apos;, configuration: &apos;debug&apos;)</div><div class="line">    releaseCompile project(path: &apos;:library&apos;, configuration: &apos;release&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>您还必须在自己库的 build.gradle 文件的 android 块内添加以下代码行，以便将此库的非发布配置展示给使用它的项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    publishNonDefault true</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>不过请注意，设置 publishNonDefault 会增加构建时间。<br>为了确保您的库的 ProGuard 规则不会将意外的压缩副作用施加到应用模块，请仅包含适当规则，停用不适用于此库的 ProGuard 功能。尝试协助开发者的规则可能会与应用模块或它的其他库中的现有代码冲突，因此不应包含这些规则。例如，您的库的 ProGuard 文件可以指定在应用模块的压缩期间需要保留的代码。<br>注：Jack 工具链仅支持 ProGuard 的部分压缩和模糊选项。</p><h4 id="AAR-文件详解"><a href="#AAR-文件详解" class="headerlink" title="AAR 文件详解"></a>AAR 文件详解</h4><p>AAR 文件的文件扩展名为 .aar，Maven 工件类型也应当是 aar。文件本身是一个包含以下强制性条目的 zip 文件：</p><ul><li>/AndroidManifest.xml</li><li>/classes.jar</li><li>/res/</li><li><p>/R.txt<br>此外，AAR 文件可能包含以下可选条目中的一个或多个：</p></li><li><p>/assets/</p></li><li>/libs/名称.jar</li><li>/jni/abi 名称/名称.so（其中 abi 名称 是 Android 支持的 ABI 之一）</li><li>/proguard.txt</li><li>/lint.jar</li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://developer.android.com/studio/projects/android-library.html#aar-contents" target="_blank" rel="external">https://developer.android.com/studio/projects/android-library.html#aar-contents</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 分享 </tag>
            
            <tag> Blog </tag>
            
            <tag> Library </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World, Hexo</title>
      <link href="/2017/03/10/2017-03-10-hello-world-hexo/"/>
      <url>/2017/03/10/2017-03-10-hello-world-hexo/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p><h4 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h4><h4 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h4 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h4 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h4 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Another Tag </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android进程间通信</title>
      <link href="/2016/10/13/2016-10-14-Android%20ipc%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/"/>
      <url>/2016/10/13/2016-10-14-Android%20ipc%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<h4 id="进程间通信几种方式"><a href="#进程间通信几种方式" class="headerlink" title="进程间通信几种方式:"></a>进程间通信几种方式:</h4><p>文件<br>SharedPreferences<br>BroadcastReceiver<br>ContentProvider<br>AIDL</p><a id="more"></a><h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p>Serializable 和 Parcelable</p><p>（1）序列化 ID 的问题</p><p>（2）静态变量序列化</p><p>（3）Transient 关键字</p><p>（4）序列化存储规则</p><p>静态成员变量属于类，而不是对象，所以不会参与序列化；使用transient关键字标记的成员变量不参与序列化过程。</p><p>Serializable 序列化时会调用ObjectOutputStream.writeObject<br>ObjectInputStream.readObject()引用了大量反射机制，</p><p>自己实现序列化与反序列化过程需要重写writeObject()和readObject()</p><p>（5）多次writeObject问题</p><p>第二次写入对象时文件只增加了 5 字节，并且两个对象是相等的，这是为什么呢？<br>解答：Java 序列化机制为了节省磁盘空间，具有特定的存储规则，当写入文件的为同一对象时，并不会再将对象的内容进行存储，而只是再次存储一份引用，上面增加的 5 字节的存储空间就是新增引用和一些控制信息的空间。反序列化时，恢复引用关系，使得清单 3 中的 t1 和 t2 指向唯一的对象，二者相等，输出 true。该存储规则极大的节省了存储空间。</p><h4 id="1、SharedPreferences"><a href="#1、SharedPreferences" class="headerlink" title="1、SharedPreferences"></a>1、SharedPreferences</h4><p>取SharedPreferences实际上是在ContextImpl这个类中完成的。</p><p>1、context.getSharedPreferences(pref_name, mode)的流程：</p><p>A 在sSharedPrefs这个map(同步的)中以pref_name为键取SharedPreferencesImp对象sp。如果sp不为空并且对应的pref文件未被异常修改，就返回这个对象。否则进入B。</p><p>B 如果sp为空，重新生成一个SharedPreferenceImp对象并且加入到sSharedPrefs这个map中。</p><p>C 同步的：从pref文件中解析出map对象并用之替换SharedPreferenceImp对象中原有的存放pref键值对的mMap成员对象。如果pref文件解析异常导致map为null，就保持原有对象而不替换。 如果备份的pref文件(…pref_name.xml.bak)存在，就使用备份文件。</p><p>D 返回SharedPreferenceImp对象sp。</p><p>注意：sSharedPrefs在程序中是静态的：private static final HashMap sSharedPrefs = new HashMap(); 如果退出了程序但Context没有被清掉，那么下次进入程序仍然可能取到同一个对象。</p><p>2、从SharedPreference中取值getString(String key, String defValue)：<br>从SharedPreferencesImp对象的mMap成员对象中根据key取出相应的对象v。如果取得的对象v为空，返回默认对象defValue；否则，返回对象v。</p><p>3、commit过程：</p><p>A 在内存中提交，即用要提交的map去刷新已有的mMap对象。如果map对象中某个键的值指向editer对象自身，就代表要移除这个键值对。</p><p>B 将步骤A返回的MemoryCommitResult对象加入到写入本地的队列中，写入本地文件。在写入文件前，如果同名文件已经存在，则会原文件重命名为备份文件名，如果写入成功，才删除bak备份文件。</p><p>C 通知SharedPreferences的监听状态改变了。返回提交是否内存成功的状态。</p><p>4、EditorImpl内部类：<br>内部有一个Map成员对象mModified，用来保存将要提交的pref键值。<br>apply方法与commit方法的区别：前者先提交到内存中，再异步写到文件，并且不需要返回写入成功与否的状态；后者同步写入内存和文件。</p><p>5、MemoryCommitResult内部类：<br>用来存放Editor提交到内存的返回状态，包括是否有键值改变、将要写入文件中的map对象，写入文件成功与否等。<br>总结一下：要想及时并安全清除SharedPreferences一定要使用Editor去clear并commit，不要直接暴力地删除其xml文件。</p><p>6、commit（）和apply（）</p><p>writtenToDiskLatch是一个CountDownLatch，如果它的值大于0，那么commit在await上阻塞，在writtenToDiskLatch变为0时，才能继续往下走执行后面的notifyListeners。<br>writtenToDiskLatch初始值为1，在setDiskWriteResult执行完后，计数减1，await才会从阻塞中被唤醒继续往下执行。在writeToFile中，在真正完成写入后的地方会调用setDiskWriteResult。<br>再来看apply的实现，在另起一个线程把map中的数据写入到磁盘后，postWriteRunnable会被执行，它会去执行另一个Runnable – awaitCommit。awaitCommit中同样执行的是mcr.writtenToDiskLatch.await();，但要注意现在是在另一个线程中被执行的。<br>可见，writtenToDiskLatch保证了无论是commit还是apply，都必须在前一个的writeToFile完成后，才能开始新一个的commit或apply操作。</p><p>CountDownLatch<br>在实时系统中的使用场景<br>让我们尝试罗列出在java实时系统中CountDownLatch都有哪些使用场景。我所罗列的都是我所能想到的。如果你有别的可能的使用方法，请在留言里列出来，这样会帮助到大家。</p><ol><li>实现最大的并行性：有时我们想同时启动多个线程，实现最大程度的并行性。例如，我们想测试一个单例类。如果我们创建一个初始计数为1的CountDownLatch，并让所有线程都在这个锁上等待，那么我们可以很轻松地完成测试。我们只需调用 一次countDown()方法就可以让所有的等待线程同时恢复执行。</li><li>开始执行前等待n个线程完成各自任务：例如应用程序启动类要确保在处理用户请求前，所有N个外部系统已经启动和运行了。</li><li>死锁检测：一个非常方便的使用场景是，你可以使用n个线程访问共享资源，在每次测试阶段的线程数目是不同的，并尝试产生死锁。</li></ol><p>HashMap</p><p>SparseArray</p><p>ArrayMap</p><h4 id="2、BroadcastReceiver"><a href="#2、BroadcastReceiver" class="headerlink" title="2、BroadcastReceiver"></a>2、BroadcastReceiver</h4><p>它和Binder机制不一样的地方在于，广播的发送者和接收者事先是不需要知道对方的存在的<br>BroadcastReceiver(注册过程，发送接收)</p><p>（1）注册方式 静态注册，动态注册</p><p>（2）广播分类 粘性广播，有序广播，无序广播</p><p>（3）前台广播(10s超时)、后台广播(60s超时)（intent.FLAG_RECEIVER_FOREGROUND）</p><p>（4）并行队列 串行队列（BroadcastQueue）</p><p>1） 为intent添加FLAG_EXCLUDE_STOPPED_PACKAGES标记； </p><p>2） 处理和package相关的广播； </p><p>3） 处理其他一些系统广播； </p><p>4） 判断当前是否有权力发出广播； </p><p>5） 如果要发出sticky广播，那么要更新一下系统中的sticky广播列表； </p><p>6） 查询和intent匹配的静态receivers； </p><p>7） 查询和intent匹配的动态receivers； </p><p>8） 尝试向并行receivers递送广播； </p><p>9） 整合（剩下的）并行receivers，以及静态receivers，形成一个串行receivers表； </p><p>10） 尝试逐个向串行receivers递送广播。</p><p>RegistReceiver</p><p><img src="/images/binder/RegistReceiver.png" alt="RegisterReceiver"></p><p>SendBroadcast</p><p><img src="/images/binder/SendBroadcast.png" alt="SendBroadcast"></p><p>图：客户进程中的mReceivers表</p><p>mReceivers<br><img src="/images/binder/mReceivers.png" alt="mReceivers"></p><p>receives_list</p><p><img src="/images/binder/receives_list.png" alt="RegisterReceiver"></p><p>该表的key项是我们比较熟悉的Context，也就是说可以是Activity、Service或Application。而value项则是另一张“子哈希表”。这是个“表中表”的形式。言下之意就是，每个Context（比如一个activity），是可以注册多个receiver的，这个很好理解。mReceivers里的“子哈希表”的key值为BroadcastReceiver，value项为ReceiverDispatcher，示意图如下：</p><p>到这里其实开始走两个分支，</p><p>1，如果是动态注册的receiver，其实可以知道，运行进程是活的，接收对象是存在的，deliverToRegisteredReceiverLocked(r, (BroadcastFilter)target, false)，</p><p>2，如果是静态注册的receiver，运行进程不确定是否存活，接收对象不存在，如果进程未拉起，mService.startProcessLocked()，启动接收进程然后继续scheduleBroadcastsLocked()循环，下次进入processCurBroadcastLocked(r, app)。既如果目标进程未启动，这里是会拉起来的。如果进程已启动，则processCurBroadcastLocked(r, app)分发广播。</p><h4 id="4、AIDL"><a href="#4、AIDL" class="headerlink" title="4、AIDL"></a>4、AIDL</h4><p>AIDL（Messenger） in out inout定向tag</p><p>支持数据类型如下:</p><ol><li><p>Java 的原生类型</p></li><li><p>String 和CharSequence</p></li><li><p>List 和 Map ,List和Map 对象的元素必须是AIDL支持的数据类型；  以上三种类型都不需要导入(import)</p></li><li><p>AIDL 自动生成的接口  需要导入(import)</p></li><li><p>实现android.os.Parcelable 接口的类.  需要导入(import)。 </p></li></ol><p>AIDL中in，out和inout的区别</p><p>(1)   in：只能在客户端设置值，传入服务端，服务端获取客户端设置的值<br>out：用于在服务端设置值，服务端设置这个值后，客户端也可以得到这个由服务端设置的值，客户端如果有设置初始值，到了服务端会得不到这个值<br>inout:服务端可以得到客户端设置的值，客户端也可以得到服务端设置的值</p><p>基本数据类型参数只能是in类型</p><p>IInterface IBinder Binder Bundle Parcel Parcelable</p><p>IBinder是远程对象的基本接口，是为高性能而设计的轻量级远程调用机制的核心部分。但它不仅用于远程调用，也用于进程内调用。这个接口定义了与远程对象交互的协议。不要直接实现这个接口，而应该从Binder派生。</p><p>IBinder的主要API是transact()，与它对应另一方法是Binder.onTransact()。第一个方法使你可以向远端的IBinder对象发送发出调用，第二个方法使你自己的远程对象能够响应接收到的调用。IBinder的API都是同步执行的，比如transact()直到对方的Binder.onTransact()方法调用完成后才返回。调用发生在进程内时无疑是这样的，而在进程间时，在IPC的帮助下，也是同样的效果。</p><p>通过transact()发送的数据是Parcel，Parcel是一种一般的缓冲区，除了有数据外还带有一些描述它内容的元数据。元数据用于管理IBinder对象的引用，这样就能在缓冲区从一个进程移动到另一个进程时保存这些引用。这样就保证了当一个IBinder被写入到Parcel并发送到另一个进程中，如果另一个进程把同一个IBinder的引用回发到原来的进程，那么这个原来的进程就能接收到发出的那个IBinder的引用。这种机制使IBinder和Binder像唯一标志符那样在进程间管理。</p><p>系统为每个进程维护一个存放交互线程的线程池。这些交互线程用于派送所有从另外进程发来的IPC调用。例如：当一个IPC从进程A发到进程B，A中那个发出调用的线程(这个应该不在线程池中)就阻塞在transact()中了。进程B中的交互线程池中的一个线程接收了这个调用，它调用Binder.onTransact()，完成后用一个Parcel来做为结果返回。然后进程A中的那个等待的线程在收到返回的Parcel后得以继续执行。实际上，另一个进程看起来就像是当前进程的一个线程，但不是当前进程创建的。<br>Binder机制还支持进程间的递归调用。例如，进程A执行自己的IBinder的transact()调用进程B的Binder，而进程B在其Binder.onTransact()中又用transact()向进程A发起调用，那么进程A在等待它发出的调用返回的同时，还会用Binder.onTransact()响应进程B的transact()。总之Binder造成的结果就是让我们感觉到跨进程的调用与进程内的调用没什么区别。</p><p>当操作远程对象时，你经常需要查看它们是否有效，有三种方法可以使用：</p><p>1 isBindAlive()。</p><p>2 如果目标进程不存在，那么调用pingBinder()时返回false。</p><p>3 可以用linkToDeath()方法向IBinder注册一个IBinder.DeathRecipient，在IBinder代表的进程退出时被调用。<br>要实现IBinder来支持远程调用，应从Binder类派生一个类。Binder实现了IBinder接口。但是一般不需要直接实现此类，而是跟据你的需要由开发包中的工具生成，这个工具叫AIDL。你通过AIDL语言定义远程对象的方法，然后用AIDL工具生成Binder的派生类，然后就可使用之。然而，可是，但是，当然，你也可以直接从Binder类派生以实现自定义的RPC调用，或只是实例化一个原始的Binder对象直接作为进程间共享的令牌来使用。</p><p>1、客户端发出绑定请求，服务端返回一个Binder对象，该对象能处理跨进程请求，而客户端拿到的是Binder对象的引用，Binder的实体是在服务端的。客户端执行asInterface()方法，如果客户端和服务端处于同一进程，则直接返回服务端的Stub对象本身，如果处于不同进程，则返回的是Stub.proxy代理类对象。</p><p>2、客户端发送远程请求（addPerson或者getPersonList)，此时客户端线程挂起，Binder拿到数据后，对数据进行处理如在不同进程，会把数据写入Parcel，调用Transact方法。</p><p>3、触发onTransact方法，该方法运行在Binder线程池，方法中会调用到服务端实现的接口方法，当数据处理完毕后，返回reply值，经过Binder返回客户端，此时客户端线程被唤醒。</p><p>am_proxy.jpg<br><img src="/images/binder/am_proxy.jpg" alt="am_proxy.jpg"></p><p>AMS基本架构</p><p><img src="/images/binder/ams.png" alt="ams"></p><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="http://blog.csdn.net/luoshengyang" target="_blank" rel="external">老罗的Android之旅</a></p><p><a href="https://my.oschina.net/youranhongcha/blog/226274" target="_blank" rel="external">品茗论道说广播(Broadcast内部机制讲解)</a></p><p><a href="http://www.cnblogs.com/xingchenkn/p/3637137.html" target="_blank" rel="external">Android ActivityManagerService 基本介绍</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
          <category> 进程间通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 分享 </tag>
            
            <tag> Blog </tag>
            
            <tag> 进程间通信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android APK 安装过程详解</title>
      <link href="/2016/09/10/2016-09-10-Android%20APK%20%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/"/>
      <url>/2016/09/10/2016-09-10-Android%20APK%20%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h4 id="APK-安装过程"><a href="#APK-安装过程" class="headerlink" title="APK 安装过程"></a>APK 安装过程</h4><p>开发 Android 应用后，一般都会安装到手机上去运行，了解应用是如何安装到手机上的，可以更好的理解应用的本质，理解应用是如何运行的，在自己开发的应用遇到一些问题时，会从更深层次去分析，快速定位找到原因。这一篇文章中我们就来详细分析一下应用是如何安装的。</p><a id="more"></a><h4 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h4><p>要想详细了解 APK 的安装过程，需要了解一些基础概念，包括：</p><ol><li>什么是 APK</li><li>什么是 DEX 文件和 ODEX 文件</li><li>什么是 OAT 文件</li><li>什么是 Dalvik 和 ART</li></ol><p>总体来说是：APK 是 Android 应用安装包，Dalvik 和 ART 都是 Android 运行环境，但是由于 Dalvik 存在一些不足，ART 是在高版本手机上替换 Dalvik 的。应用的安装过程就是将 APK 中内容解压处理的过程，Dalvik 会将 APK 中内容 DEX 转化为 ODEX，ART 会将其转化为 OAT。下面对这些问题分别进行分析。</p><h4 id="什么是-APK"><a href="#什么是-APK" class="headerlink" title="什么是 APK"></a>什么是 APK</h4><p>APK，即 Android Package，Android 安装包。不同平台的安装文件格式都不同，类似于 Windows 的安装包是二进制的 exe 格式，Mac 的安装包是 dmg 格式。APK 的可以在 Android 上执行安装，APK 的本质是一个 Zip 压缩包，只是后缀被修改为 apk，其中打包了源代码编译出的 class.dex、一些图片视频资源文件和一些 Native 库文件。APK 文件与 Zip 文件最大的一个不同是 APK 包含签名信息，用于保证安装包安全不被修改。</p><h4 id="什么是-DEX-文件和-ODEX-文件"><a href="#什么是-DEX-文件和-ODEX-文件" class="headerlink" title="什么是 DEX 文件和 ODEX 文件"></a>什么是 DEX 文件和 ODEX 文件</h4><p>说起 DEX 文件，不得不提 class 文件。Java 跨平台是由源代码编译出的 class 文件分别运行在不同平台的虚拟机上，由虚拟机屏蔽了不同平台的差异。如图：<br><img src="/images/apk/apk_install_1.jpeg" alt="apk"></p><p>但是由于 Android 系统针对手持设备，对 Dalvik 虚拟机进行了优化，主要包括：</p><ol><li>将原来 class 文件进行优化，例如将其中的常量冗余信息进行合并，提高虚拟机解析效率；</li><li>修改 JVM 运行时基于栈的数据结构修改为 Dalvik 基于寄存器的数据结构，数据访问方式更快，运行效率更高。</li></ol><p>这种情况下，原来的 .class 文件就有些不适用了，因此，出现了 dex 文件格式，它是源代码编译后打包生成的文件。它是 APK 的一个组成部分。</p><p>ODEX 文件是 Dalvik 将 DEX 文件中可执行文件——class.dex——文件解压出来后，存储在本地后生成的。因为 Android 系统无法直接运行 APK 文件，需要将其解压后找到 class.dex 文件后才可以运行，因此在安装时就将其取出放在本地，可以提高应用启动速度。除了这个原因，其实在将 class.dex 转换成 ODEX 文件过程中，还根据当前系统进行了优化（直接复制到其他系统不一定可以运行），文件大小会减少，ODEX 文件比 DEX 文件更难反编译，这也在一定程度上提高了安全性，因此在一些系统预装或系统级应用大多采用了 ODEX 优化。</p><p>一般 ODEX 不直接运行，在 Dalvik 运行 ODEX 时，需要通过 JIT 进行优化，提高运行效率。JIT 是一种在运行时同步将字节码转化成机器码的过程，Dalvik 直接运行转化后的机器码，这会导致部分的内存和时间开销，但是整体来说，在某些情况下是会提高系统性能的。（有些动态编译器，可能根据经验或尝试编译，优化这一过程，可能运行次数越多，优化效果越好）</p><h4 id="什么是-OAT-文件"><a href="#什么是-OAT-文件" class="headerlink" title="什么是 OAT 文件"></a>什么是 OAT 文件</h4><p>OAT 文件是 ART 运行的文件，是一种二进制可运行文件，包含 DEX 文件和编译出的本地机器指令文件，其文件格式类似于网络数据报文，包含文件头和文件体，文件头的 oatdata、oatexec 和 oatlastword 字段分别描述 DEX 文件位置和本地机器指令的起止位置。因为 OAT 文件包含 DEX 文件，因此比 ODEX 文件占用空间更大，由于其在安装时经过了 ART 的处理，ART 加载 OAT 文件后不需要经过处理就可以直接运行，它没有了从字节码装换成机器码的过程，因此运行速度更快。可以理解为 JIT 从运行时才解析提前到了安装时解析，安装变慢，运行变快。<br>通过这种方式编译后，我们来看下生成的代码是怎样的。AspectJ的原理实际上是在编译的时候，根据一定的规则解析，然后插入一些代码，通过aspectj生成的代码，会在Build目录下：</p><h4 id="什么是-Dalvik-和-ART"><a href="#什么是-Dalvik-和-ART" class="headerlink" title="什么是 Dalvik 和 ART"></a>什么是 Dalvik 和 ART</h4><p>上面提到了 Dalvik 和 ART，Dalvik 和 ART 是 Android 平台实现的 JAVA 虚拟机。用于解析 DEX 文件、ODEX 文件和OAT 文件。</p><p><img src="/images/apk/apk_install_2.jpeg" alt="apk"></p><p>ART 即 Android Runtime，Android 运行时，由于 Android 系统会运行在不同的设备上，底层硬件不同，Linux 系统屏蔽了一些这些系统的细节，但是直接在 Linux 上开发应用太难，实现成本太高，为了屏蔽 Linux 的细节，Google 创建出了 Dalvik 和 ART，对 Linux 进行了再一次封装，这样，使用 Google 提供的集成开发环境 SDK，就可以轻松开发应用了，Dalvik 与 ART 的关系是 ART 用来替换 Dalvik 的。Dalvik 在低版本（4.4 以下）的手机上使用作为 Android 运行环境，但是由于其有一些不足，在高版本的 Android 系统上 ART 用来替换 Dalvik，现在市场上 ART 的占有率已经超过了 70%。</p><p>ART 是 Android 应用的运行模式，在这种模式下，Android 应用在安装后，会进行一次预编译，将应用安装包中的字节码转换成机器语言存储在本地（系统只能运行二进制程序），这样，应用在运行时，可以直接执行这些二进制程序。相比较于 Dalvik 来说，Dalvik 的做法是在应用安装后，直接将字节码存储起来，在每次运行时，需要将代码编译成机器语言，这样在运行程序时，就比 ART 慢了一些。ART 这样做导致了安装后应用所占的空间更大，安装时间更长，但是对于经常使用的应用，这样做是值得的。</p><h4 id="APK-是如何安装的呢？"><a href="#APK-是如何安装的呢？" class="headerlink" title="APK 是如何安装的呢？"></a>APK 是如何安装的呢？</h4><p>了解了以上的知识，理解应用安装就简单了，我们整体看一下应用是如何安装的。</p><p>程序的源代码，首先经过 SDK 编译成 DEX 文件，DEX 文件和一些资源文件（图片、视频等）、Native Code（C 语言等编译出的 .so 文件）会直接打包进 APK。安装 APK 的过程，其实是安装包解压过程。资源文件、二进制库等解压后直接存储在本地，DEX 文件不仅仅解压，会根据系统的运行环境，采用不同的处理方式，被处理成不同格式的文件存储在本地，等待程序启动调用，这样就完成了应用的安装过程。</p><p><img src="/images/apk/apk_install_3.jpeg" alt="apk"></p><p>总结</p><p>这一篇文章中，我们详细介绍了 Android APK 的安装过程，分析了 Dalvik 和 ART 的不同以及安装过程的不同。</p><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="https://mp.weixin.qq.com/s/37wjSQs1HWVfX0xL27NjBg" target="_blank" rel="external">Android APK 安装过程</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> APK </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android软键盘挡住输入框的解决方案</title>
      <link href="/2016/08/12/2016-08-10-Android%E8%BD%AF%E9%94%AE%E7%9B%98%E6%8C%A1%E4%BD%8F%E8%BE%93%E5%85%A5%E6%A1%86%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2016/08/12/2016-08-10-Android%E8%BD%AF%E9%94%AE%E7%9B%98%E6%8C%A1%E4%BD%8F%E8%BE%93%E5%85%A5%E6%A1%86%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h4 id="Android软键盘挡住输入框的解决方案"><a href="#Android软键盘挡住输入框的解决方案" class="headerlink" title="Android软键盘挡住输入框的解决方案"></a>Android软键盘挡住输入框的解决方案</h4><p>在Android开发的路上，『软键盘挡住了输入框』这个坑，可谓是一个旷日持久的巨坑，我们慢慢看。</p><h4 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h4><p>最基本的情况：在页面底部有一个EditText，如果不做任何处理，那么在软键盘弹出的时候，就有可能会挡住EditText。<br>对于这种情况的处理其实很简单，只需要在AndroidManifest文件中对activity设置：<code>android:windowSoftInputMode</code>的值<code>adjustPan</code>或者<code>adjustResize</code>即可，像这样：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:name=&quot;.MainActivity&quot;</div><div class="line">    android:windowSoftInputMode=&quot;adjustPan&quot;  &gt;</div><div class="line">    ...</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure><p>一般来说，他们都可以解决问题，当然，<code>adjustPan</code>跟<code>adjustResize</code>的效果略有区别。</p><p><code>adjustPan</code>是把整个界面向上平移，使输入框露出，不会改变界面的布局；<br><code>adjustResize</code>则是重新计算弹出软键盘之后的界面大小，相当于是用更少的界面区域去显示内容，输入框一般自然也就在内了。</p><p>加上WebView试试看？坑来了……<br>上面的入门篇中，软键盘是由原生的EditText触发弹出的。而在H5、Hybrid几乎已经成为App标配的时候，我们经常还会碰到的情况是：软键盘是由WebView中的网页元素所触发弹出的。</p><h4 id="情况描述"><a href="#情况描述" class="headerlink" title="情况描述"></a>情况描述</h4><p>这时候，情况就会变得复杂了:</p><p>首先，页面是非全屏模式的情况下，给activity设置adjustPan会失效。<br>其次，页面是全屏模式的情况，adjustPan跟adjustResize都会失效。</p><p>解释一下，这里的全屏模式即是页面是全屏的，包括Application或activity使用了Fullscreen主题、使用了『状态色着色』、『沉浸式状态栏』、『ImmersiveMode』等等。总之，基本上只要是App自己接管了状态栏的控制，就会产生这种问题。</p><p>下面这个表格可以简单列举了具体的情况。</p><table><thead><tr><th>name</th><th style="text-align:center">age</th><th style="text-align:center">age</th></tr></thead><tbody><tr><td>LearnShare</td><td style="text-align:center">12</td><td style="text-align:center">12</td></tr><tr><td>Mike</td><td style="text-align:center">32</td><td style="text-align:center">32</td></tr></tbody></table><p>为什么说它是个坑？”issue 5497″<br>上面表格的这种情况并非是Google所期望的，理想的情况当然是它们都能正常生效才对——所以这其实是Android系统本身的一个BUG。</p><p>为什么文章开头说这是个坑呢？<br>——因为这个BUG从Android1.x时代（2009年）就被报告了，而一直到了如今的Android7.0（2016年）还是没有修复……/(ㄒoㄒ)/<br>可以说这不仅是个坑，而且还是个官方挖的坑~</p><p>“issue 5497″，详情传送门 ☞ Issue 5497 – android -WebView adjustResize windowSoftInputMode breaks when activity is fullscreen – Android Open Source Project – Issue Tracker – Google Project Hosting</p><p>当然了，不管坑是谁挖的，最终还是要开发者来解决。</p><p>遇到坑之后，有两种方法可以过去：躲，或者填。</p><ul><li>躲坑姿势<br>如前文所示，出现坑的条件是：带有WebView的activity使用了全屏模式或者adjustPan模式。<br>那么躲坑的姿势就很简单了——<br>如果activity中有WebView，就不要使用全屏模式，并且把它的windowSoftInputMode值设为adjustResize就好了嘛</li><li>填坑姿势<br>但总有些时候，是需要全屏模式跟WebView兼得的，这时候，躲坑就不行了，我们需要一个新的填坑的姿势。幸好，开发者的智慧是无穷的，这个坑出现了这么多年，还是有人找到了一些解决方案的。</li></ul><h4 id="AndroidBug5497Workaround"><a href="#AndroidBug5497Workaround" class="headerlink" title="AndroidBug5497Workaround"></a>AndroidBug5497Workaround</h4><p>我个人认为最好的解决方案是这个：AndroidBug5497Workaround，只需要一个神奇的AndroidBug5497Workaround类。</p><p>看名字就知道，它是专门用来对付”5497″问题的，使用步骤也是超级简单：</p><p>把AndroidBug5497Workaround类复制到项目中<br>在需要填坑的activity的<code>onCreate</code>方法中添加一句<code>AndroidBug5497Workaround.assistActivity(this)</code>即可。<br>经过测试，基本在各个Android版本上都可用，效果基本与设置了adjustResize相当。</p><p>来自我厂App的某个使用WebView的全屏模式Activity页面，从左到右分别是：没有软键盘的样式、软键盘挡住输入框的效果、以及使用AndroidBug5497Workaround之后的最终效果。</p><h4 id="它的原理是什么？"><a href="#它的原理是什么？" class="headerlink" title="它的原理是什么？"></a>它的原理是什么？</h4><p>这个炫酷AndroidBug5497Workaround类，其实并不是很复杂，只有几十行代码，先贴在这里：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public class AndroidBug5497Workaround &#123;</div><div class="line">    // For more information, see https://code.google.com/p/android/issues/detail?id=5497</div><div class="line">    // To use this class, simply invoke assistActivity() on an Activity that already has its content view set.</div><div class="line"></div><div class="line">    public static void assistActivity (Activity activity) &#123;</div><div class="line">        new AndroidBug5497Workaround(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private View mChildOfContent;</div><div class="line">    private int usableHeightPrevious;</div><div class="line">    private FrameLayout.LayoutParams frameLayoutParams;</div><div class="line"></div><div class="line">    private AndroidBug5497Workaround(Activity activity) &#123;</div><div class="line">        FrameLayout content = (FrameLayout) activity.findViewById(android.R.id.content);</div><div class="line">        mChildOfContent = content.getChildAt(0);</div><div class="line">        mChildOfContent.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() &#123;</div><div class="line">            public void onGlobalLayout() &#123;</div><div class="line">                possiblyResizeChildOfContent();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        frameLayoutParams = (FrameLayout.LayoutParams) mChildOfContent.getLayoutParams();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void possiblyResizeChildOfContent() &#123;</div><div class="line">        int usableHeightNow = computeUsableHeight();</div><div class="line">        if (usableHeightNow != usableHeightPrevious) &#123;</div><div class="line">            int usableHeightSansKeyboard = mChildOfContent.getRootView().getHeight();</div><div class="line">            int heightDifference = usableHeightSansKeyboard - usableHeightNow;</div><div class="line">            if (heightDifference &gt; (usableHeightSansKeyboard/4)) &#123;</div><div class="line">                // keyboard probably just became visible</div><div class="line">                frameLayoutParams.height = usableHeightSansKeyboard - heightDifference;</div><div class="line">            &#125; else &#123;</div><div class="line">                // keyboard probably just became hidden</div><div class="line">                frameLayoutParams.height = usableHeightSansKeyboard;</div><div class="line">            &#125;</div><div class="line">            mChildOfContent.requestLayout();</div><div class="line">            usableHeightPrevious = usableHeightNow;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private int computeUsableHeight() &#123;</div><div class="line">        Rect r = new Rect();</div><div class="line">        mChildOfContent.getWindowVisibleDisplayFrame(r);</div><div class="line">        return (r.bottom - r.top);// 全屏模式下： return r.bottom</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>代码大致是做了这么几件事：</p><ul><li>找到activity的根View<br>看一下入口的代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FrameLayout content = (FrameLayout) activity.findViewById(android.R.id.content);</div><div class="line">mChildOfContent = content.getChildAt(0);</div></pre></td></tr></table></figure></li></ul><p>其中，第一行中的android.R.id.content所指的View，是Android所有Activity界面上开发者所能控制的区域的根View。</p><p> 如果Activity是全屏模式，那么android.R.id.content就是占满全部屏幕区域的。<br>如果Activity是普通的非全屏模式，那么android.R.id.content就是占满除状态栏之外的所有区域。<br>其他情况，如Activity是弹窗、或者7.0以后的分屏样式等，android.R.id.content也是弹窗的范围或者分屏所在的半个屏幕——这些情况较少，就暂且不考虑了。<br> 我们经常用的setContentView(View view)/setContent(int layRes)其实就是把我们指定的View或者layRes放到android.R.id.content里面，成为它的子View。</p><p> 所以，然后，第二行<code>content.getChildAt(0)</code>获取到的mChildOfContent，其实也就是用以获取到我们用setContentView放进去的View。</p><ul><li>设置一个Listener监听View树变化<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mChildOfContent.getViewTreeObserver().addOnGlobalLayoutListener(&#123; //简化了写法</div><div class="line">        possiblyResizeChildOfContent();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></li></ul><p><code>View.getViewTreeObserver()</code>可以获取一个ViewTreeObserver对象——这个对象是一个观察者，专门用以监听当前View树所发生的一些变化。这里所注册的addOnGlobalLayoutListener，就是会在当前的View树的全局布局（GlobalLayout）发生变化、或者其中的View可视状态有变化时，进行通知回调。</p><p> 『软键盘弹出』，则是会触发这个事件的一个源。 (软键盘弹出会使GlobalLayout发生变化)</p><p> 也就是说，现在能监听到『软键盘弹出』的事件了。</p><ul><li>界面变化之后，获取”可用高度”<br>当软键盘弹出了之后，接下来的事情是获取改变之后的界面的可用高度（可以被开发者用以显示内容的高度）。<br>直接看代码：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private int computeUsableHeight() &#123;</div><div class="line">    Rect rect = new Rect();</div><div class="line">    mChildOfContent.getWindowVisibleDisplayFrame(rect);</div><div class="line">    // rect.top其实是状态栏的高度，如果是全屏主题，直接 return rect.bottom就可以了</div><div class="line">    return (rect.bottom - rect.top);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>View.getWindowVisibleDisplayFrame(Rect rect)</code>，这行代码能够获取到的Rect——就是界面除去了标题栏、除去了被软键盘挡住的部分，所剩下的矩形区域</p><p>也可以看出：<br>rect.top值，其实就是标题栏的高度。（实际上，这也常常被用作为获取标题栏高度的方法）<br>屏幕高度-rect.bottom，是软键盘的高度。（获取软键盘高度的方法也出现了）<br> 这时，就有：</p><p> 全屏模式下，可用高度 = rect.bottom<br> 非全屏模式，可用高度 = rect.bottom – rect.top</p><ul><li>最后一步，重设高度<br>我们计算出的可用高度，是目前在视觉效果上能看到的界面高度。但当前界面的实际高度是比可用高度要多出一个软键盘的距离的。<br>所以，最后一步，就是把界面高度置为可用高度——大功告成。<pre><code>private void possiblyResizeChildOfContent() {     int usableHeightNow = computeUsableHeight();     if (usableHeightNow != usableHeightPrevious) {         int usableHeightSansKeyboard = mChildOfContent.getRootView().getHeight();         int heightDifference = usableHeightSansKeyboard - usableHeightNow;         if (heightDifference &gt; (usableHeightSansKeyboard/4)) {             // keyboard probably just became visible             frameLayoutParams.height = usableHeightSansKeyboard - heightDifference;         } else {             // keyboard probably just became hidden             frameLayoutParams.height = usableHeightSansKeyboard;         }         mChildOfContent.requestLayout();         usableHeightPrevious = usableHeightNow;     } }</code></pre>上面的代码里添加了一个”<code>heightDifference &gt; (usableHeightSansKeyboard/4)</code>”的判断，这是为了去除无谓的干扰。因为能触发OnGlobalLayout事件的原因有很多，不止是软键盘的弹出变化，还包括各种子View的隐藏显示变化等，它们对界面高度的影响有限。加上了这个判断之后，只有界面的高度变化超过1/4的屏幕高度，才会进行重新设置高度，基本能保证代码只响应软键盘的弹出。</li></ul><h4 id="总结起来，就是这样："><a href="#总结起来，就是这样：" class="headerlink" title="总结起来，就是这样："></a>总结起来，就是这样：</h4><p>普通Activity（不带WebView），直接使用<code>adjustpan</code>或者<code>adjustResize</code><br>如果带WebView：</p><ul><li>如果非全屏模式，可以使用adjustResize</li><li>如果是全屏模式，则使用AndroidBug5497Workaround进行处理。<br>OK，以上就是一段关于『软键盘挡住输入框』的爬坑之旅。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> 软键盘 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Tomcat本地服务器配置</title>
      <link href="/2016/07/09/2016-07-09-Tomcat%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
      <url>/2016/07/09/2016-07-09-Tomcat%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h4 id="Tomcat本地服务器配置"><a href="#Tomcat本地服务器配置" class="headerlink" title="Tomcat本地服务器配置"></a>Tomcat本地服务器配置</h4><h5 id="用户名密码配置"><a href="#用户名密码配置" class="headerlink" title="用户名密码配置"></a>用户名密码配置</h5><p>tomcat-users.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;role rolename=&quot;manager-gui&quot;/&gt;</div><div class="line">&lt;user username=&quot;admin&quot; password=&quot;admin&quot; roles=&quot;manager-gui”/&gt;</div></pre></td></tr></table></figure><h5 id="1-配置在tomcat目录下"><a href="#1-配置在tomcat目录下" class="headerlink" title="1. 配置在tomcat目录下"></a>1. 配置在tomcat目录下</h5><p>直接把文件放在 tomcat6/webapps/ROOT 目录下，<br>然后在网址中访问： <a href="http://192.168.2.31:8080/download.zip" target="_blank" rel="external">http://192.168.2.31:8080/download.zip</a> 便可下载。<br><a id="more"></a></p><h5 id="2-配置在其他目录"><a href="#2-配置在其他目录" class="headerlink" title="2. 配置在其他目录"></a>2. 配置在其他目录</h5><p>如何不想放在webapps/ROOT下，就要对想要下载的目录进行配置：<br>在tomcat安装目录\conf下建立任意文件名xml文件，比如：download.xml，内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;  </div><div class="line"><span class="tag">&lt;<span class="name">Context</span>  <span class="attr">path</span>=<span class="string">"/download"</span> <span class="attr">docBase</span>=<span class="string">"D://download"</span> <span class="attr">crossContext</span>=<span class="string">"true"</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></div></pre></td></tr></table></figure><p>修改tomcat配置文件，文件目录\conf\web.xml，要将红色的false改为true。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.apache.catalina.servlets.DefaultServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>debug<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>0<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>listings<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span>  </div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div></pre></td></tr></table></figure><p>重启tomcat，访问<a href="http://127.0.0.1:8080/download" target="_blank" rel="external">http://127.0.0.1:8080/download</a></p><p>#####3. 遗留问题：<br>在使用过程中似乎配到某些格式的文件下载不稳定，出现下载到一半便中断的现象。</p><p>配置Tomcat 中文字符集问题</p><p>找到Tomcat安装路径下的conf文件夹下的server.xml配置文件，修改配置Tomcat端口的标签”Connector”,添加URIEncoding属性，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=&quot;8090&quot; protocol=&quot;HTTP/1.1&quot;   </div><div class="line">             maxThreads=&quot;150&quot; connectionTimeout=&quot;20000&quot;   </div><div class="line">             redirectPort=&quot;8443&quot; URIEncoding=&quot;utf-8&quot; /&gt;</div></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Parcelable和Serializable的区别</title>
      <link href="/2016/06/09/2016-06-09-Parcelable%E5%92%8CSerializable%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2016/06/09/2016-06-09-Parcelable%E5%92%8CSerializable%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h4 id="Parcelable和Serializable的区别："><a href="#Parcelable和Serializable的区别：" class="headerlink" title="Parcelable和Serializable的区别："></a>Parcelable和Serializable的区别：</h4><h5 id="Android自定义对象可序列化有两个选择一个是Serializable和Parcelable"><a href="#Android自定义对象可序列化有两个选择一个是Serializable和Parcelable" class="headerlink" title="Android自定义对象可序列化有两个选择一个是Serializable和Parcelable"></a>Android自定义对象可序列化有两个选择一个是Serializable和Parcelable</h5><h5 id="一、对象为什么需要序列化"><a href="#一、对象为什么需要序列化" class="headerlink" title="一、对象为什么需要序列化"></a>一、对象为什么需要序列化</h5><a id="more"></a><ul><li>1.永久性保存对象，保存对象的字节序列到本地文件。</li><li>2.通过序列化对象在网络中传递对象。</li><li>3.通过序列化对象在进程间传递对象。<h5 id="二、当对象需要被序列化时如何选择所使用的接口"><a href="#二、当对象需要被序列化时如何选择所使用的接口" class="headerlink" title="二、当对象需要被序列化时如何选择所使用的接口"></a>二、当对象需要被序列化时如何选择所使用的接口</h5></li><li>1.在使用内存的时候Parcelable比Serializable的性能高。</li><li>2.Serializable在序列化的时候会产生大量的临时变量，从而引起频繁的GC（内存回收）。</li><li>3.Parcelable不能使用在将对象存储在磁盘上这种情况，因为在外界的变化下Parcelable不能很好的保证数据的持续性。</li></ul>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 分享 </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>抽象类和接口的区别</title>
      <link href="/2016/06/07/2016-06-07-%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2016/06/07/2016-06-07-%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h4 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h4><h5 id="1-语法层面上的区别"><a href="#1-语法层面上的区别" class="headerlink" title="1.语法层面上的区别"></a>1.语法层面上的区别</h5><ul><li><p>1）抽象类可以提供成员方法的实现细节，而接口中只能存在public abstract 方法；</p><a id="more"></a></li><li><p>2）抽象类中的成员变量可以是各种类型的，而接口中的成员变量只能是public static final类型的；</p></li><li>3）接口中不能含有静态代码块以及静态方法，而抽象类可以有静态代码块和静态方法；</li><li>4）一个类只能继承一个抽象类，而一个类却可以实现多个接口。<h5 id="2-设计层面上的区别"><a href="#2-设计层面上的区别" class="headerlink" title="2.设计层面上的区别"></a>2.设计层面上的区别</h5></li><li>1）抽象类是对一种事物的抽象，即对类抽象，而接口是对行为的抽象。抽象类是对整个类整体进行抽象，包括属性、行为，但是接口却是对类局部（行为）进行抽象。举个简单的例子，飞机和鸟是不同类的事物，但是它们都有一个共性，就是都会飞。那么在设计的时候，可以将飞机设计为一个类Airplane，将鸟设计为一个类Bird，但是不能将 飞行 这个特性也设计为类，因此它只是一个行为特性，并不是对一类事物的抽象描述。此时可以将 飞行 设计为一个接口Fly，包含方法fly( )，然后Airplane和Bird分别根据自己的需要实现Fly这个接口。然后至于有不同种类的飞机，比如战斗机、民用飞机等直接继承Airplane即可，对于鸟也是类似的，不同种类的鸟直接继承Bird类即可。从这里可以看出，继承是一个 “是不是”的关系，而 接口 实现则是 “有没有”的关系。如果一个类继承了某个抽象类，则子类必定是抽象类的种类，而接口实现则是有没有、具备不具备的关系，比如鸟是否能飞（或者是否具备飞行这个特点），能飞行则可以实现这个接口，不能飞行就不实现这个接口。</li><li>2）设计层面不同，抽象类作为很多子类的父类，它是一种模板式设计。而接口是一种行为规范，它是一种辐射式设计。什么是模板式设计？最简单例子，大家都用过ppt里面的模板，如果用模板A设计了ppt B和ppt C，ppt B和ppt C公共的部分就是模板A了，如果它们的公共部分需要改动，则只需要改动模板A就可以了，不需要重新对ppt B和ppt C进行改动。而辐射式设计，比如某个电梯都装了某种报警器，一旦要更新报警器，就必须全部更新。也就是说对于抽象类，如果需要添加新的方法，可以直接在抽象类中添加具体的实现，子类可以不进行变更；而对于接口则不行，如果接口进行了变更，则所有实现这个接口的类都必须进行相应的改动。</li></ul>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 分享 </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android绘制相关</title>
      <link href="/2016/05/10/2016-05-10-Android%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3/"/>
      <url>/2016/05/10/2016-05-10-Android%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h4 id="Android绘制相关"><a href="#Android绘制相关" class="headerlink" title="Android绘制相关"></a>Android绘制相关</h4><p>Android系统显示原理<br>Android的显示过程简单概括为：Adnroid应用程序把经过测量、布局、绘制后的<code>surface</code>缓存数据，通过SurfaceFlinger把数据渲染到屏幕上</p><a id="more"></a><h4 id="UI优化"><a href="#UI优化" class="headerlink" title="UI优化"></a>UI优化</h4><ol><li><p>Overdraw的检测</p><p>设置 -&gt; 开发者选项 -&gt; 调试GPU过度绘制 -&gt; 显示GPU过度绘制<br>对比一张Overdraw的参考图：<br><img src="/images/memory/overdraw.png" alt="overdraw"></p><p>移除Activity的默认背景。 </p><p>Activity中Fragment背景 </p><p>ListView背景 </p><p>ListView的Header背景和item背景 </p></li><li><p>减少不必要的嵌套</p><p>使用Hierarchy Viewer查看布局层级</p></li></ol><p><img src="/images/memory/hierarchy_view.jpeg" alt="hierarchy_view"></p><p> <code>&lt;include&gt;</code>标签可以允许在一个布局当中引入另外一个布局。</p><p> <code>&lt;merge&gt;</code>标签是作为<include>标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时产生多余的布局嵌套。</include></p><p> <code>&lt;ViewStub&gt;</code>虽说也是View的一种，但是它没有大小，没有绘制功能，也不参与布局，资源消耗非常低，将它放置在布局当中基本可以认为是完全不会影响性能的</p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> View </tag>
            
            <tag> 绘制 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android hot-fix热修复</title>
      <link href="/2016/04/14/2016-04-14-Android%20hot-fix/"/>
      <url>/2016/04/14/2016-04-14-Android%20hot-fix/</url>
      <content type="html"><![CDATA[<h4 id="AndFix"><a href="#AndFix" class="headerlink" title="AndFix"></a>AndFix</h4><hr><p>项目地址：<a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">https://github.com/alibaba/AndFix</a></p><p>AndFix is a solution to fix the bugs online instead of redistributing Android App.<br>Andfix is an acronym for “Android hot-fix”.<br>AndFix supports Android version from 2.3 to 6.0, both ARM and X86 architecture, both Dalvik and ART runtime.</p><a id="more"></a><p>The compressed file format of AndFix’s patch is .apatch. It is dispatched from your own server to client to fix your App’s bugs.</p><p>优点：实时修复，仅支持java层修改</p><p>缺点：不支持添加文件到assets文件夹<br>不支持layout文件添加组件<br>不支持add filed(R.xx.xx)， new class， 内部类， 匿名内部类</p><h4 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h4><p>The implementation principle of AndFix is method body’s replacing,</p><p>具体的实现原理就是方法替换</p><p><img src="/images/andfix/principle.png" alt="image"></p><h4 id="Method-replacing"><a href="#Method-replacing" class="headerlink" title="Method replacing"></a>Method replacing</h4><p>AndFix judges the methods should be replaced by java custom annotation and replaces it by hooking it. AndFix has a native method <code>art_replaceMethod</code> in ART or <code>dalvik_replaceMethod</code> in Dalvik. </p><p>For more details, <a href="https://github.com/alibaba/AndFix/tree/master/jni" target="_blank" rel="external">here</a>.</p><h4 id="Fix-Process"><a href="#Fix-Process" class="headerlink" title="Fix Process"></a>Fix Process</h4><p><img src="/images/andfix/process.png" alt="image"></p><h4 id="Integration"><a href="#Integration" class="headerlink" title="Integration"></a>Integration</h4><h4 id="How-to-get"><a href="#How-to-get" class="headerlink" title="How to get?"></a>How to get?</h4><p>Directly add AndFix aar to your project as compile libraries.</p><p>For your maven dependency,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">&lt;groupId&gt;com.alipay.euler&lt;/groupId&gt;</div><div class="line">&lt;artifactId&gt;andfix&lt;/artifactId&gt;</div><div class="line">&lt;version&gt;0.4.0&lt;/version&gt;</div><div class="line">&lt;type&gt;aar&lt;/type&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure><p>For your gradle dependency,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">compile &apos;com.alipay.euler:andfix:0.4.0@aar&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use?"></a>How to use?</h4><ol><li>Initialize PatchManager,</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">patchManager = new PatchManager(context);</div><div class="line">patchManager.init(appversion);//current version</div></pre></td></tr></table></figure><ol><li>Load patch,</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">patchManager.loadPatch();</div></pre></td></tr></table></figure><p>You should load patch as early as possible, generally, in the initialization phase of your application(such as <code>Application.onCreate()</code>).</p><ol><li>Add patch,</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">patchManager.addPatch(path);//path of the patch file that was downloaded</div></pre></td></tr></table></figure><p>When a new patch file has been downloaded, it will become effective immediately by <code>addPatch</code>.</p><h4 id="Developer-Tool"><a href="#Developer-Tool" class="headerlink" title="Developer Tool"></a>Developer Tool</h4><p>AndFix provides a patch-making tool called <strong>apkpatch</strong>.</p><h4 id="How-to-get-1"><a href="#How-to-get-1" class="headerlink" title="How to get?"></a>How to get?</h4><p>The <code>apkpatch</code> tool can be found <a href="https://github.com/alibaba/AndFix/raw/master/tools/apkpatch-1.0.3.zip" target="_blank" rel="external">here</a>.</p><h4 id="How-to-use-1"><a href="#How-to-use-1" class="headerlink" title="How to use?"></a>How to use?</h4><ul><li><p>Prepare two android packages, one is the online package, the other one is the package after you fix bugs by coding.</p></li><li><p>Generate <code>.apatch</code> file by providing the two package,</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">usage: apkpatch -f &lt;new&gt; -t &lt;old&gt; -o &lt;output&gt; -k &lt;keystore&gt; -p &lt;***&gt; -a &lt;alias&gt; -e &lt;***&gt;</div><div class="line"> -a,--alias &lt;alias&gt;     keystore entry alias.</div><div class="line"> -e,--epassword &lt;***&gt;   keystore entry password.</div><div class="line"> -f,--from &lt;loc&gt;        new Apk file path.</div><div class="line"> -k,--keystore &lt;loc&gt;    keystore path.</div><div class="line"> -n,--name &lt;name&gt;       patch name.</div><div class="line"> -o,--out &lt;dir&gt;         output dir.</div><div class="line"> -p,--kpassword &lt;***&gt;   keystore password.</div><div class="line"> -t,--to &lt;loc&gt;          old Apk file path.</div></pre></td></tr></table></figure><p>Now you get the application savior, the patch file. Then you need to dispatch it to your client in some way, push or pull.</p><p>Sometimes, your team members may fix each other’s bugs, and generate not only one <code>.apatch</code>. For this situation, you can<br>merge <code>.apatch</code> files using this tool,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">usage: apkpatch -m &lt;apatch_path...&gt; -o &lt;output&gt; -k &lt;keystore&gt; -p &lt;***&gt; -a &lt;alias&gt; -e &lt;***&gt;</div><div class="line"> -a,--alias &lt;alias&gt;     keystore entry alias.</div><div class="line"> -e,--epassword &lt;***&gt;   keystore entry password.</div><div class="line"> -k,--keystore &lt;loc&gt;    keystore path.</div><div class="line"> -m,--merge &lt;loc...&gt;    path of .apatch files.</div><div class="line"> -n,--name &lt;name&gt;       patch name.</div><div class="line"> -o,--out &lt;dir&gt;         output dir.</div><div class="line"> -p,--kpassword &lt;***&gt;   keystore password.</div></pre></td></tr></table></figure><h4 id="Running-sample"><a href="#Running-sample" class="headerlink" title="Running sample"></a>Running sample</h4><ol><li>Import samplesI/AndFixDemo to your IDE, append AndFixDemo dependencies with AndFix(library project or aar).</li><li>Build project, save the package as 1.apk, and then install on device/emulator.</li><li>Modify com.euler.test.A, references com.euler.test.Fix.</li><li>Build project, save the package as 2.apk.</li><li>Use apkpatch tool to make a patch.</li><li>Rename the patch file to out.apatch, and then copy it to sdcard.</li><li>Run 1.apk and view log.</li></ol><h4 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h4><h4 id="ProGuard"><a href="#ProGuard" class="headerlink" title="ProGuard"></a>ProGuard</h4><p>If you enable ProGuard, you must save the mapping.txt, so your new version’s build can use it with <a href="http://proguard.sourceforge.net/manual/usage.html#applymapping" target="_blank" rel="external">“-applymapping”</a>.</p><p>And it is necessary to keep classes as follow,</p><ul><li><p>Native method</p><p>  com.alipay.euler.andfix.AndFix</p></li><li><p>Annotation</p><p>  com.alipay.euler.andfix.annotation.MethodReplace</p></li></ul><p>To ensure that these classes can be found after running an obfuscation and static analysis tool like ProGuard, add the configuration below to your ProGuard configuration file.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-keep class * extends java.lang.annotation.Annotation</div><div class="line">-keepclasseswithmembernames class * &#123;</div><div class="line">    native &lt;methods&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Self-Modifying-Code"><a href="#Self-Modifying-Code" class="headerlink" title="Self-Modifying Code"></a>Self-Modifying Code</h4><p>If you use it, such as <em>Bangcle</em>. To generate patch file, you’d better to use raw apk.</p><h4 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h4><p>The following is important but out of AndFix’s range.</p><ul><li>verify the signature of patch file</li><li>verify the fingerprint of optimize file</li></ul><h4 id="API-Documentation"><a href="#API-Documentation" class="headerlink" title="API Documentation"></a>API Documentation</h4><p>The libraries javadoc can be found <a href="https://rawgit.com/alibaba/AndFix/master/docs/index.html" target="_blank" rel="external">here</a>.</p><h4 id="License"><a href="#License" class="headerlink" title="License"></a>License</h4><p><a href="http://www.apache.org/licenses/LICENSE-2.0.html" target="_blank" rel="external">Apache License, Version 2.0</a></p><p>Copyright (c) 2015, alipay.com</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><p>Server端使用apkpatch生成差分补丁，后缀.apatch</p><p>./apkpatch.sh -f demo-debug2.apk -t demo-debug1.apk -o out -k demo.jks -p 123456 -a key -e 123456</p><h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>Application初始化AndFix组件，下载补丁，加载补丁，删除补丁</p><h4 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h4><p>Application.onCreate()初始化AndFix组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">private void initAndFix() &#123;</div><div class="line">    mPatchManager = new PatchManager(this); // </div><div class="line">    mPatchManager.init(ApkUtil.getVersionName(this)); // 根据版本号处理补丁文件的加载、删除等（暂时把files/apatch下的补丁添加到mPatchManager.mPatchs集合里，没有加载）</div><div class="line">    // load patch</div><div class="line">    mPatchManager.loadPatch(); //加载补丁</div><div class="line">    // add patch at runtime</div><div class="line">    try &#123;</div><div class="line">        // .apatch file path</div><div class="line">        String patchFileString = Environment.getExternalStorageDirectory()</div><div class="line">                .getAbsolutePath() + APATCH_PATH;</div><div class="line">        mPatchManager.addPatch(patchFileString);</div><div class="line">    &#125; catch (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="PatchManager-java"><a href="#PatchManager-java" class="headerlink" title="PatchManager.java"></a>PatchManager.java</h4><p>补丁文件的管理类（加载、删除）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private static final String SUFFIX = &quot;.apatch&quot;; // 补丁后缀</div><div class="line">private static final String DIR = &quot;apatch&quot;;   // 补丁路径 files/apatch</div><div class="line">private static final String SP_NAME = &quot;_andfix_&quot;; // sharedpreferences文件名</div><div class="line">private static final String SP_VERSION = &quot;version&quot;;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public PatchManager(Context context) &#123;</div><div class="line">    mContext = context;</div><div class="line">    mAndFixManager = new AndFixManager(mContext); // AndFixManager</div><div class="line">    mPatchDir = new File(mContext.getFilesDir(), DIR); // 补丁路径 files/apatch</div><div class="line">    mPatchs = new ConcurrentSkipListSet&lt;Patch&gt;(); // 存放补丁信息的集合（同步高并发）</div><div class="line">    mLoaders = new ConcurrentHashMap&lt;String, ClassLoader&gt;(); // classloaders</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * initialize</div><div class="line"> *</div><div class="line"> * @param appVersion App version</div><div class="line"> */</div><div class="line">public void init(String appVersion) &#123;</div><div class="line">    if (!mPatchDir.exists() &amp;&amp; !mPatchDir.mkdirs()) &#123;// make directory fail</div><div class="line">        Log.e(TAG, &quot;patch dir create error.&quot;);</div><div class="line">        return;</div><div class="line">    &#125; else if (!mPatchDir.isDirectory()) &#123;// not directory</div><div class="line">        mPatchDir.delete();</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    SharedPreferences sp = mContext.getSharedPreferences(SP_NAME,</div><div class="line">            Context.MODE_PRIVATE);</div><div class="line">    String ver = sp.getString(SP_VERSION, null);</div><div class="line">    if (ver == null || !ver.equalsIgnoreCase(appVersion)) &#123;</div><div class="line">        cleanPatch();  // app版本升级后清空之前的历史补丁（新版已修复bug）</div><div class="line">        sp.edit().putString(SP_VERSION, appVersion).commit();</div><div class="line">    &#125; else &#123;</div><div class="line">        initPatchs();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private void initPatchs() &#123;</div><div class="line">    File[] files = mPatchDir.listFiles();</div><div class="line">    for (File file : files) &#123;</div><div class="line">        addPatch(file);  // 加载mPatchDir下的appath补丁到mPatchs集合</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 删除源文件和输出dex文件</div><div class="line">private void cleanPatch() &#123;</div><div class="line">    File[] files = mPatchDir.listFiles();</div><div class="line">    for (File file : files) &#123;</div><div class="line">        mAndFixManager.removeOptFile(file);</div><div class="line">        if (!FileUtil.deleteFile(file)) &#123;</div><div class="line">            Log.e(TAG, file.getName() + &quot; delete error.&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * add patch at runtime</div><div class="line"> * </div><div class="line"> *</div><div class="line"> * @param path patch path</div><div class="line"> * @throws IOException</div><div class="line"> */</div><div class="line">public void addPatch(String path) throws IOException &#123;</div><div class="line">    File src = new File(path);</div><div class="line">    File dest = new File(mPatchDir, src.getName());</div><div class="line">    if (!src.exists()) &#123;</div><div class="line">        throw new FileNotFoundException(path);</div><div class="line">    &#125;</div><div class="line">    if (dest.exists()) &#123;</div><div class="line">        Log.d(TAG, &quot;patch [&quot; + path + &quot;] has be loaded.&quot;);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    FileUtil.copyFile(src, dest);// copy to patch&apos;s directory</div><div class="line">    Patch patch = addPatch(dest);</div><div class="line">    if (patch != null) &#123;</div><div class="line">        loadPatch(patch);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * load specific patch</div><div class="line"> *</div><div class="line"> * @param patch patch</div><div class="line"> */</div><div class="line">private void loadPatch(Patch patch) &#123;</div><div class="line">    Set&lt;String&gt; patchNames = patch.getPatchNames();</div><div class="line">    ClassLoader cl;</div><div class="line">    List&lt;String&gt; classes;</div><div class="line">    for (String patchName : patchNames) &#123;</div><div class="line">        if (mLoaders.containsKey(&quot;*&quot;)) &#123;</div><div class="line">            cl = mContext.getClassLoader();</div><div class="line">        &#125; else &#123;</div><div class="line">            cl = mLoaders.get(patchName);</div><div class="line">        &#125;</div><div class="line">        if (cl != null) &#123;</div><div class="line">            classes = patch.getClasses(patchName);</div><div class="line">            mAndFixManager.fix(patch.getFile(), cl, classes);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="AndFixManager-java"><a href="#AndFixManager-java" class="headerlink" title="AndFixManager.java"></a>AndFixManager.java</h4><p>fix dex files</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * fix</div><div class="line"> *</div><div class="line"> * @param file        patch file</div><div class="line"> * @param classLoader classloader of class that will be fixed</div><div class="line"> * @param classes     classes will be fixed</div><div class="line"> */</div><div class="line">public synchronized void fix(File file, ClassLoader classLoader,</div><div class="line">                             List&lt;String&gt; classes) &#123;</div><div class="line">    // 系统是否支持                         </div><div class="line">    if (!mSupport) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    if (!mSecurityChecker.verifyApk(file)) &#123;// security check fail 签名校验</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    try &#123;</div><div class="line">        // loadClass 输出目录</div><div class="line">        File optfile = new File(mOptDir, file.getName());</div><div class="line">        // 保存指纹签名</div><div class="line">        boolean saveFingerprint = true;</div><div class="line">        if (optfile.exists()) &#123;</div><div class="line">            // need to verify fingerprint when the optimize file exist,</div><div class="line">            // prevent someone attack on jailbreak device with</div><div class="line">            // Vulnerability-Parasyte.</div><div class="line">            // btw:exaggerated android Vulnerability-Parasyte</div><div class="line">            // http://secauo.com/Exaggerated-Android-Vulnerability-Parasyte.html</div><div class="line">            // 校验MD5            </div><div class="line">            if (mSecurityChecker.verifyOpt(optfile)) &#123;  </div><div class="line">                saveFingerprint = false;</div><div class="line">            &#125; else if (!optfile.delete()) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        final DexFile dexFile = DexFile.loadDex(file.getAbsolutePath(),</div><div class="line">                optfile.getAbsolutePath(), Context.MODE_PRIVATE);</div><div class="line">        if (saveFingerprint) &#123;        </div><div class="line">        // 保存MD5</div><div class="line">            mSecurityChecker.saveOptSig(optfile); </div><div class="line">        &#125;</div><div class="line">        ClassLoader patchClassLoader = new ClassLoader(classLoader) &#123;</div><div class="line">            @Override</div><div class="line">            protected Class&lt;?&gt; findClass(String className)</div><div class="line">                    throws ClassNotFoundException &#123;</div><div class="line">                Class&lt;?&gt; clazz = dexFile.loadClass(className, this);</div><div class="line">                if (clazz == null</div><div class="line">                         &amp;&amp; className.startsWith(&quot;com.alipay.euler.andfix&quot;)) &#123;</div><div class="line">                    return Class.forName(className);// annotation’s class</div><div class="line">                    // not found</div><div class="line">                &#125;</div><div class="line">                if (clazz == null) &#123;</div><div class="line">                    throw new ClassNotFoundException(className);</div><div class="line">                &#125;</div><div class="line">                return clazz;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        Enumeration&lt;String&gt; entrys = dexFile.entries();</div><div class="line">        Class&lt;?&gt; clazz = null;</div><div class="line">        while (entrys.hasMoreElements()) &#123;</div><div class="line">            String entry = entrys.nextElement();</div><div class="line">            if (classes != null &amp;&amp; !classes.contains(entry)) &#123;</div><div class="line">                continue;// skip, not need fix</div><div class="line">            &#125;</div><div class="line">            // loadClass</div><div class="line">            clazz = dexFile.loadClass(entry, patchClassLoader);  </div><div class="line">            if (clazz != null) &#123;</div><div class="line">                // fixClass</div><div class="line">                fixClass(clazz, classLoader);          </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; catch (IOException e) &#123;</div><div class="line">        Log.e(TAG, &quot;pacth&quot;, e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * fix class</div><div class="line"> *</div><div class="line"> * @param clazz class</div><div class="line"> */</div><div class="line">private void fixClass(Class&lt;?&gt; clazz, ClassLoader classLoader) &#123;</div><div class="line">    Method[] methods = clazz.getDeclaredMethods();</div><div class="line">    MethodReplace methodReplace;</div><div class="line">    String clz;</div><div class="line">    String meth;</div><div class="line">    for (Method method : methods) &#123;</div><div class="line">        //  反射提取带有MethodReplace注解的方法</div><div class="line">        methodReplace = method.getAnnotation(MethodReplace.class);  </div><div class="line">        if (methodReplace == null)</div><div class="line">            continue;</div><div class="line">        clz = methodReplace.clazz();</div><div class="line">        meth = methodReplace.method();</div><div class="line">        if (!isEmpty(clz) &amp;&amp; !isEmpty(meth)) &#123;</div><div class="line">            // jni层替换方法</div><div class="line">            replaceMethod(classLoader, clz, meth, method);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="SecurityChecker-java"><a href="#SecurityChecker-java" class="headerlink" title="SecurityChecker.java"></a>SecurityChecker.java</h4><p>用于验证apk和dex的签名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">init()获取apk的签名mPublicKey</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">verifyApk(File path)  //loadPatch()时检查apk和补丁的签名</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">签名校验失败时抛出异常</div><div class="line">E/SecurityChecker: /data/data/com.euler.andfix/files/apatch/out.apatch java.security.SignatureException: Signature was not verified </div><div class="line">at org.apache.harmony.security.provider.cert.X509CertImpl.verify(X509CertImpl.java:384) </div><div class="line">at com.alipay.euler.andfix.security.SecurityChecker.check(SecurityChecker.java:158)</div><div class="line">at com.alipay.euler.andfix.security.SecurityChecker.verifyApk(SecurityChecker.java:124) </div><div class="line">at com.alipay.euler.andfix.AndFixManager.fix(AndFixManager.java:121) </div><div class="line">at com.alipay.euler.andfix.patch.PatchManager.loadPatch(PatchManager.java:230) </div><div class="line">at com.alipay.euler.andfix.patch.PatchManager.addPatch(PatchManager.java:161) </div><div class="line">at com.euler.andfix.MainApplication.onCreate(MainApplication.java:63)</div></pre></td></tr></table></figure><h4 id="Compat-java"><a href="#Compat-java" class="headerlink" title="Compat.java"></a>Compat.java</h4><p>检查当前系统是否支持andfix<br>AndFix supports Android version from 2.3 to 6.0, both ARM and X86 architecture, both Dalvik and ART runtime.<br>not support alibaba’s YunOs</p><h4 id="MethodReplace-java"><a href="#MethodReplace-java" class="headerlink" title="MethodReplace.java"></a>MethodReplace.java</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Annotation for method</div><div class="line"> *</div><div class="line"> * @author sanping.li@alipay.com</div><div class="line"> */</div><div class="line">@Target(ElementType.METHOD) // ElementType是用来指定Annotation类型可以用在哪一些元素上的</div><div class="line">@Retention(RetentionPolicy.RUNTIME)  // 注解的保存策略</div><div class="line">/**</div><div class="line"> * SOURCE：只会保留在程序源码里，源码如果经过了编译之后，Annotation的数据就会消失,并不会保留在编译好的.class文件里面</div><div class="line"> * CLASS：Annotation类型的信息保留在程序源码里,同时也会保留在编译好的.class文件里面,在执行的时候，并不会把这一些信息加载到虚拟机</div><div class="line"> * (JVM)中去.注意一下，当你没有设定一个Annotation类型的Retention值时，系统默认值是CLASS.</div><div class="line"> * RUNTIME：表示在源码、编译好的.class文件中保留信息，在执行的时候会把这一些信息加载到JVM中去的．</div><div class="line"> */</div><div class="line">public @interface MethodReplace &#123;</div><div class="line">    String clazz();</div><div class="line">    String method();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="AndFix-java"><a href="#AndFix-java" class="headerlink" title="AndFix.java"></a>AndFix.java</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// initialize art or dalvik </div><div class="line">private static native boolean setup(boolean isArt, int apilevel);</div><div class="line">// </div><div class="line">private static native void replaceMethod(Method dest, Method src);</div><div class="line">/**</div><div class="line"> * modify access flag of class’ fields to public</div><div class="line"> *</div><div class="line"> * @param field field</div><div class="line"> */</div><div class="line">private static native void setFieldFlag(Field field);</div></pre></td></tr></table></figure><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>生成的补丁out.apatch是带有签名信息的压缩包，</p><p><img src="/images/andfix/out.apatch.zip.png" alt="image"></p><p>META_INFO文件夹包含MANIFEST.MF、CERT.SF和CERT.RSA、PATCH.MF。这三个文件分别表征以下含义：</p><p>（1）MANIFEST.MF：这是摘要文件。程序遍历Apk包中的所有文件(entry)，对非文件夹非签名文件的文件，逐个用SHA1生成摘要信息(用SHA1算法摘要的消息最终有160比特位的输出)，再用Base64进行编码。如果你改变了apk包中的文件，那么在apk安装校验时，改变后的文件摘要信息与MANIFEST.MF的检验信息不同，于是程序就不能成功安装。<br>说明：如果攻击者修改了程序的内容，有重新生成了新的摘要，那么就可以通过验证，所以这是一个非常简单的验证。</p><p>（2）CERT.SF：这是对摘要的签名文件。对前一步生成的MANIFEST.MF，使用SHA1-RSA算法，用开发者的私钥进行签名。在安装时只能使用公钥才能解密它。解密之后，将它与未加密的摘要信息（即，MANIFEST.MF文件）进行对比，如果相符，则表明内容没有被异常修改。<br>说明：在这一步，即使开发者修改了程序内容，并生成了新的摘要文件，但是攻击者没有开发者的私钥，所以不能生成正确的签名文件（CERT.SF）。系统在对程序进行验证的时候，用开发者公钥对不正确的签名文件进行解密，得到的结果和摘要文件（MANIFEST.MF）对应不起来，所以不能通过检验，不能成功安装文件。</p><p>（3）CERT.RSA文件中保存了公钥、所采用的加密算法等信息。<br>说明：系统对签名文件进行解密，所需要的公钥就是从这个文件里取出来的。<br>结论：从上面的总结可以看出，META-INFO里面的说那个文件环环相扣，从而保证Android程序的安全性。（只是防止开发者的程序不被攻击者修改，如果开发者的公私钥对对攻击者得到或者开发者开发出攻击程序，Android系统都无法检测出来。）</p><p><img src="/images/andfix/CERT.RSA.png" alt="image"></p><p>（4）PATCH.MF 由<code>apkpatch</code> tool 生成，主要内容：</p><p>Manifest-Version: 1.0</p><p>Patch-Name: demo-debug2</p><p>Created-Time: 15 Apr 2016 10:10:12 GMT</p><p>From-File: demo-debug2.apk</p><p>To-File: demo-debug1.apk</p><p>Patch-Classes: com.euler.andfix.SecondAvtivity_CF,com.euler.andfix.MainApplication_CF</p><p>Created-By: 1.0 (ApkPatch)</p><p>// 获取CERT.RSA公钥信息<br>openssl pkcs7 -inform DER -in CERT.RSA -noout -print_certs -text </p><h4 id="加载apatch过程"><a href="#加载apatch过程" class="headerlink" title="加载apatch过程"></a>加载apatch过程</h4><p>1、isSupport 判断设备是否支持andfix</p><p>2、copy /data/data/packageName/files/apatch/ 下</p><p>3、verify 校验apatch签名，对比apk的publickey和apatch的publickey</p><p>4、loaddex /data/data/packageName/files/apatch_opt/</p><p>5、repleaseMethod  根据PATCH.MF中Patch-Classes找到需要替换的class，再由class反射提取带有MethodReplace注解的方法，jni层替换，立即修复</p><p><img src="/images/andfix/method_replace.png" alt="image"></p><h4 id="Apk重签名"><a href="#Apk重签名" class="headerlink" title="Apk重签名"></a>Apk重签名</h4><p>1、解压apk，删除META_INFO文件夹，再压缩改后缀.apk</p><p>2、生成keystore签名文件</p><p>keytool -genkey -alias demo -keyalg RSA -validity 20000 -keystore demo.keystore</p><p>-genkey    产生证书文件 </p><p>-keystore  指定密钥库的.keystore文件中 </p><p>-keyalg    指定密钥的算法</p><p>-validity  为证书有效天数，这里我们写的是20000天</p><p>-alias     产生别名 </p><p>3、apk签名</p><p>jarsigner -verbose -keystore demo.keystore -signedjar demo.apk demo_old.apk demo -digestalg SHA1 -sigalg MD5withRSA</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">https://github.com/alibaba/AndFix</a></p><p><a href="http://blog.csdn.net/qxs965266509/article/details/49816007" target="_blank" rel="external">Alibaba-AndFix Bug热修复框架原理及源码解析</a></p><p><a href="http://myeyeofjava.iteye.com/blog/2125348" target="_blank" rel="external">Android签名与认证详细分析之一（CERT.RSA剖析）</a></p><p><a href="http://www.cnblogs.com/0616--ataozhijia/p/4482667.html" target="_blank" rel="external">[Android Pro] Android签名与认证详细分析之二（CERT.RSA剖析）</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
          <category> hot-fix </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 分享 </tag>
            
            <tag> Blog </tag>
            
            <tag> hot-fix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Handler、Message、MessageQueue随笔</title>
      <link href="/2016/03/04/2016-03-04-Handler-Message-Android/"/>
      <url>/2016/03/04/2016-03-04-Handler-Message-Android/</url>
      <content type="html"><![CDATA[<h4 id="Handler、Message"><a href="#Handler、Message" class="headerlink" title="Handler、Message"></a>Handler、Message</h4><h4 id="1、基本用法"><a href="#1、基本用法" class="headerlink" title="1、基本用法:"></a>1、基本用法:</h4><p>创建Handler重写handlerMessage（Message msg）处理消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Handler handler = new Handler()&#123;</div><div class="line">    @Override</div><div class="line">    public void handleMessage(Message msg) &#123;</div><div class="line">        super.handleMessage(msg);</div><div class="line">        // TODO 处理消息</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Handler handler = new Handler(new Handler.Callback()&#123;</div><div class="line">    @Override</div><div class="line">    public boolean handleMessage(Message msg) &#123;</div><div class="line">        // TODO 处理消息</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">handler.sendMessage(msg);</div><div class="line">handler.post(new Runnable()&#123;...&#125;);</div></pre></td></tr></table></figure><h4 id="2、主线程默认已经创建Looper，无须重复创建"><a href="#2、主线程默认已经创建Looper，无须重复创建" class="headerlink" title="2、主线程默认已经创建Looper，无须重复创建"></a>2、主线程默认已经创建Looper，无须重复创建</h4><p>ActivityThread.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) &#123;</div><div class="line">    Looper.prepareMainLooper();</div><div class="line">...</div><div class="line">    Looper.loop();</div><div class="line">...</div><div class="line">    throw new RuntimeException(&quot;Main thread loop unexpectedly exited&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Handler解析"><a href="#Handler解析" class="headerlink" title="Handler解析"></a>Handler解析</h4><p>Handler负责把消息放入线程的消息队列中以及分发消息。</p><h4 id="1、创建Handler"><a href="#1、创建Handler" class="headerlink" title="1、创建Handler"></a>1、创建Handler</h4><p>创建Handler之前需要创建Looper，否则抛出throw new RuntimeException(<br>                “Can’t create handler inside thread that has not called Looper.prepare()”);                </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * @param callback The callback interface in which to handle messages, or null.</div><div class="line"> * @param async If true, the handler calls &#123;@link Message#setAsynchronous(boolean)&#125; for</div><div class="line"> * each &#123;@link Message&#125; that is sent to it or &#123;@link Runnable&#125; that is posted to it.  </div><div class="line"> *</div><div class="line"> * @hide</div><div class="line">*/</div><div class="line">public Handler(Callback callback, boolean async) &#123;</div><div class="line">    mLooper = Looper.myLooper();// 使用当前线程所在的Looper</div><div class="line">    if (mLooper == null) &#123;</div><div class="line">        throw new RuntimeException(</div><div class="line">            &quot;Can&apos;t create handler inside thread that has </div><div class="line">            not called Looper.prepare()&quot;);</div><div class="line">    &#125;</div><div class="line">    mQueue = mLooper.mQueue;</div><div class="line">    mCallback = callback;</div><div class="line">    mAsynchronous = async;  //标志Message是否为异步Message.setAsynchronous</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">* @hide   </div><div class="line">*/</div><div class="line">public Handler(Looper looper, Callback callback, boolean async) &#123;</div><div class="line">    mLooper = looper;    // 为handler指定Looper</div><div class="line">    mQueue = looper.mQueue;</div><div class="line">    mCallback = callback;</div><div class="line">    mAsynchronous = async;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2、发送消息到消息队列MesageQueue"><a href="#2、发送消息到消息队列MesageQueue" class="headerlink" title="2、发送消息到消息队列MesageQueue"></a>2、发送消息到消息队列MesageQueue</h4><p>Handler中提供了很多个发送消息的方法，其中除了sendMessageAtFrontOfQueue()方法之外，其它的发送消息方法最终都会辗转调用到sendMessageAtTime()方法中</p><p><img src="/images/handler/handler_send.jpg" alt="发送消息"></p><p>（1）boolean sendEmptyMessage(int);<br>// 发送一条消息到队列，成功返回true，失败返回false，通常是因为Looper已经退出</p><p>（2）sendEmptyMessageAtTime(int, long)指定时间发送消息 相对时间<br>SystemClock.uptimeMillis() + 3000; // 从开机到现在的毫秒数（手机睡眠的时间不包括在内）；  </p><p>（3）通过sendMessageAtFrontOfQueue()方法来发送消息的，它也会调用enqueueMessage()来让消息入队，只不过when为0，这时会把mMessages(MQ头部消息)赋值为新入队的这条消息，然后将这条消息的next指定为刚才的mMessages，这样也就完成了添加消息到队列头部的操作。 </p><p>（3）<br><img src="/images/handler/handler_post.jpg" alt="post（Runnable）"></p><p>Post Runnable 到消息队列。将Runnable转换为Message</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private static Message getPostMessage(Runnable r) &#123;</div><div class="line">        Message m = Message.obtain();</div><div class="line">        m.callback = r; // msg的callback指向Runnale</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3、消息队列中移除消息"><a href="#3、消息队列中移除消息" class="headerlink" title="3、消息队列中移除消息"></a>3、消息队列中移除消息</h4><p><img src="/images/handler/handler_remove.jpg" alt="移除消息"></p><p>一般在Activity页面结束时调用handler.removeCallbacksAndMessages(null);<br>移除队列中所用的callbacks和messages。详见MessageQueue. removeCallbacksAndMessages();</p><h4 id="4、消息事件处理"><a href="#4、消息事件处理" class="headerlink" title="4、消息事件处理"></a>4、消息事件处理</h4><p><strong>Handler 里面的mLooper所在的线程决定了 handleMessage 方法所在的线程</strong></p><p>message的处理比较简单，先判断Message中有没有指定的callback对象（Runnable），有的话就调用callback的run方法，没有则调用我们自己创建Handler对象时实现的handleMessage(Message msg)方法，就这样实现了消息的分发。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public void dispatchMessage(Message msg) &#123;</div><div class="line">    if (msg.callback != null) &#123;  </div><div class="line">    // 处理Runnable消息调用runnable.run();</div><div class="line">        handleCallback(msg);</div><div class="line">    &#125; else &#123;</div><div class="line">        if (mCallback != null) &#123;</div><div class="line">            if (mCallback.handleMessage(msg)) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>####5、子线程中创建Handler<br>在一个子线程中创建Handler时，必须初始化该线程的Looper对象，因为普通的Thread默认是没有消息队列的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class MyThread extends Thread &#123;</div><div class="line">    public Handler mHandler;</div><div class="line">    public void run() &#123;</div><div class="line">        Looper.prepare();</div><div class="line">        mHandler = new Handler() &#123;</div><div class="line">            public void handleMessage(Message msg) &#123;</div><div class="line">                /* 处理接收到的消息 */</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        Looper.loop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="6、Handler的特点"><a href="#6、Handler的特点" class="headerlink" title="6、Handler的特点"></a>6、Handler的特点</h4><p>1.handler可以在任意线程发送消息，这些消息会被添加到关联的MQ上。<br>2.handler是在它关联的looper线程中处理消息的。<br>3.<strong>一个线程可以有多个Handler，但是只能有一个Looper和一个MessageQueue！</strong> </p><p>Q？<br>同一个线程中的所有消息是否共享MQ？<br>MQ如何分发到不同的Handler处理消息？</p><p>A：是<br>handler.target</p><h4 id="Message-解析"><a href="#Message-解析" class="headerlink" title="Message 解析"></a>Message 解析</h4><p>Message本身是一个Parcelable对象</p><h4 id="Message-可以传递的参数有："><a href="#Message-可以传递的参数有：" class="headerlink" title="Message 可以传递的参数有："></a>Message 可以传递的参数有：</h4><ol><li>arg1 arg2 整数类型，是setData的低成本替代品。传递简单类型</li><li>Object 类型 obj(Parcelable)</li><li>what  用户自定义的消息代码，这样接受者可以了解这个消息的信息。每个handler各自包含自己的消息代码，所以不用担心自定义的消息跟其他handler有冲突。</li><li>其他的可以通过Bundle进行传递<br>Message可以通过new Message构造来创建一个新的Message,但是这种方式很不好，不建议使用。最好使用Message.obtain()来获取Message实例,它创建了消息池来处理的。</li></ol><p>####1、    创建Message</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Message msg = new Message();     (不要这样写)</div><div class="line">Message msg = handler.obtainMessage();</div><div class="line">Message msg = Message.obtain();</div><div class="line">// 这两种方式的区别</div><div class="line">public static Message obtain(Handler h) &#123;</div><div class="line">    Message m = obtain();</div><div class="line">    m.target = h; // 指定Message的句柄（消息处理者）Handler</div><div class="line">    return m;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* Return a new Message instance from the global pool. Allows us to</div><div class="line">* avoid allocating new objects in many cases.</div><div class="line">*/</div><div class="line">// 从缓存池中构建一个Message，如果sPool为空说明没有缓存的Message，则新建一个</div><div class="line">public static Message obtain() &#123;</div><div class="line">    synchronized (sPoolSync) &#123;</div><div class="line">        if (sPool != null) &#123;</div><div class="line">            Message m = sPool;</div><div class="line">            sPool = m.next;</div><div class="line">            m.next = null;</div><div class="line">            m.flags = 0;   // clear in-use flag</div><div class="line">            sPoolSize--;</div><div class="line">            return m;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return new Message();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2、Message的回收缓存"><a href="#2、Message的回收缓存" class="headerlink" title="2、Message的回收缓存"></a>2、Message的回收缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* Recycles a Message that may be in-use.</div><div class="line">* Used internally by the MessageQueue and Looper when disposing of queued Messages.</div><div class="line">*/</div><div class="line">void recycleUnchecked() &#123;</div><div class="line">    // Mark the message as in use while it remains in the recycled object pool.</div><div class="line">    // Clear out all other details.</div><div class="line">    flags = FLAG_IN_USE; // 标示为in_use_flag</div><div class="line">    what = 0;</div><div class="line">    arg1 = 0;</div><div class="line">    arg2 = 0;</div><div class="line">    obj = null;</div><div class="line">    replyTo = null;</div><div class="line">    sendingUid = -1;</div><div class="line">    when = 0;</div><div class="line">    target = null;</div><div class="line">    callback = null;</div><div class="line">    data = null;</div><div class="line">    synchronized (sPoolSync) &#123;</div><div class="line">        // 最多可以缓存50个Message</div><div class="line">        if (sPoolSize &lt; MAX_POOL_SIZE**（50）**) &#123;</div><div class="line">            // 将缓存的sPool指向当前msg，next指向原有的sPool</div><div class="line">            next = sPool;</div><div class="line">            sPool = this;</div><div class="line">            sPoolSize++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在一个无限for循环中遍历消息队列，然后调用Handler进行消息分发处理，分发之后调用recycleUnchecked ()把Message对象回收到Message Pool中（最大值为50个，若消息池中已经有50个Message，则不做缓存）</p><p>例：<br>MQ—-&gt; m1,m2,m3; // 未处理的message<br>m1.recycleUnchecked();<br><img src="/images/handler/recycle1.jpg" alt="这里写图片描述"></p><p>m2.recycleUnchecked();<br><img src="/images/handler/recycle2.jpg" alt="这里写图片描述"></p><p>m3.recycleUnchecked();<br><img src="/images/handler/recycle3.jpg" alt="这里写图片描述"></p><p>Message.obtain();<br><img src="/images/handler/obtain_message.jpg" alt="这里写图片描述"></p><h4 id="3、msg-markInUse"><a href="#3、msg-markInUse" class="headerlink" title="3、msg. markInUse();"></a>3、msg. markInUse();</h4><p>// 标记msg为FLAG_IN_USE，加入MQ时做检查（此状态的msg不能多次加入MQ），调用Message.obtain()清除flags；</p><h4 id="4、将一个消息设置为异步"><a href="#4、将一个消息设置为异步" class="headerlink" title="4、将一个消息设置为异步"></a>4、将一个消息设置为异步</h4><p>Message.setAsynchronous(Boolean async) // 详见“MessageQueue同步分割栏”</p><h4 id="Looper解析"><a href="#Looper解析" class="headerlink" title="Looper解析"></a>Looper解析</h4><h4 id="1、Looper-prepare"><a href="#1、Looper-prepare" class="headerlink" title="1、Looper.prepare()"></a>1、Looper.prepare()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private static void prepare(boolean quitAllowed) &#123;</div><div class="line">    if (sThreadLocal.get() != null) &#123;</div><div class="line">        throw new RuntimeException(&quot;Only one Looper may be created per thread&quot;);</div><div class="line">    &#125;</div><div class="line">    sThreadLocal.set(new Looper(quitAllowed));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>创建一个Looper对象，它的内部维护了一个消息队列MQ。注意，一个Thread只能有一个Looper对象，不能多次调用Looper.prepare()，否则将抛出异常。</p><h4 id="2、Looper-loop"><a href="#2、Looper-loop" class="headerlink" title="2、Looper.loop()"></a>2、Looper.loop()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public static void loop() &#123;</div><div class="line">    final Looper me = myLooper();  // 获取当前线程所在                                                   Looper，不能为空</div><div class="line">    if (me == null) &#123;</div><div class="line">        throw new RuntimeException(&quot;No Looper; Looper.prepare() wasn&apos;t called on this thread.&quot;);</div><div class="line">    &#125;</div><div class="line">    final MessageQueue queue = me.mQueue;</div><div class="line">    Binder.clearCallingIdentity();</div><div class="line">    final long ident = Binder.clearCallingIdentity();</div><div class="line">    for (;;) &#123; // 循环从MQ中取出消息,没有消息则阻塞</div><div class="line">        Message msg = queue.next(); // might block   </div><div class="line">        if (msg == null) &#123;</div><div class="line">        // No message indicates that the message queue is quitting.</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        // 交给相关Handler处理消息</div><div class="line">        **msg.target.dispatchMessage(msg);**   </div><div class="line">        // Make sure that during the course of dispatching the</div><div class="line">        // identity of the thread wasn&apos;t corrupted.</div><div class="line">        final long newIdent = Binder.clearCallingIdentity();</div><div class="line">        msg.recycleUnchecked();   // 消息回收</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3、Looper-quit-quitSafely"><a href="#3、Looper-quit-quitSafely" class="headerlink" title="3、Looper.quit()  quitSafely();"></a>3、Looper.quit()  quitSafely();</h4><p>调用mQueue.quit();</p><p>当我们调用Looper的quit方法时，实际上执行了MessageQueue中的removeAllMessagesLocked方法，该方法的作用是把MessageQueue消息池中所有的消息全部清空，无论是延迟消息（延迟消息是指通过sendMessageDelayed或通过postDelayed等方法发送的需要延迟执行的消息）还是非延迟消息。</p><p>当我们调用Looper的quitSafely方法时，实际上执行了MessageQueue中的removeAllFutureMessagesLocked方法，通过名字就可以看出，该方法只会清空MessageQueue消息池中所有的延迟消息，并将消息池中所有的非延迟消息派发出去让Handler去处理，quitSafely相比于quit方法安全之处在于清空消息之前会派发所有的非延迟消息。</p><p>无论是调用了quit方法还是quitSafely方法只会，Looper就不再接收新的消息。即在调用了Looper的quit或quitSafely方法之后，消息循环就终结了，这时候再通过Handler调用sendMessage或post等方法发送消息时均返回false，表示消息没有成功放入消息队列MessageQueue中，因为消息队列已经退出了。<br>需要注意的是Looper的quit方法从API Level 1就存在了，但是Looper的quitSafely方法从API Level 18才添加进来。</p><h4 id="4、其他方法"><a href="#4、其他方法" class="headerlink" title="4、其他方法"></a>4、其他方法</h4><p>getMainLooper() 获取主线程Looper<br>myLooper() 获取当前线程Looper<br>getQueue() 获取MQ<br>getThread() 获取当前Looper所在线程</p><h4 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h4><p>MessageQueue是一个按照when大小排列的链表结构。</p><h4 id="1、enqueueMessage-Message-msg-long-when"><a href="#1、enqueueMessage-Message-msg-long-when" class="headerlink" title="1、enqueueMessage(Message msg, long when)"></a>1、enqueueMessage(Message msg, long when)</h4><p>同一个没有被处理的message不能多次加入队列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">// 添加消息到消息队列, 最终的mMessages是按照when的由小到大排列</div><div class="line">boolean enqueueMessage(Message msg, long when) &#123;</div><div class="line">    // 检查msg合法性，必须包含handler且非FLAG_IN_USE状态</div><div class="line">    if (msg.target == null) &#123;</div><div class="line">        throw new IllegalArgumentException(&quot;Message must have a target.&quot;);</div><div class="line">    &#125;</div><div class="line">    if (msg.isInUse()) &#123;</div><div class="line">        throw new IllegalStateException(msg + &quot; This message is already in use.&quot;);</div><div class="line">    &#125;</div><div class="line">    synchronized (this) &#123;</div><div class="line">        if (mQuitting) &#123;  //如果已经调用MessageQueue.quit，                                      那么不再接收新的Message    </div><div class="line">            msg.recycle();</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        msg.markInUse();// msg  in_use_flag</div><div class="line">        msg.when = when;</div><div class="line">        Message p = mMessages;</div><div class="line">        boolean needWake;</div><div class="line">        // 队列为空或msg.when == 0或 msg.when &lt; mMessages.when时</div><div class="line">        // 将msg直接插入到队列头部</div><div class="line">        if (p == null || when == 0 || when &lt; p.when) &#123;</div><div class="line">            // New head, wake up the event queue if blocked.</div><div class="line">            msg.next = p;</div><div class="line">            mMessages = msg;</div><div class="line">            needWake = mBlocked;</div><div class="line">        &#125; else &#123;</div><div class="line">        // Inserted within the middle of the queue.  Usually we don&apos;t have to wake</div><div class="line">        // up the event queue unless there is a barrier at the head of the queue</div><div class="line">        // and the message is the earliest asynchronous message in the queue.       </div><div class="line">            needWake = mBlocked &amp;&amp; p.target == null &amp;&amp; msg.isAsynchronous();</div><div class="line">            Message prev;</div><div class="line">            // 根据when的大小顺序，插入到合适的位置</div><div class="line">            for (;;) &#123;</div><div class="line">                prev = p;</div><div class="line">                p = p.next;</div><div class="line">                if (p == null || when &lt; p.when) &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                // 如果在插入位置以前，发现异步消息，则不需要唤醒</div><div class="line">                if (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                    needWake = false;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            msg.next = p; // invariant: p == prev.next</div><div class="line">            prev.next = msg;</div><div class="line">        &#125;</div><div class="line">        // We can assume mPtr != 0 because mQuitting is false.</div><div class="line">        if (needWake) &#123;</div><div class="line">            nativeWake(mPtr);  //唤醒nativeMessageQueue</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>nativeWake，和natePollonce的作用：<br>　　nativePollOnce(mPtr, nextPollTimeoutMillis);暂时无视mPtr参数，阻塞等待nextPollTimeoutMillis毫秒的时间返回，与Object.wait(long timeout)相似<br>　　nativeWake(mPtr);暂时无视mPtr参数，唤醒等待的nativePollOnce函数返回的线程，从这个角度解释nativePollOnce函数应该是最多等待nextPollTimeoutMillis毫秒</p><h4 id="2、removeMessage-int-what"><a href="#2、removeMessage-int-what" class="headerlink" title="2、removeMessage(int what);"></a>2、removeMessage(int what);</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">//删除所有what 和obj = object 的msg</div><div class="line">void removeMessages(Handler h, int what, Object object) &#123;</div><div class="line">    if (h == null) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    synchronized (this) &#123;</div><div class="line">        Message p = mMessages;</div><div class="line">        // Remove all messages at front.</div><div class="line">        // 循环移除MQ 队列头部所有符合要求的Message</div><div class="line">        while (p != null &amp;&amp; p.target == h &amp;&amp; p.what == what</div><div class="line">                  &amp;&amp; (object == null || p.obj == object)) &#123;</div><div class="line">            Message n = p.next;</div><div class="line">            mMessages = n;</div><div class="line">            p.recycleUnchecked();</div><div class="line">            p = n;</div><div class="line">        &#125;</div><div class="line">        // Remove all messages after front.</div><div class="line">        // 循环移除MQ中间所有符合要求的Message</div><div class="line">        while (p != null) &#123;</div><div class="line">            Message n = p.next;</div><div class="line">            if (n != null) &#123;</div><div class="line">                if (n.target == h &amp;&amp; n.what == what</div><div class="line">                    &amp;&amp; (object == null || n.obj == object)) &#123;</div><div class="line">                    // 移除message并交换位置</div><div class="line">                    Message nn = n.next;</div><div class="line">                    n.recycleUnchecked();</div><div class="line">                    p.next = nn;</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            p = n;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3、Message-next"><a href="#3、Message-next" class="headerlink" title="3、Message next()"></a>3、Message next()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">Message next() &#123;</div><div class="line">    // Return here if the message loop has already quit and been disposed.</div><div class="line">    // This can happen if the application tries to restart a looper after quit</div><div class="line">    // which is not supported.</div><div class="line">    final long ptr = mPtr;</div><div class="line">    if (ptr == 0) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">    int pendingIdleHandlerCount = -1; // -1 only during first iteration   空闲handler数量</div><div class="line">    int nextPollTimeoutMillis = 0;   // MQ阻塞时间</div><div class="line">    for (;;) &#123;</div><div class="line">        if (nextPollTimeoutMillis != 0) &#123;</div><div class="line">            Binder.flushPendingCommands();</div><div class="line">        &#125;</div><div class="line">        nativePollOnce(ptr, nextPollTimeoutMillis);   //MessageQueue阻塞nextPollTimeoutMillis 指定时间</div><div class="line">        synchronized (this) &#123;</div><div class="line">            // Try to retrieve the next message.  Return if found.</div><div class="line">            final long now = SystemClock.uptimeMillis();  // 开机相对时间（不包含休眠时间）</div><div class="line">            Message prevMsg = null;</div><div class="line">            Message msg = mMessages;</div><div class="line">            // 遇到同步分隔栏，忽略该消息，取下一个 异步消息</div><div class="line">            if (msg != null &amp;&amp; msg.target == null) &#123;</div><div class="line">                // Stalled by a barrier.  Find the next asynchronous message in the queue.</div><div class="line">                do &#123;</div><div class="line">                    prevMsg = msg;</div><div class="line">                    msg = msg.next;</div><div class="line">                &#125; while (msg != null &amp;&amp; !msg.isAsynchronous());</div><div class="line">            &#125;</div><div class="line">            if (msg != null) &#123;</div><div class="line">                if (now &lt; msg.when) &#123;     // 遇到延迟消息，则阻塞一段时间 nextPollTimeoutMillis</div><div class="line">                    // Next message is not ready.  Set a timeout to wake up when it is ready.</div><div class="line">                    nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class="line">                &#125; else &#123;</div><div class="line">                    // Got a message.  // 得到Message，从MQ里移除此消息</div><div class="line">                    mBlocked = false;</div><div class="line">                    if (prevMsg != null) &#123;    // prevMsg != null,说明是同步分隔栏消息，</div><div class="line">                        prevMsg.next = msg.next;  // 保留MQ头部为同步分隔栏消息（为了取出下一个异步消息），替换next消息</div><div class="line">                    &#125; else &#123;</div><div class="line">                        mMessages = msg.next;   // 不包含同步分隔栏消息，替换当前head为next消息</div><div class="line">                    &#125;</div><div class="line">                    msg.next = null;</div><div class="line">                    if (DEBUG) Log.v(TAG, &quot;Returning message: &quot; + msg);</div><div class="line">                    msg.markInUse();</div><div class="line">                    return msg;</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                // No more messages.</div><div class="line">                nextPollTimeoutMillis = -1;</div><div class="line">            &#125;</div><div class="line">            // Process the quit message now that all pending messages have been handled.</div><div class="line">            if (mQuitting) &#123;</div><div class="line">                dispose();</div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line">            // If first time idle, then get the number of idlers to run.</div><div class="line">            // Idle handles only run if the queue is empty or if the first message</div><div class="line">            // in the queue (possibly a barrier) is due to be handled in the future.</div><div class="line">            if (pendingIdleHandlerCount &lt; 0</div><div class="line">                    &amp;&amp; (mMessages == null || now &lt; mMessages.when)) &#123;</div><div class="line">                    // 线程空闲，计算IdleHandler的数量</div><div class="line">                pendingIdleHandlerCount = mIdleHandlers.size();</div><div class="line">            &#125;</div><div class="line">            // 没有IdleHandler   阻塞队列</div><div class="line">            if (pendingIdleHandlerCount &lt;= 0) &#123;</div><div class="line">                // No idle handlers to run.  Loop and wait some more.</div><div class="line">                mBlocked = true;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            if (mPendingIdleHandlers == null) &#123;</div><div class="line">                mPendingIdleHandlers = new IdleHandler[Math.max(pendingIdleHandlerCount, 4)];</div><div class="line">            &#125;</div><div class="line">                mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</div><div class="line">            &#125;</div><div class="line">        // Run the idle handlers.</div><div class="line">        // We only ever reach this code block during the first iteration.</div><div class="line">        // 处理IdleHandler部分</div><div class="line">        for (int i = 0; i &lt; pendingIdleHandlerCount; i++) &#123;</div><div class="line">            final IdleHandler idler = mPendingIdleHandlers[i];</div><div class="line">            mPendingIdleHandlers[i] = null; // release the reference to the handler</div><div class="line">            boolean keep = false;</div><div class="line">            try &#123;</div><div class="line">                keep = idler.queueIdle();</div><div class="line">            &#125; catch (Throwable t) &#123;</div><div class="line">                Log.wtf(TAG, &quot;IdleHandler threw exception&quot;, t);</div><div class="line">            &#125;</div><div class="line">            // 是否需要移除IdleHandler</div><div class="line">            if (!keep) &#123;</div><div class="line">                synchronized (this) &#123;</div><div class="line">                    mIdleHandlers.remove(idler);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        // Reset the idle handler count to 0 so we do not run them again.</div><div class="line">        pendingIdleHandlerCount = 0;</div><div class="line">        // While calling an idle handler, a new message could have been delivered</div><div class="line">        // so go back and look again for a pending message without waiting.</div><div class="line">        nextPollTimeoutMillis = 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="4、MessageQueue-IdleHandler"><a href="#4、MessageQueue-IdleHandler" class="headerlink" title="4、MessageQueue.IdleHandler"></a>4、MessageQueue.IdleHandler</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">messageQueue.addIdleHandler(new MessageQueue.IdleHandler() &#123;</div><div class="line">    /**</div><div class="line">     * 返回值boolean 意思是needKeep</div><div class="line">     * true，表示要保留保留， 代表不移除这个idleHandler，可以反复执行</div><div class="line">     * false代表执行完毕之后就移除这个idleHandler, 也就是只执行一次</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public boolean queueIdle() &#123;</div><div class="line">        Log.e(TAG, &quot;--------------&gt;queueIdle  主线程空闲了&quot;);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="5、同步分割栏"><a href="#5、同步分割栏" class="headerlink" title="5、同步分割栏"></a>5、同步分割栏</h4><p>也是一个targer = null 的Message</p><p>“同步分割栏”是起什么作用的呢？它就像一个卡子，卡在消息链表中的某个位置，当消息循环不断从消息链表中摘取消息并进行处理时，一旦遇到这种“同步分割栏”，那么即使在分割栏之后还有若干已经到时的普通Message，也不会摘取这些消息了。请注意，此时只是不会摘取“普通Message”了，如果队列中还设置有“异步Message”，那么还是会摘取已到时的“异步Message”的。<br>在Android的消息机制里，“普通Message”和“异步Message”也就是这点儿区别啦，也就是说，<strong>如果消息列表中根本没有设置“同步分割栏”的话，那么“普通Message”和“异步Message”的处理就没什么大的不同了</strong>。</p><p><strong>int postSyncBarrier(long when)</strong>  // 往MQ里加入一个同步分割栏，按照when的大小插入到合适位置<br><strong>removeSyncBarrier(int token)</strong> // 从MQ中移除同步分割栏</p><h4 id="6、清空MQ"><a href="#6、清空MQ" class="headerlink" title="6、清空MQ"></a>6、清空MQ</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">void quit(boolean safe) &#123;</div><div class="line">    if (!mQuitAllowed) &#123;   //UI线程的Looper消息队列不可退出 mQuitAllowed = false</div><div class="line">        throw new IllegalStateException(&quot;Main thread not allowed to quit.&quot;);</div><div class="line">    &#125;</div><div class="line">    synchronized (this) &#123;</div><div class="line">        if (mQuitting) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        mQuitting = true;</div><div class="line">        if (safe) &#123; // 移除MQ所有的延迟消息</div><div class="line">            removeAllFutureMessagesLocked();</div><div class="line">        &#125; else &#123;    // 移除MQ中的所有Message</div><div class="line">            removeAllMessagesLocked();</div><div class="line">        &#125;</div><div class="line">        // We can assume mPtr != 0 because mQuitting was previously false.</div><div class="line">        nativeWake(mPtr); // 唤醒MQ</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 移除MQ中的所有Message</div><div class="line">private void removeAllMessagesLocked() &#123;</div><div class="line">    Message p = mMessages;</div><div class="line">    while (p != null) &#123;</div><div class="line">        Message n = p.next;</div><div class="line">        p.recycleUnchecked();</div><div class="line">        p = n;</div><div class="line">    &#125;</div><div class="line">    mMessages = null;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// 移除MQ所有的延迟消息 n.when &gt; now</div><div class="line">private void removeAllFutureMessagesLocked() &#123;</div><div class="line">    final long now = SystemClock.uptimeMillis();</div><div class="line">    Message p = mMessages;</div><div class="line">    if (p != null) &#123;</div><div class="line">        if (p.when &gt; now) &#123;   // 如果队列头部消息为延迟消息，则清空MQ</div><div class="line">            removeAllMessagesLocked();</div><div class="line">        &#125; else &#123;</div><div class="line">            Message n;</div><div class="line">            for (;;) &#123;</div><div class="line">                n = p.next;</div><div class="line">                if (n == null) &#123;</div><div class="line">                    return;</div><div class="line">                &#125;</div><div class="line">                if (n.when &gt; now) &#123;  // 遍历找到延迟消息，退出循环</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                p = n;</div><div class="line">            &#125;</div><div class="line">            p.next = null; </div><div class="line">            // 清空所有的延迟消息</div><div class="line">            do &#123;</div><div class="line">                p = n;</div><div class="line">                n = p.next;</div><div class="line">                p.recycleUnchecked();</div><div class="line">            &#125; while (n != null);</div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Handler-memory-leak"><a href="#Handler-memory-leak" class="headerlink" title="Handler-memory-leak"></a>Handler-memory-leak</h4><p><a href="http://www.androiddesignpatterns.com/2013/01/inner-class-handler-memory-leak.html" target="_blank" rel="external">http://www.androiddesignpatterns.com/2013/01/inner-class-handler-memory-leak.html</a></p><h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="http://bbs.9ria.com/thread-247435-1-1.html" target="_blank" rel="external">http://bbs.9ria.com/thread-247435-1-1.html</a><br><a href="http://www.mamicode.com/info-detail-984722.html" target="_blank" rel="external">http://www.mamicode.com/info-detail-984722.html</a><br><a href="http://www.cnblogs.com/codingmyworld/archive/2011/09/14/2174255.html" target="_blank" rel="external">http://www.cnblogs.com/codingmyworld/archive/2011/09/14/2174255.html</a><br><a href="http://my.oschina.net/youranhongcha/blog/492591?fromerr=d6t15a3t#OSC_h3_10" target="_blank" rel="external">http://my.oschina.net/youranhongcha/blog/492591?fromerr=d6t15a3t#OSC_h3_10</a></p>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> 分享 </tag>
            
            <tag> Blog </tag>
            
            <tag> Handler、Message </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Rxjava-learn</title>
      <link href="/2016/02/25/2016-02-26-Rxjava-Android/"/>
      <url>/2016/02/25/2016-02-26-Rxjava-Android/</url>
      <content type="html"><![CDATA[<h4 id="Rxjava-learn"><a href="#Rxjava-learn" class="headerlink" title="Rxjava-learn"></a>Rxjava-learn</h4><h4 id="1、github-项目地址：-https-github-com-ReactiveX-RxJava"><a href="#1、github-项目地址：-https-github-com-ReactiveX-RxJava" class="headerlink" title="1、github 项目地址：  https://github.com/ReactiveX/RxJava"></a>1、github 项目地址：  <a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">https://github.com/ReactiveX/RxJava</a></h4><p>（RxAndroid 是一个专门为Android开发做出最小适配框架，可以方便的写出响应式的组件和一站式服务）</p><a id="more"></a><h4 id="2、rxjava是一个响应式的编程框架，基于观察者模式。"><a href="#2、rxjava是一个响应式的编程框架，基于观察者模式。" class="headerlink" title="2、rxjava是一个响应式的编程框架，基于观察者模式。"></a>2、rxjava是一个响应式的编程框架，基于观察者模式。</h4><p>其中关键的要素就是Observable(事件产生者,也是事件的观察者)  Operator（操作符） Subscriber（事件的消费者，也是事件的订阅者）</p><p>特点：使用可观察序列编写异步和事件驱动的库，扩展了观察者模式以支持数据和事件序列，并且加入了operator操作符来实现数据转换和事件过滤</p><ol><li>易于并发从而更好的利用服务器的能力      （可以自由指定运行的线程）</li><li>易于有条件的异步执行                               （通过操作符控制流程）</li><li>一种更好的方式来避免回调地狱                 （多个事件源基于组合而不是嵌套）</li><li>一种响应式方法                                          （编码更简单）</li></ol><p>优点：将开发者的注意力从低级别的线程同步、线程安全、并发数据对象这些问题中转移</p><h4 id="3、一个简单的示例"><a href="#3、一个简单的示例" class="headerlink" title="3、一个简单的示例"></a>3、一个简单的示例</h4><h4 id="A、创建一个Observable"><a href="#A、创建一个Observable" class="headerlink" title="A、创建一个Observable"></a>A、创建一个Observable</h4><pre><code>Observable&lt;String&gt; myObservable = Observable.create(    new Observable.OnSubscribe&lt;String&gt;() {         @Override        public void call(Subscriber&lt;? super String&gt;sub) {        sub.onNext(&quot;Hello, world!&quot;);        sub.onCompleted();        }    });</code></pre><h4 id="B、创建一个Subscriber"><a href="#B、创建一个Subscriber" class="headerlink" title="B、创建一个Subscriber"></a>B、创建一个Subscriber</h4><pre><code>Subscriber&lt;String&gt; mySubscriber = new Subscriber&lt;String&gt;() {    @Override    public void onNext(String s) {        System.out.println(s);    }    @Override    public void onCompleted() {    }    @Override    public void onError(Throwable e) {    }};</code></pre><h4 id="C、将两者联系起来"><a href="#C、将两者联系起来" class="headerlink" title="C、将两者联系起来"></a>C、将两者联系起来</h4><pre><code>myObservable.subscribe(mySubscriber); // Outputs &quot;Hello, world!&quot;</code></pre><p>这是一个展示流程的例子：myObservable是事件源，mySubscriber是订阅者，<br>通过Observable的subscribe方法，将事件输出给订阅者去消费。</p><h4 id="4、什么是Observable-Observer-Subscriber-Subscription"><a href="#4、什么是Observable-Observer-Subscriber-Subscription" class="headerlink" title="4、什么是Observable   Observer   Subscriber   Subscription"></a>4、什么是Observable   Observer   Subscriber   Subscription</h4><p>Observable  事件观察者或者事件生产者  这两种叫法是针对不同的对象而言的。第一：对于Subscriber它是事件的生产者，因为当使用subscribe方法对一个Observable添加一个订阅者的时候，这个时候会立即调用onSubscribe的call方法，将产生的一个字符串“Hello，world”这个事件交给订阅者的onNext()方法。第二：对于产生的这个字符串“Hello， world”而言，Observable就是一个事件观察者，它观察到了这个字符串的产生，然后将这个字符串产生的事件发送给了订阅者。</p><p>Observer和Subscriber是一个东西，Subscriber继承自Observer。</p><p>Subscription是一个接口，提供了对一个Subscriber进行取消订阅（unSubscribe）和是否取消订阅（isUnsubscribe）的功能，它的具体实现就是Subscriber。上例中的第三步中subscribe方法将会返回一个Subscription，用户可以方便的取消订阅。</p><h4 id="5、其他的创建Observable的方式"><a href="#5、其他的创建Observable的方式" class="headerlink" title="5、其他的创建Observable的方式"></a>5、其他的创建Observable的方式</h4><pre><code>Observable.From(DataCollection) 使用一个数据集创建一个Observable，自动遍历发射集合中每条数据Observable.just(a java method return )  根据一个或多个其他的方法返回值创建一个Observable，因为just可以接受1-9各参数，然后按照参数顺序发射他们。也可以是一个数据集合，像from方法，但他是发射整个列表。</code></pre><h4 id="6、Subject-Observable-Observer-（既是事件产生者，又是事件订阅者）"><a href="#6、Subject-Observable-Observer-（既是事件产生者，又是事件订阅者）" class="headerlink" title="6、Subject = Observable + Observer （既是事件产生者，又是事件订阅者）"></a>6、Subject = Observable + Observer （既是事件产生者，又是事件订阅者）</h4><pre><code>Subject有四种类型 PublishSubject  BehaviorSubject     ReplaySubject     AsyncSubject</code></pre><p>PublishSubject 是一个可以在任何时候发射事件的事件产生者，而不一定是在订阅者开始订阅的时候。<br>BehaviorSubject会首先向他的订阅者发送截至订阅前最新的一个数据对象（或初始值），然后正常发送订阅后的数据流。<br>ReplaySubject会缓存它所订阅的所有数据，向任意一个订阅它的观察者重发。<br>AsyncSubject只会发布最后一个数据 给已经订阅的每一个观察者。</p><hr><p>最最关键的几个概念：**Observable   Observer    Action(Observer observer)</p><p>当Observable被subscribe（订阅）的时候，调用action的call方法</p><p>和观察者模式对比：  被观察者     观察者      被观察持有观察者的引用，当数据变化时通知观察者</p><hr><h4 id="7、操作符"><a href="#7、操作符" class="headerlink" title="7、操作符"></a>7、操作符</h4><ul><li><p> <strong>repeat()  对一个Observable重复发射数据</strong>例：</p><p>  Observable.just(1, 2).repeat(5).subscribe(new Subscriber<integer>() {</integer></p><pre><code>@Overridepublic void onCompleted() {}@Overridepublic void onError(Throwable e) {}@Overridepublic void onNext(Integer integer) {    System.out.println(&quot;integer------&gt;&quot; + integer);}</code></pre><p>  });</p></li><li><p><strong>defer() 延迟Observable的创建直到观察者订阅</strong>例</p><p>  private Observable<long> getDeferObservable() {</long></p><pre><code>return Observable.defer(new Func0&lt;Observable&lt;Long&gt;&gt;() {    @Override    public Observable&lt;Long&gt; call() {        return getJustObservable();    }});</code></pre><p>  }</p></li></ul><p><strong>每次生成新的observable</strong></p><pre><code>@Testpublic void testDefer() {    Observable&lt;Long&gt; observable = getDeferObservable();    for (int i = 0; i &lt; 10; i++) {        observable.subscribe(new Action1&lt;Long&gt;() {            @Override            public void call(Long aLong) {                System.out.println(&quot;aLong------&gt;&quot; + aLong);            }        });    }}</code></pre><ul><li><p><strong>interval() 在指定的时间间隔内重复数字 0到正无穷</strong></p><p>  Subscription topeMePlease = Observable.interval(3, TimeUnit.SECONDS)</p><pre><code>.subscribe(new Observer&lt;Long&gt;() {    @Override    public void onCompleted() {    }    @Override    public void onError(Throwable e) {    }    @Override    public void onNext(Long aLong) {        System.out.println(&quot;aLong----&gt;&quot;+aLong);    }});</code></pre></li><li><p><strong>timer()  指定延迟时间指定间隔发射</strong></p><p>  Observable.timer(3, 100, TimeUnit.MILLISECONDS).subscribe(new Action1<long>() {</long></p><pre><code>@Overridepublic void call(Long aLong) {    System.out.println(&quot;aLong------&gt;&quot; + aLong);}</code></pre><p>  });</p></li><li><p><strong>filter()  过滤出符合要求的数据</strong></p><p>  filter((appInfo) -&gt; appInfo.getName().startWith(“C”)) //过滤出C开头的应用名称</p></li><li><p><strong>take()  指定原始序列中的前几条数据发射</strong></p><p>  take(3)</p></li><li><p><strong>takeLast()  指定原始序列中的最后几条数据发射</strong></p><p>  takeLast(3)</p></li><li><p><strong>distinct()  去除重复数据  可以用来防止界面控件重复点击</strong></p></li><li><p><strong>distinctUntilChanged()  去除与上一个重复的值</strong></p></li><li><p><strong>first()和last() 发射原始序列中的第一个或最后一个值</strong></p></li></ul><p>-<br><strong>firstOrDefault()和lastOrDefault()  当观测序列完成时发送默认值</strong></p><ul><li><p><strong>skip()和skipLast()   不发射前N个值或者后N个值</strong></p></li><li><p><strong>ElementAt()   elementAtOrDefault()     发射指定位置的元素 ，如果没有就发送默认值</strong></p></li><li><p><strong>sample(30, TimeUnit.SECONDS)  在指定时间间隔内由Observable发射最近一次的数值  再加一个throttleFirst()就是发射第一个而不是最近一个元素</strong></p></li><li><p><strong>timeout()   每隔一定时间发射至少一次数据，如果在指定时间间隔内没有得到一个值则发送一个错误</strong></p></li><li><p><strong>debounce()   过滤掉由Observable发射的速率过快的数据</strong></p></li><li><p><strong>map  指定一个fun对象，然后将它应用到每一个由Observable发射的值上</strong></p></li><li><p><strong>flatMap()  根据上一个Observable发射的数据生成新的Observable，注意新产生的Observable是平铺的，也就是说最终得到数据顺序是不定的，并且有一个产生error，此次调用就会结束</strong></p></li><li><p><strong>concatMap()   解决的flatMap()的交叉问题，能够把发射的值连续在一起，而不是合并他们</strong></p></li><li><p><strong>scan()   累加器  对原始Observable发射的每一项数据都应用一个函数，计算出函数的结果值，并将该值填回可观测序列，等待和下一次发射的数据一起使用。</strong>例：</p><p>  Observable.just(1,2,3,4,5)</p><pre><code>        .scan((sum, item) -&gt; sum + item)        .subscribe(new Subscriber&lt;Interger&gt; () {@Overridepublic void onCompleted() {}@Overridepublic void onError(Throwable e) {}@Overridepublic void onNext(Integer integer) {    System.out.println(&quot;integer------&gt;&quot; + integer);}</code></pre><p>  });</p></li></ul><p><strong>输出结果为：1   3  6  10  15</strong><br>（这个操作符可用来对数据进行排序）</p><ul><li><p><strong>groupBy()  将原Observable变换成哼一个发射Observables的新的Observable。他们中的每一个新的Observable都发射一组指定的数据</strong></p></li><li><p><strong>buffer()    将原Observable变换一个新的Observable，这个新的Observable每次发射一组列表而不是一个个发射</strong></p></li><li><p><strong>merge()   多个Observable合并成一个最终发射的Observable  （多个Observable发射的数据类型一般相同）</strong></p></li><li><p><strong>zip   合并多个Observable数据，生成新的数据</strong></p></li></ul><h4 id="8、调度器"><a href="#8、调度器" class="headerlink" title="8、调度器"></a>8、调度器</h4><p>RxJava提供了5种调度器：<br>    <strong>.io()  .computation()  .immediate()  .newThread()  .trampoline()</strong></p><ul><li><p>Schedulers.io()  专用于io操作，但是大量的io操作会创建多个线程并占用内存</p></li><li><p>Schedulers.computation()  计算工作默认的调度器，与io无关</p></li><li><p>Schedulers.immedidate()  在当前线程立即执行指定的工作</p></li><li><p>Schedulers.newThread()   为指定任务启动一个新的线程</p></li><li><p>schedulers.tramppline()  把要执行的任务加入到当前线程任务队列中，调度器会顺序执行队列中的任务</p></li></ul><p>Executors.newScheduledThreadPool(1, threadFactory);<br>ScheduledExecutorService</p><p>SubscribeOn(Schedulers.io())  指定任务工作线程<br>ObserveOn(AndroidSchedulers.mainThread())  指定观察者处理返回结果所在线程为ui线程</p><h4 id="9、在Android中使用场景"><a href="#9、在Android中使用场景" class="headerlink" title="9、在Android中使用场景"></a>9、在Android中使用场景</h4><p>(1). 先检查本地是否有数据缓存，有的话直接返回，没有的话再请求网路数据<br>    对应操作符为  contact(Observable1, Observable2 …)</p><p>(2). 多个接口并发请求，等所有结果返回再统一刷新页面<br>    这种情况需要分两种条件：</p><pre><code>a、不同接口返回数据格式相同，不需要做类型判断和转换，可以用merge(Observable1, Observable2 ...)b、不同接口返回数据格式不同，需要经过处理再合并成新的数据结构，可以用    zip(Observable1, Observable2,                                         new Fun2&lt;firstResult, SecondResult, newResult&gt;)     或combineLatest(Observable1, Observable2, new                                             Fun2&lt;firstResult, SecondResult, newResult&gt;)    对于combineLatest和zip，在网络请求的使用情景下，Observable只发射一次数据，二者是没有区别的。    如果是Observable多次发射数据的话，combineLatest会有对不同实际发射出的事件的合并有不同的合并结果。    而zip则是一一对应的。    Observable1  1  2  3    Observable2  1  2  3 </code></pre><p>(3). 一个任务的执行依赖上一个任务的返回结果,<br>    对应操作符为flatmap(object,Observable)，根据上一个任务的返回结构再次生成新的Observable</p><p>(4). 界面按钮防止连续点击，对应操作符为throttleFisrt(时间段， 时间单位)，在指定时间段内只发送一次数据</p><p>(5). 替代Handler实现定时器的操作符  timer(delaytime, time, timeUnit)  X秒后执行某操作</p><p>(6). 替代Handler.postDelay实现文本搜索的操作符为debounce(400, TimeUnit.MILLISECONDS)</p><p>(7). 替代Handler.postDelay实现倒计时的操作符为interval(1, TimeUnit.SECONDS) ，每隔1秒发射一次事件</p><p>(8). 使用schedulePeriodically做轮询请求</p><pre><code>Observable.create(new Observable.OnSubscribe&lt;String&gt;() {      @Override      public void call(final Subscriber&lt;? super String&gt; observer) {          Schedulers.newThread().createWorker()                .schedulePeriodically(new Action0() {                    @Override                    public void call() {                        observer.onNext(doNetworkCallAndGetStringResult());                    }                }, INITIAL_DELAY, POLLING_INTERVAL, TimeUnit.MILLISECONDS);      }  }).subscribe(new Action1&lt;String&gt;() {      @Override      public void call(String s) {          log.d(&quot;polling….”));      }  })  </code></pre><p>(9)、注册界面信息填写完整，下一步操作按钮才点亮 combineLatest</p><pre><code>Observable&lt;CharSequence&gt; _emailChangeObservable = RxTextView.textChanges(_email).skip(1);  Observable&lt;CharSequence&gt; _passwordChangeObservable = RxTextView.textChanges(_password).skip(1);  Observable&lt;CharSequence&gt;   _numberChangeObservable = RxTextView.textChanges(_number).skip(1);  Observable.combineLatest(_emailChangeObservable,        _passwordChangeObservable,        _numberChangeObservable,        new Func3&lt;CharSequence, CharSequence, CharSequence, Boolean&gt;() {            @Override            public Boolean call(CharSequence newEmail,                                CharSequence newPassword,                                CharSequence newNumber) {                Log.d(&quot;xiayong&quot;,newEmail+&quot; &quot;+newPassword+&quot; &quot;+newNumber);                boolean emailValid = !isEmpty(newEmail) &amp;&amp;                                     EMAIL_ADDRESS.matcher(newEmail).matches();                if (!emailValid) {                    _email.setError(&quot;Invalid Email!&quot;);                }                boolean passValid = !isEmpty(newPassword) &amp;&amp; newPassword.length() &gt; 8;                if (!passValid) {                    _password.setError(&quot;Invalid Password!&quot;);                }                boolean numValid = !isEmpty(newNumber);                if (numValid) {                    int num = Integer.parseInt(newNumber.toString());                    numValid = num &gt; 0 &amp;&amp; num &lt;= 100;                }                if (!numValid) {                    _number.setError(&quot;Invalid Number!&quot;);                }                return emailValid &amp;&amp; passValid &amp;&amp; numValid;            }        })//        .subscribe(new Observer&lt;Boolean&gt;() {            @Override            public void onCompleted() {                log.d(&quot;completed&quot;);            }            @Override            public void onError(Throwable e) {               log.d(&quot;Error&quot;);            }            @Override            public void onNext(Boolean formValid) {               _btnValidIndicator.setEnabled(formValid);              }        });  </code></pre><p>(10)、取缓存同时取网络数据，然后更新。 ？？？</p><h4 id="10-源码剖析"><a href="#10-源码剖析" class="headerlink" title="10. 源码剖析"></a>10. 源码剖析</h4><p>1.</p><pre><code>protected Observable(OnSubscribe&lt;T&gt; f) {    this.onSubscribe = f;}</code></pre><p>Observable的构造方法，即保存构造方法中的参数OnSubscribe</p><ol><li></li></ol><pre><code>public static interface OnSubscribe&lt;T&gt; extends Action1&lt;Subscriber&lt;? super T&gt;&gt; {    // cover for generics insanity}</code></pre><p>OnSubscribe是一个带一个参数的Action1，它的参数是一个Subscriber</p><pre><code>public interface Action1&lt;T1&gt; extends Action {    public void call(T1 t1);}</code></pre><p>Action1中有一个call方法，其中的参数就是就是第二步创建的Subscriber</p><p>3.</p><pre><code>Observable observable = Observable.create(new Observable.OnSubscribe&lt;ShopList&gt;() {    @Override    public void call(Subscriber&lt;? super ShopList&gt; subscriber) {        ShopList discountShops = companyRepository.getPayBillShops(offset, pageSize, regionId, longitude, latitude);        subscriber.onNext(discountShops);        subscriber.onCompleted();    }});</code></pre><p>在创建Observable的时候，传入了一个新建的OnSubscribe，然后再OnSubscribe中的call方法中，调用了call方法的参数（Subscriber）的onNext() onCompleted() 方法！！！</p><p><strong>注：此时的Subscriber（订阅者）并不知道是谁。</strong></p><p>至此，被观察者已经基本创建完成，这个被观察者是一个Action，这个Action的具体动作是从网络获取数据。<br>那么，当Action动作完成，会把结果传递给不知道是谁的一个订阅者。。。</p><ol><li>订阅者的创建</li></ol><pre><code>public final Subscription subscribe(Subscriber&lt;? super T&gt; subscriber) {    // validate and proceed    if (subscriber == null) {        throw new IllegalArgumentException(&quot;observer can not be null&quot;);    }    if (onSubscribe == null) {        throw new IllegalStateException(&quot;onSubscribe function can not be null.&quot;);        /*         * the subscribe function can also be overridden but generally that&apos;s not the appropriate approach         * so I won&apos;t mention that in the exception         */    }    // new Subscriber so onStart it    subscriber.onStart();    /*     * See https://github.com/ReactiveX/RxJava/issues/216 for discussion on &quot;Guideline 6.4: Protect calls     * to user code from within an Observer&quot;     */    // if not already wrapped    if (!(subscriber instanceof SafeSubscriber)) {        // assign to `observer` so we return the protected version        subscriber = new SafeSubscriber&lt;T&gt;(subscriber);    }    // The code below is exactly the same an unsafeSubscribe but not used because it would add a sigificent depth to alreay huge call stacks.    try {        // allow the hook to intercept and/or decorate        hook.onSubscribeStart(this, onSubscribe).call(subscriber);        return hook.onSubscribeReturn(subscriber);    } catch (Throwable e) {        // special handling for certain Throwable/Error/Exception types        Exceptions.throwIfFatal(e);        // if an unhandled error occurs executing the onSubscribe we will propagate it        try {            subscriber.onError(hook.onSubscribeError(e));        } catch (OnErrorNotImplementedException e2) {            // special handling when onError is not implemented ... we just rethrow            throw e2;        } catch (Throwable e2) {            // if this happens it means the onError itself failed (perhaps an invalid function implementation)            // so we are unable to propagate the error correctly and will just throw            RuntimeException r = new RuntimeException(&quot;Error occurred attempting to subscribe [&quot; + e.getMessage() + &quot;] and the again while trying to pass to onError.&quot;, e2);            // TODO could the hook be the cause of the error in the on error handling.            hook.onSubscribeError(r);            // TODO why aren&apos;t we throwing the hook&apos;s return value.            throw r;        }        return Subscriptions.unsubscribed();    }}关键代码:</code></pre><p><strong>hook.onSubscribeStart(this, onSubscribe).call(subscriber);</strong><br><strong>hook.onSubscribeStart(this, onSubscribe)返回的就是Observable创建时构造方法中的参数OnSubcribe</strong></p><p>然后调用onSubscribe的call方法，参数就是我们subscribe方法中的参数Subscriber，接下来就一目了然了，第三步中那个不知道是谁的订阅者，就是通过subscribe方法传入的订阅者。<br>至此，订阅者和观察就联系起来了。</p><h4 id="11、-多个订阅者的两种实现方法"><a href="#11、-多个订阅者的两种实现方法" class="headerlink" title="11、 多个订阅者的两种实现方法"></a>11、 多个订阅者的两种实现方法</h4><p> a、使用PublishSubject</p><pre><code>PublishSubject&lt;String&gt; stringPublishSubject = PublishSubject.create();    Subscriber subscriber1 = new Subscriber() {        @Override            public void onCompleted() {            }            @Override            public void onError(Throwable e) {            }            @Override            public void onNext(Object o) {                System.out.println(&quot;subscriber1----&gt;&quot; + o.toString());            }        };    Subscriber subscriber2 = new Subscriber() {        @Override        public void onCompleted() {        }        @Override        public void onError(Throwable e) {        }        @Override        public void onNext(Object o) {            System.out.println(&quot;subscriber2----&gt;&quot; + o.toString());        }    };    stringPublishSubject.subscribe(subscriber1);    stringPublishSubject.subscribe(subscriber2);    stringPublishSubject.onNext(&quot;a&quot;);</code></pre><p>b、使用ConnectableObservable</p><pre><code>ConnectableObservable&lt;String&gt; stringConnectableObservable = getMemoryObservable().publish();   Subscriber subscriber1 = new Subscriber() {       @Override       public void onCompleted() {       }       @Override       public void onError(Throwable e) {       }       @Override       public void onNext(Object o) {           System.out.println(&quot;subscriber1----&gt;&quot; + o.toString());           System.out.println(&quot;subscriber1----&gt;&quot; + System.currentTimeMillis());       }   };   Subscriber subscriber2 = new Subscriber() {       @Override       public void onCompleted() {       }       @Override       public void onError(Throwable e) {       }       @Override       public void onNext(Object o) {           System.out.println(&quot;subscriber2----&gt;&quot; + o.toString());           System.out.println(&quot;subscriber2----&gt;&quot; + System.currentTimeMillis());       }   };   stringConnectableObservable.subscribe(subscriber1);   stringConnectableObservable.subscribe(subscriber2);   stringConnectableObservable.connect();</code></pre><h4 id="12、操作符使用原理"><a href="#12、操作符使用原理" class="headerlink" title="12、操作符使用原理"></a>12、操作符使用原理</h4><pre><code>关键方法：Observable lift(Operator)    public final &lt;R&gt; Observable&lt;R&gt; lift(final Operator&lt;? extends R, ? super T&gt; lift) {        return new Observable&lt;R&gt;(new OnSubscribe&lt;R&gt;() {            @Override            public void call(Subscriber&lt;? super R&gt; o) {                try {                    Subscriber&lt;? super T&gt; st = hook.onLift(lift).call(o);                    try {                        // new Subscriber created and being subscribed with so &apos;onStart&apos; it                        st.onStart();                        onSubscribe.call(st);                    } catch (Throwable e) {                        // localized capture of errors rather than it skipping all operators                         // and ending up in the try/catch of the subscribe method which then                        // prevents onErrorResumeNext and other similar approaches to error handling                        if (e instanceof OnErrorNotImplementedException) {                            throw (OnErrorNotImplementedException) e;                        }                        st.onError(e);                    }                } catch (Throwable e) {                    if (e instanceof OnErrorNotImplementedException) {                        throw (OnErrorNotImplementedException) e;                    }                    // if the lift function failed all we can do is pass the error to the final Subscriber                    // as we don&apos;t have the operator available to us                    o.onError(e);                }            }        });    }</code></pre>]]></content>
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Rxjava </tag>
            
            <tag> 响应式编程 </tag>
            
            <tag> 分享 </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
