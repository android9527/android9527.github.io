<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[简析TCP的三次握手与四次分手]]></title>
      <url>/2017/09/15/2017-09-15-%E7%AE%80%E6%9E%90TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E5%88%86%E6%89%8B/</url>
      <content type="html"><![CDATA[<h4 id="TCP是什么"><a href="#TCP是什么" class="headerlink" title="TCP是什么"></a>TCP是什么</h4><p>TCP （传输控制协议）<br>本词条由“科普中国”百科科学词条编写与应用工作项目 审核 。<br>TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，用户数据报协议（UDP）是同一层内[1]  另一个重要的传输协议。在因特网协议族（Internet protocol suite）中，TCP层是位于IP层之上，应用层之下的中间层。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换。[1]<br><a id="more"></a></p>
<p>首先来看看OSI的七层模型：<br><img src="/images/tcp/TCP1.jpg" alt="TCP"></p>
<p>我们需要知道TCP工作在网络OSI的七层模型中的第四层——Transport层，IP在第三层——Network层，ARP在第二层——Data Link层；在第二层上的数据，我们把它叫Frame，在第三层上的数据叫Packet，第四层的数据叫Segment。 同时，我们需要简单的知道，数据从应用层发下来，会在每一层都会加上头部信息，进行封装，然后再发送到数据接收端。这个基本的流程你需要知道，就是每个数据都会经过数据的封装和解封装的过程。 在OSI七层模型中，每一层的作用和对应的协议如下：<br><img src="/images/tcp/TCP2.jpg" alt="TCP"></p>
<p>TCP是一个协议，那这个协议是如何定义的，它的数据格式是什么样子的呢？要进行更深层次的剖析，就需要了解，甚至是熟记TCP协议中每个字段的含义。<br><img src="/images/tcp/TCP3.jpg" alt="TCP"></p>
<p>上面就是TCP协议头部的格式，由于它太重要了，是理解其它内容的基础，下面就将每个字段的信息都详细的说明一下。</p>
<ul>
<li>Source Port和Destination Port:分别占用16位，表示源端口号和目的端口号；用于区别主机中的不同进程，而IP地址是用来区分不同的主机的，源端口号和目的端口号配合上IP首部中的源IP地址和目的IP地址就能唯一的确定一个TCP连接；</li>
<li>Sequence Number:用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节在数据流中的序号；主要用来解决网络报乱序的问题；</li>
<li>Acknowledgment Number:32位确认序列号包含发送确认的一端所期望收到的下一个序号，因此，确认序号应当是上次已成功收到数据字节序号加1。不过，只有当标志位中的ACK标志（下面介绍）为1时该确认序列号的字段才有效。主要用来解决不丢包的问题；</li>
<li>Offset:给出首部中32 bit字的数目，需要这个值是因为任选字段的长度是可变的。这个字段占4bit（最多能表示15个32bit的的字，即4*15=60个字节的首部长度），因此TCP最多有60字节的首部。然而，没有任选字段，正常的长度是20字节；</li>
<li>TCP Flags:TCP首部中有6个标志比特，它们中的多个可同时被设置为1，主要是用于操控TCP的状态机的，依次为URG，ACK，PSH，RST，SYN，FIN。每个标志位的意思如下：<ul>
<li>URG：此标志表示TCP包的紧急指针域（后面马上就要说到）有效，用来保证TCP连接不被中断，并且督促中间层设备要尽快处理这些数据；</li>
<li>ACK：此标志表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中；有两个取值：0和1，为1的时候表示应答域有效，反之为0；</li>
<li>PSH：这个标志位表示Push操作。所谓Push操作就是指在数据包到达接收端以后，立即传送给应用程序，而不是在缓冲区中排队；</li>
<li>RST：这个标志表示连接复位请求。用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据包；</li>
<li>SYN：表示同步序号，用来建立连接。SYN标志位和ACK标志位搭配使用，当连接请求的时候，SYN=1，ACK=0；连接被响应的时候，SYN=1，ACK=1；这个标志的数据包经常被用来进行端口扫描。扫描者发送一个只有SYN的数据包，如果对方主机响应了一个数据包回来 ，就表明这台主机存在这个端口；但是由于这种扫描方式只是进行TCP三次握手的第一次握手，因此这种扫描的成功表示被扫描的机器不很安全，一台安全的主机将会强制要求一个连接严格的进行TCP的三次握手；</li>
<li>FIN： 表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送FIN标志位的TCP数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。</li>
</ul>
</li>
<li>Window:窗口大小，也就是有名的滑动窗口，用来进行流量控制；这是一个复杂的问题，这篇博文中并不会进行总结的；<br>好了，基本知识都已经准备好了，开始下一段的征程吧。</li>
</ul>
<h4 id="三次握手又是什么？"><a href="#三次握手又是什么？" class="headerlink" title="三次握手又是什么？"></a>三次握手又是什么？</h4><p>TCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。这就是面试中经常会被问到的TCP三次握手。只是了解TCP三次握手的概念，对你获得一份工作是没有任何帮助的，你需要去了解TCP三次握手中的一些细节。先来看图说话。</p>
<p><img src="/images/tcp/TCP4.jpg" alt="TCP"></p>
<p>多么清晰的一张图，当然了，也不是我画的，我也只是引用过来说明问题了。</p>
<ul>
<li>第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；</li>
<li>第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；</li>
<li>第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</li>
<li>完成了三次握手，客户端和服务器端就可以开始传送数据。以上就是TCP三次握手的总体介绍。</li>
</ul>
<h4 id="那四次分手呢？"><a href="#那四次分手呢？" class="headerlink" title="那四次分手呢？"></a>那四次分手呢？</h4><p>当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。</p>
<ul>
<li>第一次分手：主机1（可以使客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入’FIN_WAIT_1’状态；这表示主机1没有数据要发送给主机2了；</li>
<li>第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入’FIN_WAIT_2’状态；主机2告诉主机1，我“同意”你的关闭请求；</li>
<li>第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；</li>
<li>第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。<br>至此，TCP的四次分手就这么愉快的完成了。当你看到这里，你的脑子里会有很多的疑问，很多的不懂，感觉很凌乱；没事，我们继续总结。</li>
</ul>
<h4 id="为什么要三次握手"><a href="#为什么要三次握手" class="headerlink" title="为什么要三次握手"></a>为什么要三次握手</h4><p>既然总结了TCP的三次握手，那为什么非要三次呢？怎么觉得两次就可以完成了。那TCP为什么非要进行三次连接呢？在谢希仁的《计算机网络》中是这样说的：</p>
<p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p>
<p>在书中同时举了一个例子，如下：</p>
<p>“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</p>
<p>这就很明白了，防止了服务器端的一直等待而浪费资源。</p>
<h4 id="为什么要四次分手"><a href="#为什么要四次分手" class="headerlink" title="为什么要四次分手"></a>为什么要四次分手</h4><p>那四次分手又是为何呢？TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当主机1发出FIN报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕了；但是，这个时候主机1还是可以接受来自主机2的数据；当主机2返回ACK报文段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的；当主机2也发送了FIN报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。如果要正确的理解四次分手的原理，就需要了解四次分手过程中的状态变化。</p>
<ul>
<li>‘FIN_WAIT_1’: 这个状态要好好解释一下，其实’FIN_WAIT_1’和’FIN_WAIT_2’状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别是：’FIN_WAIT_1’状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET即进入到’FIN_WAIT_1’状态。而当对方回应ACK报文后，则进入到’FIN_WAIT_2’状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应ACK报文，所以’FIN_WAIT_1’状态一般是比较难见到的，而’FIN_WAIT_2’状态还有时常常可以用netstat看到。（主动方）</li>
<li>‘FIN_WAIT_2’：上面已经详细解释了这种状态，实际上’FIN_WAIT_2’状态下的SOCKET，表示半连接，也即有一方要求close连接，但另外还告诉对方，我暂时还有点数据需要传送给你(ACK信息)，稍后再关闭连接。（主动方）</li>
<li>CLOSE_WAIT：这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以 close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。（被动方）</li>
<li>LAST_ACK: 这个状态还是比较容易好理解的，它是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，也即可以进入到CLOSED可用状态了。（被动方）</li>
<li>TIME_WAIT: 表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。如果FINWAIT1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过’FIN_WAIT_2’状态。（主动方）</li>
<li>CLOSED: 表示连接中断。<br>我想你应该懂了</li>
</ul>
<p>总结到这里，也该结束了，但是对于TCP的学习远还没有结束。TCP是一个非常复杂的协议，这里稍微总结了一下TCP的连接与断开连接是发生的事情，其中还有很多的“坑”，让我们后续有时间再继续填吧</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.jellythink.com/archives/705" target="_blank" rel="external">简析TCP的三次握手与四次分手</a></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> TCP </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gradle实战:发布包到maven仓库]]></title>
      <url>/2017/09/10/2017-09-10-Gradle%E5%AE%9E%E6%88%98:%E5%8F%91%E5%B8%83%E5%8C%85%E5%88%B0maven%E4%BB%93%E5%BA%931/</url>
      <content type="html"><![CDATA[<h4 id="Gradle实战-发布包到maven仓库"><a href="#Gradle实战-发布包到maven仓库" class="headerlink" title="Gradle实战:发布包到maven仓库"></a>Gradle实战:发布包到maven仓库</h4><h4 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h4><h4 id="参考链接：http-xiedeliang-com-2017-07-30-Maven简介"><a href="#参考链接：http-xiedeliang-com-2017-07-30-Maven简介" class="headerlink" title="参考链接：http://xiedeliang.com/2017/07/30/Maven简介"></a>参考链接：<a href="http://xiedeliang.com/2017/07/30/Maven简介" target="_blank" rel="external">http://xiedeliang.com/2017/07/30/Maven简介</a></h4><h4 id="AAR简介"><a href="#AAR简介" class="headerlink" title="AAR简介"></a>AAR简介</h4><p>AAR文件是Google为Android开发所设计的一种library格式，全名为Android Archive Library，与Java Jar Library不同的是，aar除了java code之外还包含资源文件，即xml文件、图片、文字等。<br><a id="more"></a></p>
<h4 id="Jar简介"><a href="#Jar简介" class="headerlink" title="Jar简介"></a>Jar简介</h4><p>JAR 文件格式以流行的 ZIP 文件格式为基础。与 ZIP 文件不同的是，JAR 文件不仅用于压缩和发布，而且还用于部署和封装库、组件和插件程序，并可被像编译器和 JVM 这样的工具直接使用。在 JAR 中包含特殊的文件，如 manifests 和部署描述符，用来指示工具如何处理特定的 JAR。</p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul>
<li>开发工具 Android Studio</li>
<li>Maven仓库</li>
<li>工程必须是lib工程，即该工程对应的build.gradle文件中要引用：apply plugin: ‘com.android.library’</li>
<li>在根目录的build.gradle文件中添加如下配置：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    apply plugin: &apos;idea&apos;</div><div class="line">    apply plugin: &apos;maven&apos;</div><div class="line">       configurations &#123;</div><div class="line">        deployerJars</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">configurations.all &#123;</div><div class="line">       resolutionStrategy.cacheChangingModulesFor 0, &apos;seconds&apos;//不使用缓存，使用仓库中最新的包</div><div class="line">&#125;</div><div class="line"></div><div class="line">subprojects &#123;  //表示除主工程外所有子模块</div><div class="line">    dependencies &#123;</div><div class="line">        deployerJars &quot;org.apache.maven.wagon:wagon-http:2.2&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ext &#123; //仓库选择标记</div><div class="line">    repoType = &quot;remote&quot; //发布到远程仓库（下文中会用到）</div><div class="line">    // repoType = &quot;local&quot; //发布到本地仓库，方便调试，避免调试期间频繁上传到maven仓库（下文中会用到）</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>在gradle.properties文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">releaseRepositoryUrl=xxx  //正式包仓库地址（下文中会用到）</div><div class="line">snapshotRepositoryUrl=xxx //测试包仓库地址（下文中会用到）</div><div class="line">repositoryGroup=com.company.appname // 定义要上传的aar所在仓库的Group，可自定义，但后续引用处要与此一致</div></pre></td></tr></table></figure>
</li>
<li><p>在工程根目录下新建一个名为“mavenAccount.properties”文件，并将该文件加入到ignore 中，该文件用于存放访问maven仓库的账户和密码以及本地仓库地址，只有该模块的开发者才有权发布该aar包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">repositoryUserName=xxx</div><div class="line">repositoryPassword=xxx</div><div class="line">localRepositoryUrl=file:///Users/admin/Documents/Android/repo/</div></pre></td></tr></table></figure>
</li>
<li><p>编写上传脚本:</p>
</li>
<li><p>生成AAR包：在工程根目录下新建一个名为“release-as-aar.gradle”的文件，其中脚本如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">uploadArchives() &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenDeployer &#123;</div><div class="line">            configuration = configurations.deployerJars</div><div class="line">            println &apos;repoType : &apos; + rootProject.ext.repoType</div><div class="line">            if ((rootProject.ext.repoType).equals(&quot;remote&quot;)) &#123; //发布到远程仓库</div><div class="line">                snapshotRepository(url: snapshotRepositoryUrl) &#123; // 测试包</div><div class="line">                //从本地文件读取仓库账号和密码</div><div class="line">            def File propFile = new File(&apos;../mavenAccount.properties&apos;)</div><div class="line">            if (propFile.canRead()) &#123;</div><div class="line">                def Properties props = new Properties()</div><div class="line">                props.load(new FileInputStream(propFile))</div><div class="line">                    if (props != null &amp;&amp; props.containsKey(&apos;repositoryUserName&apos;) &amp;&amp; props.containsKey(&apos;repositoryPassword&apos;)) &#123;</div><div class="line">                   def repositoryUserName = props[&apos;repositoryUserName&apos;]</div><div class="line">                    def repositoryPassword = props[&apos;repositoryPassword&apos;]</div><div class="line">                    authentication(userName: repositoryUserName, password: repositoryPassword)</div><div class="line">                    println &apos;上传到远程仓库&apos;</div><div class="line">                &#125; else &#123;</div><div class="line">                println &apos;没有发布权限&apos;</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                   println &apos;没有发布权限&apos;</div><div class="line">            &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            repository(url: releaseRepositoryUrl) &#123; // 正式包</div><div class="line">            def File propFile = new File(&apos;../mavenAccount.properties&apos;)</div><div class="line">            if (propFile.canRead()) &#123;</div><div class="line">                   def Properties props = new Properties()</div><div class="line">                props.load(new FileInputStream(propFile))</div><div class="line">                    if (props != null &amp;&amp; props.containsKey(&apos;repositoryUserName&apos;) &amp;&amp; props.containsKey(&apos;repositoryPassword&apos;)) &#123;</div><div class="line">                def repositoryUserName = props[&apos;repositoryUserName&apos;]</div><div class="line">                def repositoryPassword = props[&apos;repositoryPassword&apos;]</div><div class="line">                authentication(userName: repositoryUserName, password: repositoryPassword)</div><div class="line">                println &apos;上传到远程仓库&apos;</div><div class="line">                &#125; else &#123;</div><div class="line">                    println &apos;没有发布权限&apos;</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                println &apos;没有发布权限&apos;</div><div class="line">            &#125;</div><div class="line">            &#125;</div><div class="line">            &#125; else &#123; // 发布到本地仓库</div><div class="line">                def localRepositoryUrl</div><div class="line">                def File propFile = new File(&apos;../mavenAccount.properties&apos;)</div><div class="line">                if (propFile.canRead()) &#123;</div><div class="line">                   def Properties props = new Properties()</div><div class="line">                props.load(new FileInputStream(propFile))</div><div class="line">                if (props != null &amp;&amp; props.containsKey(&apos;localRepositoryUrl&apos;)) &#123;</div><div class="line">                    localRepositoryUrl = props[&apos;localRepositoryUrl&apos;]</div><div class="line">                    snapshotRepository(url: localRepositoryUrl)</div><div class="line">                    repository(url: localRepositoryUrl)</div><div class="line">                    println &apos;上传到本地仓库&apos;</div><div class="line">                &#125; else &#123;</div><div class="line">                    println &apos;没有发布权限&apos;</div><div class="line">                &#125;</div><div class="line">                &#125; else &#123;</div><div class="line">                println &apos;没有发布权限&apos;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>生成Jar包：在工程根目录下新建一个名为“release-as-jar.gradle”的文件，其中脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">task androidJavadocs(type: Javadoc) &#123;</div><div class="line">    failOnError = false</div><div class="line">    source = android.sourceSets.main.java.srcDirs</div><div class="line">    ext.androidJar = &quot;$&#123;android.sdkDirectory&#125;/platforms/$&#123;android.compileSdkVersion&#125;/android.jar&quot;</div><div class="line">    classpath += files(ext.androidJar)</div><div class="line">&#125;</div><div class="line">task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) &#123;</div><div class="line">    classifier = &apos;javadoc&apos;</div><div class="line">    from androidJavadocs.destinationDir</div><div class="line">&#125;</div><div class="line"></div><div class="line">task androidSourcesJar(type: Jar) &#123;</div><div class="line">    classifier = &apos;sources&apos;</div><div class="line">    from android.sourceSets.main.java.srcDirs</div><div class="line">&#125;</div><div class="line"></div><div class="line">uploadArchives &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenDeployer &#123;</div><div class="line">            configuration = configurations.deployerJars</div><div class="line">            println &apos;repoType : &apos; + rootProject.ext.repoType</div><div class="line">            if ((rootProject.ext.repoType).equals(&quot;remote&quot;)) &#123; //发布到远程仓库</div><div class="line">                snapshotRepository(url: snapshotRepositoryUrl) &#123;</div><div class="line">                    def File propFile = new File(&apos;../mavenAccount.properties&apos;)</div><div class="line">                    if (propFile.canRead()) &#123;</div><div class="line">                        def Properties props = new Properties()</div><div class="line">                        props.load(new FileInputStream(propFile))</div><div class="line">                        if (props != null &amp;&amp; props.containsKey(&apos;repositoryUserName&apos;) &amp;&amp; props.containsKey(&apos;repositoryPassword&apos;)) &#123;</div><div class="line">                            def repositoryUserName = props[&apos;repositoryUserName&apos;]</div><div class="line">                            def repositoryPassword = props[&apos;repositoryPassword&apos;]</div><div class="line">                            authentication(userName: repositoryUserName, password: repositoryPassword)</div><div class="line">                            println &apos;上传到远程仓库&apos;</div><div class="line">                        &#125; else &#123;</div><div class="line">                            println &apos;sorry，你没有上传aar包的权限&apos;</div><div class="line">                        &#125;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        println &apos;sorry，你没有上传aar包的权限&apos;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                repository(url: releaseRepositoryUrl) &#123;</div><div class="line">                    def File propFile = new File(&apos;../mavenAccount.properties&apos;)</div><div class="line">                    if (propFile.canRead()) &#123;</div><div class="line">                        def Properties props = new Properties()</div><div class="line">                        props.load(new FileInputStream(propFile))</div><div class="line"></div><div class="line">                        if (props != null &amp;&amp; props.containsKey(&apos;repositoryUserName&apos;) &amp;&amp; props.containsKey(&apos;repositoryPassword&apos;)) &#123;</div><div class="line">                            def repositoryUserName = props[&apos;repositoryUserName&apos;]</div><div class="line">                            def repositoryPassword = props[&apos;repositoryPassword&apos;]</div><div class="line">                            authentication(userName: repositoryUserName, password: repositoryPassword)</div><div class="line">                            println &apos;上传到远程仓库&apos;</div><div class="line">                        &#125; else &#123;</div><div class="line">                            println &apos;sorry，你没有上传aar包的权限&apos;</div><div class="line">                        &#125;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        println &apos;sorry，你没有上传aar包的权限&apos;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;//发布到本地仓库</div><div class="line">                def localRepositoryUrl</div><div class="line">                def File propFile = new File(&apos;../mavenAccount.properties&apos;)</div><div class="line">                if (propFile.canRead()) &#123;</div><div class="line">                    def Properties props = new Properties()</div><div class="line">                    props.load(new FileInputStream(propFile))</div><div class="line">                    if (props != null &amp;&amp; props.containsKey(&apos;localRepositoryUrl&apos;)) &#123;</div><div class="line">                        localRepositoryUrl = props[&apos;localRepositoryUrl&apos;]</div><div class="line">                        snapshotRepository(url: localRepositoryUrl)</div><div class="line">                        repository(url: localRepositoryUrl)</div><div class="line">                        println &apos;上传到本地仓库&apos;</div><div class="line">                    &#125; else &#123;</div><div class="line">                        println &apos;sorry，本地仓库路径不存在&apos;</div><div class="line">                    &#125;</div><div class="line">                &#125; else &#123;</div><div class="line">                    println &apos;sorry，本地仓库路径不存在&apos;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">artifacts &#123;</div><div class="line">    archives androidSourcesJar</div><div class="line">    archives androidJavadocsJar</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li><p>子模块中相关配置：在子模块的build.gradle文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">group repositoryGroup</div><div class="line">//version &apos;0.0.1&apos;</div><div class="line">version &apos;0.0.1-SNAPSHOT&apos; //表示测试版，正式发版时去掉“-SNAPSHOT”</div><div class="line">//打成aar格式</div><div class="line">apply from: &apos;../release-as-aar.gradle&apos; //引用上传插件</div><div class="line">//打成jar格式</div><div class="line">//apply from: &apos;../release-as-jar.gradle&apos;</div><div class="line">打包上传</div></pre></td></tr></table></figure>
</li>
<li><p>编译通过后，打开android studio自带的终端，进入相应的module目录下，输入：</p>
</li>
</ul>
<p>gradle uploadArchives<br>主项目引用</p>
<p>在根目录的build.gradle文件中添加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">maven &#123;</div><div class="line">  url &apos;http://maven.xxxx.xxxx:1111/nexus/content/groups/public/&apos;</div><div class="line">   &#125; </div><div class="line">在项目的build.gradle文件中添加如下引用：</div><div class="line"></div><div class="line">debugCompile &apos;groupId:lib-name:version-SNAPSHOT&apos;</div><div class="line">releaseCompile &apos;groupId:lib-name:version&apos;</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Gradle maven配置]]></title>
      <url>/2017/09/10/2017-09-10-Gradle%20maven%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="gradle-maven配置"><a href="#gradle-maven配置" class="headerlink" title="gradle maven配置"></a>gradle maven配置</h3><h4 id="1、上传library到maven仓库"><a href="#1、上传library到maven仓库" class="headerlink" title="1、上传library到maven仓库"></a>1、上传library到maven仓库</h4><p>library module 中配置build.gradle增加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;maven&apos;</div><div class="line"></div><div class="line">uploadArchives &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenDeployer &#123;</div><div class="line">            // maven仓库地址，使用本地相对路径maven仓库</div><div class="line">            repository(url: uri(&apos;../maven&apos;))</div><div class="line">            pom.version = &apos;1.0-release&apos;</div><div class="line">            // 包名</div><div class="line">            pom.groupId = &apos;groupId&apos;</div><div class="line">            // sdk名</div><div class="line">            pom.artifactId = &apos;artifactId&apos;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>执行 gradlew uploadArchives 上传到远程仓库</p>
<h4 id="2、引用"><a href="#2、引用" class="headerlink" title="2、引用"></a>2、引用</h4><ul>
<li><p>在项目级build.gradle 中配置maven仓库地址</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        mavenLocal()</div><div class="line">        jcenter()</div><div class="line">        // 使用本地相对路径maven仓库</div><div class="line">        maven &#123;</div><div class="line">            url uri(&apos;../maven&apos;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在module级build.gradle中引用，重新同步</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile(&apos;groupId:artifactId:1.0-release@aar&apos;) &#123; transitive = true &#125;</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> maven </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用方法小结(2)]]></title>
      <url>/2017/08/10/2017-08-10-Kotlin%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93(2)/</url>
      <content type="html"><![CDATA[<h4 id="中缀表示法"><a href="#中缀表示法" class="headerlink" title="中缀表示法"></a>中缀表示法</h4><p>函数还可以用中缀表示法调用，当</p>
<ul>
<li>他们是成员函数或扩展函数</li>
<li>他们只有一个参数</li>
<li>他们用 infix 关键字标注</li>
</ul>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 给 Int 定义扩展</div><div class="line">infix fun Int.shl(x: Int): Int &#123;</div><div class="line">    return x</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 用中缀表示法调用扩展函数</div><div class="line">1 shl 2</div><div class="line">// 等同于这样</div><div class="line">1.shl(2)</div></pre></td></tr></table></figure>
<h4 id="局部函数"><a href="#局部函数" class="headerlink" title="局部函数"></a>局部函数</h4><p>Kotlin 支持局部函数，即一个函数在另一个函数内部</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fun add(i: Int) &#123;</div><div class="line">    fun add(m :Int, n : Int) : Int &#123;</div><div class="line">        return m + n</div><div class="line">    &#125;</div><div class="line">    val result = add(i, 5)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>局部函数可以访问外部函数（即闭包）的局部变量，所以在上例中，n 可以是局部变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fun add(i: Int) &#123;</div><div class="line">    val n = 10</div><div class="line">    fun add(m :Int) : Int &#123;</div><div class="line">        return m + n</div><div class="line">    &#125;</div><div class="line">    val result = add(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="扩展属性及扩展函数"><a href="#扩展属性及扩展函数" class="headerlink" title="扩展属性及扩展函数"></a>扩展属性及扩展函数</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> bd = <span class="string">"3"</span>.bd</div><div class="line">    <span class="keyword">val</span> d = <span class="number">4.00</span>.bd</div><div class="line">    println(bd.add(d))</div><div class="line">    println(bd.addAndMul(d))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: String = <span class="string">""</span></div><div class="line">    <span class="keyword">var</span> age : <span class="built_in">Int</span> = <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 对Double属性扩展</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">val</span> <span class="built_in">Double</span>.bd : BigDecimal</div><div class="line">    <span class="keyword">get</span>() = BigDecimal(<span class="keyword">this</span>.toString())</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">val</span> String.bd : BigDecimal</div><div class="line">    <span class="keyword">get</span>() = BigDecimal(<span class="keyword">this</span>)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 对BigDecimal函数扩展,增加相加然后相乘的方法</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">fun</span> BigDecimal.<span class="title">addAndMul</span><span class="params">(parm: <span class="type">BigDecimal</span>)</span></span> : BigDecimal &#123;</div><div class="line">    <span class="keyword">var</span> temp = <span class="keyword">this</span> + parm</div><div class="line">    temp *= parm</div><div class="line">    <span class="keyword">return</span> temp</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>Kotlin 的接口与 Java 8 类似，既包含抽象方法的声明，也包含实现。与抽象类不同的是，接口无法保存状态。它可以有属性但必须声明为抽象或提供访问器实现。<br>使用关键字 interface 来定义接口</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</div><div class="line">      <span class="comment">// 可选的方法体</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>实现接口</li>
</ul>
<p>一个类或者对象可以实现一个或多个接口。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">MyInterface &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">// 方法体</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>接口中的属性</li>
</ul>
<p>你可以在接口中定义属性。在接口中声明的属性要么是抽象的，要么提供访问器的实现。在接口中声明的属性不能有幕后字段（backing field），因此接口中声明的访问器不能引用它们。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</div><div class="line">    <span class="keyword">val</span> prop: <span class="built_in">Int</span> <span class="comment">// 抽象的,需要子类重写</span></div><div class="line"></div><div class="line">    <span class="keyword">val</span> propertyWithImplementation: String</div><div class="line">        <span class="keyword">get</span>() = <span class="string">"foo"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</div><div class="line">        print(prop)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">MyInterface &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="keyword">val</span> prop: <span class="built_in">Int</span> = <span class="number">29</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>解决覆盖冲突</li>
</ul>
<p>实现多个接口时，可能会遇到同一方法继承多个实现的问题。例如</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; print(<span class="string">"A"</span>) &#125;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; print(<span class="string">"B"</span>) &#125;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; print(<span class="string">"bar"</span>) &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> : <span class="type">A &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; print(<span class="string">"bar"</span>) &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> : <span class="type">A</span>, <span class="type">B &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>&lt;A&gt;.foo()</div><div class="line">        <span class="keyword">super</span>&lt;B&gt;.foo()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>&lt;B&gt;.bar()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上例中，接口 A 和 B 都定义了方法 foo() 和 bar()。 两者都实现了 foo(), 但是只有 B 实现了 bar() (bar() 在 A 中没有标记为抽象， 因为没有方法体时默认为抽象）。因为 C 是一个实现了 A 的具体类，所以必须要重写 bar() 并实现这个抽象方法。<br>然而，如果我们从 A 和 B 派生 D，我们需要实现我们从多个接口继承的所有方法，并指明 D 应该如何实现它们。这一规则既适用于继承单个实现（bar()）的方法也适用于继承多个实现（foo()）的方法。</p>
<h4 id="高阶函数和-lambda-表达式"><a href="#高阶函数和-lambda-表达式" class="headerlink" title="高阶函数和 lambda 表达式"></a>高阶函数和 lambda 表达式</h4><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><p>高阶函数是将函数用作参数或返回值的函数。 这种函数的一个很好的例子是 lock()，它接受一个锁对象和一个函数，获取锁，运行函数并释放锁：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">lock</span><span class="params">(lock: <span class="type">Lock</span>, body: ()</span></span> -&gt; T): T &#123;</div><div class="line">    lock.lock()</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> body()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">finally</span> &#123;</div><div class="line">        lock.unlock()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>让我们来检查上面的代码：body 拥有函数类型：() -&gt; T， 所以它应该是一个不带参数并且返回 T 类型值的函数。 它在 try-代码块内部调用、被 lock 保护，其结果由lock（）函数返回。<br>如果我们想调用 lock() 函数，我们可以把另一个函数传给它作为参数（参见函数引用）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fun toBeSynchronized() = sharedResource.operation()</div><div class="line"></div><div class="line">val result = lock(lock, ::toBeSynchronized)</div></pre></td></tr></table></figure></p>
<p>通常会更方便的另一种方式是传一个 lambda 表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val result = lock(lock, &#123; sharedResource.operation() &#125;)</div></pre></td></tr></table></figure></p>
<p>Lambda 表达式在下文会有更详细的描述，但为了继续这一段，让我们看一个简短的概述：<br>lambda 表达式总是被大括号括着，<br>其参数（如果有的话）在 -&gt; 之前声明（参数类型可以省略），<br>函数体（如果存在的话）在 -&gt; 后面。<br>在 Kotlin 中有一个约定，如果函数的最后一个参数是一个函数，并且你传递一个 lambda 表达式作为相应的参数，你可以在圆括号之外指定它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lock (lock) &#123;</div><div class="line">    sharedResource.operation()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>高阶函数的另一个例子是 map()：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fun &lt;T, R&gt; List&lt;T&gt;.map(transform: (T) -&gt; R): List&lt;R&gt; &#123;</div><div class="line">    val result = arrayListOf&lt;R&gt;()</div><div class="line">    for (item in this)</div><div class="line">        result.add(transform(item))</div><div class="line">    return result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该函数可以如下调用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val doubled = ints.map &#123; value -&gt; value * 2 &#125;</div></pre></td></tr></table></figure></p>
<p>请注意，如果 lambda 是该调用的唯一参数，则调用中的圆括号可以完全省略。</p>
<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>Lambda 表达式或者匿名函数（以及局部函数和对象表达式） 可以访问其 闭包 ，即在外部作用域中声明的变量。 与 Java 不同的是可以修改闭包中捕获的变量：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">    <span class="keyword">val</span> ints: IntArray = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">    ints.filter &#123; it &gt; <span class="number">0</span> &#125;.forEach &#123;</div><div class="line">        sum += it</div><div class="line">    &#125;</div><div class="line">    print(sum)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h4><p>使用高阶函数会带来一些运行时的效率损失：每一个函数都是一个对象，并且会捕获一个闭包。 即那些在函数体内会访问到的变量。 内存分配（对于函数对象和类）和虚拟调用会引入运行时间开销。<br>但是在许多情况下通过内联化 <code>lambda</code> 表达式可以消除这类的开销。 下述函数是这种情况的很好的例子。即 <code>lock()</code> 函数可以很容易地在调用处内联。 考虑下面的情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lock(l) &#123; foo() &#125;</div></pre></td></tr></table></figure></p>
<p>编译器没有为参数创建一个函数对象并生成一个调用。取而代之，编译器可以生成以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">l.lock()</div><div class="line">try &#123;</div><div class="line">    foo()</div><div class="line">&#125;</div><div class="line">finally &#123;</div><div class="line">    l.unlock()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个不是我们从一开始就想要的吗？<br>为了让编译器这么做，我们需要使用 <code>inline</code> 修饰符标记 <code>lock()</code> 函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">inline fun lock&lt;T&gt;(lock: Lock, body: () -&gt; T): T &#123;</div><div class="line">    // ……</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>inline</code> 修饰符影响函数本身和传给它的 <code>lambda</code> 表达式：所有这些都将内联到调用处。<br>内联可能导致生成的代码增加，但是如果我们使用得当（不内联大函数），它将在性能上有所提升，尤其是在循环中的“超多态（<code>megamorphic）</code>”调用处。<br>禁用内联</p>
<p>如果你只想被（作为参数）传给一个内联函数的 <code>lambda</code> 表达式中只有一些被内联，你可以用 <code>noinline</code> 修饰符标记一些函数参数：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(inlined: ()</span></span> -&gt; <span class="built_in">Unit</span>, <span class="keyword">noinline</span> notInlined: () -&gt; <span class="built_in">Unit</span>) &#123;</div><div class="line">    <span class="comment">// ……</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以内联的 <code>lambda</code> 表达式只能在内联函数内部调用或者作为可内联的参数传递， 但是 <code>noinline</code> 的可以以任何我们喜欢的方式操作：存储在字段中、传送它等等。<br>需要注意的是，如果一个内联函数没有可内联的函数参数并且没有具体化的类型参数，编译器会产生一个警告，因为内联这样的函数很可能并无益处（如果你确认需要内联，则可以关掉该警告）。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.kotlincn.net/" target="_blank" rel="external">Kotlin中文站</a><br><a href="http://blog.csdn.net/jhj_24/article/details/53896224" target="_blank" rel="external">Kotlin控制流</a></p>
]]></content>
      
        <categories>
            
            <category> Kotlin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kotlin使用方法小结(1)]]></title>
      <url>/2017/08/10/2017-08-10-Kotlin%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E5%B0%8F%E7%BB%93(1)/</url>
      <content type="html"><![CDATA[<h4 id="Kotlin语法特点"><a href="#Kotlin语法特点" class="headerlink" title="Kotlin语法特点"></a>Kotlin语法特点</h4><ul>
<li>兼容性：Kotlin 与 JDK 6 完全兼容，保障了 Kotlin 应用程序可以在较旧的 Android 设备上运行而无任何问题。Kotlin 工具在 Android Studio 中会完全支持，并且兼容 Android 构建系统。</li>
<li>性能：由于非常相似的字节码结构，Kotlin 应用程序的运行速度与 Java 类似。 随着 Kotlin 对内联函数的支持，使用 lambda 表达式的代码通常比用 Java 写的代码运行得更快。<a id="more"></a></li>
<li>互操作性：Kotlin 可与 Java 进行 100％ 的互操作，允许在 Kotlin 应用程序中使用所有现有的 Android 库 。这包括注解处理，所以数据绑定和 Dagger 也是一样。</li>
<li>占用：Kotlin 具有非常紧凑的运行时库，可以通过使用 ProGuard 进一步减少。 在实际应用程序中，Kotlin 运行时只增加几百个方法以及 .apk 文件不到 100K 大小。</li>
<li>编译时长：Kotlin 支持高效的增量编译，所以对于清理构建会有额外的开销，增量构建通常与 Java 一样快或者更快。</li>
</ul>
<h4 id="简洁"><a href="#简洁" class="headerlink" title="简洁"></a>简洁</h4><p>使用一行代码创建一个包含 getters、 setters、 equals()、 hashCode()、 toString() 以及 copy() 的 POJO：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> email: String, <span class="keyword">val</span> company: String)</div></pre></td></tr></table></figure></p>
<p>或者使用 lambda 表达式来过滤列表：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> positiveNumbers = list.filter &#123; it &gt; <span class="number">0</span> &#125;</div></pre></td></tr></table></figure>
<p>想要单例？创建一个 object 就可以了：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">object</span> ThisIsASingleton &#123;</div><div class="line">    <span class="keyword">val</span> companyName: String = <span class="string">"JetBrains"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><p>彻底告别那些烦人的 NullPointerException，毕竟价值万亿。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> output: String</div><div class="line">output = <span class="literal">null</span>   <span class="comment">// 编译错误</span></div></pre></td></tr></table></figure>
<p>Kotlin 可以保护你避免对可空类型的误操作</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">val</span> name: String? = <span class="literal">null</span>    <span class="comment">// 可控类型</span></div><div class="line">println(name.length())      <span class="comment">// 编译错误</span></div></pre></td></tr></table></figure>
<p>并且如果你检查类型是正确的，编译器会为你做自动类型转换</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">calculateTotal</span><span class="params">(obj: <span class="type">Any</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> (obj <span class="keyword">is</span> Invoice)</div><div class="line">        obj.calculateTotal()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="互操作性"><a href="#互操作性" class="headerlink" title="互操作性"></a>互操作性</h4><p>使用 JVM 上的任何现有库，因为有 100％ 的兼容性，包括 SAM 支持。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> io.reactivex.Flowable</div><div class="line"><span class="keyword">import</span> io.reactivex.schedulers.Schedulers</div><div class="line"></div><div class="line">Flowable</div><div class="line">    .fromCallable &#123;</div><div class="line">        Thread.sleep(<span class="number">1000</span>) <span class="comment">//  模仿高开销的计算</span></div><div class="line">        <span class="string">"Done"</span></div><div class="line">    &#125;</div><div class="line">    .subscribeOn(Schedulers.io())</div><div class="line">    .observeOn(Schedulers.single())</div><div class="line">    .subscribe(::println, Throwable::printStackTrace)</div></pre></td></tr></table></figure>
<p>无论是 JVM 还是 JavaScript 目标平台，都可用 Kotlin 写代码然后部署到你想要的地方</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> kotlin.browser.window</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">onLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    window.document.body!!.innerHTML += <span class="string">"&lt;br/&gt;Hello, Kotlin!"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="工具友好"><a href="#工具友好" class="headerlink" title="工具友好"></a>工具友好</h4><p>工具化</p>
<p>一门语言需要工具化，而在 JetBrains，这正是我们做得最好的地方！<br><img src="/images/kotlin/kotlin1.jpg" alt="TCP"></p>
<p><img src="/images/kotlin/kotlin2.jpg" alt="TCP"></p>
<h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><p>当Kotlin中的类需要构造函数时，可以有一个主构造函数和多个次构造函数，可以没有次构造函数。主构造函数在类名后。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 常规用法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People1</span></span>(name: String) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 当主构造函数有注解或者可见性修饰符，需加 constructor 关键字</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People2</span> <span class="keyword">public</span> <span class="meta">@Inject</span> <span class="keyword">constructor</span></span>(name: String) &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//若主构造函数中，不进行初始化, 可放在init&#123;&#125;中</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People3</span></span>(name: String) &#123;</div><div class="line">    <span class="keyword">val</span> name: String</div><div class="line"></div><div class="line">    init &#123;</div><div class="line">        println(<span class="string">"initialize"</span>)</div><div class="line">        <span class="keyword">this</span>.name = name</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 如果类有一个主构造函数（无论有无参数），每个次构造函数需要直接或间接委托给主构造函数，用this关键字</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People4</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        println(<span class="string">"constructor"</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">constructor</span>(name: String) : <span class="keyword">this</span>() &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">constructor</span>(name: String, age: <span class="built_in">Int</span>) : <span class="keyword">this</span>(name) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="TODO关键字"><a href="#TODO关键字" class="headerlink" title="TODO关键字"></a>TODO关键字</h4><p>调用含有<code>TODO</code>关键字的方法将直接抛出异常</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        TODO(<span class="string">"还没有实现!"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</div><div class="line">        <span class="meta">@JvmStatic</span> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">            <span class="keyword">val</span> hello = Hello()</div><div class="line">            hello.init()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Exception in thread &quot;main&quot; kotlin.NotImplementedError: An operation is not implemented: 还没有实现!</div><div class="line">at com.test.kotlin.Hello.init(Hello.kt:13)</div></pre></td></tr></table></figure>
<h4 id="Kotlin控制流"><a href="#Kotlin控制流" class="headerlink" title="Kotlin控制流"></a>Kotlin控制流</h4><ul>
<li>if表达式</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testIf</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> a : <span class="built_in">Int</span> = <span class="number">1</span></div><div class="line">    <span class="keyword">val</span> b : <span class="built_in">Int</span> = <span class="number">1</span></div><div class="line">    <span class="keyword">var</span> max = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</div><div class="line">    <span class="keyword">if</span> (a &gt; b)</div><div class="line">        max = a</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>when表达式</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testWhen</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// 1、简单用法</span></div><div class="line">    <span class="keyword">val</span> x: <span class="built_in">Int</span> = <span class="number">1</span></div><div class="line">    <span class="keyword">when</span> (x) &#123;</div><div class="line">        <span class="number">1</span> -&gt; println(<span class="string">"x == 1"</span>)</div><div class="line">        <span class="number">2</span> -&gt; println(<span class="string">"x == 2"</span>)</div><div class="line">        <span class="keyword">else</span> -&gt; &#123;</div><div class="line">            println(<span class="string">"x is neither 1 nor 2"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 2、如果很多分支需要相同的方式处理，则可以把多个分支条件放在一起，用逗号分隔：</span></div><div class="line">    <span class="keyword">when</span> (x) &#123;</div><div class="line">        <span class="number">0</span>, <span class="number">1</span> -&gt; println(<span class="string">"x == 0 or x == 1"</span>)</div><div class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">"otherwise"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 3、可以用任意表达式（而不只是常量）作为分支条件</span></div><div class="line">    <span class="keyword">when</span> (x) &#123;</div><div class="line">        parseInt(<span class="string">"10"</span>) -&gt; println(<span class="string">"s encodes x"</span>)</div><div class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">"s does not encode x"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 4、可以检测一个值在（in）或者不在（!in）某个区间或者集合</span></div><div class="line">    <span class="keyword">val</span> y: Any = <span class="string">"a"</span></div><div class="line">    <span class="keyword">when</span> (y) &#123;</div><div class="line">        <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> -&gt; println(<span class="string">"x is in the range"</span>)</div><div class="line">        !<span class="keyword">in</span> <span class="number">10.</span><span class="number">.20</span> -&gt; println(<span class="string">"x is outside the range"</span>)</div><div class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">"none of the above"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 5、检测一个值是（is）或者不是（!is）某个特定类型的值，由于智能转换，你可以访问该类型的方法和属性而需任何额外的检测。</span></div><div class="line">    <span class="keyword">val</span> result = <span class="keyword">when</span> (y) &#123;</div><div class="line">        <span class="keyword">is</span> String -&gt; y.startsWith(<span class="string">"prefix"</span>)</div><div class="line">        <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; y + <span class="number">1</span></div><div class="line">        <span class="keyword">else</span> -&gt; <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">    println(result)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>for循环</p>
</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testFor</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="comment">// 1、遍历某个区间</span></div><div class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.4</span>)<span class="comment">//为闭区间[0,4]</span></div><div class="line">        println(i)</div><div class="line"></div><div class="line">    <span class="comment">// 2、通过索引遍历一个数组或者一个 list，你可以这么做：</span></div><div class="line">    <span class="keyword">val</span> array = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> array.indices)</div><div class="line">        println(array[i])</div><div class="line"></div><div class="line">    <span class="comment">// 3、Arrays库函数 withIndex ：</span></div><div class="line">    <span class="keyword">for</span> ((index, value) <span class="keyword">in</span> array.withIndex()) &#123;</div><div class="line">        println(<span class="string">"the element at <span class="variable">$index</span> is <span class="variable">$value</span>"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>while循环</li>
</ul>
<p>使用方法不变<br>返回和跳转</p>
<p>Kotlin 有三种结构化跳转表达式：<br>return。默认从最直接包围它的函数或者匿名函数返回。<br>break。终止最直接包围它的循环。<br>continue。继续下一次最直接包围它的循环。</p>
<h4 id="延迟初始化成员变量"><a href="#延迟初始化成员变量" class="headerlink" title="延迟初始化成员变量"></a>延迟初始化成员变量</h4><p>Java 定义的类成员变量如果不初始化，那么基本类型被初始化为其默认值，比如 int 初始化为 0，boolean 初始化为 false，非基本类型的成员则会被初始化为 null。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">var</span> name: String? = <span class="literal">null</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用了可空类型，副作用就是后面每次你想要用 name 的时候，都需要判断其是否为 null。如果不使用可控类型，需要加 lateinit 关键字：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> name: String</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>lateinit</code> 是用来告诉编译器，name 这个变量后续会妥善处置的。</p>
<p>对于 final 的成员变量，Java 要求它们必须在构造方法或者构造块当中对他们进行初始化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name = <span class="string">"Peter"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也就是说，如果我要想定义一个可以延迟到一定实际再使用并初始化的 final 变量，这在 Java 中是做不到的。</p>
<p>Kotlin 有办法，使用 lazy 这个 delegate 即可：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">val</span> name <span class="keyword">by</span> lazy&#123;</div><div class="line">        NameProvider.getName() </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只有使用到 name 这个属性的时候，lazy 后面的 Lambda 才会执行，name 的值才会真正计算出来。</p>
<h4 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h4><ul>
<li>默认参数<br>Kotlin允许包级函数一级函数参数存在默认值<br>函数参数可以有默认值，当省略相应的参数时使用默认值。与其他语言相比，这可以减少重载数量。+</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">read</span><span class="params">(b: <span class="type">Array</span>&lt;<span class="type">Byte</span>&gt;, off: <span class="type">Int</span> = <span class="number">0</span>, len: <span class="type">Int</span> = b.size)</span></span> &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>默认值通过类型后面的 = 及给出的值来定义。<br>覆盖方法总是使用与基类型方法相同的默认参数值。 当覆盖一个带有默认参数值的方法时，必须从签名中省略默认参数值：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(i: <span class="type">Int</span> = <span class="number">10</span>)</span></span> &#123;  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> : <span class="type">A</span></span>() &#123;</div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(i: <span class="type">Int</span>)</span></span> &#123;  &#125;  <span class="comment">// 不能有默认值</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>具名参数<br>调用函数时, 可以通过参数名来指定参数. 当函数参数很多, 或者存在默认参数时, 指定参数名是一种非常便利的功能</li>
</ul>
<p>可以在调用函数时使用命名的函数参数。当一个函数有大量的参数或默认参数时这会非常方便。<br>给定以下函数</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">reformat</span><span class="params">(str: <span class="type">String</span>,</span></span></div><div class="line">             normalizeCase: <span class="type">Boolean</span> = <span class="literal">true</span>,</div><div class="line">             upperCaseFirstLetter: <span class="type">Boolean</span> = <span class="literal">true</span>,</div><div class="line">             divideByCamelHumps: <span class="type">Boolean</span> = <span class="literal">false</span>,</div><div class="line">             wordSeparator: <span class="type">Char</span> = <span class="string">' '</span>) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以使用默认参数来调用它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reformat(str)</div></pre></td></tr></table></figure></p>
<p>然而，当使用非默认参数调用它时，该调用看起来就像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reformat(str, true, true, false, &apos;_&apos;)</div></pre></td></tr></table></figure></p>
<p>使用命名参数我们可以使代码更具有可读性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">reformat(str,</div><div class="line">    normalizeCase = true,</div><div class="line">    upperCaseFirstLetter = true,</div><div class="line">    divideByCamelHumps = false,</div><div class="line">    wordSeparator = &apos;_&apos;</div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>并且如果我们不需要所有的参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reformat(str, wordSeparator = &apos;_&apos;)</div></pre></td></tr></table></figure></p>
<p>请注意，在调用 Java 函数时不能使用命名参数语法，因为 Java 字节码并不总是保留函数参数的名称。</p>
<h4 id="中缀表示法"><a href="#中缀表示法" class="headerlink" title="中缀表示法"></a>中缀表示法</h4><p>函数还可以用中缀表示法调用，当</p>
<ul>
<li>他们是成员函数或扩展函数</li>
<li>他们只有一个参数</li>
<li>他们用 infix 关键字标注</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 给 Int 定义扩展</div><div class="line">infix fun Int.shl(x: Int): Int &#123;</div><div class="line">    return x</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">// 用中缀表示法调用扩展函数</div><div class="line">1 shl 2</div><div class="line">// 等同于这样</div><div class="line">1.shl(2)</div></pre></td></tr></table></figure>
<h4 id="局部函数"><a href="#局部函数" class="headerlink" title="局部函数"></a>局部函数</h4><p>Kotlin 支持局部函数，即一个函数在另一个函数内部</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fun add(i: Int) &#123;</div><div class="line">    fun add(m :Int, n : Int) : Int &#123;</div><div class="line">        return m + n</div><div class="line">    &#125;</div><div class="line">    val result = add(i, 5)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>局部函数可以访问外部函数（即闭包）的局部变量，所以在上例中，n 可以是局部变量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">fun add(i: Int) &#123;</div><div class="line">    val n = 10</div><div class="line">    fun add(m :Int) : Int &#123;</div><div class="line">        return m + n</div><div class="line">    &#125;</div><div class="line">    val result = add(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="扩展属性及扩展函数"><a href="#扩展属性及扩展函数" class="headerlink" title="扩展属性及扩展函数"></a>扩展属性及扩展函数</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    <span class="keyword">val</span> bd = <span class="string">"3"</span>.bd</div><div class="line">    <span class="keyword">val</span> d = <span class="number">4.00</span>.bd</div><div class="line">    println(bd.add(d))</div><div class="line">    println(bd.addAndMul(d))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name: String = <span class="string">""</span></div><div class="line">    <span class="keyword">var</span> age : <span class="built_in">Int</span> = <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 对Double属性扩展</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> <span class="keyword">val</span> <span class="built_in">Double</span>.bd : BigDecimal</div><div class="line">    <span class="keyword">get</span>() = BigDecimal(<span class="keyword">this</span>.toString())</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">val</span> String.bd : BigDecimal</div><div class="line">    <span class="keyword">get</span>() = BigDecimal(<span class="keyword">this</span>)</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 对BigDecimal函数扩展,增加相加然后相乘的方法</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">fun</span> BigDecimal.<span class="title">addAndMul</span><span class="params">(parm: <span class="type">BigDecimal</span>)</span></span> : BigDecimal &#123;</div><div class="line">    <span class="keyword">var</span> temp = <span class="keyword">this</span> + parm</div><div class="line">    temp *= parm</div><div class="line">    <span class="keyword">return</span> temp</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><p>Kotlin 的接口与 Java 8 类似，既包含抽象方法的声明，也包含实现。与抽象类不同的是，接口无法保存状态。它可以有属性但必须声明为抽象或提供访问器实现。<br>使用关键字 interface 来定义接口</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</div><div class="line">      <span class="comment">// 可选的方法体</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>实现接口</li>
</ul>
<p>一个类或者对象可以实现一个或多个接口。<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">MyInterface &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="comment">// 方法体</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>接口中的属性</li>
</ul>
<p>你可以在接口中定义属性。在接口中声明的属性要么是抽象的，要么提供访问器的实现。在接口中声明的属性不能有幕后字段（backing field），因此接口中声明的访问器不能引用它们。</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</div><div class="line">    <span class="keyword">val</span> prop: <span class="built_in">Int</span> <span class="comment">// 抽象的,需要子类重写</span></div><div class="line"></div><div class="line">    <span class="keyword">val</span> propertyWithImplementation: String</div><div class="line">        <span class="keyword">get</span>() = <span class="string">"foo"</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</div><div class="line">        print(prop)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">MyInterface &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="keyword">val</span> prop: <span class="built_in">Int</span> = <span class="number">29</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>解决覆盖冲突</li>
</ul>
<p>实现多个接口时，可能会遇到同一方法继承多个实现的问题。例如</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; print(<span class="string">"A"</span>) &#125;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; print(<span class="string">"B"</span>) &#125;</div><div class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; print(<span class="string">"bar"</span>) &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> : <span class="type">A &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; print(<span class="string">"bar"</span>) &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> : <span class="type">A</span>, <span class="type">B &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>&lt;A&gt;.foo()</div><div class="line">        <span class="keyword">super</span>&lt;B&gt;.foo()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">super</span>&lt;B&gt;.bar()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上例中，接口 A 和 B 都定义了方法 foo() 和 bar()。 两者都实现了 foo(), 但是只有 B 实现了 bar() (bar() 在 A 中没有标记为抽象， 因为没有方法体时默认为抽象）。因为 C 是一个实现了 A 的具体类，所以必须要重写 bar() 并实现这个抽象方法。<br>然而，如果我们从 A 和 B 派生 D，我们需要实现我们从多个接口继承的所有方法，并指明 D 应该如何实现它们。这一规则既适用于继承单个实现（bar()）的方法也适用于继承多个实现（foo()）的方法。</p>
<h4 id="高阶函数和-lambda-表达式"><a href="#高阶函数和-lambda-表达式" class="headerlink" title="高阶函数和 lambda 表达式"></a>高阶函数和 lambda 表达式</h4><h4 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h4><p>高阶函数是将函数用作参数或返回值的函数。 这种函数的一个很好的例子是 lock()，它接受一个锁对象和一个函数，获取锁，运行函数并释放锁：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">lock</span><span class="params">(lock: <span class="type">Lock</span>, body: ()</span></span> -&gt; T): T &#123;</div><div class="line">    lock.lock()</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">return</span> body()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">finally</span> &#123;</div><div class="line">        lock.unlock()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>让我们来检查上面的代码：body 拥有函数类型：() -&gt; T， 所以它应该是一个不带参数并且返回 T 类型值的函数。 它在 try-代码块内部调用、被 lock 保护，其结果由lock（）函数返回。<br>如果我们想调用 lock() 函数，我们可以把另一个函数传给它作为参数（参见函数引用）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">fun toBeSynchronized() = sharedResource.operation()</div><div class="line"></div><div class="line">val result = lock(lock, ::toBeSynchronized)</div></pre></td></tr></table></figure></p>
<p>通常会更方便的另一种方式是传一个 lambda 表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val result = lock(lock, &#123; sharedResource.operation() &#125;)</div></pre></td></tr></table></figure></p>
<p>Lambda 表达式在下文会有更详细的描述，但为了继续这一段，让我们看一个简短的概述：<br>lambda 表达式总是被大括号括着，<br>其参数（如果有的话）在 -&gt; 之前声明（参数类型可以省略），<br>函数体（如果存在的话）在 -&gt; 后面。<br>在 Kotlin 中有一个约定，如果函数的最后一个参数是一个函数，并且你传递一个 lambda 表达式作为相应的参数，你可以在圆括号之外指定它：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lock (lock) &#123;</div><div class="line">    sharedResource.operation()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>高阶函数的另一个例子是 map()：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">fun &lt;T, R&gt; List&lt;T&gt;.map(transform: (T) -&gt; R): List&lt;R&gt; &#123;</div><div class="line">    val result = arrayListOf&lt;R&gt;()</div><div class="line">    for (item in this)</div><div class="line">        result.add(transform(item))</div><div class="line">    return result</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该函数可以如下调用:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">val doubled = ints.map &#123; value -&gt; value * 2 &#125;</div></pre></td></tr></table></figure></p>
<p>请注意，如果 lambda 是该调用的唯一参数，则调用中的圆括号可以完全省略。</p>
<h4 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h4><p>Lambda 表达式或者匿名函数（以及局部函数和对象表达式） 可以访问其 闭包 ，即在外部作用域中声明的变量。 与 Java 不同的是可以修改闭包中捕获的变量：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></div><div class="line">    <span class="keyword">val</span> ints: IntArray = intArrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">    ints.filter &#123; it &gt; <span class="number">0</span> &#125;.forEach &#123;</div><div class="line">        sum += it</div><div class="line">    &#125;</div><div class="line">    print(sum)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h4><p>使用高阶函数会带来一些运行时的效率损失：每一个函数都是一个对象，并且会捕获一个闭包。 即那些在函数体内会访问到的变量。 内存分配（对于函数对象和类）和虚拟调用会引入运行时间开销。<br>但是在许多情况下通过内联化 <code>lambda</code> 表达式可以消除这类的开销。 下述函数是这种情况的很好的例子。即 <code>lock()</code> 函数可以很容易地在调用处内联。 考虑下面的情况：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lock(l) &#123; foo() &#125;</div></pre></td></tr></table></figure></p>
<p>编译器没有为参数创建一个函数对象并生成一个调用。取而代之，编译器可以生成以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">l.lock()</div><div class="line">try &#123;</div><div class="line">    foo()</div><div class="line">&#125;</div><div class="line">finally &#123;</div><div class="line">    l.unlock()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个不是我们从一开始就想要的吗？<br>为了让编译器这么做，我们需要使用 <code>inline</code> 修饰符标记 <code>lock()</code> 函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">inline fun lock&lt;T&gt;(lock: Lock, body: () -&gt; T): T &#123;</div><div class="line">    // ……</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>inline</code> 修饰符影响函数本身和传给它的 <code>lambda</code> 表达式：所有这些都将内联到调用处。<br>内联可能导致生成的代码增加，但是如果我们使用得当（不内联大函数），它将在性能上有所提升，尤其是在循环中的“超多态（<code>megamorphic）</code>”调用处。<br>禁用内联</p>
<p>如果你只想被（作为参数）传给一个内联函数的 <code>lambda</code> 表达式中只有一些被内联，你可以用 <code>noinline</code> 修饰符标记一些函数参数：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">inline</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(inlined: ()</span></span> -&gt; <span class="built_in">Unit</span>, <span class="keyword">noinline</span> notInlined: () -&gt; <span class="built_in">Unit</span>) &#123;</div><div class="line">    <span class="comment">// ……</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以内联的 <code>lambda</code> 表达式只能在内联函数内部调用或者作为可内联的参数传递， 但是 <code>noinline</code> 的可以以任何我们喜欢的方式操作：存储在字段中、传送它等等。<br>需要注意的是，如果一个内联函数没有可内联的函数参数并且没有具体化的类型参数，编译器会产生一个警告，因为内联这样的函数很可能并无益处（如果你确认需要内联，则可以关掉该警告）。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.kotlincn.net/" target="_blank" rel="external">Kotlin中文站</a><br><a href="http://blog.csdn.net/jhj_24/article/details/53896224" target="_blank" rel="external">Kotlin控制流</a></p>
]]></content>
      
        <categories>
            
            <category> Kotlin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Kotlin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何正确地写出单例模式]]></title>
      <url>/2017/07/29/2017-07-29-how-to-correctly-write-singleton-pattern/</url>
      <content type="html"><![CDATA[<h4 id="如何正确地写出单例模式"><a href="#如何正确地写出单例模式" class="headerlink" title="如何正确地写出单例模式"></a>如何正确地写出单例模式</h4><p>单例模式算是设计模式中最容易理解，也是最容易手写代码的模式了吧。但是其中的坑却不少，所以也常作为面试题来考。本文主要对几种单例写法的整理，并分析其优缺点。很多都是一些老生常谈的问题，但如果你不知道如何创建一个线程安全的单例，不知道什么是双检锁，那这篇文章可能会帮助到你。<br><a id="more"></a></p>
<h4 id="懒汉式，线程不安全"><a href="#懒汉式，线程不安全" class="headerlink" title="懒汉式，线程不安全"></a>懒汉式，线程不安全</h4><p>当被问到要实现一个单例模式时，很多人的第一反应是写出如下的代码，包括教科书上也是这样教我们的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">     <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">         instance = <span class="keyword">new</span> Singleton();</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码简单明了，而且使用了懒加载模式，但是却存在致命的问题。当有多个线程并行调用 getInstance() 的时候，就会创建多个实例。也就是说在多线程下不能正常工作。</p>
<h4 id="懒汉式，线程安全"><a href="#懒汉式，线程安全" class="headerlink" title="懒汉式，线程安全"></a>懒汉式，线程安全</h4><p>为了解决上面的问题，最简单的方法是将整个 getInstance() 方法设为同步（synchronized）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public static synchronized Singleton getInstance() &#123;</div><div class="line">    if (instance == null) &#123;</div><div class="line">        instance = new Singleton();</div><div class="line">    &#125;</div><div class="line">    return instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>虽然做到了线程安全，并且解决了多实例的问题，但是它并不高效。因为在任何时候只能有一个线程调用 getInstance() 方法。但是同步操作只需要在第一次调用时才被需要，即第一次创建单例实例对象时。这就引出了双重检验锁。</p>
<h4 id="双重检验锁"><a href="#双重检验锁" class="headerlink" title="双重检验锁"></a>双重检验锁</h4><p>双重检验锁模式（double checked locking pattern），是一种使用同步块加锁的方法。程序员称其为双重检查锁，因为会有两次检查 instance == null，一次是在同步块外，一次是在同步块内。为什么在同步块内还要再检验一次？因为可能会有多个线程一起进入同步块外的 if，如果在同步块内不进行二次检验的话就会生成多个实例了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public static Singleton getSingleton() &#123;</div><div class="line">    if (instance == null) &#123;                         //Single Checked</div><div class="line">        synchronized (Singleton.class) &#123;</div><div class="line">            if (instance == null) &#123;                 //Double Checked</div><div class="line">                instance = new Singleton();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码看起来很完美，很可惜，它是有问题。主要在于<code>instance = new Singleton()</code>这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。</p>
<ul>
<li>给 instance 分配内存</li>
<li>调用 Singleton 的构造函数来初始化成员变量</li>
<li>将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了） </li>
</ul>
<p>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。</p>
<p>我们只需要将 instance 变量声明成 volatile 就可以了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance; <span class="comment">//声明成 volatile</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;                         </div><div class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</div><div class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;       </div><div class="line">                    instance = <span class="keyword">new</span> Singleton();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有些人认为使用 volatile 的原因是可见性，也就是可以保证线程在本地不会存有 instance 的副本，每次都是去主内存中读取。但其实是不对的。使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。比如上面的例子，取操作必须在执行完 1-2-3 之后或者 1-3-2 之后，不存在执行到 1-3 然后取到值的情况。从「先行发生原则」的角度理解的话，就是对于一个 volatile 变量的写操作都先行发生于后面对这个变量的读操作（这里的“后面”是时间上的先后顺序）。</p>
<p>但是特别注意在 Java 5 以前的版本使用了 volatile 的双检锁还是有问题的。其原因是 Java 5 以前的 JMM （Java 内存模型）是存在缺陷的，即时将变量声明成 volatile 也不能完全避免重排序，主要是 volatile 变量前后的代码仍然存在重排序问题。这个 volatile 屏蔽重排序的问题在 Java 5 中才得以修复，所以在这之后才可以放心使用 volatile。</p>
<p>相信你不会喜欢这种复杂又隐含问题的方式，当然我们有更好的实现线程安全的单例模式的办法。</p>
<h4 id="饿汉式-static-final-field"><a href="#饿汉式-static-final-field" class="headerlink" title="饿汉式 static final field"></a>饿汉式 static final field</h4><p>这种方法非常简单，因为单例的实例被声明成 static 和 final 变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</div><div class="line">    <span class="comment">//类加载时就初始化</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种写法如果完美的话，就没必要在啰嗦那么多双检锁的问题了。缺点是它不是一种懒加载模式（lazy initialization），单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance()方法。饿汉式的创建方式在一些场景中将无法使用：譬如 Singleton 实例的创建是依赖参数或者配置文件的，在 getInstance() 之前必须调用某个方法设置参数给它，那样这种单例写法就无法使用了。</p>
<h4 id="静态内部类-static-nested-class"><a href="#静态内部类-static-nested-class" class="headerlink" title="静态内部类 static nested class"></a>静态内部类 static nested class</h4><p>我比较倾向于使用静态内部类的方法，这种方法也是《Effective Java》上所推荐的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </div><div class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();  </div><div class="line">    &#125;  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE; </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种写法仍然使用JVM本身机制保证了线程安全问题；由于 SingletonHolder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本。</p>
<h4 id="枚举-Enum"><a href="#枚举-Enum" class="headerlink" title="枚举 Enum"></a>枚举 Enum</h4><p>用枚举写单例实在太简单了！这也是它最大的优点。下面这段代码就是声明枚举实例的通常做法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EasySingleton&#123;</div><div class="line">    INSTANCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以通过EasySingleton.INSTANCE来访问实例，这比调用getInstance()方法简单多了。创建枚举默认就是线程安全的，所以不需要担心double checked locking，而且还能防止反序列化导致重新创建新的对象。但是还是很少看到有人这样写。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>一般来说，单例模式有五种写法：懒汉、饿汉、双重检验锁、静态内部类、枚举。上述所说都是线程安全的实现，文章开头给出的第一种方法不算正确的写法。</p>
<p>就我个人而言，一般情况下直接使用饿汉式就好了，如果明确要求要懒加载（lazy initialization）会倾向于使用静态内部类，如果涉及到反序列化创建对象时会试着使用枚举的方式来实现单例。</p>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern" target="_blank" rel="external">如何正确地写出单例模式</a></p>
<p><a href="http://javarevisited.blogspot.sg/2014/05/double-checked-locking-on-singleton-in-java.html" target="_blank" rel="external">Double Checked Locking on Singleton Class in Java</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Aop技术在Android中的应用]]></title>
      <url>/2017/07/27/2017-07-27-Aop%E6%8A%80%E6%9C%AF%E5%9C%A8Android%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h4><p>百度百科中对AOP的解释如下:<br>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。 <a id="more"></a>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<p>说白了，AOP其实就是OOP的补充，OOP从横向上区分出一个个的类来，而AOP则从纵向上向对象中加入特定的代码。</p>
<h4 id="AOP-和-OOP"><a href="#AOP-和-OOP" class="headerlink" title="AOP 和 OOP"></a>AOP 和 OOP</h4><p>面向对象的特点是继承、多态和封装。为了符合单一职责的原则，OOP将功能分散到不同的对象中去。让不同的类设计不同的方法，这样代码就分散到一个个的类中。可以降低代码的复杂程度，提高类的复用性。</p>
<p>但是在分散代码的同时，也增加了代码的重复性。比如说，我们在两个类中，可能都需要在每个方法中做日志。按照OOP的设计方法，我们就必须在两个类的方法中都加入日志的内容。也许他们是完全相同的，但是因为OOP的设计让类与类之间无法联系，而不能将这些重复的代码统一起来。然而AOP就是为了解决这类问题而产生的，它是在运行时动态地将代码切入到类的指定方法、指定位置上的编程思想。</p>
<p>如果说，面向过程的编程是一维的，那么面向对象的编程就是二维的。OOP从横向上区分出一个个的类，相比过程式增加了一个维度。而面向切面结合面向对象编程是三维的，相比单单的面向对象编程则又增加了“方面”的维度。从技术上来说，AOP基本上是通过代理机制实现的。</p>
<h4 id="在Android项目中使用AspectJ"><a href="#在Android项目中使用AspectJ" class="headerlink" title="在Android项目中使用AspectJ"></a>在Android项目中使用AspectJ</h4><p>本文采用上海沪江公司徐宜生团队开源的gradle插件<br>以下引用部分原文</p>
<p>AOP的用处非常广，从spring到Android，各个地方都有使用，特别是在后端，Spring中已经使用的非常方便了，而且功能非常强大，但是在Android中，AspectJ的实现是略阉割的版本，并不是所有功能都支持，但对于一般的客户端开发来说，已经完全足够用了。</p>
<p>在Android上集成AspectJ实际上是比较复杂的，不是一句话就能compile，但是，鄙司已经给大家把这个问题解决了，大家现在直接使用这个SDK就可以很方便的在Android Studio中使用AspectJ了。Github地址如下：<br><a href="https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx" target="_blank" rel="external">https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx</a><br>另外一个比较成功的使用AOP的库是JakeWharton大神的Hugo：<br><a href="https://github.com/JakeWharton/hugo" target="_blank" rel="external">https://github.com/JakeWharton/hugo</a></p>
<h4 id="接入说明"><a href="#接入说明" class="headerlink" title="接入说明"></a>接入说明</h4><ul>
<li><p>首先，需要在项目根目录的build.gradle中增加依赖：<br>完整代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:2.3.3&apos;</div><div class="line">        classpath &apos;com.hujiang.aspectjx:gradle-android-plugin-aspectjx:1.0.10&apos;</div><div class="line"></div><div class="line">        // NOTE: Do not place your application dependencies here; they belong</div><div class="line">        // in the individual module build.gradle files</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>然后再主项目或者库的build.gradle中增加AspectJ的依赖：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;org.aspectj:aspectjrt:1.8.10&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>同时在build.gradle中加入AspectJX模块：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;android-aspectjx&apos;</div></pre></td></tr></table></figure>
<p>这样就把整个Android Studio中的AspectJ的环境配置完毕了，如果在编译的时候，遇到一些『can’t determine superclass of missing type xxxxx』这样的错误，请参考项目README中关于excludeJarFilter的使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">aspectjx &#123;</div><div class="line">    //includes the libs that you want to weave</div><div class="line">    includeJarFilter &apos;universal-image-loader&apos;, &apos;AspectJX-Demo/library&apos;</div><div class="line"></div><div class="line">    //excludes the libs that you don&apos;t want to weave</div><div class="line">    excludeJarFilter &apos;universal-image-loader&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>运行时如果出现<code>Task &#39;transformClassesWithExtractJarsForDebug&#39; not found in project &#39;:app&#39;.</code>的错误,需要关闭Instant Run功能<br><a href="https://github.com/HujiangTechnology/AspectJX-Demo/issues/1" target="_blank" rel="external">https://github.com/HujiangTechnology/AspectJX-Demo/issues/1</a></p>
<p>具体配置参见github地址 <a href="https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx" target="_blank" rel="external">https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx</a></p>
<h4 id="AspectJ入门"><a href="#AspectJ入门" class="headerlink" title="AspectJ入门"></a>AspectJ入门</h4><p>我们通过一段简单的代码来了解下基本的使用方法和功能，新建一个AspectTest类文件，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"xuyisheng"</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* android.app.Activity.on**(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityMethodBefore</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        String key = joinPoint.getSignature().toString();</div><div class="line">        Log.d(TAG, <span class="string">"onActivityMethodBefore: "</span> + key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在类的最开始，我们使用@Aspect注解来定义这样一个AspectJ文件，编译器在编译的时候，就会自动去解析，并不需要主动去调用AspectJ类里面的代码。</p>
<p>我的原始代码很简单：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过这种方式编译后，我们来看下生成的代码是怎样的。AspectJ的原理实际上是在编译的时候，根据一定的规则解析，然后插入一些代码，通过aspectj生成的代码，会在Build目录下：<br> <img src="/images/aspectj/aspectj1.jpeg" alt="aspectj-1"></p>
<p>通过反编译工具查看下生成内容：<br> <img src="/images/aspectj/aspectj2.png" alt="aspectj-2"></p>
<p>我们可以发现，在onCreate的最前面，插入了一行AspectJ的代码。这个就是AspectJ的主要功能，抛开AOP的思想来说，我们想做的，实际上就是『在不侵入原有代码的基础上，增加新的代码』。</p>
<h4 id="使用AOP防止按钮连续点击"><a href="#使用AOP防止按钮连续点击" class="headerlink" title="使用AOP防止按钮连续点击"></a>使用AOP防止按钮连续点击</h4><ul>
<li><p>首先定义一个防止多次点击的工具类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoDoubleClickUtils</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> lastClickTime = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SPACE_TIME = <span class="number">500</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDoubleClick</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">long</span> currentTime = System.currentTimeMillis();</div><div class="line">        <span class="keyword">boolean</span> isClick2 = currentTime - lastClickTime &lt;= SPACE_TIME;</div><div class="line">        lastClickTime = currentTime;</div><div class="line">        <span class="keyword">return</span> isClick2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>然后使用AspectJ对OnclickListener进行插桩，</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@Around(&quot;execution(* android.view.View.OnClickListener.onClick(..))&quot;)</div><div class="line">public void onClickListener(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;</div><div class="line">    Log.e(TAG, &quot;OnClick&quot;);</div><div class="line">    if (!NoDoubleClickUtils.isDoubleClick()) &#123;</div><div class="line">        proceedingJoinPoint.proceed();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>运行程序，多次点击按钮后，log如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">07-27 12:38:37.789 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</div><div class="line">07-27 12:38:37.789 24084-24084/com.example.androidaspectjdemo E/MainActivity: execute click</div><div class="line">07-27 12:38:38.053 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</div><div class="line">07-27 12:38:38.290 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</div><div class="line">07-27 12:38:38.538 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</div><div class="line">07-27 12:38:38.771 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</div><div class="line">07-27 12:38:39.006 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</div><div class="line">07-27 12:38:39.257 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</div></pre></td></tr></table></figure>
</li>
</ul>
<p>通过log可以看出onClickListener执行了多次，但使用click的的地方只执行了一次。这样，就可以在不改变原来代码的情况下，实现防止连续点击的功能。</p>
<ul>
<li><p>但是当又有需求：要求部分按钮是可以连续点击的，该怎么办呢？这个时候只要加个注解文件就好。</p>
</li>
<li><p>首先定义个注解</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD&#125;)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DoubleClick &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>并且修改之前的AspectTest文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">private View mLastView;</div><div class="line">private boolean canDoubleClick = false;</div><div class="line"></div><div class="line">@Before(&quot;@annotation(com.example.spectjde.annotation.DoubleClick)&quot;)</div><div class="line">public void beforeEnableDoubleClick(JoinPoint joinPoint) throws Throwable &#123;</div><div class="line">    canDoubleClick = true;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Around(&quot;execution(* android.view.View.OnClickListener.onClick(..))  &amp;&amp; target(Object) &amp;&amp; this(Object)&quot;)</div><div class="line">public void onDoubleClickListener(ProceedingJoinPoint joinPoint) throws Throwable &#123;</div><div class="line">    Object[] objects = joinPoint.getArgs();</div><div class="line">    View view = objects.length == 0 ? null : (View) objects[0];</div><div class="line">    if (view != mLastView || canDoubleClick || !NoDoubleClickUtils.isDoubleClick()) &#123;</div><div class="line">        joinPoint.proceed();</div><div class="line">        canDoubleClick = false;</div><div class="line">    &#125;</div><div class="line">    mLastView = view;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>现在只要在可以连续点击的按钮的onclick前加一个@DoubleClick的注解就好</p>
<h4 id="使用注解实现方法运行在异步线程"><a href="#使用注解实现方法运行在异步线程" class="headerlink" title="使用注解实现方法运行在异步线程"></a>使用注解实现方法运行在异步线程</h4><ul>
<li><p>首先定义注解作用在Method上</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(&#123;METHOD&#125;)</div><div class="line"><span class="meta">@Retention</span>(CLASS)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Async &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>创建AsyncAspect.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span> </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncAspect</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Around</span>(<span class="string">"execution(!synthetic * *(..)) &amp;&amp; onAsyncMethod()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAsyncMethod</span><span class="params">(<span class="keyword">final</span> ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        asyncMethod(joinPoint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@within(com.example.spectjde.annotation.Async)||@annotation(com.example.spectjde.annotation.Async)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAsyncMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">asyncMethod</span><span class="params">(<span class="keyword">final</span> ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">// 使用Rxjava实现线程切换</span></div><div class="line">        Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Object&gt;() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Object&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                                <span class="keyword">try</span> &#123;</div><div class="line">                                    joinPoint.proceed();</div><div class="line">                                &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</div><div class="line">                                    throwable.printStackTrace();</div><div class="line">                                &#125;</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                , BackpressureStrategy.BUFFER)</div><div class="line">                .subscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在要切换的方法上加上注解即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Async</div><div class="line">void testAsync() &#123;</div><div class="line">    Log.e(TAG, Thread.currentThread().getName());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="实现所有方法耗时统计"><a href="#实现所有方法耗时统计" class="headerlink" title="实现所有方法耗时统计"></a>实现所有方法耗时统计</h4><ul>
<li><p>创建Aspect class</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectJSpectControler</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = AspectJSpectControler.class.getSimpleName();</div><div class="line"></div><div class="line">    <span class="meta">@Around</span>(value = <span class="string">"execution(* com.example..*.*(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">weavePatchLogic</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="keyword">if</span> (BuildConfig.DEBUG) &#123; <span class="comment">//debug    状态下计算方法耗时</span></div><div class="line">            <span class="keyword">long</span> startT = System.currentTimeMillis();</div><div class="line">            Object proceed = joinPoint.proceed();</div><div class="line">            <span class="keyword">long</span> consume = System.currentTimeMillis() - startT;</div><div class="line">            Log.d(TAG, <span class="string">"AspectJSpectControler: "</span> + consume + <span class="string">" ms "</span> + joinPoint.getSignature());</div><div class="line">            <span class="keyword">return</span> proceed;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> joinPoint.proceed();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>运行app，过滤log查看方法耗时,打印log过滤关键字</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">D/AspectTest: AspectJSpectControler: 127 ms void com.example.androidaspectjdemo.MainActivity.onCreate(Bundle)</div><div class="line">D/AspectTest: AspectJSpectControler: 20 ms void com.example.spectjde.AsyncAspect.asyncMethod</div></pre></td></tr></table></figure>
</li>
</ul>
<p>Demo地址  <a href="https://github.com/android9527/AndroidAspectjDemo" target="_blank" rel="external">https://github.com/android9527/AndroidAspectjDemo</a></p>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://www.cnblogs.com/yxx123/p/6675567.html" target="_blank" rel="external">Android防止按钮连续点击方案之AOP</a></p>
<p><a href="http://www.jianshu.com/p/2779e3bb1f14" target="_blank" rel="external">归纳AOP在Android开发中的几种常见用法</a></p>
<p><a href="http://blog.csdn.net/eclipsexys/article/details/54425414" target="_blank" rel="external">看AspectJ在Android中的强势插入</a></p>
<p><a href="http://glanwang.com/2017/07/18/Android/AOP%E6%8A%80%E6%9C%AF%E5%9C%A8%E7%BD%91%E6%98%93%E6%96%B0%E9%97%BB%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/" target="_blank" rel="external">AOP技术在网易新闻中的应用</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Aop </tag>
            
            <tag> Aspectj </tag>
            
            <tag> 面向切面编程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Jenkins+fir 上传更新日志]]></title>
      <url>/2017/07/17/2017-07-17-Jenkins+fir%20%E4%B8%8A%E4%BC%A0%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97/</url>
      <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>在日常开发中持续集成可以节省开发者很多时间和精力，fir下载地址和邮件没有更新日志内容，这样无法通知测试人员具体修改内容，造成了很多不便，所以有了这个需求</p>
 <a id="more"></a>
<h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>前提：首先你得先折腾好打包工具吧，现在的教程都已经很多了</p>
<ul>
<li><p>首先安装插件：Environment Injector Plugin (<a href="http://updates.jenkins-ci.org/download/plugins/envinject/)，下载成功后打开`Jenkins-&gt;系统管理-&gt;管理插件-&gt;高级-&gt;拖至页面底部上传插件-&gt;选中文件点击上传`，提示成功后返回首页。" target="_blank" rel="external">http://updates.jenkins-ci.org/download/plugins/envinject/)，下载成功后打开`Jenkins-&gt;系统管理-&gt;管理插件-&gt;高级-&gt;拖至页面底部上传插件-&gt;选中文件点击上传`，提示成功后返回首页。</a></p>
<p><img src="/images/jenkins/upload_log_1.jpeg" alt="jenkins-1"></p>
</li>
<li><p>进入现有的项目，输出commit日志内容：<code>增加构建步骤-&gt;Execute shell</code>-&gt;在Command输入以下内容（注意替换username和password）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">GIT_LOG=$(git log --pretty=format:&quot;%cd : %s&quot; --no-merges -3)</div><div class="line">echo GIT_LOG=$GIT_LOG &gt; log.txt</div></pre></td></tr></table></figure>
<p><img src="/images/jenkins/upload_log_2.jpeg" alt="jenkins-1"></p>
</li>
</ul>
<ul>
<li><p>设置commit日志保存路径：增加构建步骤-&gt;Inject environment variables-&gt;在Properties File Path输入log.txt。</p>
<p><img src="/images/jenkins/upload_log_3.jpeg" alt="jenkins-1"></p>
</li>
<li><p>获取到commit日志后发给fir:<code>增加构建后操作步骤-&gt;Upload to fir.im-&gt;在fir.im Token</code>中输入你从fir获得的token，然后在<code>Build Notes</code>中输入:<br>$GIT_LOG</p>
</li>
</ul>
<h4 id="自动获取git分支变化时构建项目"><a href="#自动获取git分支变化时构建项目" class="headerlink" title="自动获取git分支变化时构建项目,"></a>自动获取git分支变化时构建项目,</h4><p> 在”<code>构建触发器</code>“中选择”<code>Build when a change is pushed to GitHub</code> “和”<code>Poll SCM</code> “，这两项的作用分别是当GitHub有版本库更新时触发Jenkins进行构建和定期检查版本库是否有更新，如果有更新则触发Jenkins进行构建。这里要注意Schedule语法，例如”<code>*/2 * * * *</code>“表示每隔2分钟检查一次。</p>
<h4 id="Jenkins邮箱配置"><a href="#Jenkins邮箱配置" class="headerlink" title="Jenkins邮箱配置"></a>Jenkins邮箱配置</h4><ol>
<li>Override Global Settings：如果不选，该插件将使用默认的E-mail Notification通知选项。反之，您可以通过指定不同于( 默认选项)的设置来进行覆盖。</li>
<li>Default Content Type：指定构建后发送邮件内容的类型，有Text和HTML两种.</li>
<li>Use List-ID Email Header：为所有的邮件设置一个List-ID的邮件信头，这样你就可以在邮件客户端使用过滤。它也能阻止邮件发件人大部分的自动回复(诸如离开办公室、休假等等)。你可以使用你习惯的任何名称或者ID号，但是他们必须符合如下其中一种格式(真实的ID必须要包含在&lt;和&gt;标记里)：<br><ci-notifications.company.org><br>Build Notifications <ci-notifications.company.org><br>“Build Notifications” <ci-notifications.company.org></ci-notifications.company.org></ci-notifications.company.org></ci-notifications.company.org></li>
<li>Add ‘Precedence: bulk’ Email Header：设置优先级,</li>
<li>Default Recipients：自定义默认电子邮件收件人列表。如果没有被项目配置覆盖,该插件会使用这个列表。您可以在项目配置使用$ DEFAULT_RECIPIENTS参数包括此默认列表，以及添加新的地址在项目级别。添加抄送：cc:电子邮件地址例如,CC:someone@somewhere.com</li>
<li>Reply To List：回复列表, A comma separated list of e-mail addresses to use in the Reply-To header of the email. This value will be available as $DEFAULT_REPLYTO in the project configuration.</li>
<li>Emergency reroute：如果这个字段不为空，所有的电子邮件将被单独发送到该地址（或地址列表）。</li>
<li>Excluded Committers：防止邮件被邮件系统认为是垃圾邮件,邮件列表应该没有扩展的账户名(如:@domain.com),并且使用逗号分隔</li>
<li>Default Subject：自定义邮件通知的默认主题名称。该选项能在邮件的主题字段中替换一些参数，这样你就可以在构建中包含指定的输出信息。</li>
<li>Maximum Attachment Size：邮件最大附件大小。</li>
<li>Default Content：自定义邮件通知的默认内容主体。该选项能在邮件的内容中替换一些参数，这样你就可以在构建中包含指定的输出信息。</li>
<li>Default Pre-send Script：默认发送前执行的脚本（注：grooy脚本，这是我在某篇文章上看到的，不一定准确）。</li>
<li>Enable Debug Mode：启用插件的调试模式。这将增加额外的日志输出，构建日志以及Jenkins的日志。在调试时是有用的，但不能用于生产。</li>
<li>Enable Security：启用时，会禁用发送脚本的能力，直接进入Jenkins实例。如果用户试图访问Jenkins管理对象实例，将抛出一个安全异常。</li>
<li>Content Token Reference：邮件中可以使用的变量，所有的变量都是可选的。</li>
</ol>
<p>项目基本配置参数说明：<br>当插件激活后你就能编辑如下字段（只列出常用的字段）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Project Recipient List：这是一个以逗号(或者空格)分隔的收件人邮件的邮箱地址列表。允许您为每封邮件指定单独的列表。Ps：如果你想在默认收件人的基础上添加收件人：$DEFAULT_RECIPIENTS,&lt;新的收件人&gt;</div><div class="line">Default Subject：允许你配置此项目邮件的主题。</div><div class="line">Default Content：跟Default Subject的作用一样，但是是替换邮件内容。</div><div class="line">Attach Build Log：附件构建日志。</div><div class="line">Compress Build Log before sending：发送前压缩生成日志（zip格式）。</div></pre></td></tr></table></figure></p>
<h4 id="附email-ext邮件通知模板"><a href="#附email-ext邮件通知模板" class="headerlink" title="附email-ext邮件通知模板"></a>附email-ext邮件通知模板</h4><p>发现一个很好的邮件通知模板，如下：</p>
<p>Default Subject：</p>
<p>构建通知:${BUILD_STATUS} - ${PROJECT_NAME} - Build # ${BUILD_NUMBER} !<br>Default Content：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;ENV, var="JOB_NAME"&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">leftmargin</span>=<span class="string">"8"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">topmargin</span>=<span class="string">"8"</span> <span class="attr">marginheight</span>=<span class="string">"4"</span></span></div><div class="line">    <span class="attr">offset</span>=<span class="string">"0"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">"95%"</span> <span class="attr">cellpadding</span>=<span class="string">"0"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span></span></div><div class="line">        <span class="attr">style</span>=<span class="string">"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>(本邮件是程序自动下发的，请勿回复！)<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0000FF"</span>&gt;</span>构建结果 - $&#123;BUILD_STATUS&#125;<span class="tag">&lt;/<span class="name">font</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>构建信息<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目名称&amp;nbsp;：&amp;nbsp;$&#123;PROJECT_NAME&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建编号&amp;nbsp;：&amp;nbsp;第$&#123;BUILD_NUMBER&#125;次构建<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>SVN&amp;nbsp;版本：&amp;nbsp;$&#123;SVN_REVISION&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>触发原因：&amp;nbsp;$&#123;CAUSE&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建日志：&amp;nbsp;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;BUILD_URL&#125;console"</span>&gt;</span>$&#123;BUILD_URL&#125;console<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>构建&amp;nbsp;&amp;nbsp;Url&amp;nbsp;：&amp;nbsp;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;BUILD_URL&#125;"</span>&gt;</span>$&#123;BUILD_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>工作目录&amp;nbsp;：&amp;nbsp;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;PROJECT_URL&#125;ws"</span>&gt;</span>$&#123;PROJECT_URL&#125;ws<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目&amp;nbsp;&amp;nbsp;Url&amp;nbsp;：&amp;nbsp;<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;PROJECT_URL&#125;"</span>&gt;</span>$&#123;PROJECT_URL&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>Changes Since Last</div><div class="line">                        Successful Build:<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>历史变更记录 : <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;PROJECT_URL&#125;changes"</span>&gt;</span>$&#123;PROJECT_URL&#125;changes<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span> $&#123;CHANGES_SINCE_LAST_SUCCESS,reverse=true, format="Changes for Build #%n:<span class="tag">&lt;<span class="name">br</span> /&gt;</span>%c<span class="tag">&lt;<span class="name">br</span> /&gt;</span>",showPaths=true,changesFormat="<span class="tag">&lt;<span class="name">pre</span>&gt;</span>[%a]<span class="tag">&lt;<span class="name">br</span> /&gt;</span>%m<span class="tag">&lt;/<span class="name">pre</span>&gt;</span>",pathFormat="&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;%p"&#125;</div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Failed Test Results<span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">pre</span></span></div><div class="line">                    <span class="attr">style</span>=<span class="string">"font-size: 11pt; font-family: Tahoma, Arial, Helvetica, sans-serif"</span>&gt;$FAILED_TESTS<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"#0B610B"</span>&gt;</span>构建日志 (最后 100行):<span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">size</span>=<span class="string">"2"</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">align</span>=<span class="string">"center"</span> /&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- &lt;tr&gt;</span></div><div class="line">            &lt;td&gt;Test Logs (if test has ran): &lt;a</div><div class="line">                href="$&#123;PROJECT_URL&#125;ws/TestResult/archive_logs/Log-Build-$&#123;BUILD_NUMBER&#125;.zip"&gt;$&#123;PROJECT_URL&#125;/ws/TestResult/archive_logs/Log-Build-$&#123;BUILD_NUMBER&#125;.zip&lt;/a&gt;</div><div class="line">                &lt;br /&gt;</div><div class="line">            &lt;br /&gt;</div><div class="line">            &lt;/td&gt;</div><div class="line">        &lt;/tr&gt; --&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">cols</span>=<span class="string">"80"</span> <span class="attr">rows</span>=<span class="string">"30"</span> <span class="attr">readonly</span>=<span class="string">"readonly"</span></span></div><div class="line">                    <span class="attr">style</span>=<span class="string">"font-family: Courier New"</span>&gt;$&#123;BUILD_LOG, maxLines=100&#125;<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://www.jianshu.com/p/c3c769c5b8f2" target="_blank" rel="external">Jenkins+fir 上传更新日志</a><br><a href="http://www.cnblogs.com/yangxia-test/p/4366172.html" target="_blank" rel="external">Jenkins 邮件配置</a></p>
]]></content>
      
        <categories>
            
            <category> Jenkins </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> Jenkins </tag>
            
            <tag> fir </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[fir.im Jenkins 插件使用方法]]></title>
      <url>/2017/07/07/2017-07-07-fir.im%20Jenkins%20%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h4 id="fir-im-Jenkins-插件"><a href="#fir-im-Jenkins-插件" class="headerlink" title="fir.im Jenkins 插件"></a>fir.im Jenkins 插件</h4><p>使用fir.im Jenkins 插件可以更快速地上传 apk/ipa 安装包到 fir.im.</p>
 <a id="more"></a>
<h4 id="安装Jenkins"><a href="#安装Jenkins" class="headerlink" title="安装Jenkins"></a>安装Jenkins</h4><ol>
<li><p>方法一：直接下载安装包</p>
<p>Download Jenkins <a href="https://jenkins.io/index.html" target="_blank" rel="external">https://jenkins.io/index.html</a><br>安装完成后在 Terminal 中输入，即可打开 Jenkins。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open /Applications/Jenkins/jenkins.war</div></pre></td></tr></table></figure>
</li>
<li><p>方法二：使用命令行安装</p>
<p>安装 homebrew</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<p>安装 Jenkins</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install jenkins</div></pre></td></tr></table></figure>
<p>启动 Jenkins</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ jenkins</div></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="访问-Jenkins"><a href="#访问-Jenkins" class="headerlink" title="访问 Jenkins"></a>访问 Jenkins</h4><p>请在浏览器输入地址:<br><a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a><br>使用安装包安装后会自动打开，如果端口冲突那么请修改端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write /Library/Preferences/org.jenkins-ci httpPort xxxx</div></pre></td></tr></table></figure></p>
<p>如果下载的是war的包，用这个命令更改端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar jenkins.war --httpPort=8090</div></pre></td></tr></table></figure></p>
<h4 id="安装-fir-im-的上传插件"><a href="#安装-fir-im-的上传插件" class="headerlink" title="安装 fir.im 的上传插件"></a>安装 fir.im 的上传插件</h4><h4 id="插件介绍"><a href="#插件介绍" class="headerlink" title="插件介绍"></a>插件介绍</h4><p>该插件主要功能有2点：</p>
<ol>
<li>上传 apk/ipa 安装包 到 fir.im</li>
<li>上传符号表到 BugHD，方便查看混淆后的 Log 日志</li>
</ol>
<p>注意：在使用之前，请确认自己创建的 Jenkins 项目可以正常编译生成 ipa/apk 文件。 该插件的一般使用情景是编译完生成 apk/ipa 后，如果未指定 apk/ipa 生成目录，插件会默认选择 Jenkins 项目目录。</p>
<h4 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h4><p>Jenkins 插件下载地址 <a href="http://7xju1s.com1.z0.glb.clouddn.com/fir-plugin-1.9.5.hpi" target="_blank" rel="external">http://7xju1s.com1.z0.glb.clouddn.com/fir-plugin-1.9.5.hpi</a></p>
<h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><ul>
<li>进入 Jenkins 管理界面后，点击左侧进入 <code>系统管理</code><br><img src="/images/jenkins/jenkins-1.jpg" alt="jenkins-1"></li>
<li>然后找到 <code>管理插件</code> 并点击进入<br><img src="/images/jenkins/jenkins-2.jpg" alt="jenkins-2"></li>
<li>进入插件管理后，点击 <code>高级</code> 选项卡<br><img src="/images/jenkins/jenkins-3.jpg" alt="jenkins-3"></li>
<li>然后在页面找到 <code>上传插件</code>，选择已下载好的 <code>fir.im jenkins 插件文件路径</code>，并点击 <code>上传</code> 等待安装成功。<br><img src="/images/jenkins/jenkins-4.jpg" alt="jenkins-4"></li>
<li>安装成功后，如果没有创建 Jenkins 项目，请先创建项目。如果需要配置已存在的项目，请进入在 <code>配置</code> 中找到 <code>增加构建后操作步骤</code> ，并选择 <code>Upload to fir.im</code> 添加到 Jenkins 项目中。<br><img src="/images/jenkins/jenkins-5.jpg" alt="jenkins-5"></li>
<li>添加成功后开始配置各种参数，如图显示：<br><img src="/images/jenkins/jenkins-6.jpg" alt="jenkins-6"></li>
</ul>
<h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><ul>
<li><p>fir.im Token（必填）<br>fir.im Token 查看方法：直接点击 <code>API token</code> (<a href="http://fir.im/apps/apitoken" target="_blank" rel="external">http://fir.im/apps/apitoken</a>) 进行查看.<br><img src="/images/jenkins/plugins-1.jpg" alt="plugins-1"></p>
</li>
<li><p>IPA/APK Files（可选）<br>接下来，选择生成 <code>ipa/apk</code> 文件路径<br>注意：如果没有填写该选项，插会件自动默认查找 Jenkins 创建的项目目录下的 <code>apk/ipa</code> 文件</p>
</li>
<li><p>BugHD token（可选）<br>作用：BugHD上传 mapping.txt/dSYM 文件 API 的调用权限<br>注意：如果需要上传符号表则是必填项；不需要上传混淆表，则不需要填写<br><code>BugHD token 查看方法</code>：请访问 <code>BugHD API token</code> <a href="http://bughd.com/account" target="_blank" rel="external">http://bughd.com/account</a> ，登录后进行查看。<br><img src="/images/jenkins/plugins-3.jpg" alt="plugins-1"></p>
</li>
<li><p>BugHD project ID(可选)<br>作用：判断具体上传到指定的 bughd 项目<br>注意：如果需要上传符号表，则是必填项；不需要上传则不用填写<br><code>BugHD project ID</code> 查看方法： 请访问 <code>BugHD Projects</code> <a href="http://bughd.com/projects" target="_blank" rel="external">http://bughd.com/projects</a> ，登录后找到你要上传符号表的项目，进入该项目，选择 <code>项目设置</code> 选项卡进行查看。<br><img src="/images/jenkins/plugins-4.jpg" alt="plugins-1"></p>
</li>
<li><p>dSYM File or mapping File(可选)<br>作用：选择生成 dSYM/mapping.txt 文件路径<br>注意：如果需要上传符号表，则是必填项；不需要上传则不用填写</p>
</li>
<li><p>Build Notes(可选)<br>作用：上传 fir.im 后，可显示出更新日志</p>
</li>
</ul>
<h4 id="Jenkins-插件更新日志"><a href="#Jenkins-插件更新日志" class="headerlink" title="Jenkins 插件更新日志"></a>Jenkins 插件更新日志</h4><ul>
<li>2015-11-13      V1.1     上线</li>
<li>2015-11-25      V1.2     修复 slave 状态下上传失败的Bug</li>
<li>2015-11-30      V1.3     修复 上传 apk 图标过小的问题</li>
<li>2015-12-01      V1.4     修复 ipa文件解析 icon 出错的问题</li>
<li>2015-12-08      V1.5     增加 上传apk/ipa文件的过滤条件</li>
<li>2015-12-16      V1.6     Bug fix</li>
<li>2016-01-08      V1.7     Bug fix</li>
<li>2016-03-14      V1.9.1   修复 解析图标失败后导致无法上传 &amp; 获取git log失败的问题</li>
<li>2016-03-18      V1.9.2   更新 dsym/mapping 路径支持环境变量 changelog支持环境变量</li>
<li>2016-06-29      V1.9.2.3   修复 应用上传问题</li>
<li>2016-09-06      V1.9.3   修复 apk/ipa解析的错误</li>
<li>2016-09-16      V1.9.4   修复 ChangeLog选项环境变量不变的bug</li>
<li>2016-11-09      V1.9.4   修复 解析ipa的问题<br>最后，关于更多 Jenkins 的问题推荐阅读 fir.im 的用户写的 Jenkins+GitHub+Xcode+fir搭了一个持续集成环境<a href="http://www.jianshu.com/p/a17167274463" target="_blank" rel="external">http://www.jianshu.com/p/a17167274463</a>)</li>
</ul>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://blog.fir.im/jenkins" target="_blank" rel="external">fir.im Jenkins 插件使用方法</a></p>
]]></content>
      
        <categories>
            
            <category> Jenkins </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> Jenkins </tag>
            
            <tag> fir </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kotlin与Dagger2 ButterKnife冲突解决]]></title>
      <url>/2017/06/25/2017-06-25-Kotlin%E4%B8%8EDagger2%20ButterKnife%E5%86%B2%E7%AA%81%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<h4 id="1-Kotlin-与-Dagger2冲突"><a href="#1-Kotlin-与-Dagger2冲突" class="headerlink" title="1. Kotlin 与 Dagger2冲突"></a>1. Kotlin 与 Dagger2冲突</h4><p>在kotlin中加入dagger注入代码时出现<br>Unresolved reference dagger的错误时<br>需要在 Kotlin 中则需要添加 kotlin-kapt 插件激活 kapt，并使用 kapt 替换 annotationProcessor：<br>在app/build.gradle文件中增加</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;kotlin-kapt&apos;</div><div class="line"></div><div class="line">kapt &#123;</div><div class="line">    generateStubs = true</div><div class="line">&#125;</div><div class="line">dependencies &#123;</div><div class="line">    kapt &quot;com.google.dagger:dagger-compiler:$dagger-version&quot;</div><div class="line">    compile &quot;com.google.dagger:dagger:$&#123;daggerVersion&#125;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>特别提示：kapt 也能够处理 Java 文件，所以不需要再保留 annotationProcessor 的依赖。</p>
<h4 id="2-出现ButterKnife不生效问题处理"><a href="#2-出现ButterKnife不生效问题处理" class="headerlink" title="2.出现ButterKnife不生效问题处理"></a>2.出现ButterKnife不生效问题处理</h4><p>在项目级 build.gradle中增加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    classpath &apos;com.neenbedankt.gradle.plugins:android-apt:1.8&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在 Kotlin 中使用 ButterKnife 与 Java 中完全一致。 在 Gradle 构建脚本的修改如下，后面将重点介绍代码部分的差异。<br>在 Gradle 依赖中添加 kotlin-kapt 插件，并使用 kapt 替代 annotationProcessor。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">apply plugin: ‘kotlin-kapt‘</div><div class="line">dependencies &#123;</div><div class="line">    ...</div><div class="line">    compile &quot;com.jakewharton:butterknife:$butterknife-version&quot;</div><div class="line">    kapt &quot;com.jakewharton:butterknife-compiler:$butterknife-version&quot;</div><div class="line">    </div><div class="line"> // 处理butterknife与support-compat冲突</div><div class="line">    compile (&quot;com.jakewharton:butterknife:$butterknife-version&quot;) &#123;</div><div class="line">        exclude group: &apos;com.android.support&apos;, module: &apos;support-compat&apos;</div><div class="line">    &#125;</div><div class="line">//    apt &quot;com.jakewharton:butterknife-compiler:$butterknife-version&quot;</div><div class="line">    kapt &quot;com.jakewharton:butterknife-compiler:$butterknife-version&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> Kotlin </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> Dagger2 </tag>
            
            <tag> ButterKnife </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Glide 设置超时时间]]></title>
      <url>/2017/06/22/2017-06-22-Glide%E8%AE%BE%E7%BD%AE%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<p>Glide 系列文章<br><a href="https://mrfu.me/2016/02/27/Glide_Request_Priorities/" target="_blank" rel="external">https://mrfu.me/2016/02/27/Glide_Request_Priorities/</a></p>
<p>Glide默认使用HttpUrlConnection作为协议栈进行网络连接默认超时时间为2500ms<br>设置超时时间方法</p>
<a id="more"></a>
<p>1、使用Volley作为协议栈<br>compile ‘com.github.bumptech.glide:volley-integration:1.5.0@aar’<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomGlideModule</span> <span class="keyword">implements</span> <span class="title">GlideModule</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyOptions</span><span class="params">(Context context, GlideBuilder builder)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerComponents</span><span class="params">(Context context, Glide glide)</span> </span>&#123;</div><div class="line">        RequestQueue queue = <span class="keyword">new</span> RequestQueue( <span class="comment">// params hardcoded from Volley.newRequestQueue()</span></div><div class="line">                <span class="keyword">new</span> DiskBasedCache(<span class="keyword">new</span> File(context.getCacheDir(), <span class="string">"volley"</span>)),</div><div class="line">                <span class="keyword">new</span> BasicNetwork(<span class="keyword">new</span> HurlStack())) &#123;</div><div class="line">            <span class="meta">@Override</span> <span class="keyword">public</span> &lt;T&gt; <span class="function">Request&lt;T&gt; <span class="title">add</span><span class="params">(Request&lt;T&gt; request)</span> </span>&#123;</div><div class="line">                request.setRetryPolicy(<span class="keyword">new</span> DefaultRetryPolicy(<span class="number">10000</span>, <span class="number">1</span>, <span class="number">1</span>));</div><div class="line">                <span class="keyword">return</span> <span class="keyword">super</span>.add(request);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        queue.start();</div><div class="line">        glide.register(GlideUrl.class, InputStream.class, <span class="keyword">new</span> VolleyUrlLoader.Factory(queue));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">    android:name=&quot;&#123;packageName&#125;.CustomGlideModule&quot;</div><div class="line">    android:value=&quot;GlideModule&quot; /&gt;</div></pre></td></tr></table></figure>
<p>2、使用OkHttp作为协议栈<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &apos;com.github.bumptech.glide:okhttp-integration:1.5.0@aar&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class CustomGlideModule extends GlideModule &#123;</div><div class="line">    @Override</div><div class="line">    public void applyOptions(Context context, GlideBuilder builder) &#123;</div><div class="line">        // stub</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void registerComponents(Context context, Glide glide) &#123;</div><div class="line">        final OkHttpClient.Builder builder = new OkHttpClient.Builder();</div><div class="line"></div><div class="line">        // set your timeout here</div><div class="line">        builder.readTimeout(30, TimeUnit.SECONDS);</div><div class="line">        builder.writeTimeout(30, TimeUnit.SECONDS);</div><div class="line">        builder.connectTimeout(30, TimeUnit.SECONDS);</div><div class="line"></div><div class="line">        glide.register(GlideUrl.class, InputStream.class, new OkHttpUrlLoader.Factory(builder.build()));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">    android:name=&quot;&#123;packageName&#125;.CustomGlideModule&quot;</div><div class="line">    android:value=&quot;GlideModule&quot; /&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> Glide </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> Glide </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[理解Android中的SharedPreferences]]></title>
      <url>/2017/05/13/2017-05-13-%E7%90%86%E8%A7%A3Android%E4%B8%AD%E7%9A%84SharedPreferences/</url>
      <content type="html"><![CDATA[<p>SharedPreferences作为Android中数据存储方式的一种，我们经常会用到，它适合用来保存那些少量的数据，特别是键值对数据，比如配置信息，登录信息等。不过要想做到正确使用SharedPreferences，就需要弄清楚下面几个问题： </p>
<a id="more"></a>
<p>（1）每次调用getSharedPreferences时都会创建一个SharedPreferences对象吗？这个对象具体是哪个类对象？<br>（2）在UI线程中调用getXXX有可能导致ANR吗？<br>（3）为什么SharedPreferences只适合用来存放少量数据，为什么不能把SharedPreferences对应的xml文件当成普通文件一样存放大量数据？<br>（4）commit和apply有什么区别？<br>（5）SharedPreferences每次写入时是增量写入吗？</p>
<p>要想弄清楚上面几个问题，需要查看SharedPreferences的源码实现才能解决。先从Context的getSharedPreferences开始：<br>我们知道Android中的Context类体系其实是使用了装饰者模式，而被装饰对象就这个mBase，它其实就是一个ContextImpl对象，ContextImpl的getSharedPreferences方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">    public SharedPreferences getSharedPreferences(String name, int mode) &#123;</div><div class="line">        SharedPreferencesImpl sp;</div><div class="line">        synchronized (ContextImpl.class) &#123;</div><div class="line">            if (sSharedPrefs == null) &#123;</div><div class="line">                sSharedPrefs = new ArrayMap&lt;String, ArrayMap&lt;String, SharedPreferencesImpl&gt;&gt;();</div><div class="line">            &#125;</div><div class="line">            final String packageName = getPackageName();</div><div class="line">            ArrayMap&lt;String, SharedPreferencesImpl&gt; packagePrefs = sSharedPrefs.get(packageName);</div><div class="line">            if (packagePrefs == null) &#123;</div><div class="line">                packagePrefs = new ArrayMap&lt;String, SharedPreferencesImpl&gt;();</div><div class="line">                sSharedPrefs.put(packageName, packagePrefs);</div><div class="line">            &#125;</div><div class="line">            // At least one application in the world actually passes in a null</div><div class="line">            // name.  This happened to work because when we generated the file name</div><div class="line">            // we would stringify it to &quot;null.xml&quot;.  Nice.</div><div class="line">            if (mPackageInfo.getApplicationInfo().targetSdkVersion &lt;</div><div class="line">                    Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">                if (name == null) &#123;</div><div class="line">                    name = &quot;null&quot;;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            sp = packagePrefs.get(name);</div><div class="line">            if (sp == null) &#123;</div><div class="line">                File prefsFile = getSharedPrefsFile(name);</div><div class="line">                sp = new SharedPreferencesImpl(prefsFile, mode);</div><div class="line">                packagePrefs.put(name, sp);</div><div class="line">                return sp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if ((mode &amp; Context.MODE_MULTI_PROCESS) != 0 ||</div><div class="line">            getApplicationInfo().targetSdkVersion &lt; android.os.Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class="line">            // If somebody else (some other process) changed the prefs</div><div class="line">            // file behind our back, we reload it.  This has been the</div><div class="line">            // historical (if undocumented) behavior.</div><div class="line">            sp.startReloadIfChangedUnexpectedly();</div><div class="line">        &#125;</div><div class="line">        return sp;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>使用到了单例模式，sSharedPrefs 是一个ArrayMap，packagePrefs也是一个ArrayMap，它们的关系是这样的：<br>packagePrefs存放文件name与SharedPreferencesImpl键值对，sSharedPrefs存放包名与ArrayMap键值对。注意sSharedPrefs是static变量，也就是一个类只有一个实例，因此你每次getSharedPreferences其实拿到的都是同一个SharedPreferences对象。这里回答第一个问题，对于一个相同的SharedPreferences name，获取到的都是同一个SharedPreferences对象，它其实是SharedPreferencesImpl对象。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">SharedPreferencesImpl(File file, int mode) &#123;</div><div class="line">    mFile = file;</div><div class="line">    mBackupFile = makeBackupFile(file);</div><div class="line">    mMode = mode;</div><div class="line">    mLoaded = false;</div><div class="line">    mMap = null;</div><div class="line">    startLoadFromDisk();</div><div class="line">&#125;</div><div class="line">private void startLoadFromDisk() &#123;</div><div class="line">    synchronized (this) &#123;</div><div class="line">        mLoaded = false;</div><div class="line">    &#125;</div><div class="line">    new Thread(&quot;SharedPreferencesImpl-load&quot;) &#123;</div><div class="line">        public void run() &#123;</div><div class="line">            synchronized (SharedPreferencesImpl.this) &#123;</div><div class="line">                loadFromDiskLocked();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一次调用getSharedPreferences时会去创建一个SharedPreferencesImpl对象，它会开启一个子线程，然后去把指定的SharedPreferences文件中的键值对全部读取出来，存放在一个Map中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SharedPreferences sp = getSharedPreferences(&quot;test&quot;, Context.MODE_PRIVATE);</div><div class="line">String name = sp.getString(&quot;name&quot;, null);</div></pre></td></tr></table></figure></p>
<p>调用getString时那个SharedPreferencesImpl构造方法开启的子线程可能还没执行完（比如文件比较大时全部读取会比较久），这时getString当然还不能获取到相应的值，必须阻塞到那个子线程读取完为止，getString方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public String getString(String key, @Nullable String defValue) &#123;</div><div class="line">        synchronized (this) &#123;</div><div class="line">            awaitLoadedLocked();</div><div class="line">            String v = (String)mMap.get(key);</div><div class="line">            return v != null ? v : defValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>显然这个awaitLoadedLocked方法就是用来等this这个锁的，在loadFromDiskLocked方法的最后我们也可以看到它调用了notifyAll方法，这时如果getString之前阻塞了就会被唤醒。那么现在这里有一个问题，我们的getString是写在UI线程中，如果那个getString被阻塞太久了，比如60s，这时就会出现ANR，因此要根据具体情况考虑是否需要把SharedPreferences的读写放在子线程中。这里回答第二个问题，在UI线程中调用getXXX可能会导致ANR。同时可以回答第三个问题，SharedPreferences只能用来存放少量数据，如果一个SharedPreferences对应的xml文件很大的话，在初始化时会把这个文件的所有数据都加载到内存中，这样就会占用大量的内存，有时我们只是想读取某个xml文件中一个key的value，结果它把整个文件都加载进来了，显然如果必要的话这里需要进行相关优化处理。</p>
<p>SharedPreferences的初始化和读取比较简单，写操作就相对复杂了点，我们知道写一个SharedPreferences文件都是先要调用edit方法获取到一个Editor对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public Editor edit() &#123;</div><div class="line">    synchronized (this) &#123;</div><div class="line">        awaitLoadedLocked();</div><div class="line">    &#125;</div><div class="line">    return new EditorImpl();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其实拿到的是一个EditorImpl对象，它是SharedPreferencesImpl的内部类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public final class EditorImpl implements Editor &#123;</div><div class="line">    private final Map&lt;String, Object&gt; mModified = Maps.newHashMap();</div><div class="line">    private boolean mClear = false;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到它有一个Map对象mModified，用来保存“脏数据”，也就是你每次put的时候其实是把那个键值对放到这个mModified 中，最后调用apply或者commit才会真正把数据写入文件中，比如看putString：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public Editor putString(String key, @Nullable String value) &#123;</div><div class="line">    synchronized (this) &#123;</div><div class="line">        mModified.put(key, value);</div><div class="line">        return this;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其它putXXX代码基本也是一样的。EditorImpl类的关键就是apply和commit，不过它们有一些区别，先看commit方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public boolean commit() &#123;</div><div class="line">            MemoryCommitResult mcr = commitToMemory();</div><div class="line">            SharedPreferencesImpl.this.enqueueDiskWrite(</div><div class="line">                mcr, null /* sync write on this thread okay */);</div><div class="line">            try &#123;</div><div class="line">                mcr.writtenToDiskLatch.await();</div><div class="line">            &#125; catch (InterruptedException e) &#123;</div><div class="line">                return false;</div><div class="line">            &#125;</div><div class="line">            notifyListeners(mcr);</div><div class="line">            return mcr.writeToDiskResult;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>关键有两步，先调用commitToMemory，再调用enqueueDiskWrite，commitToMemory就是产生一个“合适”的MemoryCommitResult对象mcr，然后调用enqueueDiskWrite时需要把这个对象传进去，commitToMemory方法：</p>
<p>这里需要弄清楚两个对象mMap和mModified，mMap是存放当前SharedPreferences文件中的键值对，而mModified是存放此时edit时put进去的键值对。mDiskWritesInFlight表示正在等待写的操作数量。可以看到这个方法中首先处理了clear标志，它调用的是mMap.clear()，然后再遍历mModified将新的键值对put进mMap，也就是说在一次commit事务中，如果同时put一些键值对和调用clear，那么clear掉的只是之前的键值对，这次put进去的键值对还是会被写入的。遍历mModified时，需要处理一个特殊情况，就是如果一个键值对的value是this（SharedPreferencesImpl）或者是null那么表示将此键值对删除，这个在remove方法中可以看到：</p>
<p>commit接下来就是调用enqueueDiskWrite方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">private void enqueueDiskWrite(final MemoryCommitResult mcr,</div><div class="line">                              final Runnable postWriteRunnable) &#123;</div><div class="line">    final Runnable writeToDiskRunnable = new Runnable() &#123;</div><div class="line">            public void run() &#123;</div><div class="line">                synchronized (mWritingToDiskLock) &#123;</div><div class="line">                    writeToFile(mcr);</div><div class="line">                &#125;</div><div class="line">                synchronized (SharedPreferencesImpl.this) &#123;</div><div class="line">                    mDiskWritesInFlight--;</div><div class="line">                &#125;</div><div class="line">                if (postWriteRunnable != null) &#123;</div><div class="line">                    postWriteRunnable.run();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    final boolean isFromSyncCommit = (postWriteRunnable == null);</div><div class="line">    // Typical #commit() path with fewer allocations, doing a write on</div><div class="line">    // the current thread.</div><div class="line">    if (isFromSyncCommit) &#123;</div><div class="line">        boolean wasEmpty = false;</div><div class="line">        synchronized (SharedPreferencesImpl.this) &#123;</div><div class="line">            wasEmpty = mDiskWritesInFlight == 1;</div><div class="line">        &#125;</div><div class="line">        if (wasEmpty) &#123;</div><div class="line">            writeToDiskRunnable.run();</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    QueuedWork.singleThreadExecutor().execute(writeToDiskRunnable);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>先定义一个Runnable，注意实现Runnable与继承Thread的区别，Runnable表示一个任务，不一定要在子线程中执行，一般优先考虑使用Runnable。这个Runnable中先调用writeToFile进行写操作，写操作需要先获得mWritingToDiskLock，也就是写锁。然后执行mDiskWritesInFlight–，表示正在等待写的操作减少1。最后判断postWriteRunnable是否为null，调用commit时它为null，而调用apply时它不为null。<br>Runnable定义完，就判断这次是commit还是apply，如果是commit，即isFromSyncCommit为true，而且有1个写操作需要执行，那么就调用writeToDiskRunnable.run()，注意这个调用是在当前线程中进行的。如果不是commit，那就是apply，这时调用QueuedWork.singleThreadExecutor().execute(writeToDiskRunnable)，这个QueuedWork类其实很简单，里面有一个SingleThreadExecutor，用于异步执行这个writeToDiskRunnable。<br>这里就可以回答第四个问题了，commit的写操作是在调用线程中执行的，而apply内部是用一个单线程的线程池实现的，因此写操作是在子线程中执行的。</p>
<p>说一下那个mBackupFile，SharedPreferences在写入时会先把之前的xml文件改成名成一个备份文件，然后再将要写入的数据写到一个新的文件中，如果这个过程执行成功的话，就会把备份文件删除。由此可见每次即使只是添加一个键值对，也会重新写入整个文件的数据，这也说明SharedPreferences只适合保存少量数据，文件太大会有性能问题。这里回答第五个问题，SharedPreferences每次写入都是整个文件重新写入，不是增量写入。</p>
<p>SharedPreferences几种模式：<br>Context.MODE_PRIVATE：应用私有，只有相同的UID才能进行读写<br>Context.MODE_MULTI_PROCESS：多进程安全标志，Android2.3之前该标志是默认被设置的，Android2.3开始需要自己设置。<br>MODE_APPEND：首次创建时如果文件存在不会删除文件。<br>注意这些模式可以使用位与进行设置，比如MODE_PRIVATE | MODE_APPEND。</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> SharedPreferences </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> 分享 </tag>
            
            <tag> 存储 </tag>
            
            <tag> SharedPreferences </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android内存优化相关]]></title>
      <url>/2017/04/13/2017-04-13-Android%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h4 id="Java内存分配策略概述"><a href="#Java内存分配策略概述" class="headerlink" title="Java内存分配策略概述"></a>Java内存分配策略概述</h4><p><img src="/images/memory/memory.jpeg" alt="Overdraw"></p>
<a id="more"></a>
<ul>
<li><p>虚拟机栈（Stack）<br>存放基本数据类型和局部变量引用，但是对象本身不存放在栈中，而是存放在堆中。<br>当一个方法即将被运行时，Java虚拟机栈首先会在Java虚拟机栈中为该方法创建一块“栈帧”，栈帧中包含局部变量表、操作数栈、动态链接、方法出口信息等。当方法在运行过程中需要创建局部变量时，就将局部变量的值存入栈帧的局部变量表中。当方法执行完毕后，这个方法所对应的栈帧将会出栈，并释放内存空间。<br>Java虚拟机栈会出现两种异常：StackOverFlowError和OutOfMemoryError。<br>Java虚拟机栈也是线程私有的，每个线程都有各自的Java虚拟机栈，而且随着线程的创建而创建，随着线程的死亡而死亡。</p>
</li>
<li><p>堆（Heap）<br>在堆上分配内存的过程称作内存动态分配过程。在Java中堆用于存放由new创建的对象和数组。堆中分配的内存，由java虚拟机自动垃圾回收器（GC）来管理(可见我们要进行的内存优化主要就是对堆内存进行优化)。堆是不连续的内存区域（因为系统是用链表来存储空闲内存地址，自然不是连续的），堆大小受限于计算机系统中有效的虚拟内存。</p>
</li>
<li><p>方法区（Method Area）<br>方法区也是线程共享的区域，用于存储已经被虚拟机加载的类信息，常量，静态变量和即时编译器（JIT）编译后的代码等数据。</p>
</li>
<li><p>运行时常量池（Runtime Constant Pool）<br>是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。运行期间也可能将新的常量放入池中。</p>
</li>
</ul>
<h4 id="JVM垃圾回收"><a href="#JVM垃圾回收" class="headerlink" title="JVM垃圾回收"></a>JVM垃圾回收</h4><ol>
<li><p>垃圾对象的判定</p>
<p>Java堆中存放着几乎所有的对象实例，垃圾收集器对堆中的对象进行回收前，要先确定这些对象是否还有用，判定对象是否为垃圾对象有如下算法：</p>
<ul>
<li><p>引用计数算法</p>
<p>  给对象添加一个引用计数器，每当有一个地方引用它时，计数器值就加1，当引用失效时，计数器值就减1，任何时刻计数器都为0的对象就是不可能再被使用的。<br>引用计数算法的实现简单，判定效率也很高，在大部分情况下它都是一个不错的选择，当Java语言并没有选择这种算法来进行垃圾回收，主要原因是它很难解决对象之间的相互循环引用问题。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class Main &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        MyObject object1 = new MyObject();</div><div class="line">        MyObject object2 = new MyObject();</div><div class="line">        object1.object = object2;</div><div class="line">        object2.object = object1;</div><div class="line">        object1 = null;</div><div class="line">        object2 = null;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">class MyObject&#123;</div><div class="line">    public Object object = null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>根搜索算法</p>
<p>  Java和C#中都是采用根搜索算法来判定对象是否存活的。这种算法的基本思路是通过一系列名为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链，当一个对象到GC Roots没有任何引用链相连时，就证明此对象是不可用的。在Java语言里，可作为GC Roots的对象包括下面几种：<br>1、栈（栈帧中的本地变量表）中引用的对象。<br>2、方法区中的静态成员。<br>3、方法区中的常量引用的对象<br>4、本地方法栈中JNI（一般说的Native方法）引用的对象。</p>
</li>
</ul>
</li>
<li><p>垃圾对象回收</p>
<ul>
<li><p>标记-清除</p>
<p>  该算法有如下缺点：<br>（1）标记和清除过程的效率都不高。<br>（2）标记清除后会产生大量不连续的内存碎片，当程序在以后的运行过程中需要分配较大对象时无法找到足够的连续内存而不得不触发另一次垃圾收集动作。<br><img src="/images/memory/mark_sweep.jpg" alt="mark_sweep"></p>
</li>
<li>复制算法<br><img src="/images/memory/copying.jpg" alt="copying"></li>
<li>标记-整理<br><img src="/images/memory/mark_compact.jpg" alt="mark_compact"></li>
<li>分代回收算法</li>
</ul>
</li>
</ol>
<h4 id="Android的内存区域"><a href="#Android的内存区域" class="headerlink" title="Android的内存区域"></a>Android的内存区域</h4><ol>
<li><p>Dalvik Heap，这部分的内存区域是由Dalvik虚拟机管理，通过Java中 new 关键字来申请一块新内存。这块区域的内存是由GC直接管理，能够自动回收内存。这块内存的大小会受到系统限制，当内存超过APP最大可用内存时会OOM</p>
</li>
<li><p>Native Heap，这部分内存区域是在C++中申请的，它不受限于APP的最大可用内存限制，而只是受限于设备的物理可用内存限制。它的缺点在于没有自动回收机制，只能通过C++语法来释放申请的内存</p>
</li>
<li><p>Ashmem（Android匿名共享内存），这部分内存类似于Native内存区，但是它是受Android系统底层管理的。</p>
</li>
</ol>
<p>Android Dalvik Heap与原生Java一样，将堆的内存空间分为三个区域，Young Generation，Old Generation， Permanent Generation。<br>最近分配的对象会存放在Young Generation区域，对象在某个时机触发GC回收垃圾，而没有回收的就根据不同规则，有可能被移动到Old Generation，最后积累一定时间再移动到Permanent Generation区域。系统会根据不同的内存数据类型分别采用不同的回收机制。每一个Generation的内存区域都有固定的大小。执行GC占用的时间和它发生在哪一个Generation的内存区域有关，Young Generation中的每次GC操作时间是最短的，Old Generation其次，Permanent Generation最长。同时GC的执行时间也和当前Generation中的对象数量有关，数量越多，执行时间越长。<br>GC时会导致线程暂停，导致卡顿，在ART中对GC过程做了优化，据说内存分配的效率提高了10倍，GC的效率提高了2-3倍，不过主要还是优化中断和阻塞的时间，频繁的GC还是会导致卡顿。</p>
<h4 id="Android-App为什么会OOM呢？"><a href="#Android-App为什么会OOM呢？" class="headerlink" title="Android App为什么会OOM呢？"></a>Android App为什么会OOM呢？</h4><p>其实就是申请的内存超过了Dalvik Heap的最大值。于是也诞生了一些比较”黑科技”的内存优化方案，比如将耗内存的操作放到Native层，或者使用分进程的方式突破每个进程的Dalvik Heap内存限制。</p>
<h4 id="自身内存占用监控"><a href="#自身内存占用监控" class="headerlink" title="自身内存占用监控"></a>自身内存占用监控</h4><p>对于onLowMemory()与onTrimMemory(int)等是针对整个系统而言的。<br>通过Runtime.totalMemory-freeMemory即为当前应用使用的内存。<br>Runtime.getRuntime().maxMemory();<br>Runtime.getRuntime().totalMemory(); Runtime.getRuntime().freeMemory();</p>
<h4 id="避免内存泄漏"><a href="#避免内存泄漏" class="headerlink" title="避免内存泄漏"></a>避免内存泄漏</h4><p>内存泄漏是指应用不再使用的内存对象，但垃圾回收时没有辨认出来，不能及时回收，一直保留在内存中长期占用一定的空间不能释放。</p>
<h4 id="内存泄露的危害："><a href="#内存泄露的危害：" class="headerlink" title="内存泄露的危害："></a>内存泄露的危害：</h4><ul>
<li>过多的内存泄露最终会导致内存溢出（OOM）</li>
<li>内存泄露导致可用内存不足，会触发频繁GC，不管是Android2.2以前的单线程GC还是现在的CMS和G1，都有一部分的操作会导致用户线程停止（就是所谓的Stop the world），从而导致UI卡顿。</li>
</ul>
<h4 id="常见内存泄漏场景"><a href="#常见内存泄漏场景" class="headerlink" title="常见内存泄漏场景"></a>常见内存泄漏场景</h4><ol>
<li><p>及时关闭资源性对象<br>Cursor File往往都使用了一些缓冲，在不使用时，应该及时关闭，以便它们的缓存数据能够及时回收。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Cursor cursor = null;</div><div class="line">try&#123;</div><div class="line">    cursor = mContext.getContentResolver().query(uri,null,null,null,null);</div><div class="line">    if (cursor != null) &#123;</div><div class="line">        // 处理数据</div><div class="line">    &#125;</div><div class="line">&#125; catch (Exception e)&#123;</div><div class="line">    e.printStatckTrace();</div><div class="line">&#125; finally &#123;</div><div class="line">    if (cursor != null)&#123;</div><div class="line">        cursor.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>注册对象未注销<br>广播接收器、注册观察者等</p>
</li>
<li><p>单例Context、static变量等</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">private static Resources mResources;</div><div class="line">@Override</div><div class="line">protected void onCreate(Bundle state) &#123;</div><div class="line">    super.onCreate(state);</div><div class="line">    if (mResources == null) &#123;</div><div class="line">        mResources = this.getResources();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Handler，AsyncTAsk，TimeTask等内部类<br>当Activity退出时，消息队列中还有未处理的消息或者正在处理的消息，并且消息队列中Message持有Handler的实例，handler持有Activity的引用，导致Activity无法被回收。</p>
<p>需要修改两个地方</p>
<p>1）使用静态Handler内部类，如果你需要在Handler子类中调用外部类的方法，可以让Handler持有一个外部类的WeakReference对Handler持有的对象使用弱引用，这样在回收时，也可以回收Handler持有的对象。</p>
<p>2）在Activity的onDestory时，应该移除消息队列中的消息，避免Looper线程的消息队列中有待处理的消息。asyncTask.cancel()。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class WeakRefHandler extends Handler</div><div class="line">&#123;</div><div class="line">    WeakReference&lt;Context&gt; mWeakContext; </div><div class="line">    public WeakRefHandler(Context context)</div><div class="line">    &#123;</div><div class="line">        mWeakContext = newWeakReference&lt;Context&gt;(context);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void handleMessage(Message msg)</div><div class="line">    &#123;</div><div class="line">        if((mWeakContext.get() instanceofActivity )&amp;&amp; ((Activity)mWeakContext.get()).isFinishing())</div><div class="line">                return ;</div><div class="line">        if(mWeakContext==null)&#123;</div><div class="line">            return ;</div><div class="line">        &#125;</div><div class="line">        super.handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>集合中的对象没有清理造成的内存泄漏，特别是静态集合</p>
</li>
<li><p>SensorManager等系统服务</p>
<p>系统服务可以通过Context.getSystemService 获取。通过Context.getSystemService()可以获取系统服务。这些服务工作在各自的进程中，帮助应用处理后台任务，处理硬件交互。部分服务使用时需要注册监听器，会导致服务持有了Context的引用，如果在Activity销毁的时候没有注销这些监听器，会导致内存泄漏。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">void registerListener() &#123;</div><div class="line">           SensorManager sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);</div><div class="line">           Sensor sensor = sensorManager.getDefaultSensor(Sensor.TYPE_ALL);</div><div class="line">           sensorManager.registerListener(this, sensor, SensorManager.SENSOR_DELAY_FASTEST);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Bitmap及时调用recycle()</p>
<p>在不使用Bitmap对象时，需要调用recycle()释放内存，然后将它设置为null。</p>
</li>
</ol>
<h4 id="内存泄漏监控"><a href="#内存泄漏监控" class="headerlink" title="内存泄漏监控"></a>内存泄漏监控</h4><p>LeakCanary是一个检测内存的开源类库，实际上就是在本机上自动做了Heap Dump，然后分析生成的hprof文件，展示结果。</p>
<ul>
<li>实现监控<br>导入SDK，builder.gradle文件中加入相关引用<br>LeakCanary对应用的性能有一定的影响，特别是Heap Dump操作会消耗更多的系统资源，并且会引起卡顿现象。<br>配置还releaseCompile和testCompile的依赖，就不需要担心对正式版本性能产生影响。</li>
</ul>
<p><code>LeakCanary.install()</code>会安装一个Leaks的APK，返回一个预定义的RefWatcher，同时也启用一个<code>ActivityRefWatvher</code>，用于自动监控<code>Activity.onDestory()</code>之后泄漏的对象。其原理是设置<code>Application的ActivityLifecycleCallbacks</code>方法监控所有Activity的生命周期回调。</p>
<p>默认情况下，只对Activity进行了检测。如果想要监控Fragment实例或者其他自定义的组件，可以在<code>Fragment.onDestory</code>方法，或者自定义组件的周期结束回调中加入如下实现：<code>Application.getRefWatcher().watch(this);</code></p>
<p>也可以监控BroadcastReceiver，Service等其他有生命周期的对象等</p>
<ul>
<li><p>自定义处理结果<br>仅仅依靠默认的监控处理方式，在实际的开发和测试过程中体验不是很好，必须以来安装的Leaks应用，并且不好定制化，因此实现自定义的监控结果处理就很有必要。<br>首先继承DisplayLeakService实现一个自定义的监控处理Service</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class LeakCanaryService extends DisplayLeakService &#123;</div><div class="line">    @Override</div><div class="line">    protected void afterDefaultHandling(HeapDump heapDump, AnalysisResult result, String leakInfo) &#123;</div><div class="line">        super.afterDefaultHandling(heapDump, result, leakInfo);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>重写afterDefaultHanding方法<br>heapDump：堆内存文件，可以拿到完成的hprof文件，使用MAT分析等。<br>result：监控到内存的状态，如是否泄漏等。<br>leakInfo：leak trace详细信息，除了内存泄漏对象，还有设备信息等。<br>然后在install时，使用自定义的LeakCanaryService，如下：</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RefWatcher watcher = LeakCanary.refWatcher(this).</div><div class="line">listenerServiceClass(LeakCanaryService.class).buildAndInstall();</div></pre></td></tr></table></figure>
<p> 就可以实现自己的处理方式，如丰富提示信息、把数据保存到本地、上传到服务器分析等。</p>
</li>
</ul>
<h4 id="优化内存空间"><a href="#优化内存空间" class="headerlink" title="优化内存空间"></a>优化内存空间</h4><ol>
<li><p>序列化 Serizable Parcelable<br>Serializable 序列化时会调用ObjectOutputStream.writeObject 反序列化会调用ObjectInputStream.readObject()引用了大量反射机制，导致GC频繁触发。<br>自己实现序列化与反序列化过程需要重写writeObject()和readObject()</p>
</li>
<li><p>避免AutoBoxing</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Integer num = 0;</div><div class="line">for(int i = 0; i &lt; 100; i ++)&#123;</div><div class="line">    num += i;    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基础整型int占用4个字节，而Integer对象有16字节。</p>
</li>
<li><p>Adapter进行优化</p>
<p>复用convertView。<br>当快速滑动列表时（SCROLL_STATE_FLING），item中的图片或获取需要消耗资源的view，可以不显示出来；而处于停止滚动状 态（SCROLL_STATE_IDLE）则将那些view显示出来。</p>
</li>
<li><p>少用静态变量</p>
<p>静态变量属于全局变量，不会被GC回收，它们会一直占用内存。</p>
</li>
<li><p>内存复用</p>
<p>1). 有效利用系统自带的资源<br>重用系统资源：</p>
<ul>
<li>利用系统定义的id</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:id=&quot;@android:id/list&quot;</div></pre></td></tr></table></figure>
<ul>
<li><p>利用系统的图片资源</p>
</li>
<li><p>利用系统的字符串资源</p>
</li>
<li><p>利用系统的Style</p>
</li>
<li><p>利用系统的颜色定义</p>
</li>
</ul>
<p>2) 选用对象池<br>对象池：如果某个对象在创建时，需要较大的资源开销，那么可以将其放入对象池，即将对象保存起来，下次需要时直接取出使用，而不用再次创建对象。当然，维护对象池也需要一定开销，故要衡量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Message.obtain()</div><div class="line">Handler.obtainMessage()</div></pre></td></tr></table></figure>
</li>
</ol>
<p>使用对象池需要需要注意几点：<br>将对象放回池中，注意初始化对象的数据，防止存在脏数据<br>合理控制池的增长，避免过大，导致很多对象处于闲置状态<br>3）线程池：将线程对象放在池中供反复使用，减少反复创建线程的开销。<br>线程的创建和销毁都需要时间，当有大量的线程创建和销毁时，那么这些时间的消耗则比较明显，将导致性能上的缺失</p>
<ol>
<li><p>单线程模型中，使用非线程安全的类，如：StringBuilder，ArrayList等。</p>
</li>
<li><p>ViewPager限制加载数量<br>ViewPager同时缓存page数如果过多，那么第一次显示时，ViewPager所初始化的pager就会很多，这样pager累积渲染耗时就会增多，看起来就卡。</p>
</li>
<li><p>for循环</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for(int i = 0; i &lt; getCount(); i ++)&#123;</div><div class="line">    try&#123;        </div><div class="line">    &#125;catch()&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>getCount()方法提取</li>
<li>避免循环内部创建临时变量</li>
<li>避免循环内部try{}catch()</li>
</ul>
</li>
<li><p>使用注解替代枚举<br>android.support.annotation.IntDef，StringDef</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">//先定义 常量</div><div class="line">public static final int SUNDAY = 0;</div><div class="line">public static final int MONDAY = 1;</div><div class="line">public static final int TUESDAY = 2;</div><div class="line">public static final int WEDNESDAY = 3;</div><div class="line">public static final int THURSDAY = 4;</div><div class="line">public static final int FRIDAY = 5;</div><div class="line">public static final int SATURDAY = 6;</div><div class="line">@IntDef(&#123;SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY&#125;)</div><div class="line">@Retention(RetentionPolicy.SOURCE)</div><div class="line">public @interface WeekDays &#123;</div><div class="line">&#125;</div><div class="line">@WeekDays</div><div class="line">private int currentDay = SUNDAY;</div><div class="line">@WeekDays</div><div class="line">public int getCurrentDay() &#123;</div><div class="line">    return currentDay;</div><div class="line">&#125;</div><div class="line">public void setCurrentDay(@WeekDays int currentDay) &#123;</div><div class="line">    this.currentDay = currentDay;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>减少父类声明<br>减少List list = new ArrayList();<br>如果事先知道集合大小，则可以在构造方法中设置初始大小。</p>
</li>
<li><p>更优的数据结构<br>ArrayMap及SparseArray是Android的系统API，用于在一定情况下取代HashMap而达到节省内存的目的，对于key为int的HashMap尽量使用SparceArray替代，大概可以省30%的内存，而对于其他类型，ArrayMap对内存的节省实际并不明显，10%左右，但是数据量在千级以上时，查找速度可能会变慢。
　</p>
</li>
<li><p>谨慎使用多进程<br>现在很多App都不是单进程，为了保活，或者提高稳定性都会进行一些进程拆分，通常我们在Application的onCreate方法中会做很多初始化操作,但是多进程会导致Application初始化多次，为了避免不必要的初始化，建议按照进程(通过判断当前进程名)对应初始化。<br>Android应用可以支持开启多个进程。 通常的做法是这样</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;service</div><div class="line">android:name=&quot;.PushService&quot;</div><div class="line">android:process=&quot;:remote&quot;/&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class MyApplication extends Application &#123;</div><div class="line">    private static final String LOGTAG = &quot;MyApplication&quot;;</div><div class="line">    @Override</div><div class="line">    public void onCreate() &#123;</div><div class="line">        super.onCreate();</div><div class="line">        String currentProcessName = getCurrentProcessName();</div><div class="line">        if (getPackageName().equals(currentProcessName)) &#123;</div><div class="line">            //init for default process</div><div class="line">        &#125; else if (currentProcessName.endsWith(&quot;:remote&quot;)) &#123;</div><div class="line">            //init for netowrk process</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>合理使用StringBuffer,StringBuilder,String<br>在简单的字符串拼接中，String的效率是最高的，例如String s = “hello” + “world”;<br>如果你的字符串是来自另外的String对象的话，速度就没那么快了，例如：<br>   String str2 = “This is”;<br>   String str3 = “ a ”;<br>   String str4 = “ test”;<br>   String str1 = str2 +str3 + str4;<br>这里就要求使用StringBuilder了。
　　</p>
</li>
<li><p>珍惜Services资源<br>如果你的应用需要在后台使用service，除非它被触发并执行一个任务，否则其他时候Service都应该是停止状态。另外需要注意当这个service完成任务之后因为停止service失败而引起的内存泄漏。 当你启动一个Service，系统会倾向为了保留这个Service而一直保留Service所在的进程。IntentService。</p>
</li>
<li><p>减少bitmap占用的内存<br>BitmapFactory在解码图片时，可以带一个Options，有一些比较有用的功能，比如：</p>
<ul>
<li>inSampleSize<br>如果采样率为 2，那么读出来的图片只有原始图片的 1/4 大小，<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options options = new Options();</div><div class="line">options.inSampleSize = 2;</div><div class="line">Bitmap bitmap = BitmapFactory.decodeResource(getResources(), resId, options);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>宽高降为1 / 2，像素数降为1 / 4</p>
<ul>
<li>inJustDecodeBounds</li>
</ul>
<p>有时如果只是为了获取图片的大小就可以用这个，而不必直接加载整张图片。</p>
<ul>
<li>inPreferredConfig 指定图片格式</li>
</ul>
<p>支持的图片格式</p>
<p>| 格式 | 描述 |<br>| :—- | :—- |<br>|ALPHA_8|        只有一个alpha通道<br>|ARGB_4444|    这个从API 13开始已经废弃，因为质量太差<br>|ARGB_8888|    ARGB四个通道，每个通道8bit<br>|RGB_565|        每个像素占2Byte，其中红色占5bit，绿色占6bit，蓝色占5bit</p>
<p>默认会使用ARGB_8888，在这个模式下一个像素点将会占用4个byte，而对一些没有透明度要求或者图片质量要求不高的图片，可以使用RGB_565，一个像素只会占用2个byte，可以省下50%内存。</p>
<ul>
<li>使用Ashmem内存</li>
</ul>
<p>Ashmem内存区域是不能被Java应用直接使用的，但这其中有一些例外，而Bitmap是其中一个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options options = new BitmapFactory.Options();</div><div class="line">options.inPurgeable = true;</div><div class="line">options.inInputShareable = true;</div><div class="line">Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, data.length, options);</div></pre></td></tr></table></figure>
<p>缺点：<br>当系统内存不足时回收这个bitmap，如果一个被回收的bitmap在之后又要被使用，系统会重新decode，但是这个decode操作是发生在UI线程中的可能会造成掉帧现象，因此改做法已经被Google废弃掉，推荐使用 inBitmap。</p>
<ul>
<li>inBitmap<br>告知bitmap解码器去尝试使用已经存在的内存区域，新解码的bitmap会尝试去使用之前那张bitmap在heap中所占据的<code>pixel data</code>内存区域，而不是去问内存重新申请一块区域来存放bitmap。<br>使用<code>inBitmap</code>需要注意几个限制条件：<br>在<code>SDK 11 -&gt; 18</code>之间，重用的bitmap大小必须是一致的，例如给inBitmap赋值的图片大小为100x100，那么新申请的bitmap必须也为100x100才能够被重用。从<code>SDK19</code>开始，新申请的bitmap大小必须小于或者等于已经赋值过的bitmap大小。 新申请的bitmap与旧的bitmap必须有相同的解码格式，如果前面的bitmap是8888，那么就不能支持4444与565格式的bitmap了。</li>
<li>使用软引用对bitmap做缓存</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">private Map&lt;String, SoftReference&lt;Bitmap&gt;&gt; imageCache = new HashMap&lt;String, SoftReference&lt;Bitmap&gt;&gt;();</div><div class="line">public void addBitmapToCache(String path) &#123;</div><div class="line">    // 强引用的Bitmap对象</div><div class="line">    Bitmap bitmap = BitmapFactory.decodeFile(path);</div><div class="line">    // 软引用的Bitmap对象</div><div class="line">    SoftReference&lt;Bitmap&gt; softBitmap = new SoftReference&lt;Bitmap&gt;(bitmap);</div><div class="line">    // 添加该对象到Map中使其缓存</div><div class="line">    imageCache.put(path, softBitmap);</div><div class="line">&#125;</div><div class="line">// 通过SoftReference的get()方法得到Bitmap对象</div><div class="line">public Bitmap getBitmapByPath(String path) &#123;</div><div class="line">    // 从缓存中取软引用的Bitmap对象</div><div class="line">    SoftReference&lt;Bitmap&gt; softBitmap = imageCache.get(path);</div><div class="line">    if (softBitmap == null) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">    // 取出Bitmap对象，如果由于内存不足Bitmap被回收，将取得空</div><div class="line">    Bitmap bitmap = softBitmap.get();</div><div class="line">    return bitmap;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用软引用以后，在OutOfMemory异常发生之前，这些缓存的图片资源的内存空间可以被释放掉的，从而避免Crash发生。<br>需要注意的是，在垃圾回收器对这个Java对象回收前，SoftReference类所提供的get方法会返回Java对象的强引用，一旦垃圾线程回收该Java对象之后，get方法将返回null。所以在获取软引用对象的代码中，一定要判断是否为null，以免出现NullPointerException异常导致应用崩溃。</p>
<ul>
<li>图片缓存策略：内存缓存、硬盘缓存等</li>
</ul>
</li>
</ol>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://developer.android.com/topic/performance/memory.html" target="_blank" rel="external">https://developer.android.com/topic/performance/memory.html</a></p>
<p><a href="http://blog.csdn.net/qq_23191031/article/details/63685756" target="_blank" rel="external">Android性能优化详解内存优化的来龙去脉</a></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=2653578816&amp;idx=1&amp;sn=20b6160e92167dde676561f3a43d0860&amp;chksm=84b3b447b3c43d51c8042b58fef7dcb2755bdb4ceffaf8244b1e88acc6231411e3e9a5f0368f&amp;mpshare=1&amp;scene=24&amp;srcid=0407gek6TWkslG13uVNKgWnp&amp;key=3b2e3b347972bda0160ce87a12f2ac4023e07bae8d2643824f5099d643f67bc11fda267841bc5d474d01ae1bb79b1a07ea270e4f0e22c2a233e564a8f0513fdc8774006a07712f5dd523b4a48d7fb994&amp;ascene=0&amp;uin=MzU5MTI3NQ%3D%3D&amp;devicetype=iMac+MacBookPro11%2C5+OSX+OSX+10.11.6+build(15G1108" target="_blank" rel="external">Android 内存优化总结</a>)</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> 内存优化 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> 分享 </tag>
            
            <tag> 内存优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[创建 Android 库]]></title>
      <url>/2017/03/20/2017-05-01-Create%20an%20Android%20Library/</url>
      <content type="html"><![CDATA[<h4 id="创建-Android-库"><a href="#创建-Android-库" class="headerlink" title="创建 Android 库"></a>创建 Android 库</h4><p>Android 库在结构上与 Android 应用模块相同。它可以提供构建应用所需的一切内容，包括源代码、资源文件和 Android 清单。不过，Android 库将编译到您可以用作 Android 应用模块依赖项的 Android 归档 (AAR) 文件，而不是在设备上运行的 APK。与 JAR 文件不同，AAR 文件可以包含 Android 资源和一个清单文件，这样，除了 Java 类与方法外，您还可以捆绑布局和可绘制对象等共享资源。</p>
<a id="more"></a>
<p>库模块在以下情况下非常有用：</p>
<ul>
<li>构建使用某些相同组件（例如 Activity、服务或 UI 布局）的多个应用。</li>
<li>构建存在多个 APK 变体（例如免费版本和付费版本）的应用并且需要在两种版本中使用相同的核心组件。<br>在任何一种情况下，只需要将您希望重用的文件移动到库模块中，然后以依赖项的形式为每个应用模块添加库。本页面将说明如何执行这两个操作。</li>
</ul>
<h4 id="创建库模块"><a href="#创建库模块" class="headerlink" title="创建库模块"></a>创建库模块</h4><p>要在您的项目中创建一个新的库模块，请按以下步骤操作：</p>
<ol>
<li>点击 File &gt; New &gt; New Module。</li>
<li>在出现的 <code>Create New Module</code> 窗口中，依次点击 Android Library 和 Next。<br>还存在一个用于创建 Java 库的选项，可以构建传统的 JAR 文件。尽管 JAR 文件在大多数项目中都非常实用（尤其在您希望与其他平台共享代码时），但这种文件不允许您包含 Android 资源或清单文件，而后者对于 Android 项目中的代码重用非常有用。因此，本指南将侧重论述创建 Android 库。</li>
<li>为您的库命名，并为库中代码选择一个最低的 SDK 版本，然后点击 Finish。<br>在 Gradle 项目同步完成后，库模块将显示左侧的 Project 面板中。如果您未看到新模块文件夹，请确保将视图切换为 Android 视图。</li>
</ol>
<h4 id="将应用模块转换为库模块"><a href="#将应用模块转换为库模块" class="headerlink" title="将应用模块转换为库模块"></a>将应用模块转换为库模块</h4><p>如果您现有的应用模块包含您希望重用的所有代码，则可以按照以下步骤将其转换为库模块：</p>
<ol>
<li><p>打开现有应用模块的 build.gradle 文件。您应在顶部看到以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.application&apos;</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>按照下面所示更改插件分配：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.library&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>点击 Sync Project with Gradle Files。<br>就这么简单。模块的整个结构仍然相同，但是现在它将作为 Android 库运行，构建也将创建一个 AAR 文件，而不是 APK。</p>
</li>
</ol>
<h4 id="以依赖项形式添加您的库"><a href="#以依赖项形式添加您的库" class="headerlink" title="以依赖项形式添加您的库"></a>以依赖项形式添加您的库</h4><p>要在另一个应用模块中使用您的 Android 库的代码，请按以下步骤操作：</p>
<ol>
<li><p>通过两种方式之一将库添加到您的项目（如果您是在相同项目中创建的库模块，则该模块已经存在，您可以跳过此步骤）：</p>
<ul>
<li><p>添加已编译的 AAR（或 JAR）文件：</p>
<ul>
<li>点击 File &gt; New Module。</li>
<li>依次点击 Import .JAR/.AAR Package 和 Next。</li>
<li>输入 AAR 或 JAR 文件的位置，然后点击 Finish。</li>
</ul>
</li>
<li>将库模块导入到您的项目中：<ul>
<li>点击 File &gt; New &gt; Import Module。</li>
<li>输入库模块目录的位置，然后点击 Finish。<br>库模块将复制到您的项目中，因此您可以尽管编辑库代码。如果您希望维护一个版本的库代码，则此方法可能不是您想要的，您应按照上文所述导入编译的 AAR 文件。</li>
</ul>
</li>
</ul>
</li>
<li><p>确保库列在您 settings.gradle 文件的顶部，如下面名为“my-library-module”的库所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include &apos;:app&apos;, &apos;:my-library-module&apos;</div></pre></td></tr></table></figure>
</li>
<li><p>打开应用模块的 build.gradle 文件，并向 dependencies 块中添加一行新代码，如下面的片段所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile project(&quot;:my-library-module&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>点击 Sync Project with Gradle Files。<br>在上面的示例中，名为 my-library- module 的 Android 库模块成为 build.gradle 文件所在模块的构建依赖项。</p>
</li>
</ol>
<p>您的应用模块现在可以访问 Android 库中的任何代码和资源，库 AAR 文件在构建时已捆绑到您的 APK 中。</p>
<p>不过，如果希望单独共享 AAR 文件，则可以在 项目名称/模块名称/build/outputs/aar/ 中找到它，也可以通过点击 Build &gt; Make Project 的方式重新生成此文件。</p>
<h4 id="选择要设为公开的资源"><a href="#选择要设为公开的资源" class="headerlink" title="选择要设为公开的资源"></a>选择要设为公开的资源</h4><p>库中的所有资源在默认情况下均处于公开状态。要将所有资源隐式设为私有，您必须至少将一个特定的属性定义为公开。资源包括您项目的 res/ 目录中的所有文件，例如图像。要阻止您的库用户访问仅供内部使用的资源，您应通过声明一个或多个公开资源的方式来使用这种自动私有标识机制。</p>
<p>要删除某个公开资源，请将一个 声明添加到您的库的 public.xml 文件中。如果您之前尚未添加公开资源，则需要在您的库的 res/values/ 目录中创建 public.xml 文件。</p>
<p>下面的示例代码可以创建两个名称分别为 mylib_app_name 和 mylib_public_string 的公开字符串资源：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line">    &lt;public name=&quot;mylib_app_name&quot; type=&quot;string&quot;/&gt;</div><div class="line">    &lt;public name=&quot;mylib_public_string&quot; type=&quot;string&quot;/&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p>
<p>如果希望任何资源保持对使用您的库的开发者可见，您应当将其设为公开。例如，尽管 <code>v7 appcompat</code> 库中的大多数资源都是私有资源，但是为了支持 <code>Material Design</code>，控制工具栏小部件的属性应当公开。</p>
<p>将属性隐式设为私有不仅可以阻止您的库用户从内部库资源获得代码自动完成建议，还让您能够在不中断您的库客户端的情况下重命名或移除私有资源。私有资源不在代码自动完成和 Theme Editor 的作用范围内，并且如果您尝试引用私有资源，Lint 将显示警告。</p>
<h4 id="开发注意事项"><a href="#开发注意事项" class="headerlink" title="开发注意事项"></a>开发注意事项</h4><p>在开发您的库模块和相关应用时，请注意以下行为和限制。</p>
<p>将库模块引用添加至您的 Android 应用模块后，您可以设置它们的相对优先级。构建时，库会按照一次一个的方式与应用合并，并按照从低到高的优先级顺序。</p>
<ul>
<li>资源合并冲突<br>构建工具会将库模块中的资源与相关应用模块的资源合并。如果在两个模块中均定义了给定资源 ID，将使用应用中的资源。<br>如果多个 AAR 库之间发生冲突，将使用依赖项列表首先列出（位于 dependencies 块顶部）的库中的资源。<br>为了避免常用资源 ID 的资源冲突，请使用在模块（或在所有项目模块）中具有唯一性的前缀或其他一致的命名方案。</li>
<li>库模块可以包含 JAR 库<br>您可以开发一个自身包含 JAR 库的库模块；不过，您需要手动编辑相关应用模块的构建路径，并添加 JAR 文件的路径。</li>
<li>库模块可以依赖外部 JAR 库<br>您可以开发一个依赖于外部库（例如 Maps 外部库）的库模块。在这种情况下，相关应用必须针对包含外部库（例如 Google API 插件）的目标构建。另外也要注意，库模块和相关应用都必须在其清单文件的 <uses- library=""> 元素中声明外部库。</uses-></li>
<li>库模块不得包含原始资源<br>工具不支持在库模块中使用原始资源文件（保存在 assets/ 目录中）。应用使用的任何原始资源都必须存储在应用模块自身的 assets/ 目录中。</li>
<li>应用模块的 <code>minSdkVersion</code> 必须大于或等于库定义的版本<br>库作为相关应用模块的一部分编译，因此，库模块中使用的 API 必须与应用模块支持的平台版本兼容。</li>
<li>每个库模块都会创建自己的 R 类<br>在您构建相关应用模块时，库模块将先编译到 AAR 文件中，然后再添加到应用模块中。因此，每个库都有其自己的 R 类，并根据库的软件包名称命名。从主模块和库模块生成的 R 类会在所需的所有软件包（包括主模块的软件包和库的软件包）中创建。</li>
<li>库模块可能包含自己的 ProGuard 配置文件<br>通过将 ProGuard 配置文件添加到包含其 ProGuard 指令的库，您可以在自己的库上启用代码压缩。构建工具会为库模块将此文件嵌入到生成的 AAR 文件中。在您将库添加到应用模块时，库的 ProGuard 文件将附加至应用模块的 ProGuard 配置文件 (proguard.txt)。<br>通过将 ProGuard 文件嵌入到您的库模块中，您可以确保依赖于此库的应用模块不必手动更新其 ProGuard 文件即可使用库。当 ProGuard 在 Android 应用模块上运行时，它会同时使用来自应用模块和库的指令，因此您不应当只在库上运行 ProGuard。<br>要指定您的库的配置文件名称，请将其添加到 consumerProguardFiles 方法中，此方法位于您的库的 build.gradle 文件的 defaultConfig 块内。例如，以下片段会将 lib-proguard-rules.txt 设置为库的 ProGuard 配置文件：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    defaultConfig &#123;</div><div class="line">        consumerProguardFiles &apos;lib-proguard-rules.txt&apos;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>默认情况下，应用模块会使用库的发布构建，即使在使用应用模块的调试构建类型时亦是如此。要使用库中不同的构建类型，您必须将依赖项添加到应用的 build.gradle 文件的 dependencies 块中，并在库的 build.gradle 文件中将 publishNonDefault 设置为 true。例如，您应用的 build.gradle 文件中的以下代码段会使应用在应用模块于调试模式下构建时使用库的调试构建类型，以及在应用模块于发布模式下构建时使用库的发布构建类型：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    debugCompile project(path: &apos;:library&apos;, configuration: &apos;debug&apos;)</div><div class="line">    releaseCompile project(path: &apos;:library&apos;, configuration: &apos;release&apos;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>您还必须在自己库的 build.gradle 文件的 android 块内添加以下代码行，以便将此库的非发布配置展示给使用它的项目：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ...</div><div class="line">    publishNonDefault true</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>不过请注意，设置 publishNonDefault 会增加构建时间。<br>为了确保您的库的 ProGuard 规则不会将意外的压缩副作用施加到应用模块，请仅包含适当规则，停用不适用于此库的 ProGuard 功能。尝试协助开发者的规则可能会与应用模块或它的其他库中的现有代码冲突，因此不应包含这些规则。例如，您的库的 ProGuard 文件可以指定在应用模块的压缩期间需要保留的代码。<br>注：Jack 工具链仅支持 ProGuard 的部分压缩和模糊选项。</p>
<h4 id="AAR-文件详解"><a href="#AAR-文件详解" class="headerlink" title="AAR 文件详解"></a>AAR 文件详解</h4><p>AAR 文件的文件扩展名为 .aar，Maven 工件类型也应当是 aar。文件本身是一个包含以下强制性条目的 zip 文件：</p>
<ul>
<li>/AndroidManifest.xml</li>
<li>/classes.jar</li>
<li>/res/</li>
<li><p>/R.txt<br>此外，AAR 文件可能包含以下可选条目中的一个或多个：</p>
</li>
<li><p>/assets/</p>
</li>
<li>/libs/名称.jar</li>
<li>/jni/abi 名称/名称.so（其中 abi 名称 是 Android 支持的 ABI 之一）</li>
<li>/proguard.txt</li>
<li>/lint.jar</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://developer.android.com/studio/projects/android-library.html#aar-contents" target="_blank" rel="external">https://developer.android.com/studio/projects/android-library.html#aar-contents</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> 分享 </tag>
            
            <tag> Library </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World, Hexo]]></title>
      <url>/2017/03/10/2017-03-10-hello-world-hexo/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h4 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h4><h4 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h4 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h4 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h4 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        <categories>
            
            <category> Hexo </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Another Tag </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android进程间通信]]></title>
      <url>/2016/10/13/2016-10-14-Android%20ipc%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
      <content type="html"><![CDATA[<h4 id="进程间通信几种方式"><a href="#进程间通信几种方式" class="headerlink" title="进程间通信几种方式:"></a>进程间通信几种方式:</h4><p>文件<br>SharedPreferences<br>BroadcastReceiver<br>ContentProvider<br>AIDL</p>
<a id="more"></a>
<h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p>Serializable 和 Parcelable</p>
<p>（1）序列化 ID 的问题</p>
<p>（2）静态变量序列化</p>
<p>（3）Transient 关键字</p>
<p>（4）序列化存储规则</p>
<p>静态成员变量属于类，而不是对象，所以不会参与序列化；使用transient关键字标记的成员变量不参与序列化过程。</p>
<p>Serializable 序列化时会调用ObjectOutputStream.writeObject<br>ObjectInputStream.readObject()引用了大量反射机制，</p>
<p>自己实现序列化与反序列化过程需要重写writeObject()和readObject()</p>
<p>（5）多次writeObject问题</p>
<p>第二次写入对象时文件只增加了 5 字节，并且两个对象是相等的，这是为什么呢？<br>解答：Java 序列化机制为了节省磁盘空间，具有特定的存储规则，当写入文件的为同一对象时，并不会再将对象的内容进行存储，而只是再次存储一份引用，上面增加的 5 字节的存储空间就是新增引用和一些控制信息的空间。反序列化时，恢复引用关系，使得清单 3 中的 t1 和 t2 指向唯一的对象，二者相等，输出 true。该存储规则极大的节省了存储空间。</p>
<h4 id="1、SharedPreferences"><a href="#1、SharedPreferences" class="headerlink" title="1、SharedPreferences"></a>1、SharedPreferences</h4><p>取SharedPreferences实际上是在ContextImpl这个类中完成的。</p>
<p>1、context.getSharedPreferences(pref_name, mode)的流程：</p>
<p>A 在sSharedPrefs这个map(同步的)中以pref_name为键取SharedPreferencesImp对象sp。如果sp不为空并且对应的pref文件未被异常修改，就返回这个对象。否则进入B。</p>
<p>B 如果sp为空，重新生成一个SharedPreferenceImp对象并且加入到sSharedPrefs这个map中。</p>
<p>C 同步的：从pref文件中解析出map对象并用之替换SharedPreferenceImp对象中原有的存放pref键值对的mMap成员对象。如果pref文件解析异常导致map为null，就保持原有对象而不替换。 如果备份的pref文件(…pref_name.xml.bak)存在，就使用备份文件。</p>
<p>D 返回SharedPreferenceImp对象sp。</p>
<p>注意：sSharedPrefs在程序中是静态的：private static final HashMap sSharedPrefs = new HashMap(); 如果退出了程序但Context没有被清掉，那么下次进入程序仍然可能取到同一个对象。</p>
<p>2、从SharedPreference中取值getString(String key, String defValue)：<br>从SharedPreferencesImp对象的mMap成员对象中根据key取出相应的对象v。如果取得的对象v为空，返回默认对象defValue；否则，返回对象v。</p>
<p>3、commit过程：</p>
<p>A 在内存中提交，即用要提交的map去刷新已有的mMap对象。如果map对象中某个键的值指向editer对象自身，就代表要移除这个键值对。</p>
<p>B 将步骤A返回的MemoryCommitResult对象加入到写入本地的队列中，写入本地文件。在写入文件前，如果同名文件已经存在，则会原文件重命名为备份文件名，如果写入成功，才删除bak备份文件。</p>
<p>C 通知SharedPreferences的监听状态改变了。返回提交是否内存成功的状态。</p>
<p>4、EditorImpl内部类：<br>内部有一个Map成员对象mModified，用来保存将要提交的pref键值。<br>apply方法与commit方法的区别：前者先提交到内存中，再异步写到文件，并且不需要返回写入成功与否的状态；后者同步写入内存和文件。</p>
<p>5、MemoryCommitResult内部类：<br>用来存放Editor提交到内存的返回状态，包括是否有键值改变、将要写入文件中的map对象，写入文件成功与否等。<br>总结一下：要想及时并安全清除SharedPreferences一定要使用Editor去clear并commit，不要直接暴力地删除其xml文件。</p>
<p>6、commit（）和apply（）</p>
<p>writtenToDiskLatch是一个CountDownLatch，如果它的值大于0，那么commit在await上阻塞，在writtenToDiskLatch变为0时，才能继续往下走执行后面的notifyListeners。<br>writtenToDiskLatch初始值为1，在setDiskWriteResult执行完后，计数减1，await才会从阻塞中被唤醒继续往下执行。在writeToFile中，在真正完成写入后的地方会调用setDiskWriteResult。<br>再来看apply的实现，在另起一个线程把map中的数据写入到磁盘后，postWriteRunnable会被执行，它会去执行另一个Runnable – awaitCommit。awaitCommit中同样执行的是mcr.writtenToDiskLatch.await();，但要注意现在是在另一个线程中被执行的。<br>可见，writtenToDiskLatch保证了无论是commit还是apply，都必须在前一个的writeToFile完成后，才能开始新一个的commit或apply操作。</p>
<p>CountDownLatch<br>在实时系统中的使用场景<br>让我们尝试罗列出在java实时系统中CountDownLatch都有哪些使用场景。我所罗列的都是我所能想到的。如果你有别的可能的使用方法，请在留言里列出来，这样会帮助到大家。</p>
<ol>
<li>实现最大的并行性：有时我们想同时启动多个线程，实现最大程度的并行性。例如，我们想测试一个单例类。如果我们创建一个初始计数为1的CountDownLatch，并让所有线程都在这个锁上等待，那么我们可以很轻松地完成测试。我们只需调用 一次countDown()方法就可以让所有的等待线程同时恢复执行。</li>
<li>开始执行前等待n个线程完成各自任务：例如应用程序启动类要确保在处理用户请求前，所有N个外部系统已经启动和运行了。</li>
<li>死锁检测：一个非常方便的使用场景是，你可以使用n个线程访问共享资源，在每次测试阶段的线程数目是不同的，并尝试产生死锁。</li>
</ol>
<p>HashMap</p>
<p>SparseArray</p>
<p>ArrayMap</p>
<h4 id="2、BroadcastReceiver"><a href="#2、BroadcastReceiver" class="headerlink" title="2、BroadcastReceiver"></a>2、BroadcastReceiver</h4><p>它和Binder机制不一样的地方在于，广播的发送者和接收者事先是不需要知道对方的存在的<br>BroadcastReceiver(注册过程，发送接收)</p>
<p>（1）注册方式 静态注册，动态注册</p>
<p>（2）广播分类 粘性广播，有序广播，无序广播</p>
<p>（3）前台广播(10s超时)、后台广播(60s超时)（intent.FLAG_RECEIVER_FOREGROUND）</p>
<p>（4）并行队列 串行队列（BroadcastQueue）</p>
<p>1） 为intent添加FLAG_EXCLUDE_STOPPED_PACKAGES标记； </p>
<p>2） 处理和package相关的广播； </p>
<p>3） 处理其他一些系统广播； </p>
<p>4） 判断当前是否有权力发出广播； </p>
<p>5） 如果要发出sticky广播，那么要更新一下系统中的sticky广播列表； </p>
<p>6） 查询和intent匹配的静态receivers； </p>
<p>7） 查询和intent匹配的动态receivers； </p>
<p>8） 尝试向并行receivers递送广播； </p>
<p>9） 整合（剩下的）并行receivers，以及静态receivers，形成一个串行receivers表； </p>
<p>10） 尝试逐个向串行receivers递送广播。</p>
<p>RegistReceiver</p>
<p><img src="/images/binder/RegistReceiver.png" alt="RegisterReceiver"></p>
<p>SendBroadcast</p>
<p><img src="/images/binder/SendBroadcast.png" alt="SendBroadcast"></p>
<p>图：客户进程中的mReceivers表</p>
<p>mReceivers<br><img src="/images/binder/mReceivers.png" alt="mReceivers"></p>
<p>receives_list</p>
<p><img src="/images/binder/receives_list.png" alt="RegisterReceiver"></p>
<p>该表的key项是我们比较熟悉的Context，也就是说可以是Activity、Service或Application。而value项则是另一张“子哈希表”。这是个“表中表”的形式。言下之意就是，每个Context（比如一个activity），是可以注册多个receiver的，这个很好理解。mReceivers里的“子哈希表”的key值为BroadcastReceiver，value项为ReceiverDispatcher，示意图如下：</p>
<p>到这里其实开始走两个分支，</p>
<p>1，如果是动态注册的receiver，其实可以知道，运行进程是活的，接收对象是存在的，deliverToRegisteredReceiverLocked(r, (BroadcastFilter)target, false)，</p>
<p>2，如果是静态注册的receiver，运行进程不确定是否存活，接收对象不存在，如果进程未拉起，mService.startProcessLocked()，启动接收进程然后继续scheduleBroadcastsLocked()循环，下次进入processCurBroadcastLocked(r, app)。既如果目标进程未启动，这里是会拉起来的。如果进程已启动，则processCurBroadcastLocked(r, app)分发广播。</p>
<h4 id="4、AIDL"><a href="#4、AIDL" class="headerlink" title="4、AIDL"></a>4、AIDL</h4><p>AIDL（Messenger） in out inout定向tag</p>
<p>支持数据类型如下:</p>
<ol>
<li><p>Java 的原生类型</p>
</li>
<li><p>String 和CharSequence</p>
</li>
<li><p>List 和 Map ,List和Map 对象的元素必须是AIDL支持的数据类型；  以上三种类型都不需要导入(import)</p>
</li>
<li><p>AIDL 自动生成的接口  需要导入(import)</p>
</li>
<li><p>实现android.os.Parcelable 接口的类.  需要导入(import)。 </p>
</li>
</ol>
<p>AIDL中in，out和inout的区别</p>
<p>(1)   in：只能在客户端设置值，传入服务端，服务端获取客户端设置的值<br>out：用于在服务端设置值，服务端设置这个值后，客户端也可以得到这个由服务端设置的值，客户端如果有设置初始值，到了服务端会得不到这个值<br>inout:服务端可以得到客户端设置的值，客户端也可以得到服务端设置的值</p>
<p>基本数据类型参数只能是in类型</p>
<p>IInterface IBinder Binder Bundle Parcel Parcelable</p>
<p>IBinder是远程对象的基本接口，是为高性能而设计的轻量级远程调用机制的核心部分。但它不仅用于远程调用，也用于进程内调用。这个接口定义了与远程对象交互的协议。不要直接实现这个接口，而应该从Binder派生。</p>
<p>IBinder的主要API是transact()，与它对应另一方法是Binder.onTransact()。第一个方法使你可以向远端的IBinder对象发送发出调用，第二个方法使你自己的远程对象能够响应接收到的调用。IBinder的API都是同步执行的，比如transact()直到对方的Binder.onTransact()方法调用完成后才返回。调用发生在进程内时无疑是这样的，而在进程间时，在IPC的帮助下，也是同样的效果。</p>
<p>通过transact()发送的数据是Parcel，Parcel是一种一般的缓冲区，除了有数据外还带有一些描述它内容的元数据。元数据用于管理IBinder对象的引用，这样就能在缓冲区从一个进程移动到另一个进程时保存这些引用。这样就保证了当一个IBinder被写入到Parcel并发送到另一个进程中，如果另一个进程把同一个IBinder的引用回发到原来的进程，那么这个原来的进程就能接收到发出的那个IBinder的引用。这种机制使IBinder和Binder像唯一标志符那样在进程间管理。</p>
<p>系统为每个进程维护一个存放交互线程的线程池。这些交互线程用于派送所有从另外进程发来的IPC调用。例如：当一个IPC从进程A发到进程B，A中那个发出调用的线程(这个应该不在线程池中)就阻塞在transact()中了。进程B中的交互线程池中的一个线程接收了这个调用，它调用Binder.onTransact()，完成后用一个Parcel来做为结果返回。然后进程A中的那个等待的线程在收到返回的Parcel后得以继续执行。实际上，另一个进程看起来就像是当前进程的一个线程，但不是当前进程创建的。<br>Binder机制还支持进程间的递归调用。例如，进程A执行自己的IBinder的transact()调用进程B的Binder，而进程B在其Binder.onTransact()中又用transact()向进程A发起调用，那么进程A在等待它发出的调用返回的同时，还会用Binder.onTransact()响应进程B的transact()。总之Binder造成的结果就是让我们感觉到跨进程的调用与进程内的调用没什么区别。</p>
<p>当操作远程对象时，你经常需要查看它们是否有效，有三种方法可以使用：</p>
<p>1 isBindAlive()。</p>
<p>2 如果目标进程不存在，那么调用pingBinder()时返回false。</p>
<p>3 可以用linkToDeath()方法向IBinder注册一个IBinder.DeathRecipient，在IBinder代表的进程退出时被调用。<br>要实现IBinder来支持远程调用，应从Binder类派生一个类。Binder实现了IBinder接口。但是一般不需要直接实现此类，而是跟据你的需要由开发包中的工具生成，这个工具叫AIDL。你通过AIDL语言定义远程对象的方法，然后用AIDL工具生成Binder的派生类，然后就可使用之。然而，可是，但是，当然，你也可以直接从Binder类派生以实现自定义的RPC调用，或只是实例化一个原始的Binder对象直接作为进程间共享的令牌来使用。</p>
<p>1、客户端发出绑定请求，服务端返回一个Binder对象，该对象能处理跨进程请求，而客户端拿到的是Binder对象的引用，Binder的实体是在服务端的。客户端执行asInterface()方法，如果客户端和服务端处于同一进程，则直接返回服务端的Stub对象本身，如果处于不同进程，则返回的是Stub.proxy代理类对象。</p>
<p>2、客户端发送远程请求（addPerson或者getPersonList)，此时客户端线程挂起，Binder拿到数据后，对数据进行处理如在不同进程，会把数据写入Parcel，调用Transact方法。</p>
<p>3、触发onTransact方法，该方法运行在Binder线程池，方法中会调用到服务端实现的接口方法，当数据处理完毕后，返回reply值，经过Binder返回客户端，此时客户端线程被唤醒。</p>
<p>am_proxy.jpg<br><img src="/images/binder/am_proxy.jpg" alt="am_proxy.jpg"></p>
<p>AMS基本架构</p>
<p><img src="/images/binder/ams.png" alt="ams"></p>
<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="http://blog.csdn.net/luoshengyang" target="_blank" rel="external">老罗的Android之旅</a></p>
<p><a href="https://my.oschina.net/youranhongcha/blog/226274" target="_blank" rel="external">品茗论道说广播(Broadcast内部机制讲解)</a></p>
<p><a href="http://www.cnblogs.com/xingchenkn/p/3637137.html" target="_blank" rel="external">Android ActivityManagerService 基本介绍</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> 进程间通信 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> 分享 </tag>
            
            <tag> 进程间通信 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android APK 安装过程详解]]></title>
      <url>/2016/09/10/2016-09-10-Android%20APK%20%E5%AE%89%E8%A3%85%E8%BF%87%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h4 id="APK-安装过程"><a href="#APK-安装过程" class="headerlink" title="APK 安装过程"></a>APK 安装过程</h4><p>开发 Android 应用后，一般都会安装到手机上去运行，了解应用是如何安装到手机上的，可以更好的理解应用的本质，理解应用是如何运行的，在自己开发的应用遇到一些问题时，会从更深层次去分析，快速定位找到原因。这一篇文章中我们就来详细分析一下应用是如何安装的。</p>
<a id="more"></a>
<h4 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h4><p>要想详细了解 APK 的安装过程，需要了解一些基础概念，包括：</p>
<ol>
<li>什么是 APK</li>
<li>什么是 DEX 文件和 ODEX 文件</li>
<li>什么是 OAT 文件</li>
<li>什么是 Dalvik 和 ART</li>
</ol>
<p>总体来说是：APK 是 Android 应用安装包，Dalvik 和 ART 都是 Android 运行环境，但是由于 Dalvik 存在一些不足，ART 是在高版本手机上替换 Dalvik 的。应用的安装过程就是将 APK 中内容解压处理的过程，Dalvik 会将 APK 中内容 DEX 转化为 ODEX，ART 会将其转化为 OAT。下面对这些问题分别进行分析。</p>
<h4 id="什么是-APK"><a href="#什么是-APK" class="headerlink" title="什么是 APK"></a>什么是 APK</h4><p>APK，即 Android Package，Android 安装包。不同平台的安装文件格式都不同，类似于 Windows 的安装包是二进制的 exe 格式，Mac 的安装包是 dmg 格式。APK 的可以在 Android 上执行安装，APK 的本质是一个 Zip 压缩包，只是后缀被修改为 apk，其中打包了源代码编译出的 class.dex、一些图片视频资源文件和一些 Native 库文件。APK 文件与 Zip 文件最大的一个不同是 APK 包含签名信息，用于保证安装包安全不被修改。</p>
<h4 id="什么是-DEX-文件和-ODEX-文件"><a href="#什么是-DEX-文件和-ODEX-文件" class="headerlink" title="什么是 DEX 文件和 ODEX 文件"></a>什么是 DEX 文件和 ODEX 文件</h4><p>说起 DEX 文件，不得不提 class 文件。Java 跨平台是由源代码编译出的 class 文件分别运行在不同平台的虚拟机上，由虚拟机屏蔽了不同平台的差异。如图：<br><img src="/images/apk/apk_install_1.jpeg" alt="apk"></p>
<p>但是由于 Android 系统针对手持设备，对 Dalvik 虚拟机进行了优化，主要包括：</p>
<ol>
<li>将原来 class 文件进行优化，例如将其中的常量冗余信息进行合并，提高虚拟机解析效率；</li>
<li>修改 JVM 运行时基于栈的数据结构修改为 Dalvik 基于寄存器的数据结构，数据访问方式更快，运行效率更高。</li>
</ol>
<p>这种情况下，原来的 .class 文件就有些不适用了，因此，出现了 dex 文件格式，它是源代码编译后打包生成的文件。它是 APK 的一个组成部分。</p>
<p>ODEX 文件是 Dalvik 将 DEX 文件中可执行文件——class.dex——文件解压出来后，存储在本地后生成的。因为 Android 系统无法直接运行 APK 文件，需要将其解压后找到 class.dex 文件后才可以运行，因此在安装时就将其取出放在本地，可以提高应用启动速度。除了这个原因，其实在将 class.dex 转换成 ODEX 文件过程中，还根据当前系统进行了优化（直接复制到其他系统不一定可以运行），文件大小会减少，ODEX 文件比 DEX 文件更难反编译，这也在一定程度上提高了安全性，因此在一些系统预装或系统级应用大多采用了 ODEX 优化。</p>
<p>一般 ODEX 不直接运行，在 Dalvik 运行 ODEX 时，需要通过 JIT 进行优化，提高运行效率。JIT 是一种在运行时同步将字节码转化成机器码的过程，Dalvik 直接运行转化后的机器码，这会导致部分的内存和时间开销，但是整体来说，在某些情况下是会提高系统性能的。（有些动态编译器，可能根据经验或尝试编译，优化这一过程，可能运行次数越多，优化效果越好）</p>
<h4 id="什么是-OAT-文件"><a href="#什么是-OAT-文件" class="headerlink" title="什么是 OAT 文件"></a>什么是 OAT 文件</h4><p>OAT 文件是 ART 运行的文件，是一种二进制可运行文件，包含 DEX 文件和编译出的本地机器指令文件，其文件格式类似于网络数据报文，包含文件头和文件体，文件头的 oatdata、oatexec 和 oatlastword 字段分别描述 DEX 文件位置和本地机器指令的起止位置。因为 OAT 文件包含 DEX 文件，因此比 ODEX 文件占用空间更大，由于其在安装时经过了 ART 的处理，ART 加载 OAT 文件后不需要经过处理就可以直接运行，它没有了从字节码装换成机器码的过程，因此运行速度更快。可以理解为 JIT 从运行时才解析提前到了安装时解析，安装变慢，运行变快。<br>通过这种方式编译后，我们来看下生成的代码是怎样的。AspectJ的原理实际上是在编译的时候，根据一定的规则解析，然后插入一些代码，通过aspectj生成的代码，会在Build目录下：</p>
<h4 id="什么是-Dalvik-和-ART"><a href="#什么是-Dalvik-和-ART" class="headerlink" title="什么是 Dalvik 和 ART"></a>什么是 Dalvik 和 ART</h4><p>上面提到了 Dalvik 和 ART，Dalvik 和 ART 是 Android 平台实现的 JAVA 虚拟机。用于解析 DEX 文件、ODEX 文件和OAT 文件。</p>
<p><img src="/images/apk/apk_install_2.jpeg" alt="apk"></p>
<p>ART 即 Android Runtime，Android 运行时，由于 Android 系统会运行在不同的设备上，底层硬件不同，Linux 系统屏蔽了一些这些系统的细节，但是直接在 Linux 上开发应用太难，实现成本太高，为了屏蔽 Linux 的细节，Google 创建出了 Dalvik 和 ART，对 Linux 进行了再一次封装，这样，使用 Google 提供的集成开发环境 SDK，就可以轻松开发应用了，Dalvik 与 ART 的关系是 ART 用来替换 Dalvik 的。Dalvik 在低版本（4.4 以下）的手机上使用作为 Android 运行环境，但是由于其有一些不足，在高版本的 Android 系统上 ART 用来替换 Dalvik，现在市场上 ART 的占有率已经超过了 70%。</p>
<p>ART 是 Android 应用的运行模式，在这种模式下，Android 应用在安装后，会进行一次预编译，将应用安装包中的字节码转换成机器语言存储在本地（系统只能运行二进制程序），这样，应用在运行时，可以直接执行这些二进制程序。相比较于 Dalvik 来说，Dalvik 的做法是在应用安装后，直接将字节码存储起来，在每次运行时，需要将代码编译成机器语言，这样在运行程序时，就比 ART 慢了一些。ART 这样做导致了安装后应用所占的空间更大，安装时间更长，但是对于经常使用的应用，这样做是值得的。</p>
<h4 id="APK-是如何安装的呢？"><a href="#APK-是如何安装的呢？" class="headerlink" title="APK 是如何安装的呢？"></a>APK 是如何安装的呢？</h4><p>了解了以上的知识，理解应用安装就简单了，我们整体看一下应用是如何安装的。</p>
<p>程序的源代码，首先经过 SDK 编译成 DEX 文件，DEX 文件和一些资源文件（图片、视频等）、Native Code（C 语言等编译出的 .so 文件）会直接打包进 APK。安装 APK 的过程，其实是安装包解压过程。资源文件、二进制库等解压后直接存储在本地，DEX 文件不仅仅解压，会根据系统的运行环境，采用不同的处理方式，被处理成不同格式的文件存储在本地，等待程序启动调用，这样就完成了应用的安装过程。</p>
<p><img src="/images/apk/apk_install_3.jpeg" alt="apk"></p>
<p>总结</p>
<p>这一篇文章中，我们详细介绍了 Android APK 的安装过程，分析了 Dalvik 和 ART 的不同以及安装过程的不同。</p>
<h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="https://mp.weixin.qq.com/s/37wjSQs1HWVfX0xL27NjBg" target="_blank" rel="external">Android APK 安装过程</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> APK </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android软键盘挡住输入框的解决方案]]></title>
      <url>/2016/08/12/2016-08-10-Android%E8%BD%AF%E9%94%AE%E7%9B%98%E6%8C%A1%E4%BD%8F%E8%BE%93%E5%85%A5%E6%A1%86%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h4 id="Android软键盘挡住输入框的解决方案"><a href="#Android软键盘挡住输入框的解决方案" class="headerlink" title="Android软键盘挡住输入框的解决方案"></a>Android软键盘挡住输入框的解决方案</h4><p>在Android开发的路上，『软键盘挡住了输入框』这个坑，可谓是一个旷日持久的巨坑，我们慢慢看。</p>
<h4 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h4><p>最基本的情况：在页面底部有一个EditText，如果不做任何处理，那么在软键盘弹出的时候，就有可能会挡住EditText。<br>对于这种情况的处理其实很简单，只需要在AndroidManifest文件中对activity设置：<code>android:windowSoftInputMode</code>的值<code>adjustPan</code>或者<code>adjustResize</code>即可，像这样：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:name=&quot;.MainActivity&quot;</div><div class="line">    android:windowSoftInputMode=&quot;adjustPan&quot;  &gt;</div><div class="line">    ...</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure>
<p>一般来说，他们都可以解决问题，当然，<code>adjustPan</code>跟<code>adjustResize</code>的效果略有区别。</p>
<p><code>adjustPan</code>是把整个界面向上平移，使输入框露出，不会改变界面的布局；<br><code>adjustResize</code>则是重新计算弹出软键盘之后的界面大小，相当于是用更少的界面区域去显示内容，输入框一般自然也就在内了。</p>
<p>加上WebView试试看？坑来了……<br>上面的入门篇中，软键盘是由原生的EditText触发弹出的。而在H5、Hybrid几乎已经成为App标配的时候，我们经常还会碰到的情况是：软键盘是由WebView中的网页元素所触发弹出的。</p>
<h4 id="情况描述"><a href="#情况描述" class="headerlink" title="情况描述"></a>情况描述</h4><p>这时候，情况就会变得复杂了:</p>
<p>首先，页面是非全屏模式的情况下，给activity设置adjustPan会失效。<br>其次，页面是全屏模式的情况，adjustPan跟adjustResize都会失效。</p>
<p>解释一下，这里的全屏模式即是页面是全屏的，包括Application或activity使用了Fullscreen主题、使用了『状态色着色』、『沉浸式状态栏』、『ImmersiveMode』等等。总之，基本上只要是App自己接管了状态栏的控制，就会产生这种问题。</p>
<p>下面这个表格可以简单列举了具体的情况。</p>
<table>
<thead>
<tr>
<th>name</th>
<th style="text-align:center">age</th>
<th style="text-align:center">age</th>
</tr>
</thead>
<tbody>
<tr>
<td>LearnShare</td>
<td style="text-align:center">12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>Mike</td>
<td style="text-align:center">32</td>
<td style="text-align:center">32</td>
</tr>
</tbody>
</table>
<p>为什么说它是个坑？”issue 5497″<br>上面表格的这种情况并非是Google所期望的，理想的情况当然是它们都能正常生效才对——所以这其实是Android系统本身的一个BUG。</p>
<p>为什么文章开头说这是个坑呢？<br>——因为这个BUG从Android1.x时代（2009年）就被报告了，而一直到了如今的Android7.0（2016年）还是没有修复……/(ㄒoㄒ)/<br>可以说这不仅是个坑，而且还是个官方挖的坑~</p>
<p>“issue 5497″，详情传送门 ☞ Issue 5497 – android -WebView adjustResize windowSoftInputMode breaks when activity is fullscreen – Android Open Source Project – Issue Tracker – Google Project Hosting</p>
<p>当然了，不管坑是谁挖的，最终还是要开发者来解决。</p>
<p>遇到坑之后，有两种方法可以过去：躲，或者填。</p>
<ul>
<li>躲坑姿势<br>如前文所示，出现坑的条件是：带有WebView的activity使用了全屏模式或者adjustPan模式。<br>那么躲坑的姿势就很简单了——<br>如果activity中有WebView，就不要使用全屏模式，并且把它的windowSoftInputMode值设为adjustResize就好了嘛</li>
<li>填坑姿势<br>但总有些时候，是需要全屏模式跟WebView兼得的，这时候，躲坑就不行了，我们需要一个新的填坑的姿势。幸好，开发者的智慧是无穷的，这个坑出现了这么多年，还是有人找到了一些解决方案的。</li>
</ul>
<h4 id="AndroidBug5497Workaround"><a href="#AndroidBug5497Workaround" class="headerlink" title="AndroidBug5497Workaround"></a>AndroidBug5497Workaround</h4><p>我个人认为最好的解决方案是这个：AndroidBug5497Workaround，只需要一个神奇的AndroidBug5497Workaround类。</p>
<p>看名字就知道，它是专门用来对付”5497″问题的，使用步骤也是超级简单：</p>
<p>把AndroidBug5497Workaround类复制到项目中<br>在需要填坑的activity的<code>onCreate</code>方法中添加一句<code>AndroidBug5497Workaround.assistActivity(this)</code>即可。<br>经过测试，基本在各个Android版本上都可用，效果基本与设置了adjustResize相当。</p>
<p>来自我厂App的某个使用WebView的全屏模式Activity页面，从左到右分别是：没有软键盘的样式、软键盘挡住输入框的效果、以及使用AndroidBug5497Workaround之后的最终效果。</p>
<h4 id="它的原理是什么？"><a href="#它的原理是什么？" class="headerlink" title="它的原理是什么？"></a>它的原理是什么？</h4><p>这个炫酷AndroidBug5497Workaround类，其实并不是很复杂，只有几十行代码，先贴在这里：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public class AndroidBug5497Workaround &#123;</div><div class="line">    // For more information, see https://code.google.com/p/android/issues/detail?id=5497</div><div class="line">    // To use this class, simply invoke assistActivity() on an Activity that already has its content view set.</div><div class="line"></div><div class="line">    public static void assistActivity (Activity activity) &#123;</div><div class="line">        new AndroidBug5497Workaround(activity);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private View mChildOfContent;</div><div class="line">    private int usableHeightPrevious;</div><div class="line">    private FrameLayout.LayoutParams frameLayoutParams;</div><div class="line"></div><div class="line">    private AndroidBug5497Workaround(Activity activity) &#123;</div><div class="line">        FrameLayout content = (FrameLayout) activity.findViewById(android.R.id.content);</div><div class="line">        mChildOfContent = content.getChildAt(0);</div><div class="line">        mChildOfContent.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() &#123;</div><div class="line">            public void onGlobalLayout() &#123;</div><div class="line">                possiblyResizeChildOfContent();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        frameLayoutParams = (FrameLayout.LayoutParams) mChildOfContent.getLayoutParams();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void possiblyResizeChildOfContent() &#123;</div><div class="line">        int usableHeightNow = computeUsableHeight();</div><div class="line">        if (usableHeightNow != usableHeightPrevious) &#123;</div><div class="line">            int usableHeightSansKeyboard = mChildOfContent.getRootView().getHeight();</div><div class="line">            int heightDifference = usableHeightSansKeyboard - usableHeightNow;</div><div class="line">            if (heightDifference &gt; (usableHeightSansKeyboard/4)) &#123;</div><div class="line">                // keyboard probably just became visible</div><div class="line">                frameLayoutParams.height = usableHeightSansKeyboard - heightDifference;</div><div class="line">            &#125; else &#123;</div><div class="line">                // keyboard probably just became hidden</div><div class="line">                frameLayoutParams.height = usableHeightSansKeyboard;</div><div class="line">            &#125;</div><div class="line">            mChildOfContent.requestLayout();</div><div class="line">            usableHeightPrevious = usableHeightNow;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private int computeUsableHeight() &#123;</div><div class="line">        Rect r = new Rect();</div><div class="line">        mChildOfContent.getWindowVisibleDisplayFrame(r);</div><div class="line">        return (r.bottom - r.top);// 全屏模式下： return r.bottom</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码大致是做了这么几件事：</p>
<ul>
<li>找到activity的根View<br>看一下入口的代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FrameLayout content = (FrameLayout) activity.findViewById(android.R.id.content);</div><div class="line">mChildOfContent = content.getChildAt(0);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>其中，第一行中的android.R.id.content所指的View，是Android所有Activity界面上开发者所能控制的区域的根View。</p>
<p> 如果Activity是全屏模式，那么android.R.id.content就是占满全部屏幕区域的。<br>如果Activity是普通的非全屏模式，那么android.R.id.content就是占满除状态栏之外的所有区域。<br>其他情况，如Activity是弹窗、或者7.0以后的分屏样式等，android.R.id.content也是弹窗的范围或者分屏所在的半个屏幕——这些情况较少，就暂且不考虑了。<br> 我们经常用的setContentView(View view)/setContent(int layRes)其实就是把我们指定的View或者layRes放到android.R.id.content里面，成为它的子View。</p>
<p> 所以，然后，第二行<code>content.getChildAt(0)</code>获取到的mChildOfContent，其实也就是用以获取到我们用setContentView放进去的View。</p>
<ul>
<li>设置一个Listener监听View树变化<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mChildOfContent.getViewTreeObserver().addOnGlobalLayoutListener(&#123; //简化了写法</div><div class="line">        possiblyResizeChildOfContent();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>View.getViewTreeObserver()</code>可以获取一个ViewTreeObserver对象——这个对象是一个观察者，专门用以监听当前View树所发生的一些变化。这里所注册的addOnGlobalLayoutListener，就是会在当前的View树的全局布局（GlobalLayout）发生变化、或者其中的View可视状态有变化时，进行通知回调。</p>
<p> 『软键盘弹出』，则是会触发这个事件的一个源。 (软键盘弹出会使GlobalLayout发生变化)</p>
<p> 也就是说，现在能监听到『软键盘弹出』的事件了。</p>
<ul>
<li>界面变化之后，获取”可用高度”<br>当软键盘弹出了之后，接下来的事情是获取改变之后的界面的可用高度（可以被开发者用以显示内容的高度）。<br>直接看代码：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private int computeUsableHeight() &#123;</div><div class="line">    Rect rect = new Rect();</div><div class="line">    mChildOfContent.getWindowVisibleDisplayFrame(rect);</div><div class="line">    // rect.top其实是状态栏的高度，如果是全屏主题，直接 return rect.bottom就可以了</div><div class="line">    return (rect.bottom - rect.top);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>View.getWindowVisibleDisplayFrame(Rect rect)</code>，这行代码能够获取到的Rect——就是界面除去了标题栏、除去了被软键盘挡住的部分，所剩下的矩形区域</p>
<p>也可以看出：<br>rect.top值，其实就是标题栏的高度。（实际上，这也常常被用作为获取标题栏高度的方法）<br>屏幕高度-rect.bottom，是软键盘的高度。（获取软键盘高度的方法也出现了）<br> 这时，就有：</p>
<p> 全屏模式下，可用高度 = rect.bottom<br> 非全屏模式，可用高度 = rect.bottom – rect.top</p>
<ul>
<li>最后一步，重设高度<br>我们计算出的可用高度，是目前在视觉效果上能看到的界面高度。但当前界面的实际高度是比可用高度要多出一个软键盘的距离的。<br>所以，最后一步，就是把界面高度置为可用高度——大功告成。<pre><code>private void possiblyResizeChildOfContent() {
     int usableHeightNow = computeUsableHeight();
     if (usableHeightNow != usableHeightPrevious) {
         int usableHeightSansKeyboard = mChildOfContent.getRootView().getHeight();
         int heightDifference = usableHeightSansKeyboard - usableHeightNow;
         if (heightDifference &gt; (usableHeightSansKeyboard/4)) {
             // keyboard probably just became visible
             frameLayoutParams.height = usableHeightSansKeyboard - heightDifference;
         } else {
             // keyboard probably just became hidden
             frameLayoutParams.height = usableHeightSansKeyboard;
         }
         mChildOfContent.requestLayout();
         usableHeightPrevious = usableHeightNow;
     }
 }
</code></pre>上面的代码里添加了一个”<code>heightDifference &gt; (usableHeightSansKeyboard/4)</code>”的判断，这是为了去除无谓的干扰。因为能触发OnGlobalLayout事件的原因有很多，不止是软键盘的弹出变化，还包括各种子View的隐藏显示变化等，它们对界面高度的影响有限。加上了这个判断之后，只有界面的高度变化超过1/4的屏幕高度，才会进行重新设置高度，基本能保证代码只响应软键盘的弹出。</li>
</ul>
<h4 id="总结起来，就是这样："><a href="#总结起来，就是这样：" class="headerlink" title="总结起来，就是这样："></a>总结起来，就是这样：</h4><p>普通Activity（不带WebView），直接使用<code>adjustpan</code>或者<code>adjustResize</code><br>如果带WebView：</p>
<ul>
<li>如果非全屏模式，可以使用adjustResize</li>
<li>如果是全屏模式，则使用AndroidBug5497Workaround进行处理。<br>OK，以上就是一段关于『软键盘挡住输入框』的爬坑之旅。</li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> 软键盘 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android绘制相关]]></title>
      <url>/2016/05/10/2016-05-10-Android%E5%B8%83%E5%B1%80%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h4 id="Android绘制相关"><a href="#Android绘制相关" class="headerlink" title="Android绘制相关"></a>Android绘制相关</h4><p>Android系统显示原理<br>Android的显示过程简单概括为：Adnroid应用程序把经过测量、布局、绘制后的<code>surface</code>缓存数据，通过SurfaceFlinger把数据渲染到屏幕上</p>
<a id="more"></a>
<h4 id="UI优化"><a href="#UI优化" class="headerlink" title="UI优化"></a>UI优化</h4><ol>
<li><p>Overdraw的检测</p>
<p>设置 -&gt; 开发者选项 -&gt; 调试GPU过度绘制 -&gt; 显示GPU过度绘制<br>对比一张Overdraw的参考图：<br><img src="/images/memory/overdraw.png" alt="overdraw"></p>
<p>移除Activity的默认背景。 </p>
<p>Activity中Fragment背景 </p>
<p>ListView背景 </p>
<p>ListView的Header背景和item背景 </p>
</li>
<li><p>减少不必要的嵌套</p>
<p>使用Hierarchy Viewer查看布局层级</p>
</li>
</ol>
<p><img src="/images/memory/hierarchy_view.jpeg" alt="hierarchy_view"></p>
<p> <code>&lt;include&gt;</code>标签可以允许在一个布局当中引入另外一个布局。</p>
<p> <code>&lt;merge&gt;</code>标签是作为<include>标签的一种辅助扩展来使用的，它的主要作用是为了防止在引用布局文件时产生多余的布局嵌套。</include></p>
<p> <code>&lt;ViewStub&gt;</code>虽说也是View的一种，但是它没有大小，没有绘制功能，也不参与布局，资源消耗非常低，将它放置在布局当中基本可以认为是完全不会影响性能的</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> View </tag>
            
            <tag> 绘制 </tag>
            
            <tag> Blog </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android hot-fix热修复]]></title>
      <url>/2016/04/14/2016-04-14-Android%20hot-fix/</url>
      <content type="html"><![CDATA[<h4 id="AndFix"><a href="#AndFix" class="headerlink" title="AndFix"></a>AndFix</h4><hr>
<p>项目地址：<a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">https://github.com/alibaba/AndFix</a></p>
<p>AndFix is a solution to fix the bugs online instead of redistributing Android App.<br>Andfix is an acronym for “Android hot-fix”.<br>AndFix supports Android version from 2.3 to 6.0, both ARM and X86 architecture, both Dalvik and ART runtime.</p>
<a id="more"></a>
<p>The compressed file format of AndFix’s patch is .apatch. It is dispatched from your own server to client to fix your App’s bugs.</p>
<p>优点：实时修复，仅支持java层修改</p>
<p>缺点：不支持添加文件到assets文件夹<br>不支持layout文件添加组件<br>不支持add filed(R.xx.xx)， new class， 内部类， 匿名内部类</p>
<h4 id="Principle"><a href="#Principle" class="headerlink" title="Principle"></a>Principle</h4><p>The implementation principle of AndFix is method body’s replacing,</p>
<p>具体的实现原理就是方法替换</p>
<p><img src="/images/andfix/principle.png" alt="image"></p>
<h4 id="Method-replacing"><a href="#Method-replacing" class="headerlink" title="Method replacing"></a>Method replacing</h4><p>AndFix judges the methods should be replaced by java custom annotation and replaces it by hooking it. AndFix has a native method <code>art_replaceMethod</code> in ART or <code>dalvik_replaceMethod</code> in Dalvik. </p>
<p>For more details, <a href="https://github.com/alibaba/AndFix/tree/master/jni" target="_blank" rel="external">here</a>.</p>
<h4 id="Fix-Process"><a href="#Fix-Process" class="headerlink" title="Fix Process"></a>Fix Process</h4><p><img src="/images/andfix/process.png" alt="image"></p>
<h4 id="Integration"><a href="#Integration" class="headerlink" title="Integration"></a>Integration</h4><h4 id="How-to-get"><a href="#How-to-get" class="headerlink" title="How to get?"></a>How to get?</h4><p>Directly add AndFix aar to your project as compile libraries.</p>
<p>For your maven dependency,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;com.alipay.euler&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;andfix&lt;/artifactId&gt;</div><div class="line">	&lt;version&gt;0.4.0&lt;/version&gt;</div><div class="line">	&lt;type&gt;aar&lt;/type&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>For your gradle dependency,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">	compile &apos;com.alipay.euler:andfix:0.4.0@aar&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use?"></a>How to use?</h4><ol>
<li>Initialize PatchManager,</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">patchManager = new PatchManager(context);</div><div class="line">patchManager.init(appversion);//current version</div></pre></td></tr></table></figure>
<ol>
<li>Load patch,</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">patchManager.loadPatch();</div></pre></td></tr></table></figure>
<p>You should load patch as early as possible, generally, in the initialization phase of your application(such as <code>Application.onCreate()</code>).</p>
<ol>
<li>Add patch,</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">patchManager.addPatch(path);//path of the patch file that was downloaded</div></pre></td></tr></table></figure>
<p>When a new patch file has been downloaded, it will become effective immediately by <code>addPatch</code>.</p>
<h4 id="Developer-Tool"><a href="#Developer-Tool" class="headerlink" title="Developer Tool"></a>Developer Tool</h4><p>AndFix provides a patch-making tool called <strong>apkpatch</strong>.</p>
<h4 id="How-to-get-1"><a href="#How-to-get-1" class="headerlink" title="How to get?"></a>How to get?</h4><p>The <code>apkpatch</code> tool can be found <a href="https://github.com/alibaba/AndFix/raw/master/tools/apkpatch-1.0.3.zip" target="_blank" rel="external">here</a>.</p>
<h4 id="How-to-use-1"><a href="#How-to-use-1" class="headerlink" title="How to use?"></a>How to use?</h4><ul>
<li><p>Prepare two android packages, one is the online package, the other one is the package after you fix bugs by coding.</p>
</li>
<li><p>Generate <code>.apatch</code> file by providing the two package,</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">usage: apkpatch -f &lt;new&gt; -t &lt;old&gt; -o &lt;output&gt; -k &lt;keystore&gt; -p &lt;***&gt; -a &lt;alias&gt; -e &lt;***&gt;</div><div class="line"> -a,--alias &lt;alias&gt;     keystore entry alias.</div><div class="line"> -e,--epassword &lt;***&gt;   keystore entry password.</div><div class="line"> -f,--from &lt;loc&gt;        new Apk file path.</div><div class="line"> -k,--keystore &lt;loc&gt;    keystore path.</div><div class="line"> -n,--name &lt;name&gt;       patch name.</div><div class="line"> -o,--out &lt;dir&gt;         output dir.</div><div class="line"> -p,--kpassword &lt;***&gt;   keystore password.</div><div class="line"> -t,--to &lt;loc&gt;          old Apk file path.</div></pre></td></tr></table></figure>
<p>Now you get the application savior, the patch file. Then you need to dispatch it to your client in some way, push or pull.</p>
<p>Sometimes, your team members may fix each other’s bugs, and generate not only one <code>.apatch</code>. For this situation, you can<br>merge <code>.apatch</code> files using this tool,</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">usage: apkpatch -m &lt;apatch_path...&gt; -o &lt;output&gt; -k &lt;keystore&gt; -p &lt;***&gt; -a &lt;alias&gt; -e &lt;***&gt;</div><div class="line"> -a,--alias &lt;alias&gt;     keystore entry alias.</div><div class="line"> -e,--epassword &lt;***&gt;   keystore entry password.</div><div class="line"> -k,--keystore &lt;loc&gt;    keystore path.</div><div class="line"> -m,--merge &lt;loc...&gt;    path of .apatch files.</div><div class="line"> -n,--name &lt;name&gt;       patch name.</div><div class="line"> -o,--out &lt;dir&gt;         output dir.</div><div class="line"> -p,--kpassword &lt;***&gt;   keystore password.</div></pre></td></tr></table></figure>
<h4 id="Running-sample"><a href="#Running-sample" class="headerlink" title="Running sample"></a>Running sample</h4><ol>
<li>Import samplesI/AndFixDemo to your IDE, append AndFixDemo dependencies with AndFix(library project or aar).</li>
<li>Build project, save the package as 1.apk, and then install on device/emulator.</li>
<li>Modify com.euler.test.A, references com.euler.test.Fix.</li>
<li>Build project, save the package as 2.apk.</li>
<li>Use apkpatch tool to make a patch.</li>
<li>Rename the patch file to out.apatch, and then copy it to sdcard.</li>
<li>Run 1.apk and view log.</li>
</ol>
<h4 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h4><h4 id="ProGuard"><a href="#ProGuard" class="headerlink" title="ProGuard"></a>ProGuard</h4><p>If you enable ProGuard, you must save the mapping.txt, so your new version’s build can use it with <a href="http://proguard.sourceforge.net/manual/usage.html#applymapping" target="_blank" rel="external">“-applymapping”</a>.</p>
<p>And it is necessary to keep classes as follow,</p>
<ul>
<li><p>Native method</p>
<p>  com.alipay.euler.andfix.AndFix</p>
</li>
<li><p>Annotation</p>
<p>  com.alipay.euler.andfix.annotation.MethodReplace</p>
</li>
</ul>
<p>To ensure that these classes can be found after running an obfuscation and static analysis tool like ProGuard, add the configuration below to your ProGuard configuration file.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-keep class * extends java.lang.annotation.Annotation</div><div class="line">-keepclasseswithmembernames class * &#123;</div><div class="line">    native &lt;methods&gt;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Self-Modifying-Code"><a href="#Self-Modifying-Code" class="headerlink" title="Self-Modifying Code"></a>Self-Modifying Code</h4><p>If you use it, such as <em>Bangcle</em>. To generate patch file, you’d better to use raw apk.</p>
<h4 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h4><p>The following is important but out of AndFix’s range.</p>
<ul>
<li>verify the signature of patch file</li>
<li>verify the fingerprint of optimize file</li>
</ul>
<h4 id="API-Documentation"><a href="#API-Documentation" class="headerlink" title="API Documentation"></a>API Documentation</h4><p>The libraries javadoc can be found <a href="https://rawgit.com/alibaba/AndFix/master/docs/index.html" target="_blank" rel="external">here</a>.</p>
<h4 id="License"><a href="#License" class="headerlink" title="License"></a>License</h4><p><a href="http://www.apache.org/licenses/LICENSE-2.0.html" target="_blank" rel="external">Apache License, Version 2.0</a></p>
<p>Copyright (c) 2015, alipay.com</p>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><p>Server端使用apkpatch生成差分补丁，后缀.apatch</p>
<p>./apkpatch.sh -f demo-debug2.apk -t demo-debug1.apk -o out -k demo.jks -p 123456 -a key -e 123456</p>
<h4 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h4><p>Application初始化AndFix组件，下载补丁，加载补丁，删除补丁</p>
<h4 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h4><p>Application.onCreate()初始化AndFix组件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">private void initAndFix() &#123;</div><div class="line">    mPatchManager = new PatchManager(this); // </div><div class="line">    mPatchManager.init(ApkUtil.getVersionName(this)); // 根据版本号处理补丁文件的加载、删除等（暂时把files/apatch下的补丁添加到												mPatchManager.mPatchs集合里，没有加载）</div><div class="line">    // load patch</div><div class="line">    mPatchManager.loadPatch(); //加载补丁</div><div class="line">    // add patch at runtime</div><div class="line">    try &#123;</div><div class="line">        // .apatch file path</div><div class="line">        String patchFileString = Environment.getExternalStorageDirectory()</div><div class="line">                .getAbsolutePath() + APATCH_PATH;</div><div class="line">        mPatchManager.addPatch(patchFileString);</div><div class="line">    &#125; catch (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="PatchManager-java"><a href="#PatchManager-java" class="headerlink" title="PatchManager.java"></a>PatchManager.java</h4><p>补丁文件的管理类（加载、删除）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private static final String SUFFIX = &quot;.apatch&quot;; // 补丁后缀</div><div class="line">private static final String DIR = &quot;apatch&quot;;   // 补丁路径 files/apatch</div><div class="line">private static final String SP_NAME = &quot;_andfix_&quot;; // sharedpreferences文件名</div><div class="line">private static final String SP_VERSION = &quot;version&quot;;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public PatchManager(Context context) &#123;</div><div class="line">    mContext = context;</div><div class="line">    mAndFixManager = new AndFixManager(mContext); // AndFixManager</div><div class="line">    mPatchDir = new File(mContext.getFilesDir(), DIR); // 补丁路径 files/apatch</div><div class="line">    mPatchs = new ConcurrentSkipListSet&lt;Patch&gt;(); // 存放补丁信息的集合（同步高并发）</div><div class="line">    mLoaders = new ConcurrentHashMap&lt;String, ClassLoader&gt;(); // classloaders</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * initialize</div><div class="line"> *</div><div class="line"> * @param appVersion App version</div><div class="line"> */</div><div class="line">public void init(String appVersion) &#123;</div><div class="line">    if (!mPatchDir.exists() &amp;&amp; !mPatchDir.mkdirs()) &#123;// make directory fail</div><div class="line">        Log.e(TAG, &quot;patch dir create error.&quot;);</div><div class="line">        return;</div><div class="line">    &#125; else if (!mPatchDir.isDirectory()) &#123;// not directory</div><div class="line">        mPatchDir.delete();</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    SharedPreferences sp = mContext.getSharedPreferences(SP_NAME,</div><div class="line">            Context.MODE_PRIVATE);</div><div class="line">    String ver = sp.getString(SP_VERSION, null);</div><div class="line">    if (ver == null || !ver.equalsIgnoreCase(appVersion)) &#123;</div><div class="line">        cleanPatch();  // app版本升级后清空之前的历史补丁（新版已修复bug）</div><div class="line">        sp.edit().putString(SP_VERSION, appVersion).commit();</div><div class="line">    &#125; else &#123;</div><div class="line">        initPatchs();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private void initPatchs() &#123;</div><div class="line">    File[] files = mPatchDir.listFiles();</div><div class="line">    for (File file : files) &#123;</div><div class="line">        addPatch(file);  // 加载mPatchDir下的appath补丁到mPatchs集合</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 删除源文件和输出dex文件</div><div class="line">private void cleanPatch() &#123;</div><div class="line">    File[] files = mPatchDir.listFiles();</div><div class="line">    for (File file : files) &#123;</div><div class="line">        mAndFixManager.removeOptFile(file);</div><div class="line">        if (!FileUtil.deleteFile(file)) &#123;</div><div class="line">            Log.e(TAG, file.getName() + &quot; delete error.&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * add patch at runtime</div><div class="line"> * </div><div class="line"> *</div><div class="line"> * @param path patch path</div><div class="line"> * @throws IOException</div><div class="line"> */</div><div class="line">public void addPatch(String path) throws IOException &#123;</div><div class="line">    File src = new File(path);</div><div class="line">    File dest = new File(mPatchDir, src.getName());</div><div class="line">    if (!src.exists()) &#123;</div><div class="line">        throw new FileNotFoundException(path);</div><div class="line">    &#125;</div><div class="line">    if (dest.exists()) &#123;</div><div class="line">        Log.d(TAG, &quot;patch [&quot; + path + &quot;] has be loaded.&quot;);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    FileUtil.copyFile(src, dest);// copy to patch&apos;s directory</div><div class="line">    Patch patch = addPatch(dest);</div><div class="line">    if (patch != null) &#123;</div><div class="line">        loadPatch(patch);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * load specific patch</div><div class="line"> *</div><div class="line"> * @param patch patch</div><div class="line"> */</div><div class="line">private void loadPatch(Patch patch) &#123;</div><div class="line">    Set&lt;String&gt; patchNames = patch.getPatchNames();</div><div class="line">    ClassLoader cl;</div><div class="line">    List&lt;String&gt; classes;</div><div class="line">    for (String patchName : patchNames) &#123;</div><div class="line">        if (mLoaders.containsKey(&quot;*&quot;)) &#123;</div><div class="line">            cl = mContext.getClassLoader();</div><div class="line">        &#125; else &#123;</div><div class="line">            cl = mLoaders.get(patchName);</div><div class="line">        &#125;</div><div class="line">        if (cl != null) &#123;</div><div class="line">            classes = patch.getClasses(patchName);</div><div class="line">            mAndFixManager.fix(patch.getFile(), cl, classes);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="AndFixManager-java"><a href="#AndFixManager-java" class="headerlink" title="AndFixManager.java"></a>AndFixManager.java</h4><p>fix dex files</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * fix</div><div class="line"> *</div><div class="line"> * @param file        patch file</div><div class="line"> * @param classLoader classloader of class that will be fixed</div><div class="line"> * @param classes     classes will be fixed</div><div class="line"> */</div><div class="line">public synchronized void fix(File file, ClassLoader classLoader,</div><div class="line">                             List&lt;String&gt; classes) &#123;</div><div class="line">    // 系统是否支持                         </div><div class="line">    if (!mSupport) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    if (!mSecurityChecker.verifyApk(file)) &#123;// security check fail 签名校验</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    try &#123;</div><div class="line">        // loadClass 输出目录</div><div class="line">        File optfile = new File(mOptDir, file.getName());</div><div class="line">        // 保存指纹签名</div><div class="line">        boolean saveFingerprint = true;</div><div class="line">        if (optfile.exists()) &#123;</div><div class="line">            // need to verify fingerprint when the optimize file exist,</div><div class="line">            // prevent someone attack on jailbreak device with</div><div class="line">            // Vulnerability-Parasyte.</div><div class="line">            // btw:exaggerated android Vulnerability-Parasyte</div><div class="line">            // http://secauo.com/Exaggerated-Android-Vulnerability-Parasyte.html</div><div class="line">            // 校验MD5            </div><div class="line">            if (mSecurityChecker.verifyOpt(optfile)) &#123;  </div><div class="line">                saveFingerprint = false;</div><div class="line">            &#125; else if (!optfile.delete()) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        final DexFile dexFile = DexFile.loadDex(file.getAbsolutePath(),</div><div class="line">                optfile.getAbsolutePath(), Context.MODE_PRIVATE);</div><div class="line">        if (saveFingerprint) &#123;        </div><div class="line">        	// 保存MD5</div><div class="line">            mSecurityChecker.saveOptSig(optfile); </div><div class="line">        &#125;</div><div class="line">        ClassLoader patchClassLoader = new ClassLoader(classLoader) &#123;</div><div class="line">            @Override</div><div class="line">            protected Class&lt;?&gt; findClass(String className)</div><div class="line">                    throws ClassNotFoundException &#123;</div><div class="line">                Class&lt;?&gt; clazz = dexFile.loadClass(className, this);</div><div class="line">                if (clazz == null</div><div class="line">                         &amp;&amp; className.startsWith(&quot;com.alipay.euler.andfix&quot;)) &#123;</div><div class="line">                    return Class.forName(className);// annotation’s class</div><div class="line">                    // not found</div><div class="line">                &#125;</div><div class="line">                if (clazz == null) &#123;</div><div class="line">                    throw new ClassNotFoundException(className);</div><div class="line">                &#125;</div><div class="line">                return clazz;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        Enumeration&lt;String&gt; entrys = dexFile.entries();</div><div class="line">        Class&lt;?&gt; clazz = null;</div><div class="line">        while (entrys.hasMoreElements()) &#123;</div><div class="line">            String entry = entrys.nextElement();</div><div class="line">            if (classes != null &amp;&amp; !classes.contains(entry)) &#123;</div><div class="line">                continue;// skip, not need fix</div><div class="line">            &#125;</div><div class="line">            // loadClass</div><div class="line">            clazz = dexFile.loadClass(entry, patchClassLoader);  </div><div class="line">            if (clazz != null) &#123;</div><div class="line">                // fixClass</div><div class="line">                fixClass(clazz, classLoader);          </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; catch (IOException e) &#123;</div><div class="line">        Log.e(TAG, &quot;pacth&quot;, e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * fix class</div><div class="line"> *</div><div class="line"> * @param clazz class</div><div class="line"> */</div><div class="line">private void fixClass(Class&lt;?&gt; clazz, ClassLoader classLoader) &#123;</div><div class="line">    Method[] methods = clazz.getDeclaredMethods();</div><div class="line">    MethodReplace methodReplace;</div><div class="line">    String clz;</div><div class="line">    String meth;</div><div class="line">    for (Method method : methods) &#123;</div><div class="line">        //  反射提取带有MethodReplace注解的方法</div><div class="line">        methodReplace = method.getAnnotation(MethodReplace.class);  </div><div class="line">        if (methodReplace == null)</div><div class="line">            continue;</div><div class="line">        clz = methodReplace.clazz();</div><div class="line">        meth = methodReplace.method();</div><div class="line">        if (!isEmpty(clz) &amp;&amp; !isEmpty(meth)) &#123;</div><div class="line">            // jni层替换方法</div><div class="line">            replaceMethod(classLoader, clz, meth, method);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="SecurityChecker-java"><a href="#SecurityChecker-java" class="headerlink" title="SecurityChecker.java"></a>SecurityChecker.java</h4><p>用于验证apk和dex的签名</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">init()获取apk的签名mPublicKey</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">verifyApk(File path)  //loadPatch()时检查apk和补丁的签名</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">签名校验失败时抛出异常</div><div class="line">E/SecurityChecker: /data/data/com.euler.andfix/files/apatch/out.apatch java.security.SignatureException: Signature was not verified </div><div class="line">at org.apache.harmony.security.provider.cert.X509CertImpl.verify(X509CertImpl.java:384) </div><div class="line">at com.alipay.euler.andfix.security.SecurityChecker.check(SecurityChecker.java:158)</div><div class="line">at com.alipay.euler.andfix.security.SecurityChecker.verifyApk(SecurityChecker.java:124) </div><div class="line">at com.alipay.euler.andfix.AndFixManager.fix(AndFixManager.java:121) </div><div class="line">at com.alipay.euler.andfix.patch.PatchManager.loadPatch(PatchManager.java:230) </div><div class="line">at com.alipay.euler.andfix.patch.PatchManager.addPatch(PatchManager.java:161) </div><div class="line">at com.euler.andfix.MainApplication.onCreate(MainApplication.java:63)</div></pre></td></tr></table></figure>
<h4 id="Compat-java"><a href="#Compat-java" class="headerlink" title="Compat.java"></a>Compat.java</h4><p>检查当前系统是否支持andfix<br>AndFix supports Android version from 2.3 to 6.0, both ARM and X86 architecture, both Dalvik and ART runtime.<br>not support alibaba’s YunOs</p>
<h4 id="MethodReplace-java"><a href="#MethodReplace-java" class="headerlink" title="MethodReplace.java"></a>MethodReplace.java</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Annotation for method</div><div class="line"> *</div><div class="line"> * @author sanping.li@alipay.com</div><div class="line"> */</div><div class="line">@Target(ElementType.METHOD) // ElementType是用来指定Annotation类型可以用在哪一些元素上的</div><div class="line">@Retention(RetentionPolicy.RUNTIME)  // 注解的保存策略</div><div class="line">/**</div><div class="line"> * SOURCE：只会保留在程序源码里，源码如果经过了编译之后，Annotation的数据就会消失,并不会保留在编译好的.class文件里面</div><div class="line"> * CLASS：Annotation类型的信息保留在程序源码里,同时也会保留在编译好的.class文件里面,在执行的时候，并不会把这一些信息加载到虚拟机</div><div class="line"> * (JVM)中去.注意一下，当你没有设定一个Annotation类型的Retention值时，系统默认值是CLASS.</div><div class="line"> * RUNTIME：表示在源码、编译好的.class文件中保留信息，在执行的时候会把这一些信息加载到JVM中去的．</div><div class="line"> */</div><div class="line">public @interface MethodReplace &#123;</div><div class="line">    String clazz();</div><div class="line">    String method();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="AndFix-java"><a href="#AndFix-java" class="headerlink" title="AndFix.java"></a>AndFix.java</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// initialize art or dalvik </div><div class="line">private static native boolean setup(boolean isArt, int apilevel);</div><div class="line">// </div><div class="line">private static native void replaceMethod(Method dest, Method src);</div><div class="line">/**</div><div class="line"> * modify access flag of class’ fields to public</div><div class="line"> *</div><div class="line"> * @param field field</div><div class="line"> */</div><div class="line">private static native void setFieldFlag(Field field);</div></pre></td></tr></table></figure>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>生成的补丁out.apatch是带有签名信息的压缩包，</p>
<p><img src="/images/andfix/out.apatch.zip.png" alt="image"></p>
<p>META_INFO文件夹包含MANIFEST.MF、CERT.SF和CERT.RSA、PATCH.MF。这三个文件分别表征以下含义：</p>
<p>（1）MANIFEST.MF：这是摘要文件。程序遍历Apk包中的所有文件(entry)，对非文件夹非签名文件的文件，逐个用SHA1生成摘要信息(用SHA1算法摘要的消息最终有160比特位的输出)，再用Base64进行编码。如果你改变了apk包中的文件，那么在apk安装校验时，改变后的文件摘要信息与MANIFEST.MF的检验信息不同，于是程序就不能成功安装。<br>说明：如果攻击者修改了程序的内容，有重新生成了新的摘要，那么就可以通过验证，所以这是一个非常简单的验证。</p>
<p>（2）CERT.SF：这是对摘要的签名文件。对前一步生成的MANIFEST.MF，使用SHA1-RSA算法，用开发者的私钥进行签名。在安装时只能使用公钥才能解密它。解密之后，将它与未加密的摘要信息（即，MANIFEST.MF文件）进行对比，如果相符，则表明内容没有被异常修改。<br>说明：在这一步，即使开发者修改了程序内容，并生成了新的摘要文件，但是攻击者没有开发者的私钥，所以不能生成正确的签名文件（CERT.SF）。系统在对程序进行验证的时候，用开发者公钥对不正确的签名文件进行解密，得到的结果和摘要文件（MANIFEST.MF）对应不起来，所以不能通过检验，不能成功安装文件。</p>
<p>（3）CERT.RSA文件中保存了公钥、所采用的加密算法等信息。<br>说明：系统对签名文件进行解密，所需要的公钥就是从这个文件里取出来的。<br>结论：从上面的总结可以看出，META-INFO里面的说那个文件环环相扣，从而保证Android程序的安全性。（只是防止开发者的程序不被攻击者修改，如果开发者的公私钥对对攻击者得到或者开发者开发出攻击程序，Android系统都无法检测出来。）</p>
<p><img src="/images/andfix/CERT.RSA.png" alt="image"></p>
<p>（4）PATCH.MF 由<code>apkpatch</code> tool 生成，主要内容：</p>
<p>Manifest-Version: 1.0</p>
<p>Patch-Name: demo-debug2</p>
<p>Created-Time: 15 Apr 2016 10:10:12 GMT</p>
<p>From-File: demo-debug2.apk</p>
<p>To-File: demo-debug1.apk</p>
<p>Patch-Classes: com.euler.andfix.SecondAvtivity_CF,com.euler.andfix.MainApplication_CF</p>
<p>Created-By: 1.0 (ApkPatch)</p>
<p>// 获取CERT.RSA公钥信息<br>openssl pkcs7 -inform DER -in CERT.RSA -noout -print_certs -text </p>
<h4 id="加载apatch过程"><a href="#加载apatch过程" class="headerlink" title="加载apatch过程"></a>加载apatch过程</h4><p>1、isSupport 判断设备是否支持andfix</p>
<p>2、copy /data/data/packageName/files/apatch/ 下</p>
<p>3、verify 校验apatch签名，对比apk的publickey和apatch的publickey</p>
<p>4、loaddex /data/data/packageName/files/apatch_opt/</p>
<p>5、repleaseMethod  根据PATCH.MF中Patch-Classes找到需要替换的class，再由class反射提取带有MethodReplace注解的方法，jni层替换，立即修复</p>
<p><img src="/images/andfix/method_replace.png" alt="image"></p>
<h4 id="Apk重签名"><a href="#Apk重签名" class="headerlink" title="Apk重签名"></a>Apk重签名</h4><p>1、解压apk，删除META_INFO文件夹，再压缩改后缀.apk</p>
<p>2、生成keystore签名文件</p>
<p>keytool -genkey -alias demo -keyalg RSA -validity 20000 -keystore demo.keystore</p>
<p>-genkey    产生证书文件 </p>
<p>-keystore  指定密钥库的.keystore文件中 </p>
<p>-keyalg    指定密钥的算法</p>
<p>-validity  为证书有效天数，这里我们写的是20000天</p>
<p>-alias     产生别名 </p>
<p>3、apk签名</p>
<p>jarsigner -verbose -keystore demo.keystore -signedjar demo.apk demo_old.apk demo -digestalg SHA1 -sigalg MD5withRSA</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://github.com/alibaba/AndFix" target="_blank" rel="external">https://github.com/alibaba/AndFix</a></p>
<p><a href="http://blog.csdn.net/qxs965266509/article/details/49816007" target="_blank" rel="external">Alibaba-AndFix Bug热修复框架原理及源码解析</a></p>
<p><a href="http://myeyeofjava.iteye.com/blog/2125348" target="_blank" rel="external">Android签名与认证详细分析之一（CERT.RSA剖析）</a></p>
<p><a href="http://www.cnblogs.com/0616--ataozhijia/p/4482667.html" target="_blank" rel="external">[Android Pro] Android签名与认证详细分析之二（CERT.RSA剖析）</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> hot-fix </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> 分享 </tag>
            
            <tag> hot-fix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Handler、Message、MessageQueue随笔]]></title>
      <url>/2016/03/04/2016-03-04-Handler-Message-Android/</url>
      <content type="html"><![CDATA[<h4 id="Handler、Message"><a href="#Handler、Message" class="headerlink" title="Handler、Message"></a>Handler、Message</h4><h4 id="1、基本用法"><a href="#1、基本用法" class="headerlink" title="1、基本用法:"></a>1、基本用法:</h4><p>创建Handler重写handlerMessage（Message msg）处理消息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Handler handler = new Handler()&#123;</div><div class="line">    @Override</div><div class="line">    public void handleMessage(Message msg) &#123;</div><div class="line">        super.handleMessage(msg);</div><div class="line">        // TODO 处理消息</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Handler handler = new Handler(new Handler.Callback()&#123;</div><div class="line">    @Override</div><div class="line">    public boolean handleMessage(Message msg) &#123;</div><div class="line">        // TODO 处理消息</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">handler.sendMessage(msg);</div><div class="line">handler.post(new Runnable()&#123;...&#125;);</div></pre></td></tr></table></figure>
<h4 id="2、主线程默认已经创建Looper，无须重复创建"><a href="#2、主线程默认已经创建Looper，无须重复创建" class="headerlink" title="2、主线程默认已经创建Looper，无须重复创建"></a>2、主线程默认已经创建Looper，无须重复创建</h4><p>ActivityThread.java</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) &#123;</div><div class="line">    Looper.prepareMainLooper();</div><div class="line">...</div><div class="line">    Looper.loop();</div><div class="line">...</div><div class="line">    throw new RuntimeException(&quot;Main thread loop unexpectedly exited&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Handler解析"><a href="#Handler解析" class="headerlink" title="Handler解析"></a>Handler解析</h4><p>Handler负责把消息放入线程的消息队列中以及分发消息。</p>
<h4 id="1、创建Handler"><a href="#1、创建Handler" class="headerlink" title="1、创建Handler"></a>1、创建Handler</h4><p>创建Handler之前需要创建Looper，否则抛出throw new RuntimeException(<br>                “Can’t create handler inside thread that has not called Looper.prepare()”);                </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> * @param callback The callback interface in which to handle messages, or null.</div><div class="line"> * @param async If true, the handler calls &#123;@link Message#setAsynchronous(boolean)&#125; for</div><div class="line"> * each &#123;@link Message&#125; that is sent to it or &#123;@link Runnable&#125; that is posted to it.  </div><div class="line"> *</div><div class="line"> * @hide</div><div class="line">*/</div><div class="line">public Handler(Callback callback, boolean async) &#123;</div><div class="line">    mLooper = Looper.myLooper();// 使用当前线程所在的Looper</div><div class="line">    if (mLooper == null) &#123;</div><div class="line">        throw new RuntimeException(</div><div class="line">            &quot;Can&apos;t create handler inside thread that has </div><div class="line">            not called Looper.prepare()&quot;);</div><div class="line">    &#125;</div><div class="line">    mQueue = mLooper.mQueue;</div><div class="line">    mCallback = callback;</div><div class="line">    mAsynchronous = async;  //标志Message是否为异步Message.setAsynchronous</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line">* @hide   </div><div class="line">*/</div><div class="line">public Handler(Looper looper, Callback callback, boolean async) &#123;</div><div class="line">    mLooper = looper;    // 为handler指定Looper</div><div class="line">    mQueue = looper.mQueue;</div><div class="line">    mCallback = callback;</div><div class="line">    mAsynchronous = async;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2、发送消息到消息队列MesageQueue"><a href="#2、发送消息到消息队列MesageQueue" class="headerlink" title="2、发送消息到消息队列MesageQueue"></a>2、发送消息到消息队列MesageQueue</h4><p>Handler中提供了很多个发送消息的方法，其中除了sendMessageAtFrontOfQueue()方法之外，其它的发送消息方法最终都会辗转调用到sendMessageAtTime()方法中</p>
<p><img src="/images/handler/handler_send.jpg" alt="发送消息"></p>
<p>（1）boolean sendEmptyMessage(int);<br>// 发送一条消息到队列，成功返回true，失败返回false，通常是因为Looper已经退出</p>
<p>（2）sendEmptyMessageAtTime(int, long)指定时间发送消息 相对时间<br>SystemClock.uptimeMillis() + 3000; // 从开机到现在的毫秒数（手机睡眠的时间不包括在内）；  </p>
<p>（3）通过sendMessageAtFrontOfQueue()方法来发送消息的，它也会调用enqueueMessage()来让消息入队，只不过when为0，这时会把mMessages(MQ头部消息)赋值为新入队的这条消息，然后将这条消息的next指定为刚才的mMessages，这样也就完成了添加消息到队列头部的操作。 </p>
<p>（3）<br><img src="/images/handler/handler_post.jpg" alt="post（Runnable）"></p>
<p>Post Runnable 到消息队列。将Runnable转换为Message</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private static Message getPostMessage(Runnable r) &#123;</div><div class="line">        Message m = Message.obtain();</div><div class="line">        m.callback = r; // msg的callback指向Runnale</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3、消息队列中移除消息"><a href="#3、消息队列中移除消息" class="headerlink" title="3、消息队列中移除消息"></a>3、消息队列中移除消息</h4><p><img src="/images/handler/handler_remove.jpg" alt="移除消息"></p>
<p>一般在Activity页面结束时调用handler.removeCallbacksAndMessages(null);<br>移除队列中所用的callbacks和messages。详见MessageQueue. removeCallbacksAndMessages();</p>
<h4 id="4、消息事件处理"><a href="#4、消息事件处理" class="headerlink" title="4、消息事件处理"></a>4、消息事件处理</h4><p><strong>Handler 里面的mLooper所在的线程决定了 handleMessage 方法所在的线程</strong></p>
<p>message的处理比较简单，先判断Message中有没有指定的callback对象（Runnable），有的话就调用callback的run方法，没有则调用我们自己创建Handler对象时实现的handleMessage(Message msg)方法，就这样实现了消息的分发。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public void dispatchMessage(Message msg) &#123;</div><div class="line">    if (msg.callback != null) &#123;  </div><div class="line">    // 处理Runnable消息调用runnable.run();</div><div class="line">        handleCallback(msg);</div><div class="line">    &#125; else &#123;</div><div class="line">        if (mCallback != null) &#123;</div><div class="line">            if (mCallback.handleMessage(msg)) &#123;</div><div class="line">                return;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        handleMessage(msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>####5、子线程中创建Handler<br>在一个子线程中创建Handler时，必须初始化该线程的Looper对象，因为普通的Thread默认是没有消息队列的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class MyThread extends Thread &#123;</div><div class="line">    public Handler mHandler;</div><div class="line">    public void run() &#123;</div><div class="line">        Looper.prepare();</div><div class="line">        mHandler = new Handler() &#123;</div><div class="line">            public void handleMessage(Message msg) &#123;</div><div class="line">                /* 处理接收到的消息 */</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        Looper.loop();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6、Handler的特点"><a href="#6、Handler的特点" class="headerlink" title="6、Handler的特点"></a>6、Handler的特点</h4><p>1.handler可以在任意线程发送消息，这些消息会被添加到关联的MQ上。<br>2.handler是在它关联的looper线程中处理消息的。<br>3.<strong>一个线程可以有多个Handler，但是只能有一个Looper和一个MessageQueue！</strong> </p>
<p>Q？<br>同一个线程中的所有消息是否共享MQ？<br>MQ如何分发到不同的Handler处理消息？</p>
<p>A：是<br>handler.target</p>
<h4 id="Message-解析"><a href="#Message-解析" class="headerlink" title="Message 解析"></a>Message 解析</h4><p>Message本身是一个Parcelable对象</p>
<h4 id="Message-可以传递的参数有："><a href="#Message-可以传递的参数有：" class="headerlink" title="Message 可以传递的参数有："></a>Message 可以传递的参数有：</h4><ol>
<li>arg1 arg2 整数类型，是setData的低成本替代品。传递简单类型</li>
<li>Object 类型 obj(Parcelable)</li>
<li>what  用户自定义的消息代码，这样接受者可以了解这个消息的信息。每个handler各自包含自己的消息代码，所以不用担心自定义的消息跟其他handler有冲突。</li>
<li>其他的可以通过Bundle进行传递<br>Message可以通过new Message构造来创建一个新的Message,但是这种方式很不好，不建议使用。最好使用Message.obtain()来获取Message实例,它创建了消息池来处理的。</li>
</ol>
<p>####1、    创建Message</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Message msg = new Message();     (不要这样写)</div><div class="line">Message msg = handler.obtainMessage();</div><div class="line">Message msg = Message.obtain();</div><div class="line">// 这两种方式的区别</div><div class="line">public static Message obtain(Handler h) &#123;</div><div class="line">    Message m = obtain();</div><div class="line">    m.target = h; // 指定Message的句柄（消息处理者）Handler</div><div class="line">    return m;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* Return a new Message instance from the global pool. Allows us to</div><div class="line">* avoid allocating new objects in many cases.</div><div class="line">*/</div><div class="line">// 从缓存池中构建一个Message，如果sPool为空说明没有缓存的Message，则新建一个</div><div class="line">public static Message obtain() &#123;</div><div class="line">    synchronized (sPoolSync) &#123;</div><div class="line">        if (sPool != null) &#123;</div><div class="line">            Message m = sPool;</div><div class="line">            sPool = m.next;</div><div class="line">            m.next = null;</div><div class="line">            m.flags = 0;   // clear in-use flag</div><div class="line">            sPoolSize--;</div><div class="line">            return m;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return new Message();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2、Message的回收缓存"><a href="#2、Message的回收缓存" class="headerlink" title="2、Message的回收缓存"></a>2、Message的回收缓存</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* Recycles a Message that may be in-use.</div><div class="line">* Used internally by the MessageQueue and Looper when disposing of queued Messages.</div><div class="line">*/</div><div class="line">void recycleUnchecked() &#123;</div><div class="line">    // Mark the message as in use while it remains in the recycled object pool.</div><div class="line">    // Clear out all other details.</div><div class="line">    flags = FLAG_IN_USE; // 标示为in_use_flag</div><div class="line">    what = 0;</div><div class="line">    arg1 = 0;</div><div class="line">    arg2 = 0;</div><div class="line">    obj = null;</div><div class="line">    replyTo = null;</div><div class="line">    sendingUid = -1;</div><div class="line">    when = 0;</div><div class="line">    target = null;</div><div class="line">    callback = null;</div><div class="line">    data = null;</div><div class="line">    synchronized (sPoolSync) &#123;</div><div class="line">        // 最多可以缓存50个Message</div><div class="line">        if (sPoolSize &lt; MAX_POOL_SIZE**（50）**) &#123;</div><div class="line">            // 将缓存的sPool指向当前msg，next指向原有的sPool</div><div class="line">            next = sPool;</div><div class="line">            sPool = this;</div><div class="line">            sPoolSize++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在一个无限for循环中遍历消息队列，然后调用Handler进行消息分发处理，分发之后调用recycleUnchecked ()把Message对象回收到Message Pool中（最大值为50个，若消息池中已经有50个Message，则不做缓存）</p>
<p>例：<br>MQ—-&gt; m1,m2,m3; // 未处理的message<br>m1.recycleUnchecked();<br><img src="/images/handler/recycle1.jpg" alt="这里写图片描述"></p>
<p>m2.recycleUnchecked();<br><img src="/images/handler/recycle2.jpg" alt="这里写图片描述"></p>
<p>m3.recycleUnchecked();<br><img src="/images/handler/recycle3.jpg" alt="这里写图片描述"></p>
<p>Message.obtain();<br><img src="/images/handler/obtain_message.jpg" alt="这里写图片描述"></p>
<h4 id="3、msg-markInUse"><a href="#3、msg-markInUse" class="headerlink" title="3、msg. markInUse();"></a>3、msg. markInUse();</h4><p>// 标记msg为FLAG_IN_USE，加入MQ时做检查（此状态的msg不能多次加入MQ），调用Message.obtain()清除flags；</p>
<h4 id="4、将一个消息设置为异步"><a href="#4、将一个消息设置为异步" class="headerlink" title="4、将一个消息设置为异步"></a>4、将一个消息设置为异步</h4><p>Message.setAsynchronous(Boolean async) // 详见“MessageQueue同步分割栏”</p>
<h4 id="Looper解析"><a href="#Looper解析" class="headerlink" title="Looper解析"></a>Looper解析</h4><h4 id="1、Looper-prepare"><a href="#1、Looper-prepare" class="headerlink" title="1、Looper.prepare()"></a>1、Looper.prepare()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private static void prepare(boolean quitAllowed) &#123;</div><div class="line">    if (sThreadLocal.get() != null) &#123;</div><div class="line">        throw new RuntimeException(&quot;Only one Looper may be created per thread&quot;);</div><div class="line">    &#125;</div><div class="line">    sThreadLocal.set(new Looper(quitAllowed));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建一个Looper对象，它的内部维护了一个消息队列MQ。注意，一个Thread只能有一个Looper对象，不能多次调用Looper.prepare()，否则将抛出异常。</p>
<h4 id="2、Looper-loop"><a href="#2、Looper-loop" class="headerlink" title="2、Looper.loop()"></a>2、Looper.loop()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public static void loop() &#123;</div><div class="line">    final Looper me = myLooper();  // 获取当前线程所在                                                   Looper，不能为空</div><div class="line">    if (me == null) &#123;</div><div class="line">        throw new RuntimeException(&quot;No Looper; Looper.prepare() wasn&apos;t called on this thread.&quot;);</div><div class="line">    &#125;</div><div class="line">    final MessageQueue queue = me.mQueue;</div><div class="line">    Binder.clearCallingIdentity();</div><div class="line">    final long ident = Binder.clearCallingIdentity();</div><div class="line">    for (;;) &#123; // 循环从MQ中取出消息,没有消息则阻塞</div><div class="line">        Message msg = queue.next(); // might block   </div><div class="line">        if (msg == null) &#123;</div><div class="line">        // No message indicates that the message queue is quitting.</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        // 交给相关Handler处理消息</div><div class="line">        **msg.target.dispatchMessage(msg);**   </div><div class="line">        // Make sure that during the course of dispatching the</div><div class="line">        // identity of the thread wasn&apos;t corrupted.</div><div class="line">        final long newIdent = Binder.clearCallingIdentity();</div><div class="line">        msg.recycleUnchecked();   // 消息回收</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3、Looper-quit-quitSafely"><a href="#3、Looper-quit-quitSafely" class="headerlink" title="3、Looper.quit()  quitSafely();"></a>3、Looper.quit()  quitSafely();</h4><p>调用mQueue.quit();</p>
<p>当我们调用Looper的quit方法时，实际上执行了MessageQueue中的removeAllMessagesLocked方法，该方法的作用是把MessageQueue消息池中所有的消息全部清空，无论是延迟消息（延迟消息是指通过sendMessageDelayed或通过postDelayed等方法发送的需要延迟执行的消息）还是非延迟消息。</p>
<p>当我们调用Looper的quitSafely方法时，实际上执行了MessageQueue中的removeAllFutureMessagesLocked方法，通过名字就可以看出，该方法只会清空MessageQueue消息池中所有的延迟消息，并将消息池中所有的非延迟消息派发出去让Handler去处理，quitSafely相比于quit方法安全之处在于清空消息之前会派发所有的非延迟消息。</p>
<p>无论是调用了quit方法还是quitSafely方法只会，Looper就不再接收新的消息。即在调用了Looper的quit或quitSafely方法之后，消息循环就终结了，这时候再通过Handler调用sendMessage或post等方法发送消息时均返回false，表示消息没有成功放入消息队列MessageQueue中，因为消息队列已经退出了。<br>需要注意的是Looper的quit方法从API Level 1就存在了，但是Looper的quitSafely方法从API Level 18才添加进来。</p>
<h4 id="4、其他方法"><a href="#4、其他方法" class="headerlink" title="4、其他方法"></a>4、其他方法</h4><p>getMainLooper() 获取主线程Looper<br>myLooper() 获取当前线程Looper<br>getQueue() 获取MQ<br>getThread() 获取当前Looper所在线程</p>
<h4 id="MessageQueue"><a href="#MessageQueue" class="headerlink" title="MessageQueue"></a>MessageQueue</h4><p>MessageQueue是一个按照when大小排列的链表结构。</p>
<h4 id="1、enqueueMessage-Message-msg-long-when"><a href="#1、enqueueMessage-Message-msg-long-when" class="headerlink" title="1、enqueueMessage(Message msg, long when)"></a>1、enqueueMessage(Message msg, long when)</h4><p>同一个没有被处理的message不能多次加入队列</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">// 添加消息到消息队列, 最终的mMessages是按照when的由小到大排列</div><div class="line">boolean enqueueMessage(Message msg, long when) &#123;</div><div class="line">    // 检查msg合法性，必须包含handler且非FLAG_IN_USE状态</div><div class="line">    if (msg.target == null) &#123;</div><div class="line">        throw new IllegalArgumentException(&quot;Message must have a target.&quot;);</div><div class="line">    &#125;</div><div class="line">    if (msg.isInUse()) &#123;</div><div class="line">        throw new IllegalStateException(msg + &quot; This message is already in use.&quot;);</div><div class="line">    &#125;</div><div class="line">    synchronized (this) &#123;</div><div class="line">        if (mQuitting) &#123;  //如果已经调用MessageQueue.quit，                                      那么不再接收新的Message    </div><div class="line">            msg.recycle();</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">        msg.markInUse();// msg  in_use_flag</div><div class="line">        msg.when = when;</div><div class="line">        Message p = mMessages;</div><div class="line">        boolean needWake;</div><div class="line">        // 队列为空或msg.when == 0或 msg.when &lt; mMessages.when时</div><div class="line">        // 将msg直接插入到队列头部</div><div class="line">        if (p == null || when == 0 || when &lt; p.when) &#123;</div><div class="line">            // New head, wake up the event queue if blocked.</div><div class="line">            msg.next = p;</div><div class="line">            mMessages = msg;</div><div class="line">            needWake = mBlocked;</div><div class="line">        &#125; else &#123;</div><div class="line">        // Inserted within the middle of the queue.  Usually we don&apos;t have to wake</div><div class="line">        // up the event queue unless there is a barrier at the head of the queue</div><div class="line">        // and the message is the earliest asynchronous message in the queue.       </div><div class="line">            needWake = mBlocked &amp;&amp; p.target == null &amp;&amp; msg.isAsynchronous();</div><div class="line">            Message prev;</div><div class="line">            // 根据when的大小顺序，插入到合适的位置</div><div class="line">            for (;;) &#123;</div><div class="line">                prev = p;</div><div class="line">                p = p.next;</div><div class="line">                if (p == null || when &lt; p.when) &#123;</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                // 如果在插入位置以前，发现异步消息，则不需要唤醒</div><div class="line">                if (needWake &amp;&amp; p.isAsynchronous()) &#123;</div><div class="line">                    needWake = false;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            msg.next = p; // invariant: p == prev.next</div><div class="line">            prev.next = msg;</div><div class="line">        &#125;</div><div class="line">        // We can assume mPtr != 0 because mQuitting is false.</div><div class="line">        if (needWake) &#123;</div><div class="line">            nativeWake(mPtr);  //唤醒nativeMessageQueue</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>nativeWake，和natePollonce的作用：<br>　　nativePollOnce(mPtr, nextPollTimeoutMillis);暂时无视mPtr参数，阻塞等待nextPollTimeoutMillis毫秒的时间返回，与Object.wait(long timeout)相似<br>　　nativeWake(mPtr);暂时无视mPtr参数，唤醒等待的nativePollOnce函数返回的线程，从这个角度解释nativePollOnce函数应该是最多等待nextPollTimeoutMillis毫秒</p>
<h4 id="2、removeMessage-int-what"><a href="#2、removeMessage-int-what" class="headerlink" title="2、removeMessage(int what);"></a>2、removeMessage(int what);</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">//删除所有what 和obj = object 的msg</div><div class="line">void removeMessages(Handler h, int what, Object object) &#123;</div><div class="line">    if (h == null) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    synchronized (this) &#123;</div><div class="line">        Message p = mMessages;</div><div class="line">        // Remove all messages at front.</div><div class="line">        // 循环移除MQ 队列头部所有符合要求的Message</div><div class="line">        while (p != null &amp;&amp; p.target == h &amp;&amp; p.what == what</div><div class="line">                  &amp;&amp; (object == null || p.obj == object)) &#123;</div><div class="line">            Message n = p.next;</div><div class="line">            mMessages = n;</div><div class="line">            p.recycleUnchecked();</div><div class="line">            p = n;</div><div class="line">        &#125;</div><div class="line">        // Remove all messages after front.</div><div class="line">        // 循环移除MQ中间所有符合要求的Message</div><div class="line">        while (p != null) &#123;</div><div class="line">            Message n = p.next;</div><div class="line">            if (n != null) &#123;</div><div class="line">                if (n.target == h &amp;&amp; n.what == what</div><div class="line">                    &amp;&amp; (object == null || n.obj == object)) &#123;</div><div class="line">                    // 移除message并交换位置</div><div class="line">                    Message nn = n.next;</div><div class="line">                    n.recycleUnchecked();</div><div class="line">                    p.next = nn;</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            p = n;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3、Message-next"><a href="#3、Message-next" class="headerlink" title="3、Message next()"></a>3、Message next()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line">Message next() &#123;</div><div class="line">    // Return here if the message loop has already quit and been disposed.</div><div class="line">    // This can happen if the application tries to restart a looper after quit</div><div class="line">    // which is not supported.</div><div class="line">    final long ptr = mPtr;</div><div class="line">    if (ptr == 0) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">    int pendingIdleHandlerCount = -1; // -1 only during first iteration   空闲handler数量</div><div class="line">    int nextPollTimeoutMillis = 0;   // MQ阻塞时间</div><div class="line">    for (;;) &#123;</div><div class="line">        if (nextPollTimeoutMillis != 0) &#123;</div><div class="line">            Binder.flushPendingCommands();</div><div class="line">        &#125;</div><div class="line">        nativePollOnce(ptr, nextPollTimeoutMillis);   //MessageQueue阻塞nextPollTimeoutMillis 指定时间</div><div class="line">        synchronized (this) &#123;</div><div class="line">            // Try to retrieve the next message.  Return if found.</div><div class="line">            final long now = SystemClock.uptimeMillis();  // 开机相对时间（不包含休眠时间）</div><div class="line">            Message prevMsg = null;</div><div class="line">            Message msg = mMessages;</div><div class="line">            // 遇到同步分隔栏，忽略该消息，取下一个 异步消息</div><div class="line">            if (msg != null &amp;&amp; msg.target == null) &#123;</div><div class="line">                // Stalled by a barrier.  Find the next asynchronous message in the queue.</div><div class="line">                do &#123;</div><div class="line">                    prevMsg = msg;</div><div class="line">                    msg = msg.next;</div><div class="line">                &#125; while (msg != null &amp;&amp; !msg.isAsynchronous());</div><div class="line">            &#125;</div><div class="line">            if (msg != null) &#123;</div><div class="line">                if (now &lt; msg.when) &#123;     // 遇到延迟消息，则阻塞一段时间 nextPollTimeoutMillis</div><div class="line">                    // Next message is not ready.  Set a timeout to wake up when it is ready.</div><div class="line">                    nextPollTimeoutMillis = (int) Math.min(msg.when - now, Integer.MAX_VALUE);</div><div class="line">                &#125; else &#123;</div><div class="line">                    // Got a message.  // 得到Message，从MQ里移除此消息</div><div class="line">                    mBlocked = false;</div><div class="line">                    if (prevMsg != null) &#123;    // prevMsg != null,说明是同步分隔栏消息，</div><div class="line">                        prevMsg.next = msg.next;  // 保留MQ头部为同步分隔栏消息（为了取出下一个异步消息），替换next消息</div><div class="line">                    &#125; else &#123;</div><div class="line">                        mMessages = msg.next;   // 不包含同步分隔栏消息，替换当前head为next消息</div><div class="line">                    &#125;</div><div class="line">                    msg.next = null;</div><div class="line">                    if (DEBUG) Log.v(TAG, &quot;Returning message: &quot; + msg);</div><div class="line">                    msg.markInUse();</div><div class="line">                    return msg;</div><div class="line">                &#125;</div><div class="line">            &#125; else &#123;</div><div class="line">                // No more messages.</div><div class="line">                nextPollTimeoutMillis = -1;</div><div class="line">            &#125;</div><div class="line">            // Process the quit message now that all pending messages have been handled.</div><div class="line">            if (mQuitting) &#123;</div><div class="line">                dispose();</div><div class="line">                return null;</div><div class="line">            &#125;</div><div class="line">            // If first time idle, then get the number of idlers to run.</div><div class="line">            // Idle handles only run if the queue is empty or if the first message</div><div class="line">            // in the queue (possibly a barrier) is due to be handled in the future.</div><div class="line">            if (pendingIdleHandlerCount &lt; 0</div><div class="line">                    &amp;&amp; (mMessages == null || now &lt; mMessages.when)) &#123;</div><div class="line">                    // 线程空闲，计算IdleHandler的数量</div><div class="line">                pendingIdleHandlerCount = mIdleHandlers.size();</div><div class="line">            &#125;</div><div class="line">            // 没有IdleHandler   阻塞队列</div><div class="line">            if (pendingIdleHandlerCount &lt;= 0) &#123;</div><div class="line">                // No idle handlers to run.  Loop and wait some more.</div><div class="line">                mBlocked = true;</div><div class="line">                continue;</div><div class="line">            &#125;</div><div class="line">            if (mPendingIdleHandlers == null) &#123;</div><div class="line">                mPendingIdleHandlers = new IdleHandler[Math.max(pendingIdleHandlerCount, 4)];</div><div class="line">            &#125;</div><div class="line">                mPendingIdleHandlers = mIdleHandlers.toArray(mPendingIdleHandlers);</div><div class="line">            &#125;</div><div class="line">        // Run the idle handlers.</div><div class="line">        // We only ever reach this code block during the first iteration.</div><div class="line">        // 处理IdleHandler部分</div><div class="line">        for (int i = 0; i &lt; pendingIdleHandlerCount; i++) &#123;</div><div class="line">            final IdleHandler idler = mPendingIdleHandlers[i];</div><div class="line">            mPendingIdleHandlers[i] = null; // release the reference to the handler</div><div class="line">            boolean keep = false;</div><div class="line">            try &#123;</div><div class="line">                keep = idler.queueIdle();</div><div class="line">            &#125; catch (Throwable t) &#123;</div><div class="line">                Log.wtf(TAG, &quot;IdleHandler threw exception&quot;, t);</div><div class="line">            &#125;</div><div class="line">            // 是否需要移除IdleHandler</div><div class="line">            if (!keep) &#123;</div><div class="line">                synchronized (this) &#123;</div><div class="line">                    mIdleHandlers.remove(idler);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        // Reset the idle handler count to 0 so we do not run them again.</div><div class="line">        pendingIdleHandlerCount = 0;</div><div class="line">        // While calling an idle handler, a new message could have been delivered</div><div class="line">        // so go back and look again for a pending message without waiting.</div><div class="line">        nextPollTimeoutMillis = 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4、MessageQueue-IdleHandler"><a href="#4、MessageQueue-IdleHandler" class="headerlink" title="4、MessageQueue.IdleHandler"></a>4、MessageQueue.IdleHandler</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">messageQueue.addIdleHandler(new MessageQueue.IdleHandler() &#123;</div><div class="line">    /**</div><div class="line">     * 返回值boolean 意思是needKeep</div><div class="line">     * true，表示要保留保留， 代表不移除这个idleHandler，可以反复执行</div><div class="line">     * false代表执行完毕之后就移除这个idleHandler, 也就是只执行一次</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public boolean queueIdle() &#123;</div><div class="line">        Log.e(TAG, &quot;--------------&gt;queueIdle  主线程空闲了&quot;);</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="5、同步分割栏"><a href="#5、同步分割栏" class="headerlink" title="5、同步分割栏"></a>5、同步分割栏</h4><p>也是一个targer = null 的Message</p>
<p>“同步分割栏”是起什么作用的呢？它就像一个卡子，卡在消息链表中的某个位置，当消息循环不断从消息链表中摘取消息并进行处理时，一旦遇到这种“同步分割栏”，那么即使在分割栏之后还有若干已经到时的普通Message，也不会摘取这些消息了。请注意，此时只是不会摘取“普通Message”了，如果队列中还设置有“异步Message”，那么还是会摘取已到时的“异步Message”的。<br>在Android的消息机制里，“普通Message”和“异步Message”也就是这点儿区别啦，也就是说，<strong>如果消息列表中根本没有设置“同步分割栏”的话，那么“普通Message”和“异步Message”的处理就没什么大的不同了</strong>。</p>
<p><strong>int postSyncBarrier(long when)</strong>  // 往MQ里加入一个同步分割栏，按照when的大小插入到合适位置<br><strong>removeSyncBarrier(int token)</strong> // 从MQ中移除同步分割栏</p>
<h4 id="6、清空MQ"><a href="#6、清空MQ" class="headerlink" title="6、清空MQ"></a>6、清空MQ</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">void quit(boolean safe) &#123;</div><div class="line">    if (!mQuitAllowed) &#123;   //UI线程的Looper消息队列不可退出 mQuitAllowed = false</div><div class="line">        throw new IllegalStateException(&quot;Main thread not allowed to quit.&quot;);</div><div class="line">    &#125;</div><div class="line">    synchronized (this) &#123;</div><div class="line">        if (mQuitting) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        mQuitting = true;</div><div class="line">        if (safe) &#123; // 移除MQ所有的延迟消息</div><div class="line">            removeAllFutureMessagesLocked();</div><div class="line">        &#125; else &#123;    // 移除MQ中的所有Message</div><div class="line">            removeAllMessagesLocked();</div><div class="line">        &#125;</div><div class="line">        // We can assume mPtr != 0 because mQuitting was previously false.</div><div class="line">        nativeWake(mPtr); // 唤醒MQ</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 移除MQ中的所有Message</div><div class="line">private void removeAllMessagesLocked() &#123;</div><div class="line">    Message p = mMessages;</div><div class="line">    while (p != null) &#123;</div><div class="line">        Message n = p.next;</div><div class="line">        p.recycleUnchecked();</div><div class="line">        p = n;</div><div class="line">    &#125;</div><div class="line">    mMessages = null;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// 移除MQ所有的延迟消息 n.when &gt; now</div><div class="line">private void removeAllFutureMessagesLocked() &#123;</div><div class="line">    final long now = SystemClock.uptimeMillis();</div><div class="line">    Message p = mMessages;</div><div class="line">    if (p != null) &#123;</div><div class="line">        if (p.when &gt; now) &#123;   // 如果队列头部消息为延迟消息，则清空MQ</div><div class="line">            removeAllMessagesLocked();</div><div class="line">        &#125; else &#123;</div><div class="line">            Message n;</div><div class="line">            for (;;) &#123;</div><div class="line">                n = p.next;</div><div class="line">                if (n == null) &#123;</div><div class="line">                    return;</div><div class="line">                &#125;</div><div class="line">                if (n.when &gt; now) &#123;  // 遍历找到延迟消息，退出循环</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                p = n;</div><div class="line">            &#125;</div><div class="line">            p.next = null; </div><div class="line">            // 清空所有的延迟消息</div><div class="line">            do &#123;</div><div class="line">                p = n;</div><div class="line">                n = p.next;</div><div class="line">                p.recycleUnchecked();</div><div class="line">            &#125; while (n != null);</div><div class="line">        &#125;</div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Handler-memory-leak"><a href="#Handler-memory-leak" class="headerlink" title="Handler-memory-leak"></a>Handler-memory-leak</h4><p><a href="http://www.androiddesignpatterns.com/2013/01/inner-class-handler-memory-leak.html" target="_blank" rel="external">http://www.androiddesignpatterns.com/2013/01/inner-class-handler-memory-leak.html</a></p>
<h4 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h4><p><a href="http://bbs.9ria.com/thread-247435-1-1.html" target="_blank" rel="external">http://bbs.9ria.com/thread-247435-1-1.html</a><br><a href="http://www.mamicode.com/info-detail-984722.html" target="_blank" rel="external">http://www.mamicode.com/info-detail-984722.html</a><br><a href="http://www.cnblogs.com/codingmyworld/archive/2011/09/14/2174255.html" target="_blank" rel="external">http://www.cnblogs.com/codingmyworld/archive/2011/09/14/2174255.html</a><br><a href="http://my.oschina.net/youranhongcha/blog/492591?fromerr=d6t15a3t#OSC_h3_10" target="_blank" rel="external">http://my.oschina.net/youranhongcha/blog/492591?fromerr=d6t15a3t#OSC_h3_10</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> Handler、Message </tag>
            
            <tag> 分享 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Rxjava-learn]]></title>
      <url>/2016/02/25/2016-02-26-Rxjava-Android/</url>
      <content type="html"><![CDATA[<h4 id="Rxjava-learn"><a href="#Rxjava-learn" class="headerlink" title="Rxjava-learn"></a>Rxjava-learn</h4><h4 id="1、github-项目地址：-https-github-com-ReactiveX-RxJava"><a href="#1、github-项目地址：-https-github-com-ReactiveX-RxJava" class="headerlink" title="1、github 项目地址：  https://github.com/ReactiveX/RxJava"></a>1、github 项目地址：  <a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="external">https://github.com/ReactiveX/RxJava</a></h4><p>（RxAndroid 是一个专门为Android开发做出最小适配框架，可以方便的写出响应式的组件和一站式服务）</p>
<a id="more"></a>
<h4 id="2、rxjava是一个响应式的编程框架，基于观察者模式。"><a href="#2、rxjava是一个响应式的编程框架，基于观察者模式。" class="headerlink" title="2、rxjava是一个响应式的编程框架，基于观察者模式。"></a>2、rxjava是一个响应式的编程框架，基于观察者模式。</h4><p>其中关键的要素就是Observable(事件产生者,也是事件的观察者)  Operator（操作符） Subscriber（事件的消费者，也是事件的订阅者）</p>
<p>特点：使用可观察序列编写异步和事件驱动的库，扩展了观察者模式以支持数据和事件序列，并且加入了operator操作符来实现数据转换和事件过滤</p>
<ol>
<li>易于并发从而更好的利用服务器的能力      （可以自由指定运行的线程）</li>
<li>易于有条件的异步执行                               （通过操作符控制流程）</li>
<li>一种更好的方式来避免回调地狱                 （多个事件源基于组合而不是嵌套）</li>
<li>一种响应式方法                                          （编码更简单）</li>
</ol>
<p>优点：将开发者的注意力从低级别的线程同步、线程安全、并发数据对象这些问题中转移</p>
<h4 id="3、一个简单的示例"><a href="#3、一个简单的示例" class="headerlink" title="3、一个简单的示例"></a>3、一个简单的示例</h4><h4 id="A、创建一个Observable"><a href="#A、创建一个Observable" class="headerlink" title="A、创建一个Observable"></a>A、创建一个Observable</h4><pre><code>Observable&lt;String&gt; myObservable = Observable.create(
    new Observable.OnSubscribe&lt;String&gt;() {
         @Override
        public void call(Subscriber&lt;? super String&gt;sub) {
        sub.onNext(&quot;Hello, world!&quot;);
        sub.onCompleted();
        }
    });
</code></pre><h4 id="B、创建一个Subscriber"><a href="#B、创建一个Subscriber" class="headerlink" title="B、创建一个Subscriber"></a>B、创建一个Subscriber</h4><pre><code>Subscriber&lt;String&gt; mySubscriber = new Subscriber&lt;String&gt;() {
    @Override
    public void onNext(String s) {
        System.out.println(s);
    }
    @Override
    public void onCompleted() {
    }
    @Override
    public void onError(Throwable e) {
    }
};
</code></pre><h4 id="C、将两者联系起来"><a href="#C、将两者联系起来" class="headerlink" title="C、将两者联系起来"></a>C、将两者联系起来</h4><pre><code>myObservable.subscribe(mySubscriber); // Outputs &quot;Hello, world!&quot;
</code></pre><p>这是一个展示流程的例子：myObservable是事件源，mySubscriber是订阅者，<br>通过Observable的subscribe方法，将事件输出给订阅者去消费。</p>
<h4 id="4、什么是Observable-Observer-Subscriber-Subscription"><a href="#4、什么是Observable-Observer-Subscriber-Subscription" class="headerlink" title="4、什么是Observable   Observer   Subscriber   Subscription"></a>4、什么是Observable   Observer   Subscriber   Subscription</h4><p>Observable  事件观察者或者事件生产者  这两种叫法是针对不同的对象而言的。第一：对于Subscriber它是事件的生产者，因为当使用subscribe方法对一个Observable添加一个订阅者的时候，这个时候会立即调用onSubscribe的call方法，将产生的一个字符串“Hello，world”这个事件交给订阅者的onNext()方法。第二：对于产生的这个字符串“Hello， world”而言，Observable就是一个事件观察者，它观察到了这个字符串的产生，然后将这个字符串产生的事件发送给了订阅者。</p>
<p>Observer和Subscriber是一个东西，Subscriber继承自Observer。</p>
<p>Subscription是一个接口，提供了对一个Subscriber进行取消订阅（unSubscribe）和是否取消订阅（isUnsubscribe）的功能，它的具体实现就是Subscriber。上例中的第三步中subscribe方法将会返回一个Subscription，用户可以方便的取消订阅。</p>
<h4 id="5、其他的创建Observable的方式"><a href="#5、其他的创建Observable的方式" class="headerlink" title="5、其他的创建Observable的方式"></a>5、其他的创建Observable的方式</h4><pre><code>Observable.From(DataCollection) 使用一个数据集创建一个Observable，自动遍历发射集合中每条数据
Observable.just(a java method return )  根据一个或多个其他的方法返回值创建一个Observable，因为just可以接受1-9各参数，然后按照参数顺序发射他们。也可以是一个数据集合，像from方法，但他是发射整个列表。
</code></pre><h4 id="6、Subject-Observable-Observer-（既是事件产生者，又是事件订阅者）"><a href="#6、Subject-Observable-Observer-（既是事件产生者，又是事件订阅者）" class="headerlink" title="6、Subject = Observable + Observer （既是事件产生者，又是事件订阅者）"></a>6、Subject = Observable + Observer （既是事件产生者，又是事件订阅者）</h4><pre><code>Subject有四种类型 PublishSubject  BehaviorSubject     ReplaySubject     AsyncSubject
</code></pre><p>PublishSubject 是一个可以在任何时候发射事件的事件产生者，而不一定是在订阅者开始订阅的时候。<br>BehaviorSubject会首先向他的订阅者发送截至订阅前最新的一个数据对象（或初始值），然后正常发送订阅后的数据流。<br>ReplaySubject会缓存它所订阅的所有数据，向任意一个订阅它的观察者重发。<br>AsyncSubject只会发布最后一个数据 给已经订阅的每一个观察者。</p>
<hr>
<p>最最关键的几个概念：**Observable   Observer    Action(Observer observer)</p>
<p>当Observable被subscribe（订阅）的时候，调用action的call方法</p>
<p>和观察者模式对比：  被观察者     观察者      被观察持有观察者的引用，当数据变化时通知观察者</p>
<hr>
<h4 id="7、操作符"><a href="#7、操作符" class="headerlink" title="7、操作符"></a>7、操作符</h4><ul>
<li><p> <strong>repeat()  对一个Observable重复发射数据</strong>例：</p>
<p>  Observable.just(1, 2).repeat(5).subscribe(new Subscriber<integer>() {</integer></p>
<pre><code>@Override
public void onCompleted() {

}

@Override
public void onError(Throwable e) {

}

@Override
public void onNext(Integer integer) {
    System.out.println(&quot;integer------&gt;&quot; + integer);
}
</code></pre><p>  });</p>
</li>
<li><p><strong>defer() 延迟Observable的创建直到观察者订阅</strong>例</p>
<p>  private Observable<long> getDeferObservable() {</long></p>
<pre><code>return Observable.defer(new Func0&lt;Observable&lt;Long&gt;&gt;() {
    @Override
    public Observable&lt;Long&gt; call() {
        return getJustObservable();
    }
});
</code></pre><p>  }</p>
</li>
</ul>
<p><strong>每次生成新的observable</strong></p>
<pre><code>@Test
public void testDefer() {
    Observable&lt;Long&gt; observable = getDeferObservable();
    for (int i = 0; i &lt; 10; i++) {
        observable.subscribe(new Action1&lt;Long&gt;() {
            @Override
            public void call(Long aLong) {
                System.out.println(&quot;aLong------&gt;&quot; + aLong);
            }
        });
    }
}
</code></pre><ul>
<li><p><strong>interval() 在指定的时间间隔内重复数字 0到正无穷</strong></p>
<p>  Subscription topeMePlease = Observable.interval(3, TimeUnit.SECONDS)</p>
<pre><code>.subscribe(new Observer&lt;Long&gt;() {
    @Override
    public void onCompleted() {

    }

    @Override
    public void onError(Throwable e) {

    }

    @Override
    public void onNext(Long aLong) {
        System.out.println(&quot;aLong----&gt;&quot;+aLong);
    }
});
</code></pre></li>
<li><p><strong>timer()  指定延迟时间指定间隔发射</strong></p>
<p>  Observable.timer(3, 100, TimeUnit.MILLISECONDS).subscribe(new Action1<long>() {</long></p>
<pre><code>@Override
public void call(Long aLong) {
    System.out.println(&quot;aLong------&gt;&quot; + aLong);
}
</code></pre><p>  });</p>
</li>
<li><p><strong>filter()  过滤出符合要求的数据</strong></p>
<p>  filter((appInfo) -&gt; appInfo.getName().startWith(“C”)) //过滤出C开头的应用名称</p>
</li>
<li><p><strong>take()  指定原始序列中的前几条数据发射</strong></p>
<p>  take(3)</p>
</li>
<li><p><strong>takeLast()  指定原始序列中的最后几条数据发射</strong></p>
<p>  takeLast(3)</p>
</li>
<li><p><strong>distinct()  去除重复数据  可以用来防止界面控件重复点击</strong></p>
</li>
<li><p><strong>distinctUntilChanged()  去除与上一个重复的值</strong></p>
</li>
<li><p><strong>first()和last() 发射原始序列中的第一个或最后一个值</strong></p>
</li>
</ul>
<p>-<br><strong>firstOrDefault()和lastOrDefault()  当观测序列完成时发送默认值</strong></p>
<ul>
<li><p><strong>skip()和skipLast()   不发射前N个值或者后N个值</strong></p>
</li>
<li><p><strong>ElementAt()   elementAtOrDefault()     发射指定位置的元素 ，如果没有就发送默认值</strong></p>
</li>
<li><p><strong>sample(30, TimeUnit.SECONDS)  在指定时间间隔内由Observable发射最近一次的数值  再加一个throttleFirst()就是发射第一个而不是最近一个元素</strong></p>
</li>
<li><p><strong>timeout()   每隔一定时间发射至少一次数据，如果在指定时间间隔内没有得到一个值则发送一个错误</strong></p>
</li>
<li><p><strong>debounce()   过滤掉由Observable发射的速率过快的数据</strong></p>
</li>
<li><p><strong>map  指定一个fun对象，然后将它应用到每一个由Observable发射的值上</strong></p>
</li>
<li><p><strong>flatMap()  根据上一个Observable发射的数据生成新的Observable，注意新产生的Observable是平铺的，也就是说最终得到数据顺序是不定的，并且有一个产生error，此次调用就会结束</strong></p>
</li>
<li><p><strong>concatMap()   解决的flatMap()的交叉问题，能够把发射的值连续在一起，而不是合并他们</strong></p>
</li>
<li><p><strong>scan()   累加器  对原始Observable发射的每一项数据都应用一个函数，计算出函数的结果值，并将该值填回可观测序列，等待和下一次发射的数据一起使用。</strong>例：</p>
<p>  Observable.just(1,2,3,4,5)</p>
<pre><code>        .scan((sum, item) -&gt; sum + item)
        .subscribe(new Subscriber&lt;Interger&gt; () {
@Override
public void onCompleted() {

}

@Override
public void onError(Throwable e) {

}

@Override
public void onNext(Integer integer) {
    System.out.println(&quot;integer------&gt;&quot; + integer);
}
</code></pre><p>  });</p>
</li>
</ul>
<p><strong>输出结果为：1   3  6  10  15</strong><br>（这个操作符可用来对数据进行排序）</p>
<ul>
<li><p><strong>groupBy()  将原Observable变换成哼一个发射Observables的新的Observable。他们中的每一个新的Observable都发射一组指定的数据</strong></p>
</li>
<li><p><strong>buffer()    将原Observable变换一个新的Observable，这个新的Observable每次发射一组列表而不是一个个发射</strong></p>
</li>
<li><p><strong>merge()   多个Observable合并成一个最终发射的Observable  （多个Observable发射的数据类型一般相同）</strong></p>
</li>
<li><p><strong>zip   合并多个Observable数据，生成新的数据</strong></p>
</li>
</ul>
<h4 id="8、调度器"><a href="#8、调度器" class="headerlink" title="8、调度器"></a>8、调度器</h4><p>RxJava提供了5种调度器：<br>    <strong>.io()  .computation()  .immediate()  .newThread()  .trampoline()</strong></p>
<ul>
<li><p>Schedulers.io()  专用于io操作，但是大量的io操作会创建多个线程并占用内存</p>
</li>
<li><p>Schedulers.computation()  计算工作默认的调度器，与io无关</p>
</li>
<li><p>Schedulers.immedidate()  在当前线程立即执行指定的工作</p>
</li>
<li><p>Schedulers.newThread()   为指定任务启动一个新的线程</p>
</li>
<li><p>schedulers.tramppline()  把要执行的任务加入到当前线程任务队列中，调度器会顺序执行队列中的任务</p>
</li>
</ul>
<p>Executors.newScheduledThreadPool(1, threadFactory);<br>ScheduledExecutorService</p>
<p>SubscribeOn(Schedulers.io())  指定任务工作线程<br>ObserveOn(AndroidSchedulers.mainThread())  指定观察者处理返回结果所在线程为ui线程</p>
<h4 id="9、在Android中使用场景"><a href="#9、在Android中使用场景" class="headerlink" title="9、在Android中使用场景"></a>9、在Android中使用场景</h4><p>(1). 先检查本地是否有数据缓存，有的话直接返回，没有的话再请求网路数据<br>    对应操作符为  contact(Observable1, Observable2 …)</p>
<p>(2). 多个接口并发请求，等所有结果返回再统一刷新页面<br>    这种情况需要分两种条件：</p>
<pre><code>a、不同接口返回数据格式相同，不需要做类型判断和转换，可以用merge(Observable1, Observable2 ...)

b、不同接口返回数据格式不同，需要经过处理再合并成新的数据结构，可以用
    zip(Observable1, Observable2,                                     
    new Fun2&lt;firstResult, SecondResult, newResult&gt;) 
    或combineLatest(Observable1, Observable2, new                                         
    Fun2&lt;firstResult, SecondResult, newResult&gt;)
    对于combineLatest和zip，在网络请求的使用情景下，Observable只发射一次数据，二者是没有区别的。
    如果是Observable多次发射数据的话，combineLatest会有对不同实际发射出的事件的合并有不同的合并结果。
    而zip则是一一对应的。

    Observable1  1  2  3
    Observable2  1  2  3 
</code></pre><p>(3). 一个任务的执行依赖上一个任务的返回结果,<br>    对应操作符为flatmap(object,Observable)，根据上一个任务的返回结构再次生成新的Observable</p>
<p>(4). 界面按钮防止连续点击，对应操作符为throttleFisrt(时间段， 时间单位)，在指定时间段内只发送一次数据</p>
<p>(5). 替代Handler实现定时器的操作符  timer(delaytime, time, timeUnit)  X秒后执行某操作</p>
<p>(6). 替代Handler.postDelay实现文本搜索的操作符为debounce(400, TimeUnit.MILLISECONDS)</p>
<p>(7). 替代Handler.postDelay实现倒计时的操作符为interval(1, TimeUnit.SECONDS) ，每隔1秒发射一次事件</p>
<p>(8). 使用schedulePeriodically做轮询请求</p>
<pre><code>Observable.create(new Observable.OnSubscribe&lt;String&gt;() {  
    @Override  
    public void call(final Subscriber&lt;? super String&gt; observer) {  
        Schedulers.newThread().createWorker()  
              .schedulePeriodically(new Action0() {  
                  @Override  
                  public void call() {  
                      observer.onNext(doNetworkCallAndGetStringResult());  
                  }  
              }, INITIAL_DELAY, POLLING_INTERVAL, TimeUnit.MILLISECONDS);  
    }  
}).subscribe(new Action1&lt;String&gt;() {  
    @Override  
    public void call(String s) {  
        log.d(&quot;polling….”));  
    }  
})  
</code></pre><p>(9)、注册界面信息填写完整，下一步操作按钮才点亮 combineLatest</p>
<pre><code>Observable&lt;CharSequence&gt; _emailChangeObservable = RxTextView.textChanges(_email).skip(1);  
Observable&lt;CharSequence&gt; _passwordChangeObservable = RxTextView.textChanges(_password).skip(1);  
Observable&lt;CharSequence&gt;   _numberChangeObservable = RxTextView.textChanges(_number).skip(1);  

Observable.combineLatest(_emailChangeObservable,  
      _passwordChangeObservable,  
      _numberChangeObservable,  
      new Func3&lt;CharSequence, CharSequence, CharSequence, Boolean&gt;() {  
          @Override  
          public Boolean call(CharSequence newEmail,  
                              CharSequence newPassword,  
                              CharSequence newNumber) {  

              Log.d(&quot;xiayong&quot;,newEmail+&quot; &quot;+newPassword+&quot; &quot;+newNumber);  
              boolean emailValid = !isEmpty(newEmail) &amp;&amp;  
                                   EMAIL_ADDRESS.matcher(newEmail).matches();  
              if (!emailValid) {  
                  _email.setError(&quot;Invalid Email!&quot;);  
              }  

              boolean passValid = !isEmpty(newPassword) &amp;&amp; newPassword.length() &gt; 8;  
              if (!passValid) {  
                  _password.setError(&quot;Invalid Password!&quot;);  
              }  

              boolean numValid = !isEmpty(newNumber);  
              if (numValid) {  
                  int num = Integer.parseInt(newNumber.toString());  
                  numValid = num &gt; 0 &amp;&amp; num &lt;= 100;  
              }  
              if (!numValid) {  
                  _number.setError(&quot;Invalid Number!&quot;);  
              }  

              return emailValid &amp;&amp; passValid &amp;&amp; numValid;  

          }  
      })//  
      .subscribe(new Observer&lt;Boolean&gt;() {  
          @Override  
          public void onCompleted() {  
              log.d(&quot;completed&quot;);  
          }  

          @Override  
          public void onError(Throwable e) {  
             log.d(&quot;Error&quot;);  
          }  

          @Override  
          public void onNext(Boolean formValid) {  
             _btnValidIndicator.setEnabled(formValid);    
          }  
      });  
</code></pre><p>(10)、取缓存同时取网络数据，然后更新。 ？？？</p>
<h4 id="10-源码剖析"><a href="#10-源码剖析" class="headerlink" title="10. 源码剖析"></a>10. 源码剖析</h4><p>1.</p>
<pre><code>protected Observable(OnSubscribe&lt;T&gt; f) {
    this.onSubscribe = f;
}
</code></pre><p>Observable的构造方法，即保存构造方法中的参数OnSubscribe</p>
<ol>
<li></li>
</ol>
<pre><code>public static interface OnSubscribe&lt;T&gt; extends Action1&lt;Subscriber&lt;? super T&gt;&gt; {
    // cover for generics insanity
}
</code></pre><p>OnSubscribe是一个带一个参数的Action1，它的参数是一个Subscriber</p>
<pre><code>public interface Action1&lt;T1&gt; extends Action {
    public void call(T1 t1);
}
</code></pre><p>Action1中有一个call方法，其中的参数就是就是第二步创建的Subscriber</p>
<p>3.</p>
<pre><code>Observable observable = Observable.create(new Observable.OnSubscribe&lt;ShopList&gt;() {
    @Override
    public void call(Subscriber&lt;? super ShopList&gt; subscriber) {
        ShopList discountShops = companyRepository.getPayBillShops(offset, pageSize, regionId, longitude, latitude);
        subscriber.onNext(discountShops);
        subscriber.onCompleted();
    }
});
</code></pre><p>在创建Observable的时候，传入了一个新建的OnSubscribe，然后再OnSubscribe中的call方法中，调用了call方法的参数（Subscriber）的onNext() onCompleted() 方法！！！</p>
<p><strong>注：此时的Subscriber（订阅者）并不知道是谁。</strong></p>
<p>至此，被观察者已经基本创建完成，这个被观察者是一个Action，这个Action的具体动作是从网络获取数据。<br>那么，当Action动作完成，会把结果传递给不知道是谁的一个订阅者。。。</p>
<ol>
<li>订阅者的创建</li>
</ol>
<pre><code>public final Subscription subscribe(Subscriber&lt;? super T&gt; subscriber) {
    // validate and proceed
    if (subscriber == null) {
        throw new IllegalArgumentException(&quot;observer can not be null&quot;);
    }
    if (onSubscribe == null) {
        throw new IllegalStateException(&quot;onSubscribe function can not be null.&quot;);
        /*
         * the subscribe function can also be overridden but generally that&apos;s not the appropriate approach
         * so I won&apos;t mention that in the exception
         */
    }

    // new Subscriber so onStart it
    subscriber.onStart();

    /*
     * See https://github.com/ReactiveX/RxJava/issues/216 for discussion on &quot;Guideline 6.4: Protect calls
     * to user code from within an Observer&quot;
     */
    // if not already wrapped
    if (!(subscriber instanceof SafeSubscriber)) {
        // assign to `observer` so we return the protected version
        subscriber = new SafeSubscriber&lt;T&gt;(subscriber);
    }

    // The code below is exactly the same an unsafeSubscribe but not used because it would add a sigificent depth to alreay huge call stacks.
    try {
        // allow the hook to intercept and/or decorate
        hook.onSubscribeStart(this, onSubscribe).call(subscriber);
        return hook.onSubscribeReturn(subscriber);
    } catch (Throwable e) {
        // special handling for certain Throwable/Error/Exception types
        Exceptions.throwIfFatal(e);
        // if an unhandled error occurs executing the onSubscribe we will propagate it
        try {
            subscriber.onError(hook.onSubscribeError(e));
        } catch (OnErrorNotImplementedException e2) {
            // special handling when onError is not implemented ... we just rethrow
            throw e2;
        } catch (Throwable e2) {
            // if this happens it means the onError itself failed (perhaps an invalid function implementation)
            // so we are unable to propagate the error correctly and will just throw
            RuntimeException r = new RuntimeException(&quot;Error occurred attempting to subscribe [&quot; + e.getMessage() + &quot;] and the again while trying to pass to onError.&quot;, e2);
            // TODO could the hook be the cause of the error in the on error handling.
            hook.onSubscribeError(r);
            // TODO why aren&apos;t we throwing the hook&apos;s return value.
            throw r;
        }
        return Subscriptions.unsubscribed();
    }
}

关键代码:
</code></pre><p><strong>hook.onSubscribeStart(this, onSubscribe).call(subscriber);</strong><br><strong>hook.onSubscribeStart(this, onSubscribe)返回的就是Observable创建时构造方法中的参数OnSubcribe</strong></p>
<p>然后调用onSubscribe的call方法，参数就是我们subscribe方法中的参数Subscriber，接下来就一目了然了，第三步中那个不知道是谁的订阅者，就是通过subscribe方法传入的订阅者。<br>至此，订阅者和观察就联系起来了。</p>
<h4 id="11、-多个订阅者的两种实现方法"><a href="#11、-多个订阅者的两种实现方法" class="headerlink" title="11、 多个订阅者的两种实现方法"></a>11、 多个订阅者的两种实现方法</h4><p> a、使用PublishSubject</p>
<pre><code>PublishSubject&lt;String&gt; stringPublishSubject = PublishSubject.create();
    Subscriber subscriber1 = new Subscriber() {
        @Override
            public void onCompleted() {

            }

            @Override
            public void onError(Throwable e) {

            }

            @Override
            public void onNext(Object o) {
                System.out.println(&quot;subscriber1----&gt;&quot; + o.toString());
            }
        };

    Subscriber subscriber2 = new Subscriber() {
        @Override
        public void onCompleted() {

        }

        @Override
        public void onError(Throwable e) {

        }

        @Override
        public void onNext(Object o) {
            System.out.println(&quot;subscriber2----&gt;&quot; + o.toString());
        }
    };
    stringPublishSubject.subscribe(subscriber1);
    stringPublishSubject.subscribe(subscriber2);
    stringPublishSubject.onNext(&quot;a&quot;);
</code></pre><p>b、使用ConnectableObservable</p>
<pre><code>ConnectableObservable&lt;String&gt; stringConnectableObservable = getMemoryObservable().publish();

   Subscriber subscriber1 = new Subscriber() {
       @Override
       public void onCompleted() {

       }

       @Override
       public void onError(Throwable e) {

       }

       @Override
       public void onNext(Object o) {
           System.out.println(&quot;subscriber1----&gt;&quot; + o.toString());
           System.out.println(&quot;subscriber1----&gt;&quot; + System.currentTimeMillis());
       }
   };

   Subscriber subscriber2 = new Subscriber() {
       @Override
       public void onCompleted() {

       }

       @Override
       public void onError(Throwable e) {

       }

       @Override
       public void onNext(Object o) {
           System.out.println(&quot;subscriber2----&gt;&quot; + o.toString());
           System.out.println(&quot;subscriber2----&gt;&quot; + System.currentTimeMillis());
       }
   };

   stringConnectableObservable.subscribe(subscriber1);
   stringConnectableObservable.subscribe(subscriber2);

   stringConnectableObservable.connect();
</code></pre><h4 id="12、操作符使用原理"><a href="#12、操作符使用原理" class="headerlink" title="12、操作符使用原理"></a>12、操作符使用原理</h4><pre><code>关键方法：Observable lift(Operator)


    public final &lt;R&gt; Observable&lt;R&gt; lift(final Operator&lt;? extends R, ? super T&gt; lift) {
        return new Observable&lt;R&gt;(new OnSubscribe&lt;R&gt;() {
            @Override
            public void call(Subscriber&lt;? super R&gt; o) {
                try {
                    Subscriber&lt;? super T&gt; st = hook.onLift(lift).call(o);
                    try {
                        // new Subscriber created and being subscribed with so &apos;onStart&apos; it
                        st.onStart();
                        onSubscribe.call(st);
                    } catch (Throwable e) {
                        // localized capture of errors rather than it skipping all operators 
                        // and ending up in the try/catch of the subscribe method which then
                        // prevents onErrorResumeNext and other similar approaches to error handling
                        if (e instanceof OnErrorNotImplementedException) {
                            throw (OnErrorNotImplementedException) e;
                        }
                        st.onError(e);
                    }
                } catch (Throwable e) {
                    if (e instanceof OnErrorNotImplementedException) {
                        throw (OnErrorNotImplementedException) e;
                    }
                    // if the lift function failed all we can do is pass the error to the final Subscriber
                    // as we don&apos;t have the operator available to us
                    o.onError(e);
                }
            }
        });
    }
</code></pre>]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Blog </tag>
            
            <tag> 分享 </tag>
            
            <tag> Rxjava </tag>
            
            <tag> 响应式编程 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
