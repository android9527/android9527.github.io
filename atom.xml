<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://android9527.com/"/>
  <updated>2019-05-05T06:51:40.028Z</updated>
  <id>http://android9527.com/</id>
  
  <author>
    <name>陈飞跃</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dart语法总结</title>
    <link href="http://android9527.com/2019/05/05/2019-04-29-Dart%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://android9527.com/2019/05/05/2019-04-29-Dart语法总结/</id>
    <published>2019-05-04T16:00:00.000Z</published>
    <updated>2019-05-05T06:51:40.028Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Dart-语言介绍"><a href="#Dart-语言介绍" class="headerlink" title="Dart 语言介绍"></a>Dart 语言介绍</h3><ul><li>Dart 是Google发布的一门开源编程语言</li><li>Dart 目前可用于全平台开发</li><li>Dart是一门面向对象的编程语言</li></ul><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>[Dart 环境安装] <a href="https://www.dartlang.org/tools/sdk#install" target="_blank" rel="noopener">https://www.dartlang.org/tools/sdk#install</a></p><p>IDE 支持</p><p>IntelliJ IDEA  Android Studio<br>VS Code<br>Sublime Text Atom</p><a id="more"></a><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h4><p>使用 var 声明变量，可赋予不同类型的值<br>未初始化时，默认值为 null<br>使用 final 声明一个不可改变的值<br>使用<code>const</code>声明编译期常量</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">a = <span class="string">"aaa"</span>;</span><br><span class="line"><span class="keyword">const</span> b = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h4 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h4><h5 id="（1）数值型-num-int-double"><a href="#（1）数值型-num-int-double" class="headerlink" title="（1）数值型 num (int double)"></a>（1）数值型 num (int double)</h5><ul><li>常用属性：isEven（是否偶数）isOdd isNegative</li><li>常用方法：abs() round() toInt() toDouble()</li></ul><h5 id="（2）字符串-String"><a href="#（2）字符串-String" class="headerlink" title="（2）字符串 String"></a>（2）字符串 String</h5><ul><li>常用方法<br>contains(), subString() toLowerCase() toUpperCase()<br>startsWith() endsWith()</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="built_in">String</span> s1 = <span class="string">'aaa\''</span>;</span><br><span class="line">  <span class="built_in">String</span> s2 = <span class="string">"aaa'"</span>;</span><br><span class="line">  <span class="built_in">String</span> s3 = <span class="string">"""Hello</span></span><br><span class="line"><span class="string">Dart"""</span>;</span><br><span class="line">  <span class="built_in">String</span> s4 = <span class="string">r'aaa\n'</span>;</span><br><span class="line">  <span class="built_in">String</span> s5 = <span class="string">"s1 = <span class="subst">$s1<span class="string">";</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  String s6 = "</span></span>a + b = <span class="subst">$&#123;<span class="number">1</span> + <span class="number">2</span>&#125;</span>"</span>;</span><br></pre></td></tr></table></figure><h5 id="（3）布尔值-bool"><a href="#（3）布尔值-bool" class="headerlink" title="（3）布尔值 bool"></a>（3）布尔值 bool</h5><h5 id="（4）List"><a href="#（4）List" class="headerlink" title="（4）List"></a>（4）List</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">List</span>();</span><br><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'Flutter'</span>, <span class="keyword">true</span>];</span><br><span class="line">list[<span class="number">2</span>] = <span class="string">'Dart'</span>;</span><br><span class="line">list.add(<span class="string">"value"</span>);</span><br><span class="line">list.insert(<span class="number">1</span>, <span class="string">'element'</span>);</span><br><span class="line">list.remove(<span class="string">"value"</span>);</span><br><span class="line">list.removeAt(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> typeList = <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;(); <span class="comment">// 只能添加字符串类型的元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> list) &#123;</span><br><span class="line">  <span class="built_in">print</span>(item);</span><br><span class="line">&#125;</span><br><span class="line">list.forEach((element) =&gt; <span class="built_in">print</span>(element));</span><br></pre></td></tr></table></figure><h5 id="（5）Map"><a href="#（5）Map" class="headerlink" title="（5）Map"></a>（5）Map</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = &#123;<span class="string">'fisrt'</span>: <span class="string">'Dart'</span>, <span class="string">'second'</span>: <span class="string">'Java'</span>&#125;;</span><br><span class="line"><span class="built_in">print</span>(map.length);</span><br><span class="line"><span class="built_in">print</span>(map.isEmpty);</span><br><span class="line"><span class="built_in">print</span>(map.isNotEmpty);</span><br><span class="line"><span class="built_in">print</span>(map.keys);</span><br><span class="line"><span class="built_in">print</span>(map.values);</span><br><span class="line"><span class="built_in">print</span>(map.containsKey(<span class="string">"key"</span>));</span><br><span class="line"><span class="built_in">print</span>(map.containsValue(<span class="string">"value"</span>));</span><br><span class="line">map[<span class="string">'third'</span>] = <span class="string">'Python'</span>;</span><br><span class="line">map.forEach((key, value) =&gt; <span class="built_in">print</span>(<span class="string">"key:<span class="subst">$&#123;key&#125;</span>, value:<span class="subst">$&#123;value&#125;</span>"</span>));</span><br></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>1、算术运算符  + - <em> / ~/（取整） %<br>2、关系运算符  ==(判断内容是否相同) !=, &gt;, &lt;, &gt;=, &lt;=<br>3、逻辑运算符  ! &amp;&amp; ||<br>4、赋值运算符 =    ??=   +=  -+  </em>=   /=  %=  ~/=<br>5、条件表达式<br>三目运算符 condition ? expr1 : expr2<br>?? 运算符  expr1 ?? expr2</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> s = <span class="keyword">true</span> ? <span class="string">"Male"</span> : <span class="string">"Female"</span>;</span><br><span class="line"><span class="keyword">var</span> s1, s2 = <span class="string">"not null"</span>;</span><br><span class="line">s = s1 ?? s2;</span><br></pre></td></tr></table></figure><h4 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h4><p>if for while do…while break continue switch…case</p><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是⼀个⾏注释</span></span><br><span class="line"><span class="comment">/* 这是⼀个多⾏的</span></span><br><span class="line"><span class="comment"> 块注释。 */</span></span><br><span class="line"><span class="comment">/* /* */</span> */</span><br></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ul><li>方法定义</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">返回类型 方法名(参数1, 参数2, ...) &#123;</span><br><span class="line">    方法体</span><br><span class="line">    return 返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>方法特性</p><p>方法也是对象，并且有具体类型 <code>Function</code></p><p>返回值类型、参数类型可省略</p><p>箭头语法：=&gt; expr 是 {return expr} 的缩写，只适用于一个表达式</p><p>方法都有返回值，如果没有指定，默认 return null</p><p>方法不能重载</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span> getPerson(<span class="built_in">String</span> name, <span class="built_in">int</span> age) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"name = <span class="subst">$name</span>, age = <span class="subst">$age<span class="string">";</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">printPerson(name, age) &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  print("</span></span>name = <span class="subst">$name</span>, age = <span class="subst">$age<span class="string">");</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">getPerson(name) =&gt; "</span></span>name = <span class="subst">$name<span class="string">";</span></span></span></span><br></pre></td></tr></table></figure><ul><li><p>可选参数</p><p>可选命名参数：{param1, param2, …}</p><p>可选位置参数：[param1, param2, …]</p><p>可选参数可以指定默认值</p><p>可选参数只能放在方法的最后</p><p>函数可以使用=为命名参数和位置参数定义默认值。默认值必须是编译时常量。如果没有提供默认值，则默认值为null</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  printPerson(<span class="string">"zhangsan"</span>);</span><br><span class="line">  printPerson(<span class="string">"zhangsan"</span>, gender: <span class="number">1</span>);</span><br><span class="line">  printPerson(<span class="string">"zhangsan"</span>, gender: <span class="number">1</span>, age: <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">  printPerson2(<span class="string">"zhangsan"</span>, <span class="number">18</span>, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printPerson(name, &#123;age = <span class="number">18</span>, gender = <span class="number">0</span>&#125;) &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">"name = <span class="subst">$name</span>, age = <span class="subst">$age</span>, gender = <span class="subst">$gender<span class="string">");</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">printPerson2(name, [age = "</span><span class="number">18</span><span class="string">", gender = 1]) &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  print("</span></span>name = <span class="subst">$name</span>, age = <span class="subst">$age</span>, gender = <span class="subst">$gender<span class="string">");</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">&#125;</span></span></span></span><br></pre></td></tr></table></figure><ul><li><p>方法对象</p><p>方法作为对象可以赋值给变量<br>方法可以作为另一个方法的参数</p></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// 方法作为对象可以赋值给变量</span></span><br><span class="line">  <span class="built_in">Function</span> fun = times;</span><br><span class="line">  <span class="built_in">print</span>(fun(<span class="string">"name"</span>));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 列表数据*3</span></span><br><span class="line">  <span class="built_in">List</span> list = [<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>];</span><br><span class="line">  listTimes(list, times);</span><br><span class="line">  <span class="comment">// 匿名方法调用形式</span></span><br><span class="line">  <span class="comment">// listTimes(list, (item) =&gt; item * 3);</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">print</span>(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">times(str) &#123;</span><br><span class="line">  <span class="keyword">return</span> str * <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法可以作为另一个方法的参数</span></span><br><span class="line">listTimes(<span class="built_in">List</span> list, f(item)) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">    list[i] = f(list[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>匿名方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(param1, param2, ...) &#123;</span><br><span class="line">    方法体...</span><br><span class="line">    return 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = (str) =&gt; <span class="built_in">print</span>(str);</span><br><span class="line">func(<span class="string">"test"</span>);</span><br></pre></td></tr></table></figure><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="类及成员可见性"><a href="#类及成员可见性" class="headerlink" title="类及成员可见性"></a>类及成员可见性</h4><ul><li>Dart中的可见性以<code>library</code>为单位</li><li>默认情况下，每一个Dart文件就是一个库</li><li>使用_表示库的私有性</li><li>使用<code>import</code>导入库</li></ul><h4 id="类及对象"><a href="#类及对象" class="headerlink" title="类及对象"></a>类及对象</h4><h5 id="（1）属性与方法"><a href="#（1）属性与方法" class="headerlink" title="（1）属性与方法"></a>（1）属性与方法</h5><ul><li>属性默认会生成getter和setter方法</li><li>使用final声明的属性只有getter方法</li><li>方法不能重载</li></ul><h5 id="（2）计算属性"><a href="#（2）计算属性" class="headerlink" title="（2）计算属性"></a>（2）计算属性</h5><p> 计算属性的值是通过计算而来，本身不存储值<br> 计算属性赋值，其实是通过计算转换到其它变量</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> rect = <span class="keyword">new</span> Rect();</span><br><span class="line"><span class="comment">//  print(rect.area());</span></span><br><span class="line">  <span class="built_in">print</span>(rect.area);</span><br><span class="line">  rect.area = <span class="number">400</span>;</span><br><span class="line">  <span class="built_in">print</span>(rect.width);</span><br><span class="line">  <span class="built_in">print</span>(rect.height);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span> </span>&#123;</span><br><span class="line">  <span class="built_in">num</span> width = <span class="number">20</span>, height = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">num</span> <span class="keyword">get</span> area =&gt; width * height;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> area(area) &#123;</span><br><span class="line">    width = <span class="number">20</span>;</span><br><span class="line">    height = area / width;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（3）-构造方法"><a href="#（3）-构造方法" class="headerlink" title="（3） 构造方法"></a>（3） 构造方法</h5><p> 含有默认构造方法<br> 如果存在自定义构造方法，则默认构造方法无效<br> 构造方法不能重载，使用命名构造方法，可以实现多个构造方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  Person()&#123;&#125;</span></span><br><span class="line">  Person(<span class="keyword">this</span>.name, <span class="keyword">this</span>.age) &#123;</span><br><span class="line">    <span class="built_in">print</span>(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Person.withName(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Person.withAge(age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（4）对象操作符"><a href="#（4）对象操作符" class="headerlink" title="（4）对象操作符"></a>（4）对象操作符</h5><p> 条件访问 ?.<br> 类型转换 as<br> 类型判断 is is!</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Person person;</span><br><span class="line"><span class="comment">// ? 不为 null 则执行</span></span><br><span class="line">person?.work();</span><br><span class="line">person = <span class="keyword">new</span> Person(<span class="string">"zahng "</span>, <span class="number">15</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (person <span class="keyword">is</span> Person) &#123;</span><br><span class="line">  <span class="built_in">print</span>(person.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// .. 级联操作符</span></span><br><span class="line">person..name = <span class="string">"TOM"</span>..age = <span class="number">20.</span>.work();</span><br></pre></td></tr></table></figure><h5 id="（5）抽象类-abstract-class、接口"><a href="#（5）抽象类-abstract-class、接口" class="headerlink" title="（5）抽象类 abstract class、接口"></a>（5）抽象类 abstract class、接口</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象类使用 abstract 表示，不能被直接实例化</span></span><br><span class="line"><span class="comment">// 抽象类可以没有抽象方法</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 抽象方法不用 abstract 修饰</span></span><br><span class="line">  <span class="keyword">void</span> eat();</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Children</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> eat() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类就是接口</span></span><br><span class="line"><span class="comment">// implements 需要重写类的所有成员及方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> , <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> eat() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> run() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（6）Mixins"><a href="#（6）Mixins" class="headerlink" title="（6）Mixins"></a>（6）Mixins</h5><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Mixin 类似于多继承，是在多累继承中重用一个类代码的方式</span></span><br><span class="line"><span class="comment">// 作为 Mixin 的类不能声明构造方法</span></span><br><span class="line"><span class="comment">// 作为 Mixin 的类只能继承Object</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  a() =&gt; <span class="built_in">print</span>(<span class="string">"A.a()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  b() =&gt; <span class="built_in">print</span>(<span class="string">"B.b()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">  c() =&gt; <span class="built_in">print</span>(<span class="string">"C.c()"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">A</span> <span class="title">with</span> <span class="title">B</span>, <span class="title">C</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> d() &#123;</span><br><span class="line">    a(); b(); c();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="（7）操作符覆写"><a href="#（7）操作符覆写" class="headerlink" title="（7）操作符覆写"></a>（7）操作符覆写</h5><p> 覆写操作符需要在类中定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">返回类型 operator 操作符 (参数1, 参数2) &#123;</span><br><span class="line">    实现</span><br><span class="line">    return 返回值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 如果覆写 ==，还需要覆写对象的hashCode getter 方法</p><p><img src="/images/dart/override_operator.jpeg" alt="override_operator"></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  Person p1 = Person(<span class="number">20</span>);</span><br><span class="line">  Person p2 = Person(<span class="number">18</span>);</span><br><span class="line">  <span class="built_in">print</span>(p1 &gt; p2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  Person(<span class="keyword">this</span>.age);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">bool</span> <span class="keyword">operator</span> &gt;(Person person) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age &gt; person.age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举-enum-和-泛型"><a href="#枚举-enum-和-泛型" class="headerlink" title="枚举 enum 和 泛型"></a>枚举 enum 和 泛型</h3><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.dartlang.org/guides/language/language-tour" target="_blank" rel="noopener">A Tour of the Dart Language</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Dart-语言介绍&quot;&gt;&lt;a href=&quot;#Dart-语言介绍&quot; class=&quot;headerlink&quot; title=&quot;Dart 语言介绍&quot;&gt;&lt;/a&gt;Dart 语言介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Dart 是Google发布的一门开源编程语言&lt;/li&gt;
&lt;li&gt;Dart 目前可用于全平台开发&lt;/li&gt;
&lt;li&gt;Dart是一门面向对象的编程语言&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;开发环境&quot;&gt;&lt;a href=&quot;#开发环境&quot; class=&quot;headerlink&quot; title=&quot;开发环境&quot;&gt;&lt;/a&gt;开发环境&lt;/h3&gt;&lt;p&gt;[Dart 环境安装] &lt;a href=&quot;https://www.dartlang.org/tools/sdk#install&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.dartlang.org/tools/sdk#install&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;IDE 支持&lt;/p&gt;
&lt;p&gt;IntelliJ IDEA  Android Studio&lt;br&gt;VS Code&lt;br&gt;Sublime Text Atom&lt;/p&gt;
    
    </summary>
    
      <category term="Dart" scheme="http://android9527.com/categories/Dart/"/>
    
    
      <category term="Flutter" scheme="http://android9527.com/tags/Flutter/"/>
    
      <category term="Dart" scheme="http://android9527.com/tags/Dart/"/>
    
  </entry>
  
  <entry>
    <title>基于栈和基于寄存器的指令集区别</title>
    <link href="http://android9527.com/2019/03/05/2019-03-05-%E5%9F%BA%E4%BA%8E%E6%A0%88%E5%92%8C%E5%9F%BA%E4%BA%8E%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E6%8C%87%E4%BB%A4%E9%9B%86%E5%8C%BA%E5%88%AB/"/>
    <id>http://android9527.com/2019/03/05/2019-03-05-基于栈和基于寄存器的指令集区别/</id>
    <published>2019-03-04T16:00:00.000Z</published>
    <updated>2019-03-05T08:46:50.684Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基于栈和基于寄存器的指令集区别"><a href="#基于栈和基于寄存器的指令集区别" class="headerlink" title="基于栈和基于寄存器的指令集区别"></a>基于栈和基于寄存器的指令集区别</h4><ul><li>基于栈的指令集<br>优点：可移植（寄存器由硬件提供，程序依赖硬件寄存器会收到硬件约束），基于栈的指令集架构，用户不会直接使用这些寄存器，由虚拟机实现决定把一些访问频繁的数据放到寄存器中获得尽量更好的性能；还有优点是代码相对紧凑（字节码中每个字节对应一条指令）、编译器实现简单（无需考虑空间分配）等；<br>缺点：执行速度慢，效率较低。因为操作本身伴随着大量的入栈出栈，导致完成相同功能所需的指令数量增加；更重要的是栈实现在内存中，频繁的栈访问意味着频繁的内存访问，这大大降低了效率。<a id="more"></a></li><li>基于寄存器的指令集<br>优点：效率相对较高<br>缺点：平台依赖，可移植性差。编译实现复杂。（相对于基于栈来说）</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;基于栈和基于寄存器的指令集区别&quot;&gt;&lt;a href=&quot;#基于栈和基于寄存器的指令集区别&quot; class=&quot;headerlink&quot; title=&quot;基于栈和基于寄存器的指令集区别&quot;&gt;&lt;/a&gt;基于栈和基于寄存器的指令集区别&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;基于栈的指令集&lt;br&gt;优点：可移植（寄存器由硬件提供，程序依赖硬件寄存器会收到硬件约束），基于栈的指令集架构，用户不会直接使用这些寄存器，由虚拟机实现决定把一些访问频繁的数据放到寄存器中获得尽量更好的性能；还有优点是代码相对紧凑（字节码中每个字节对应一条指令）、编译器实现简单（无需考虑空间分配）等；&lt;br&gt;缺点：执行速度慢，效率较低。因为操作本身伴随着大量的入栈出栈，导致完成相同功能所需的指令数量增加；更重要的是栈实现在内存中，频繁的栈访问意味着频繁的内存访问，这大大降低了效率。
    
    </summary>
    
      <category term="Java" scheme="http://android9527.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://android9527.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>happens-before 和 as-if-serial</title>
    <link href="http://android9527.com/2019/03/05/2019-03-05-happens-before%20%E5%92%8C%20as-if-serial/"/>
    <id>http://android9527.com/2019/03/05/2019-03-05-happens-before 和 as-if-serial/</id>
    <published>2019-03-04T16:00:00.000Z</published>
    <updated>2019-03-21T02:41:27.637Z</updated>
    
    <content type="html"><![CDATA[<h4 id="happens-before-和-as-if-serial"><a href="#happens-before-和-as-if-serial" class="headerlink" title="happens-before 和 as-if-serial"></a>happens-before 和 as-if-serial</h4><h5 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h5><p>happens-before 用来指定两个操作之间的执行顺序。<br>由于这两个操作可以在一个线程之内，也可以是在不同线程之间。因此，JMM可以通过happens-before关系向程序员提供跨线程的内存可见性保证（如果A线程的写操作a与B线程的读操作b之间存在happens-before关系，尽管a操作和b操作在不同的线程中执行，但JMM向程序员保证a操作将对b操作可见）。<br><a id="more"></a><br>具体的定义为：</p><ul><li><p>1）如果一个操作happens-before另一个操作，那么第一个操作的执行结果将对第二个操作可见，而且第一个操作的执行顺序排在第二个操作之前。</p></li><li><p>2）两个操作之间存在happens-before关系，并不意味着Java平台的具体实现必须要按照happens-before关系指定的顺序来执行。如果重排序之后的执行结果，与按happens-before关系来执行的结果一致，那么这种重排序并不非法（也就是说，JMM允许这种重排序）。</p><p>上面的1）是JMM对程序员的承诺。从程序员的角度来说，可以这样理解happens-before关系：如果A happens-before B，那么Java内存模型将向程序员保证——A操作的结果将对B可见，且A的执行顺序排在B之前。注意，这只是Java内存模型向程序员做出的保证！</p><p>上面的2）是JMM对编译器和处理器重排序的约束原则。正如前面所言，JMM其实是在遵循一个基本原则：只要不改变程序的执行结果（指的是单线程程序和正确同步的多线程程序），编译器和处理器怎么优化都行。JMM这么做的原因是：程序员对于这两个操作是否真的被重排序并不关心，程序员关心的是程序执行时的语义不能被改变（即执行结果不能被改变）。因此，happens-before关系本质上和as-if-serial语义是一回事。</p></li></ul><h5 id="as-if-serial"><a href="#as-if-serial" class="headerlink" title="as-if-serial"></a>as-if-serial</h5><ul><li>as-if-serial语义保证单线程内程序的执行结果不被改变，happens-before关系保证正确同步的多线程程序的执行结果不被改变。</li><li>as-if-serial语义给编写单线程程序的程序员创造了一个幻境：单线程程序是按程序的顺序来执行的。happens-before关系给编写正确同步的多线程程序的程序员创造了一个幻境：正确同步的多线程程序是按happens-before指定的顺序来执行的。</li><li>as-if-serial语义和happens-before这么做的目的，都是为了在不改变程序执行结果的前提下，尽可能地提高程序执行的并行度。</li></ul><p>as-if-serial 语义的意思是：不管怎么重排序（编译器和处理器为了提高并行度），（单线程）程序的执行结果不会改变。</p><p>编译器、runtime和处理器都必须遵守as-if-serial语义。</p><p>为了遵守 as-if-serial 语义，编译器和处理器不会对存在数据依赖关系的操作做重排序，因为这种重排序会改变执行结果。</p><p>但是，如果操作之间不存在数据依赖关系，这些操作就可能被编译器和处理器重排序。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;happens-before-和-as-if-serial&quot;&gt;&lt;a href=&quot;#happens-before-和-as-if-serial&quot; class=&quot;headerlink&quot; title=&quot;happens-before 和 as-if-serial&quot;&gt;&lt;/a&gt;happens-before 和 as-if-serial&lt;/h4&gt;&lt;h5 id=&quot;happens-before&quot;&gt;&lt;a href=&quot;#happens-before&quot; class=&quot;headerlink&quot; title=&quot;happens-before&quot;&gt;&lt;/a&gt;happens-before&lt;/h5&gt;&lt;p&gt;happens-before 用来指定两个操作之间的执行顺序。&lt;br&gt;由于这两个操作可以在一个线程之内，也可以是在不同线程之间。因此，JMM可以通过happens-before关系向程序员提供跨线程的内存可见性保证（如果A线程的写操作a与B线程的读操作b之间存在happens-before关系，尽管a操作和b操作在不同的线程中执行，但JMM向程序员保证a操作将对b操作可见）。&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://android9527.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://android9527.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>TCP 和 UDP 报文协议</title>
    <link href="http://android9527.com/2019/01/29/2019-01-29-TCP%20%E5%92%8C%20UDP%20%E6%8A%A5%E6%96%87%E5%8D%8F%E8%AE%AE/"/>
    <id>http://android9527.com/2019/01/29/2019-01-29-TCP 和 UDP 报文协议/</id>
    <published>2019-01-28T16:00:00.000Z</published>
    <updated>2019-01-30T03:09:44.453Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCP-报文格式"><a href="#TCP-报文格式" class="headerlink" title="TCP 报文格式"></a>TCP 报文格式</h4><p><img src="/images/tcpip/tcp1.png" alt="image"></p><p><img src="/images/tcpip/tcp2.png" alt="image"><br><a id="more"></a></p><p>TCP报文是TCP层传输的数据单元，也叫报文段</p><p><strong>1、端口号</strong>：各16 bits。用来标识同一台计算机的不同的应用进程。</p><p><strong>1）源端口</strong>：源端口和IP地址的作用是标识报文的返回地址。</p><p><strong>2）目的端口</strong>：端口指明接收方计算机上的应用程序接口。</p><p>TCP报头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。</p><p><strong>2、序号和确认号</strong>：各32 bits。是TCP可靠传输的关键部分。序号是本报文段发送的数据组的第一个字节的序号。在TCP传送的流中，每一个字节一个序号。e.g.一个报文段的序号为300，此报文段数据部分共有100字节，则下一个报文段的序号为400。所以序号确保了TCP传输的有序性。确认号，即ACK，指明下一个期待收到的字节序号，表明该序号之前的所有数据已经正确无误的收到。确认号只有当ACK标志为1时才有效。比如建立连接时，SYN报文的ACK标志位为0。</p><p><strong>3、数据偏移／首部长度</strong>：4 bits。由于首部可能含有可选项内容，因此TCP报头的长度是不确定的，报头不包含任何任选字段则长度为20字节，4位首部长度字段所能表示的最大值为1111，转化为10进制为15，15*32/8 = 60，故报头最大长度为60字节。首部长度也叫数据偏移，是因为首部长度实际上指示了数据区在报文段中的起始偏移值。</p><p><strong>4、保留</strong>：6 bits。为将来定义新的用途保留，现在一般置0。</p><p><strong>5、控制位</strong>：URG  ACK  PSH  RST  SYN  FIN，共6个，每一个标志位表示一个控制功能。</p><p><strong>1）URG</strong>：紧急指针标志，为1时表示紧急指针有效，为0则忽略紧急指针。</p><p><strong>2）ACK</strong>：确认序号标志，为1时表示确认号有效，为0表示报文中不含确认信息，忽略确认号字段。</p><p><strong>3）PSH</strong>：push标志，为1表示是带有push标志的数据，指示接收方在接收到该报文段以后，应尽快将这个报文段交给应用程序，而不是在缓冲区排队。</p><p><strong>4）RST</strong>：重置连接标志，用于重置由于主机崩溃或其他原因而出现错误的连接。或者用于拒绝非法的报文段和拒绝连接请求。</p><p><strong>5）SYN</strong>：同步序号，用于建立连接过程，在连接请求中，SYN=1和ACK=0表示该数据段没有使用捎带的确认域，而连接应答捎带一个确认，即SYN=1和ACK=1。</p><p><strong>6）FIN</strong>：finish标志，用于释放连接，为1时表示发送方已经没有数据发送了，即关闭本方数据流。</p><p><strong>6、窗口</strong>：滑动窗口大小，用来告知发送端接受端的缓存大小，以此控制发送端发送数据的速率，从而达到流量控制。窗口大小时一个16bit字段，因而窗口大小最大为65535。</p><p><strong>7、校验和</strong>：奇偶校验，此校验和是对整个的 TCP 报文段，包括 TCP 头部和 TCP 数据，以 16 位字进行计算所得。由发送端计算和存储，并由接收端进行验证。</p><p><strong>8、紧急指针</strong>：只有当 URG 标志置 1 时紧急指针才有效。紧急指针是一个正的偏移量，和顺序号字段中的值相加表示紧急数据最后一个字节的序号。 TCP 的紧急方式是发送端向另一端发送紧急数据的一种方式。</p><p><strong>9、选项和填充</strong>：最常见的可选字段是最长报文大小，又称为MSS（Maximum Segment Size），每个连接方通常都在通信的第一个报文段（为建立连接而设置SYN标志为1的那个段）中指明这个选项，它表示本端所能接受的最大报文段的长度。选项长度不一定是32位的整数倍，所以要加填充位，即在这个字段中加入额外的零，以保证TCP头是32的整数倍。</p><p><strong>10、数据部分</strong>： TCP 报文段中的数据部分是可选的。在一个连接建立和一个连接终止时，双方交换的报文段仅有 TCP 首部。如果一方没有数据要发送，也使用没有任何数据的首部来确认收到的数据。在处理超时的许多情况中，也会发送不带任何数据的报文段。</p><h4 id="UDP-报文格式"><a href="#UDP-报文格式" class="headerlink" title="UDP 报文格式"></a>UDP 报文格式</h4><p><img src="/images/tcpip/udp.jpeg" alt="image"></p><p>1、UDP 有两个字段：数据字段和首部字段。</p><p>首部字段<br>首部字段很简单，只有8个字节，由4个字段组成，每个字段的长度都是两个字节。</p><p>1）源端口：源端口号。在需要对方回信时选用。不需要时可用全0。<br>2）目的端口：目的端口号。这在终点交付报文时必须要使用到。<br>3）长度： UDP用户数据报的长度，其最小值是8（仅有首部）。<br>4）校验和：检测UDP用户数据报在传输中是否有错。有错就丢弃。</p><p>2、要注意的地方</p><p>UDP首部中校验和的计算方法有些特殊。在计算校验和时，要在UDP用户数据报之前增加12个字节的伪首部。</p><p>伪首部并非TCP&amp;UDP数据报中实际的有效成分。伪首部是一个虚拟的数据结构，其中的信息是从数据报所在IP分组头的分组头中提取的，既不向下传送也不向上递交，而仅仅是为计算校验和。<br>与IP数据报的校验和只校验IP数据报的首部不同，UDP的校验和是把首部和数据部分一起都校验。</p><p>伪首部：<br>伪首部(pseudo header)，通常有TCP伪首部和UDP伪首部。在UDP/TCP伪首部中，包含32位源IP地址，32位目的IP地址，8位填充0，8位协议，16位TCP/UDP长度。通过伪首部的校验，UDP可以确定该数据报是不是发给本机的，通过首部协议字段，UDP可以确认有没有误传。</p><h4 id="IP-报文格式"><a href="#IP-报文格式" class="headerlink" title="IP 报文格式"></a>IP 报文格式</h4><p><img src="/images/tcpip/ip.png" alt="image"><br>版本：IP协议的版本，目前的IP协议版本号为4，下一代IP协议版本号为6。</p><p>首部长度：IP报头的长度。固定部分的长度（20字节）和可变部分的长度之和。共占4位。最大为1111，即10进制的15，代表IP报头的最大长度可以为15个32bits（4字节），也就是最长可为15*4=60字节，除去固定部分的长度20字节，可变部分的长度最大为40字节。</p><p>服务类型：Type Of Service。</p><p>总长度：IP报文的总长度。报头的长度和数据部分的长度之和。</p><p>标识：唯一的标识主机发送的每一分数据报。通常每发送一个报文，它的值加一。当IP报文长度超过传输网络的MTU（最大传输单元）时必须分片，这个标识字段的值被复制到所有数据分片的标识字段中，使得这些分片在达到最终目的地时可以依照标识字段的内容重新组成原先的数据。</p><p>标志：共3位。R、DF、MF三位。目前只有后两位有效，DF位：为1表示不分片，为0表示分片。MF：为1表示“更多的片”，为0表示这是最后一片。</p><p>片位移：本分片在原先数据报文中相对首位的偏移位。（需要再乘以8）</p><p>生存时间：IP报文所允许通过的路由器的最大数量。每经过一个路由器，TTL减1，当为0时，路由器将该数据报丢弃。TTL 字段是由发送端初始设置一个 8 bit字段.推荐的初始值由分配数字 RFC 指定，当前值为 64。发送 ICMP 回显应答时经常把 TTL 设为最大值 255。</p><p>协议：指出IP报文携带的数据使用的是那种协议，以便目的主机的IP层能知道要将数据报上交到哪个进程（不同的协议有专门不同的进程处理）。和端口号类似，此处采用协议号，TCP的协议号为6，UDP的协议号为17。ICMP的协议号为1，IGMP的协议号为2.</p><p>首部校验和：计算IP头部的校验和，检查IP报头的完整性。</p><p>源IP地址：标识IP数据报的源端设备。</p><p>目的IP地址：标识IP数据报的目的地址。</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/mary19920410/article/details/59035804" target="_blank" rel="noopener">IP报文格式详解</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;TCP-报文格式&quot;&gt;&lt;a href=&quot;#TCP-报文格式&quot; class=&quot;headerlink&quot; title=&quot;TCP 报文格式&quot;&gt;&lt;/a&gt;TCP 报文格式&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/images/tcpip/tcp1.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/tcpip/tcp2.png&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="网络编程" scheme="http://android9527.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="网络编程" scheme="http://android9527.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>UDP中一个包的大小最大能多大</title>
    <link href="http://android9527.com/2019/01/29/2019-01-29-UDP%E4%B8%AD%E4%B8%80%E4%B8%AA%E5%8C%85%E7%9A%84%E5%A4%A7%E5%B0%8F%E6%9C%80%E5%A4%A7%E8%83%BD%E5%A4%9A%E5%A4%A7/"/>
    <id>http://android9527.com/2019/01/29/2019-01-29-UDP中一个包的大小最大能多大/</id>
    <published>2019-01-28T16:00:00.000Z</published>
    <updated>2019-01-30T03:19:26.978Z</updated>
    
    <content type="html"><![CDATA[<h4 id="点评"><a href="#点评" class="headerlink" title="点评"></a>点评</h4><p>因为UDP数据传输的无连接特性，最简单的UDP数据传输就是一次数据交互一个UDP包搞定，这样就不用管分包问题（因为不像TCP，UDP传输时如果分包则是不能保证顺序的，这会带来很多问题）。所以你一次交互的数据如果太多的话，用UDP实现就很可能并不优雅。</p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在进行UDP编程的时候,我们最容易想到的问题就是,一次发送多少bytes好？<br>当然，这个没有唯一答案，相对于不同的系统,不同的要求,其得到的答案是不一样的，我这里仅对像ICQ一类的发送聊天消息的情况作分析，对于其他情况，你或许也能得到一点帮助。</p><a id="more"></a><h4 id="网络原理"><a href="#网络原理" class="headerlink" title="网络原理"></a>网络原理</h4><p>首先，我们知道，TCP/IP通常被认为是一个四层协议系统：包括链路层、网络层、运输层、应用层 。UDP属于运输层，下面我们由下至上一步一步来看。</p><h4 id="结论1：局域网环境下，建议将UDP数据控制在1472字节以下"><a href="#结论1：局域网环境下，建议将UDP数据控制在1472字节以下" class="headerlink" title="结论1：局域网环境下，建议将UDP数据控制在1472字节以下"></a>结论1：局域网环境下，建议将UDP数据控制在1472字节以下</h4><p>以太网(Ethernet)数据帧的长度必须在46-1500字节之间,这是由以太网的物理特性决定的，这个1500字节被称为链路层的MTU(最大传输单元)。但这并不是指链路层的长度被限制在1500字节，其实这这个MTU指的是链路层的数据区，并不包括链路层的首部和尾部的18个字节。</p><p>所以，事实上这个1500字节就是网络层IP数据报的长度限制。因为IP数据报的首部为20字节，所以IP数据报的数据区长度最大为1480字节。而这个1480字节就是用来放TCP传来的TCP报文段或UDP传来的UDP数据报的。</p><p>又因为UDP数据报的首部8字节，所以UDP数据报的数据区最大长度为1472字节。这个1472字节就是我们可以使用的字节数。</p><p>当我们发送的UDP数据大于1472的时候会怎样呢？ 这也就是说IP数据报大于1500字节，大于MTU，这个时候发送方IP层就需要分片(fragmentation)。把数据报分成若干片，使每一片都小于MTU，而接收方IP层则需要进行数据报的重组。这样就会多做许多事情，而更严重的是，由于UDP的特性，当某一片数据传送中丢失时，接收方无法重组数据报，将导致丢弃整个UDP数据报。</p><p>因此，在普通的局域网环境下，我建议将UDP的数据控制在1472字节以下为好。</p><h4 id="结论2：局域网环境下，建议将UDP数据控制在1472字节以下"><a href="#结论2：局域网环境下，建议将UDP数据控制在1472字节以下" class="headerlink" title="结论2：局域网环境下，建议将UDP数据控制在1472字节以下"></a>结论2：局域网环境下，建议将UDP数据控制在1472字节以下</h4><p>进行Internet编程时则不同，因为Internet上的路由器可能会将MTU设为不同的值。如果我们假定MTU为1500来发送数据，而途经的某个网络的MTU值小于1500字节，那么系统将会使用一系列的机制来调整MTU值，使数据报能够顺利到达目的地，这样就会做许多不必要的操作。</p><p>鉴于Internet上的标准MTU值为576字节，所以我建议在进行Internet的UDP编程时， 最好将UDP的数据长度控件在548字节(576-8-20)以内。</p><p>ps：这句话貌似有问题，unix网络编程第一卷里说：ipv4协议规定ip层的最小重组缓冲区大小为576！所以，建议udp包不要超过这个大小，而不是因为internet的标准MTU是576！</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="http://www.52im.net/thread-29-1-1.html" target="_blank" rel="noopener">UDP中一个包的大小最大能多大</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;点评&quot;&gt;&lt;a href=&quot;#点评&quot; class=&quot;headerlink&quot; title=&quot;点评&quot;&gt;&lt;/a&gt;点评&lt;/h4&gt;&lt;p&gt;因为UDP数据传输的无连接特性，最简单的UDP数据传输就是一次数据交互一个UDP包搞定，这样就不用管分包问题（因为不像TCP，UDP传输时如果分包则是不能保证顺序的，这会带来很多问题）。所以你一次交互的数据如果太多的话，用UDP实现就很可能并不优雅。&lt;/p&gt;
&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;在进行UDP编程的时候,我们最容易想到的问题就是,一次发送多少bytes好？&lt;br&gt;当然，这个没有唯一答案，相对于不同的系统,不同的要求,其得到的答案是不一样的，我这里仅对像ICQ一类的发送聊天消息的情况作分析，对于其他情况，你或许也能得到一点帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="网络编程" scheme="http://android9527.com/categories/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="网络编程" scheme="http://android9527.com/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>volatile 内存可见性和指令重排</title>
    <link href="http://android9527.com/2019/01/24/2019-01-24-volatile%20%E5%86%85%E5%AD%98%E5%8F%AF%E8%A7%81%E6%80%A7%E5%92%8C%E6%8C%87%E4%BB%A4%E9%87%8D%E6%8E%92/"/>
    <id>http://android9527.com/2019/01/24/2019-01-24-volatile 内存可见性和指令重排/</id>
    <published>2019-01-23T16:00:00.000Z</published>
    <updated>2019-01-29T09:00:39.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java-中内存可见性"><a href="#Java-中内存可见性" class="headerlink" title="Java 中内存可见性"></a>Java 中内存可见性</h2><p>内存可见性：一个线程对共享变量值的修改，能够及时地被其他线程看到<br>共享变量：如果一个变量在多个线程的工作内存中都存在副本，那么这个变量就是这几个线程的共享变量</p><p>Java内存模型JMM两条规定：</p><ul><li>线程对共享变量的所有操作都必须在自己的工作内存中进行，不能直接从主内存中读写</li><li>不同线程之间无法直接访问其他线程工作内存中的变量，线程间变量值的传递需要通过主内存来完成</li></ul><p>可见性：</p><p>JMM关于 synchronized 的两条规定：</p><ul><li>线程解锁钱，必须把共享变量的最新值刷新到主内存中</li><li><p>线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从内存中重新读取最新的值</p><a id="more"></a><p>重排序：代码书写的顺序与实际执行的顺序不同，指令重排序是编译器或处理器为了提高兴许性能而做得优化</p></li><li><p>1、编译器优化的重排序（编译器优化）</p></li><li>2、指令级并行重排序（处理器优化）</li><li>3、内存系统的重排序（处理器优化）<br>as-if-serial：无论如何重排序，程序执行的结果应该与代码顺序执行的结果一致（Java编译器、运行时和处理器都会保证Java在单线程下遵循as-if-serial语义）</li></ul><p><img src="/images/jmm/as-if-serial.jpg" alt="image"></p><h4 id="volatile两大作用"><a href="#volatile两大作用" class="headerlink" title="volatile两大作用"></a>volatile两大作用</h4><ul><li><font color="#ff0000">1、保证内存可见性</font></li><li><font color="#ff0000">2、防止指令重排</font></li></ul><p>此外需注意 <code>volatile</code> 并不保证操作的原子性。</p><p>#####（一）内存可见性</p><ul><li>1、概念</li></ul><p>JVM内存模型：主内存和线程独立的工作内存</p><p>Java内存模型规定，对于多个线程共享的变量，存储在主内存当中，每个线程都有自己独立的工作内存（比如CPU的寄存器），线程只能访问自己的工作内存，不可以访问其它线程的工作内存。</p><p>工作内存中保存了主内存共享变量的副本，线程要操作这些共享变量，只能通过操作工作内存中的副本来实现，操作完毕之后再同步回到主内存当中。</p><p>如何保证多个线程操作主内存的数据完整性是一个难题，Java内存模型也规定了工作内存与主内存之间交互的协议，定义了8种原子操作：</p><p>(1) lock:将主内存中的变量锁定，为一个线程所独占</p><p>(2) unclock:将lock加的锁定解除，此时其它的线程可以有机会访问此变量</p><p>(3) read:将主内存中的变量值读到工作内存当中</p><p>(4) load:将read读取的值保存到工作内存中的变量副本中。</p><p>(5) use:将值传递给线程的代码执行引擎</p><p>(6) assign:将执行引擎处理返回的值重新赋值给变量副本</p><p>(7) store:将变量副本的值存储到主内存中。</p><p>(8) write:将store存储的值写入到主内存的共享变量当中。</p><p>通过上面Java内存模型的概述，我们会注意到这么一个问题，每个线程在获取锁之后会在自己的工作内存来操作共享变量，操作完成之后将工作内存中的副本回写到主内存，并且在其它线程从主内存将变量同步回自己的工作内存之前，共享变量的改变对其是不可见的。即其他线程的本地内存中的变量已经是过时的，并不是更新后的值。</p><ul><li>2 内存可见性带来的问题<br>很多时候我们需要一个线程对共享变量的改动，其它线程也需要立即得知这个改动该怎么办呢？下面举两个例子说明内存可见性的重要性：</li></ul><p>例子1</p><p>有一个全局的状态变量open:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> open=<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">这个变量用来描述对一个资源的打开关闭状态，<span class="keyword">true</span>表示打开，<span class="keyword">false</span>表示关闭，假设有一个线程A,在执行一些操作后将open修改为<span class="keyword">false</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程A</span></span><br><span class="line"></span><br><span class="line">resource.close();</span><br><span class="line"></span><br><span class="line">open = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">线程B随时关注open的状态，当open为<span class="keyword">true</span>的时候通过访问资源来进行一些操作:</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程B</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(open) &#123;</span><br><span class="line">    doSomethingWithResource(resource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当A把资源关闭的时候，open变量对线程B是不可见的，如果此时open变量的改动尚未同步到线程B的工作内存中,那么线程B就会用一个已经关闭了的资源去做一些操作，因此产生错误。</p><ul><li>3 提供内存可见性<br>volatile保证可见性的原理是在每次访问变量时都会进行一次刷新，因此每次访问都是主内存中最新的版本。所以volatile关键字的作用之一就是保证变量修改的实时可见性。</li></ul><p>针对上面的例子：</p><p>要求一个线程对open的改变，其他的线程能够立即可见，Java为此提供了volatile关键字，在声明open变量的时候加入volatile关键字就可以保证open的内存可见性，即open的改变对所有的线程都是立即可见的。</p><p>备注：也可以通过提供synchronized同步的open变量的Get/Set方法解决此内存可见性</p><p>####（二）指令重排</p><ul><li>1 概念</li></ul><p>指令重排序是JVM为了优化指令，提高程序运行效率，在不影响单线程程序执行结果的前提下，尽可能地提高并行度。编译器、处理器也遵循这样一个目标。注意是单线程。多线程的情况下指令重排序就会给程序员带来问题。</p><p>不同的指令间可能存在数据依赖。比如下面计算圆的面积的语句：</p><p>double r = 2.3d;//(1)</p><p>double pi =3.1415926; //(2)</p><p>double area = pi<em> r </em> r; //(3)</p><p>area的计算依赖于r与pi两个变量的赋值指令。而r与pi无依赖关系。</p><p>as-if-serial语义是指：不管如何重排序（编译器与处理器为了提高并行度），（单线程）程序的结果不能被改变。这是编译器、Runtime、处理器必须遵守的语义。</p><p>虽然，（1） - happensbefore -&gt; （2）,（2） - happens before -&gt; （3），但是计算顺序(1)(2)(3)与(2)(1)(3) 对于r、pi、area变量的结果并无区别。编译器、Runtime在优化时可以根据情况重排序（1）与（2），而丝毫不影响程序的结果。</p><p>指令重排序包括编译器重排序和运行时重排序。</p><ul><li>2 指令重排带来的问题</li></ul><p>如果一个操作不是原子的，就会给JVM留下重排的机会。下面看几个例子：</p><p>例子1：A线程指令重排导致B线程出错<br>对于在同一个线程内，这样的改变是不会对逻辑产生影响的，但是在多线程的情况下指令重排序会带来问题。看下面这个情景:</p><p>在线程A中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">context = loadContext();</span><br><span class="line"></span><br><span class="line">inited = <span class="keyword">true</span>;</span><br></pre></td></tr></table></figure><p>在线程B中:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!inited )&#123; <span class="comment">//根据线程A中对inited变量的修改决定是否使用context变量</span></span><br><span class="line">   sleep(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doSomethingwithconfig(context);</span><br></pre></td></tr></table></figure><p>假设线程A中发生了指令重排序:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inited = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">context = loadContext();</span><br></pre></td></tr></table></figure><p>那么B中很可能就会拿到一个尚未初始化或尚未初始化完成的context,从而引发程序错误。</p><p>例子2：指令重排导致单例模式失效</p><p>我们都知道一个经典的懒加载方式的双重判断单例模式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//非原子操作</span></span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看似简单的一段赋值语句：<code>instance= new Singleton()</code>，但是很不幸它并不是一个原子操作，其实际上可以抽象为下面几条JVM指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">memory =allocate();    //1：分配对象的内存空间 </span><br><span class="line"></span><br><span class="line">ctorInstance(memory);  //2：初始化对象 </span><br><span class="line"></span><br><span class="line">instance =memory;     //3：设置instance指向刚分配的内存地址</span><br></pre></td></tr></table></figure><p>上面操作2 依赖于操作1，但是操作3 并不依赖于操作2，所以JVM是可以针对它们进行指令的优化重排序的，经过重排序后如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">memory =allocate();    //1：分配对象的内存空间 </span><br><span class="line"></span><br><span class="line">instance =memory;     //3：instance指向刚分配的内存地址，此时对象还未初始化</span><br><span class="line"></span><br><span class="line">ctorInstance(memory);  //2：初始化对象</span><br></pre></td></tr></table></figure><p>可以看到指令重排之后，instance 指向分配好的内存放在了前面，而这段内存的初始化被排在了后面。</p><p>在线程A执行这段赋值语句，在初始化分配对象之前就已经将其赋值给 instance 引用，恰好另一个线程进入方法判断 instance 引用不为 null，然后就将其返回使用，导致出错。</p><ul><li>3 防止指令重排</li></ul><p>除了前面内存可见性中讲到的 volatile 关键字可以保证变量修改的可见性之外，还有另一个重要的作用：在JDK1.5之后，可以使用 volatile 变量禁止指令重排序。</p><p>解决方案：例子1中的inited和例子2中的 instance 以关键字 volatile 修饰之后，就会阻止JVM对其相关代码进行指令重排，这样就能够按照既定的顺序指执行。</p><p>volatile 关键字通过提供“内存屏障”的方式来防止指令被重排序，为了实现 volatile 的内存语义，编译器在生成字节码时，会在指令序列中插入内存屏障来禁止特定类型的处理器重排序。</p><p>大多数的处理器都支持内存屏障的指令。</p><p>对于编译器来说，发现一个最优布置来最小化插入屏障的总数几乎不可能，为此，Java内存模型采取保守策略。下面是基于保守策略的JMM内存屏障插入策略：</p><p>在每个volatile写操作的前面插入一个StoreStore屏障。</p><p>在每个volatile写操作的后面插入一个StoreLoad屏障。</p><p>在每个volatile读操作的后面插入一个LoadLoad屏障。</p><p>在每个volatile读操作的后面插入一个LoadStore屏障。</p><p>####（三）总结<br>volatile是轻量级同步机制<br>相对于synchronized块的代码锁，volatile 应该是提供了一个轻量级的针对共享变量的锁，当我们在多个线程间使用共享变量进行通信的时候需要考虑将共享变量用volatile来修饰。</p><p>volatile是一种稍弱的同步机制，在访问 volatile 变量时不会执行加锁操作，也就不会执行线程阻塞，因此volatilei变量是一种比synchronized关键字更轻量级的同步机制。</p><p>volatile使用建议<br>使用建议：在两个或者更多的线程需要访问的成员变量上使用volatile。当要访问的变量已在synchronized代码块中，或者为常量时，没必要使用volatile。</p><p>由于使用volatile屏蔽掉了JVM中必要的代码优化，所以在效率上比较低，因此一定在必要时才使用此关键字。</p><h4 id="volatile和synchronized区别"><a href="#volatile和synchronized区别" class="headerlink" title="volatile和synchronized区别"></a>volatile和synchronized区别</h4><ul><li>1、volatile不会进行加锁操作：</li></ul><p>volatile变量是一种稍弱的同步机制在访问volatile变量时不会执行加锁操作，因此也就不会使执行线程阻塞，因此volatile变量是一种比synchronized关键字更轻量级的同步机制。</p><ul><li>2、volatile变量作用类似于同步变量读写操作：</li></ul><p>从内存可见性的角度看，写入volatile变量相当于退出同步代码块，而读取volatile变量相当于进入同步代码块。</p><ul><li>3、volatile不如synchronized安全：</li></ul><p>在代码中如果过度依赖volatile变量来控制状态的可见性，通常会比使用锁的代码更脆弱，也更难以理解。仅当volatile变量能简化代码的实现以及对同步策略的验证时，才应该使用它。一般来说，用同步机制会更安全些。</p><ul><li>4、volatile无法同时保证内存可见性和原子性：</li></ul><p>加锁机制（即同步机制）既可以确保可见性又可以确保原子性，而volatile变量只能确保可见性，原因是声明为volatile的简单变量如果当前值与该变量以前的值相关，那么volatile关键字不起作用，也就是说如下的表达式都不是原子操作：“count++”、“count = count+1”。</p><p>当且仅当满足以下所有条件时，才应该使用volatile变量：</p><ul><li><p>1、 对变量的写入操作不依赖变量的当前值，或者你能确保只有单个线程更新变量的值。</p></li><li><p>2、该变量没有包含在具有其他变量的不变式中。</p></li></ul><p>总结：在需要同步的时候，第一选择应该是synchronized关键字，这是最安全的方式，尝试其他任何方式都是有风险的。尤其在、jdK1.5之后，对synchronized同步机制做了很多优化，如：自适应的自旋锁、锁粗化、锁消除、轻量级锁等，使得它的性能明显有了很大的提升。</p><h4 id="volatile和synchronized特点"><a href="#volatile和synchronized特点" class="headerlink" title="volatile和synchronized特点"></a>volatile和synchronized特点</h4><p>首先需要理解线程安全的两个方面：执行控制和内存可见。</p><ul><li><p>执行控制的目的是控制代码执行（顺序）及是否可以并发执行。</p></li><li><p>内存可见控制的是线程执行结果在内存中对其它线程的可见性。根据Java内存模型的实现，线程在具体执行时，会先拷贝主存数据到线程本地（CPU缓存），操作完成后再把结果从线程本地刷到主存。</p></li></ul><p>synchronized 关键字解决的是执行控制的问题，它会阻止其它线程获取当前对象的监控锁，这样就使得当前对象中被 synchronized 关键字保护的代码块无法被其它线程访问，也就无法并发执行。更重要的是，synchronized 还会创建一个内存屏障，内存屏障指令保证了所有CPU操作结果都会直接刷到主存中，从而保证了操作的内存可见性，同时也使得先获得这个锁的线程的所有操作，都 happens-before 于随后获得这个锁的线程的操作。</p><p>volatile 关键字解决的是内存可见性的问题，会使得所有对 volatile 变量的读写都会直接刷到主存，即保证了变量的可见性。这样就能满足一些对变量可见性有要求而对读取顺序没有要求的需求。</p><p>使用 volatile 关键字仅能实现对原始变量(如boolen、 short 、int 、long等)操作的原子性，但需要特别注意， volatile 不能保证复合操作的原子性，即使只是i++，实际上也是由多个原子操作组成：read i; inc; write i，假如多个线程同时执行i++，volatile 只能保证他们操作的i是同一块内存，但依然可能出现写入脏数据的情况。</p><p>在Java 5提供了原子数据类型atomic wrapper classes，对它们的increase之类的操作都是原子操作，不需要使用sychronized关键字。</p><p>对于volatile关键字，当且仅当满足以下所有条件时可使用：</p><ol><li>对变量的写入操作不依赖变量的当前值，或者你能确保只有单个线程更新变量的值。</li><li>该变量没有包含在具有其他变量的不变式中。</li></ol><h4 id="volatile-和-synchronized-的区别"><a href="#volatile-和-synchronized-的区别" class="headerlink" title="volatile 和 synchronized 的区别"></a>volatile 和 synchronized 的区别</h4><ul><li><p>volatile 本质是在告诉jvm当前变量在寄存器（工作内存）中的值是不确定的，需要从主存中读取；synchronized 则是锁定当前变量，只有当前线程可以访问该变量，其他线程被阻塞住。</p></li><li><p>作用域不同 volatile 仅能使用在变量级别；synchronized 则可以使用在变量、方法、和类级别的</p></li><li><p>volatile 仅能实现变量的修改可见性，不能保证原子性；而 synchronized 则可以保证变量的修改可见性和原子性</p></li><li><p>volatile 不会造成线程的阻塞；synchronized 可能会造成线程的阻塞。volatile 标记的变量不会被编译器优化；synchronized 标记的变量可以被编译器优化</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java-中内存可见性&quot;&gt;&lt;a href=&quot;#Java-中内存可见性&quot; class=&quot;headerlink&quot; title=&quot;Java 中内存可见性&quot;&gt;&lt;/a&gt;Java 中内存可见性&lt;/h2&gt;&lt;p&gt;内存可见性：一个线程对共享变量值的修改，能够及时地被其他线程看到&lt;br&gt;共享变量：如果一个变量在多个线程的工作内存中都存在副本，那么这个变量就是这几个线程的共享变量&lt;/p&gt;
&lt;p&gt;Java内存模型JMM两条规定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程对共享变量的所有操作都必须在自己的工作内存中进行，不能直接从主内存中读写&lt;/li&gt;
&lt;li&gt;不同线程之间无法直接访问其他线程工作内存中的变量，线程间变量值的传递需要通过主内存来完成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可见性：&lt;/p&gt;
&lt;p&gt;JMM关于 synchronized 的两条规定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程解锁钱，必须把共享变量的最新值刷新到主内存中&lt;/li&gt;
&lt;li&gt;&lt;p&gt;线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从内存中重新读取最新的值&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://android9527.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://android9527.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>synchronized 的实现原理与应用</title>
    <link href="http://android9527.com/2019/01/24/2019-01-24-synchronized%20%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <id>http://android9527.com/2019/01/24/2019-01-24-synchronized 的实现原理与应用/</id>
    <published>2019-01-23T16:00:00.000Z</published>
    <updated>2019-03-05T09:02:16.132Z</updated>
    
    <content type="html"><![CDATA[<h4 id="synchronized-的实现原理与应用"><a href="#synchronized-的实现原理与应用" class="headerlink" title="synchronized 的实现原理与应用"></a>synchronized 的实现原理与应用</h4><p>先来看下利用 synchronized 实现同步的基础：Java 中的每一个对象都可以作为锁。具体表现为以下三种形式。</p><ul><li>对于普通同步方法，锁是当前实例对象。</li><li>对于静态同步方法，锁是当前类的 Class 对象。</li><li>对于同步方法块，锁是 synchronized 括号里配置的对象。</li></ul><p>当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。那么锁到底存在哪里？锁里面会存储什么信息呢？</p><p>从 JVM 规范中可以看到 synchronized 在 JVM 里的实现原理，</p><p>JMM关于 synchronized 的两条规定：</p><ul><li>线程解锁钱，必须把共享变量的最新值刷新到主内存中</li><li>线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从内存中重新读取最新的值<a id="more"></a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;synchronized-的实现原理与应用&quot;&gt;&lt;a href=&quot;#synchronized-的实现原理与应用&quot; class=&quot;headerlink&quot; title=&quot;synchronized 的实现原理与应用&quot;&gt;&lt;/a&gt;synchronized 的实现原理与应用&lt;/h4&gt;&lt;p&gt;先来看下利用 synchronized 实现同步的基础：Java 中的每一个对象都可以作为锁。具体表现为以下三种形式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于普通同步方法，锁是当前实例对象。&lt;/li&gt;
&lt;li&gt;对于静态同步方法，锁是当前类的 Class 对象。&lt;/li&gt;
&lt;li&gt;对于同步方法块，锁是 synchronized 括号里配置的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。那么锁到底存在哪里？锁里面会存储什么信息呢？&lt;/p&gt;
&lt;p&gt;从 JVM 规范中可以看到 synchronized 在 JVM 里的实现原理，&lt;/p&gt;
&lt;p&gt;JMM关于 synchronized 的两条规定：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线程解锁钱，必须把共享变量的最新值刷新到主内存中&lt;/li&gt;
&lt;li&gt;线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从内存中重新读取最新的值
    
    </summary>
    
      <category term="Java" scheme="http://android9527.com/categories/Java/"/>
    
    
      <category term="Java" scheme="http://android9527.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Android 中设置 Bitmap 任意角度</title>
    <link href="http://android9527.com/2019/01/23/2019-01-23-%E8%AE%BE%E7%BD%AE%20Bitmap%20%E4%BB%BB%E6%84%8F%E8%A7%92%E5%BA%A6/"/>
    <id>http://android9527.com/2019/01/23/2019-01-23-设置 Bitmap 任意角度/</id>
    <published>2019-01-22T16:00:00.000Z</published>
    <updated>2019-01-24T03:06:25.046Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Android-中设置-Bitmap-任意角度"><a href="#Android-中设置-Bitmap-任意角度" class="headerlink" title="Android 中设置 Bitmap 任意角度"></a>Android 中设置 Bitmap 任意角度</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitmapUtils</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">fillet</span><span class="params">(Bitmap bitmap, <span class="keyword">int</span> roundPx,</span></span></span><br><span class="line"><span class="function"><span class="params">                                <span class="keyword">boolean</span> topLeft, <span class="keyword">boolean</span> topRight, <span class="keyword">boolean</span> bottomLeft, <span class="keyword">boolean</span> bottomRight)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 其原理就是：先建立一个与图片大小相同的透明的Bitmap画板</span></span><br><span class="line">            <span class="comment">// 然后在画板上画出一个想要的形状的区域。</span></span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> width = bitmap.getWidth();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> height = bitmap.getHeight();</span><br><span class="line"></span><br><span class="line">            Bitmap paintingBoard = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);</span><br><span class="line">            Canvas canvas = <span class="keyword">new</span> Canvas(paintingBoard);</span><br><span class="line">            canvas.drawARGB(Color.TRANSPARENT, Color.TRANSPARENT, Color.TRANSPARENT, Color.TRANSPARENT);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">            paint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">            paint.setColor(Color.BLACK);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//画出4个圆角</span></span><br><span class="line">            <span class="keyword">final</span> RectF rectF = <span class="keyword">new</span> RectF(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">            canvas.drawRoundRect(rectF, roundPx, roundPx, paint);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把不需要的圆角去掉</span></span><br><span class="line">            <span class="keyword">if</span> (topLeft)</span><br><span class="line">            &#123;</span><br><span class="line">                clipTopLeft(canvas, paint, roundPx, width, height);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (topRight)</span><br><span class="line">            &#123;</span><br><span class="line">                clipTopRight(canvas, paint, roundPx, width, height);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bottomLeft)</span><br><span class="line">            &#123;</span><br><span class="line">                clipBottomLeft(canvas, paint, roundPx, width, height);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (bottomRight)</span><br><span class="line">            &#123;</span><br><span class="line">                clipBottomRight(canvas, paint, roundPx, width, height);</span><br><span class="line">            &#125;</span><br><span class="line">            paint.setXfermode(<span class="keyword">new</span> PorterDuffXfermode(PorterDuff.Mode.SRC_IN));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> Rect src = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">            <span class="keyword">final</span> Rect dst = src;</span><br><span class="line">            canvas.drawBitmap(bitmap, src, dst, paint);</span><br><span class="line">            <span class="keyword">return</span> paintingBoard;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> bitmap;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clipTopLeft</span><span class="params">(<span class="keyword">final</span> Canvas canvas, <span class="keyword">final</span> Paint paint, <span class="keyword">int</span> offset, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Rect block = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, offset, offset);</span><br><span class="line">        canvas.drawRect(block, paint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clipTopRight</span><span class="params">(<span class="keyword">final</span> Canvas canvas, <span class="keyword">final</span> Paint paint, <span class="keyword">int</span> offset, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Rect block = <span class="keyword">new</span> Rect(width - offset, <span class="number">0</span>, width, offset);</span><br><span class="line">        canvas.drawRect(block, paint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clipBottomLeft</span><span class="params">(<span class="keyword">final</span> Canvas canvas, <span class="keyword">final</span> Paint paint, <span class="keyword">int</span> offset, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Rect block = <span class="keyword">new</span> Rect(<span class="number">0</span>, height - offset, offset, height);</span><br><span class="line">        canvas.drawRect(block, paint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clipBottomRight</span><span class="params">(<span class="keyword">final</span> Canvas canvas, <span class="keyword">final</span> Paint paint, <span class="keyword">int</span> offset, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Rect block = <span class="keyword">new</span> Rect(width - offset, height - offset, width, height);</span><br><span class="line">        canvas.drawRect(block, paint);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Android-中设置-Bitmap-任意角度&quot;&gt;&lt;a href=&quot;#Android-中设置-Bitmap-任意角度&quot; class=&quot;headerlink&quot; title=&quot;Android 中设置 Bitmap 任意角度&quot;&gt;&lt;/a&gt;Android 中设置 Bitma
      
    
    </summary>
    
      <category term="Android" scheme="http://android9527.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Java中sleep()与wait()区别</title>
    <link href="http://android9527.com/2018/12/06/2018-12-03-Java%E4%B8%ADsleep()%E4%B8%8Ewait()%E5%8C%BA%E5%88%AB/"/>
    <id>http://android9527.com/2018/12/06/2018-12-03-Java中sleep()与wait()区别/</id>
    <published>2018-12-05T16:00:00.000Z</published>
    <updated>2019-02-12T09:44:10.345Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Java中sleep-与wait-区别"><a href="#Java中sleep-与wait-区别" class="headerlink" title="Java中sleep()与wait()区别"></a>Java中sleep()与wait()区别</h4><ul><li><p>每个对象都有一个锁来控制同步访问，Synchronized关键字可以和对象的锁交互，来实现同步方法或同步块。sleep()方法正在执行的线程主动让出CPU（然后CPU就可以去执行其他任务），在sleep指定时间后CPU再回到该线程继续往下执行(注意：sleep方法只让出了CPU，而并不会释放同步资源锁！！！)；wait()方法则是指当前线程让自己暂时退让出同步资源锁，以便其他正在等待该资源的线程得到该资源进而运行，只有调用了notify()方法，之前调用wait()的线程才会解除wait状态，可以去参与竞争同步资源锁，进而得到执行。（注意：notify的作用相当于叫醒睡着的人，而并不会给他分配任务，就是说notify只是让之前调用wait的线程有权利重新参与线程的调度）；</p></li><li><p>sleep()方法可以在任何地方使用；wait()方法则只能在同步方法或同步块中使用；</p></li><li><p>sleep()是线程线程类（Thread）的方法，调用会暂停此线程指定的时间，但监控依然保持，不会释放对象锁，到时间自动恢复；wait()是Object的方法，调用会放弃对象锁，进入等待队列，待调用notify()/notifyAll()唤醒指定的线程或者所有线程，才会进入锁池，不再次获得对象锁才会进入运行状态；</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Java中sleep-与wait-区别&quot;&gt;&lt;a href=&quot;#Java中sleep-与wait-区别&quot; class=&quot;headerlink&quot; title=&quot;Java中sleep()与wait()区别&quot;&gt;&lt;/a&gt;Java中sleep()与wait()区别&lt;/h4&gt;&lt;
      
    
    </summary>
    
      <category term="读书笔记" scheme="http://android9527.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://android9527.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>未来世界的幸存者</title>
    <link href="http://android9527.com/2018/12/06/2018-12-03-%E3%80%8A%E6%9C%AA%E6%9D%A5%E4%B8%96%E7%95%8C%E7%9A%84%E5%B9%B8%E5%AD%98%E8%80%85%E3%80%8B/"/>
    <id>http://android9527.com/2018/12/06/2018-12-03-《未来世界的幸存者》/</id>
    <published>2018-12-05T16:00:00.000Z</published>
    <updated>2018-12-18T07:51:20.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《未来世界的幸存者》读书笔记"><a href="#《未来世界的幸存者》读书笔记" class="headerlink" title="《未来世界的幸存者》读书笔记"></a>《未来世界的幸存者》读书笔记</h2><h4 id="机器取代人类"><a href="#机器取代人类" class="headerlink" title="机器取代人类"></a>机器取代人类</h4><p>技术信息革命人工智能和无人驾驶大数据技术目标就是不需要人类的参与，掌握核心技术的人的处境会越来越有利，优势成倍放大。</p><h4 id="贫富差距会越来越大"><a href="#贫富差距会越来越大" class="headerlink" title="贫富差距会越来越大"></a>贫富差距会越来越大</h4><p>这种趋势只会增强，不会逆转，寒门再难出贵子。以前可以通过不懈努力完全有可能晋升到更高的社会阶层，改变自己的命运，以后会越来越难，因为跟你竞争的是软件和机器人，永远不会超过它们。<br>如果你是穷人，80%的概率以后你还是穷人；如果你是富人，84%的概率以后还是富人。<br><a id="more"></a></p><h4 id="B计划"><a href="#B计划" class="headerlink" title="B计划"></a>B计划</h4><p>对于人生来说，你现在的职业就是A计划，应该努力追求职业成功。但是，也要做好两手准备，万一A计划失败，还需要一个B计划，对自己的退路有所安排。B计划就是你的消防通道，万一人生发生火灾，你知道该往哪里走，避免乱跑乱撞，被大火困住。本质上，B计划是人生的一种风险控制。你也许见过各种商业计划书，其中必不可少的几个章节是《备用方案》、《应急预案》、《风险控制》……如果你尝试给自己写一份人生计划书，这些章节的内容就是B计划。你可能永远不会用到这些章节，但是它们的存在，会让你的人生少一些风险，生活得更加安心。凡事都要留有Plan B。你要做的就是自主、跨界、终身学习。</p><h4 id="也有提到对与基因编辑技术的看法"><a href="#也有提到对与基因编辑技术的看法" class="headerlink" title="也有提到对与基因编辑技术的看法"></a>也有提到对与基因编辑技术的看法</h4><p>如果被广泛利用，富人则会越来越优秀，贫富分化将越来越严重，而且会世袭，穷人毫无翻身的可能。<br>上层社会的人们利用基因编辑技术，创造自己的生理优势，删除生理劣势。从胚胎开始，他们就拥有更好的基因，智力更发达、容貌更俊美，体格更健康，再加上后天的悉心培养，良好的营养和教育投入，以及家族在事业上的帮助，很容易就能取得人生成功，控制社会资源，普通人将难以与他们竞争。他们会形成自己的圈子和阶层。最终，社会分裂成两种人：一种是普通人（基因没有优化过），另一种是高级人类（基因经过优化）。前者智力平平，长相平庸，体格矮小，无论在形体还是能力上，都比后者逊色。经过几代人的基因编辑的累积，底层的人们将全面落后于上层社会，毫无翻身的希望。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;《未来世界的幸存者》读书笔记&quot;&gt;&lt;a href=&quot;#《未来世界的幸存者》读书笔记&quot; class=&quot;headerlink&quot; title=&quot;《未来世界的幸存者》读书笔记&quot;&gt;&lt;/a&gt;《未来世界的幸存者》读书笔记&lt;/h2&gt;&lt;h4 id=&quot;机器取代人类&quot;&gt;&lt;a href=&quot;#机器取代人类&quot; class=&quot;headerlink&quot; title=&quot;机器取代人类&quot;&gt;&lt;/a&gt;机器取代人类&lt;/h4&gt;&lt;p&gt;技术信息革命人工智能和无人驾驶大数据技术目标就是不需要人类的参与，掌握核心技术的人的处境会越来越有利，优势成倍放大。&lt;/p&gt;
&lt;h4 id=&quot;贫富差距会越来越大&quot;&gt;&lt;a href=&quot;#贫富差距会越来越大&quot; class=&quot;headerlink&quot; title=&quot;贫富差距会越来越大&quot;&gt;&lt;/a&gt;贫富差距会越来越大&lt;/h4&gt;&lt;p&gt;这种趋势只会增强，不会逆转，寒门再难出贵子。以前可以通过不懈努力完全有可能晋升到更高的社会阶层，改变自己的命运，以后会越来越难，因为跟你竞争的是软件和机器人，永远不会超过它们。&lt;br&gt;如果你是穷人，80%的概率以后你还是穷人；如果你是富人，84%的概率以后还是富人。&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://android9527.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://android9527.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>单例模式的实现方式</title>
    <link href="http://android9527.com/2018/12/03/2018-12-03-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>http://android9527.com/2018/12/03/2018-12-03-单例模式的实现方式/</id>
    <published>2018-12-02T16:00:00.000Z</published>
    <updated>2018-12-05T02:56:01.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单例模式介绍"><a href="#单例模式介绍" class="headerlink" title="单例模式介绍"></a>单例模式介绍</h2><p>单例模式是应用最广的模式之一，在应用这个模式时，单例对象的类必须保证只有一个实例存在。<br>如在一个应用中，应该只有一个 ImageLoader 实例，这个 ImageLoader 中又包含有线程池、缓存系统、网络请求等，很消耗资源，因此，没有理由让它构造多个实例。</p><h2 id="单例模式的使用场景"><a href="#单例模式的使用场景" class="headerlink" title="单例模式的使用场景"></a>单例模式的使用场景</h2><p>确保某个类有且只有一个对象的场景，避免产生多个对象消耗过多的资源，或者某种类型的对象应该有且只有一个。</p><a id="more"></a><h2 id="单例模式-UML-类图"><a href="#单例模式-UML-类图" class="headerlink" title="单例模式 UML 类图"></a>单例模式 UML 类图</h2><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ul><li>简单的懒汉模式</li></ul><p>懒汉模式在用户第一次调用 getInstance() 时进行初始化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton mInstance;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数私有化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>优点是单例只有在使用时才会被实例化，在一定程度上节约了资源；<br>缺点是每次调用 getInstance() 都进行同步，造成不必要的同步开销。这种模式一般不建议使用。</p><ul><li>Double Check Lock（DCL）实现单例<br>DCL 方式实现单例模式的优点是既能够在需要时才初始化单例，又能保证线程安全，且单例对象初始化后不进行同步锁。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton mInstance;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数私有化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到进行了两次非空判断，第一层判断主要是为了避免不必要的同步，只有实例第一次被访问时，才会有线程进入同步块，这样极大提高了性能。避免了synchronized带来的较大性能损失。</p><p>第一次访问时，如果有多个线程同时进入if块，只有第一个线程会获得锁，其他线程被阻塞，第一个线程可以创建实例，退出 synchronized 。被阻塞的线程会进入同步块，进行第二次check,如果此时实例不为null，则返回。</p><p>仔细一想，这个代码挺完美的，但是不是这个样子的，具体问题出现在哪呢？</p><p>Java程序创建一个实例的过程为： <code>mInstance = new Singleton()</code> 语句，这里看起来是一句代码，但实际上它并不是一个原子操作，这句代码最终会被编译成多条汇编指令，它大致做了3件事情：<br>（1）给 Singleton 的实例分配内存<br>（2）调用 Singleton() 的构造函数，初始化成员字段；<br>（3）将 mInstance 对象指向分配的内存空间（此时 mInstance 就不是 null 了）。</p><p>但是，由于 Java 编译器允许处理器乱序执行，上面的第二和第三的顺序是无法保证的。也就是说，执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，并且在 3 执行完毕、2 未执行之前，被切换到线程 B 上，这时候 mInstance 因为已经在线程 A 内执行过了第三点，mInstance 已经是非空了，所以，线程 B 直接取走 mInstance，再次使用时就会出错，这就是 DCL 失效问题。</p><p>在 JDK 1.5 之后，SUN官方已经注意到这种问题，调整了 JVM，具体化了 volatile 关键字，<br>用该关键字修饰的变量在被变更时会被其他变量可见，最主要的是防止了重排序。因此在 JDK1.5 之后只需要改成 <code>private volatile static Singleton mInstance;</code> 就可以保证 mInstance 对象内存都是从主内存中读取，就可以使用 DCL 的写法来完成单例模式。<br>当然，volatile 或多或少也会影响性能，但考虑到程序的正确性，牺牲着点性能耗时值得的。</p><p>DCL 的优点：资源利用率高，第一次执行 getInstance 时单例对象才会被实例化，效率高。<br>缺点：第一次加载时反应稍慢，也由于 JMM 的原因偶尔会失败。在高并发环境下有一点的缺陷。</p><ul><li>静态内部类单例模式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.mInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton mInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当第一次加载 Singleton 类时并不会初始化 mInstance，只有在第一次调用 Singleton 的 getInstance 方法时才会导致 mInstance 被初始化。因此，第一次调用 getInstance 方法会导致虚拟机加载 SingletonHolder 类，这种方式不仅能够确保线程安全，也能够保证单例对象的唯一性，同时也延迟了单例的实例化，所以这是推荐使用的单例实现方式。</p><ul><li>枚举单例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonEnum &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法简单是枚举单例最大的优点，枚举在 java 中与普通的类是一样的，不仅能够有字段，还能够有自己的方法。最重要的是默认枚举实例的创建是线程安全的，并且在任何情况下它都是一个单例。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单例模式介绍&quot;&gt;&lt;a href=&quot;#单例模式介绍&quot; class=&quot;headerlink&quot; title=&quot;单例模式介绍&quot;&gt;&lt;/a&gt;单例模式介绍&lt;/h2&gt;&lt;p&gt;单例模式是应用最广的模式之一，在应用这个模式时，单例对象的类必须保证只有一个实例存在。&lt;br&gt;如在一个应用中，应该只有一个 ImageLoader 实例，这个 ImageLoader 中又包含有线程池、缓存系统、网络请求等，很消耗资源，因此，没有理由让它构造多个实例。&lt;/p&gt;
&lt;h2 id=&quot;单例模式的使用场景&quot;&gt;&lt;a href=&quot;#单例模式的使用场景&quot; class=&quot;headerlink&quot; title=&quot;单例模式的使用场景&quot;&gt;&lt;/a&gt;单例模式的使用场景&lt;/h2&gt;&lt;p&gt;确保某个类有且只有一个对象的场景，避免产生多个对象消耗过多的资源，或者某种类型的对象应该有且只有一个。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://android9527.com/categories/Android/"/>
    
      <category term="Design Patterns" scheme="http://android9527.com/categories/Android/Design-Patterns/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="单例" scheme="http://android9527.com/tags/%E5%8D%95%E4%BE%8B/"/>
    
      <category term="Design Patterns" scheme="http://android9527.com/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>AOP技术的几种实现方式</title>
    <link href="http://android9527.com/2018/10/20/2018-10-20-AOP%E6%8A%80%E6%9C%AF%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>http://android9527.com/2018/10/20/2018-10-20-AOP技术的几种实现方式/</id>
    <published>2018-10-19T16:00:00.000Z</published>
    <updated>2018-11-06T06:39:21.963Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、AOP概念"><a href="#一、AOP概念" class="headerlink" title="一、AOP概念"></a>一、AOP概念</h3><p>百度百科中对AOP的解释如下:<br>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。 <a id="more"></a>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>AOP只是一种思想的统称，实现这种思想的方法有挺多。AOP通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，提高开发效率。</p><h4 id="（1）AOP与OOP的关系"><a href="#（1）AOP与OOP的关系" class="headerlink" title="（1）AOP与OOP的关系"></a>（1）AOP与OOP的关系</h4><p>OOP（面向对象编程）针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的逻辑单元划分。但是也有它的缺点，最明显的就是关注点聚焦时，面向对象无法简单的解决这个问题，一个关注点是面向所有而不是单一的类，不受类的边界的约束，因此OOP无法将关注点聚焦来解决，只能分散到各个类中。<br>AOP（面向切面编程）则是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。这两种设计思想在目标上有着本质的差异。<br>AOP并不是与OOP对立的，而是为了弥补OOP的不足。OOP解决了竖向的问题，AOP则解决横向的问题。因为有了AOP我们的调试和监控就变得简单清晰。</p><p>简单的来讲，AOP是一种：可以在不改变原来代码的基础上，通过“动态注入”代码，来改变原来执行结果的技术。</p><h4 id="（2）AOP主要应用场景"><a href="#（2）AOP主要应用场景" class="headerlink" title="（2）AOP主要应用场景"></a>（2）AOP主要应用场景</h4><p>日志记录，性能统计，安全控制，事务处理，异常处理等等。</p><h4 id="（3）主要目标"><a href="#（3）主要目标" class="headerlink" title="（3）主要目标"></a>（3）主要目标</h4><p>将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。</p><p><img src="/images/aop/aop2.png" alt="image"></p><p>上图是一个APP模块结构示例，按照照OOP的思想划分为“视图交互”，“业务逻辑”，“网络”等三个模块，而现在假设想要对所有模块的每个方法耗时（性能监控模块）进行统计。这个性能监控模块的功能就是需要横跨并嵌入众多模块里的，这就是典型的AOP的应用场景。</p><p>AOP的目标是把这些横跨并嵌入众多模块里的功能（如监控每个方法的性能） 集中起来，放到一个统一的地方来控制和管理。如果说，OOP如果是把问题划分到单个模块的话，那么AOP就是把涉及到众多模块的某一类问题进行统一管理。</p><p>对比：</p><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">OOP</th><th style="text-align:left">AOP</th></tr></thead><tbody><tr><td style="text-align:left">增加日志</td><td style="text-align:left">所有功能模块单独添加，容易出错</td><td style="text-align:left">能够将同一个关注点聚焦在一处解决</td></tr><tr><td style="text-align:left">修改日志</td><td style="text-align:left">功能代码分散，不方便调试</td><td style="text-align:left">能够实现一处修改，处处生效</td></tr></tbody></table><p>例如：在不改变 main 方法的同时通过代码注入的方式达到目的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Before</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * After</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis() - start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、AOP代码注入时机"><a href="#二、AOP代码注入时机" class="headerlink" title="二、AOP代码注入时机"></a>二、AOP代码注入时机</h3><p>代码注入主要利用了Java的反射和注解机制，根据注解时机的不同，主要分为运行时、加载时和编译时。</p><p>运行时：你的代码对增强代码的需求很明确，比如，必须使用动态代理（这可以说并不是真正的代码注入）。<br>加载时：当目标类被Dalvik或者ART加载的时候修改才会被执行。这是对Java字节码文件或者Android的dex文件进行的注入操作。<br>编译时：在打包发布程序之前，通过向编译过程添加额外的步骤来修改被编译的类。</p><h3 id="三、AOP的几种实现方式"><a href="#三、AOP的几种实现方式" class="headerlink" title="三、AOP的几种实现方式"></a>三、AOP的几种实现方式</h3><ul><li>Java 中的动态代理，运行时动态创建 Proxy 类实例</li><li>APT，注解处理器，编译时生成 .java 代码</li><li>Javassist for Android：一个移植到Android平台的非常知名的操纵字节码的java库，对 class 字节码进行修改</li><li>AspectJ：和Java语言无缝衔接的面向切面的编程的扩展工具（可用于Android）。</li></ul><h4 id="1、动态代理"><a href="#1、动态代理" class="headerlink" title="1、动态代理"></a>1、动态代理</h4><h5 id="动态代理本质上还是java中的“代理设计模式”，不需要依赖其他类库，主要涉及到两个类"><a href="#动态代理本质上还是java中的“代理设计模式”，不需要依赖其他类库，主要涉及到两个类" class="headerlink" title="动态代理本质上还是java中的“代理设计模式”，不需要依赖其他类库，主要涉及到两个类"></a>动态代理本质上还是java中的“代理设计模式”，不需要依赖其他类库，主要涉及到两个类</h5><p><code>InvocationHandler.java</code>  InvocationHandler is the interface implemented by the invocation handler of a proxy instance.</p><p><code>Proxy.java</code>  Proxy provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all<br>            dynamic proxy classes created by those methods.</p><h5 id="编码实现步骤"><a href="#编码实现步骤" class="headerlink" title="编码实现步骤"></a>编码实现步骤</h5><p>（1）创建目标接口UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Log</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）创建具体实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"addUser "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"remove "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）创建代理对象 implements InvocationHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method.isAnnotationPresent(Log.class)) &#123;</span><br><span class="line">        System.out.println(<span class="string">"before method do something..."</span>);</span><br><span class="line">        Object object = method.invoke(src, args);</span><br><span class="line">        System.out.println(<span class="string">"after method do something..."</span>);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(src, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）客户端调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置这个值，可以把生成的代理类，输出出来。</span></span><br><span class="line">    System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br><span class="line">    UserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    <span class="comment">//生成被代理类的接口的子类</span></span><br><span class="line">    UserService proxy = (UserService) Proxy.newProxyInstance(LogProxy.class.getClassLoader(), service.getClass().getInterfaces(),</span><br><span class="line">                    <span class="keyword">new</span> LogProxy(service));</span><br><span class="line">    proxy.addUser(<span class="string">"name1"</span>);</span><br><span class="line">    proxy.remove(<span class="string">"name2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理对象的生成实际上是在运行时利用反射获取构造函数，通过加载构造函数在内存中生成的，其中生成的对象持有调用处理器InvocationHandler，最后会调用h.invoke()方法</p><p><img src="/images/aop/proxy.jpeg" alt="image"></p><h5 id="想要实现特定方法写入日志，可以使用注解等方式。"><a href="#想要实现特定方法写入日志，可以使用注解等方式。" class="headerlink" title="想要实现特定方法写入日志，可以使用注解等方式。"></a>想要实现特定方法写入日志，可以使用注解等方式。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义日志注解，用于判断该方法执行前是否需要写入日志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value = ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、编译时注解APT实现"><a href="#2、编译时注解APT实现" class="headerlink" title="2、编译时注解APT实现"></a>2、编译时注解APT实现</h4><p>代表项目：ButterKnife, Dagger2, DataBinding</p><h5 id="（1）APT的介绍"><a href="#（1）APT的介绍" class="headerlink" title="（1）APT的介绍"></a>（1）APT的介绍</h5><p>全名Annotation Processing Tool，注解处理器。对源代码文件进行检测找出其中的Annotation，使用 Annotation 进行额外的处理。<br>APT在处理 Annotation 时可以根据源文件中的 Annotation 生成额外的源文件和其它的文件(文件具体内容由Annotation处理器的编写者决定)，APT还会编译生成的源文件和原来的源文件，将它们一起生成class文件。<br>总结一句话，就是在编译时候，根据注解生成对应需要的文件，这样在app运行的时候就不会导致性能损耗。</p><h5 id="（2）APT的处理要素"><a href="#（2）APT的处理要素" class="headerlink" title="（2）APT的处理要素"></a>（2）APT的处理要素</h5><p>注解处理器（AbstractProcess）+ 代码处理（javaPoet）+ 注册处理器（AutoService）</p><h5 id="（3）使用APT来处理-Annotation-的流程"><a href="#（3）使用APT来处理-Annotation-的流程" class="headerlink" title="（3）使用APT来处理 Annotation 的流程"></a>（3）使用APT来处理 Annotation 的流程</h5><p>1.定义注解（如@ViewBind）<br>2.定义注解处理器 继承 AbstractProcessor<br>3.在处理器里面完成处理方式，生成java代码。<br>4.注册 处理器 @AutoService(Processor.class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要把处理器注册到javac中，需要打包一个特定的文件javax.annotation.processing.Processor到META-INF/services路径下</span></span><br><span class="line"><span class="comment"> * AutoService 会自动生成配置文件，注册处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewBindProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理器的初始化方法，可以获取相关的工具类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(processingEnv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理器的主方法，用于扫描处理注解，生成java文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、Javassist-实现"><a href="#3、Javassist-实现" class="headerlink" title="3、Javassist 实现"></a>3、Javassist 实现</h4><p>代表项目：Hotfix   Instant Run</p><h5 id="（1）原理"><a href="#（1）原理" class="headerlink" title="（1）原理"></a>（1）原理</h5><p>Javassist 可以直接操作字节码，从而实现代码注入，所以使用 Javassist 的时机就是在构建工具 Gradle 将源文件编译成 .class 文件之后，将 .class 打包成 dex 文件之前。</p><p>该方式需要借助Google提供的Transform API</p><p>先说一下Transform是什么<br>gradle从1.5开始，gradle 插件包含了一个叫Transform的API，这个API允许第三方插件在class文件转为为dex文件前操作编译好的class文件，<br>这个API的目标是简化自定义类操作，而不必处理Task，并且在操作上提供更大的灵活性。<br>官方文档：<a href="http://google.github.io/android-gradle-dsl/javadoc/" target="_blank" rel="noopener">http://google.github.io/android-gradle-dsl/javadoc/</a></p><h5 id="（2）开发步骤："><a href="#（2）开发步骤：" class="headerlink" title="（2）开发步骤："></a>（2）开发步骤：</h5><ul><li>创建自定义 Gradle plugin module<br>新建Android library module 留下src/main和build.gradle，其他的文件删除</li><li>Gradle Transform API<br> 在main目录下创建 groovy 文件夹，然后在 groovy 目录下就可以创建我们的包名和 groovy 文件了,记得后缀要已 .groovy 结尾。在这个文件中引入创建的包名，然后写一个Class继承于Plugin&lt; Project &gt; 并重写apply方法<br>创建 MyPlugin.groovy 文件</li><li>利用 javassist 或者 ASM 修改原有的class文件或者新增class</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line">        System.out.println(<span class="string">"------------------开始----------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//AppExtension就是build.gradle中android&#123;...&#125;这一块</span></span><br><span class="line">        <span class="keyword">def</span> android = project.extensions.getByType(AppExtension)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册一个Transform</span></span><br><span class="line">        <span class="keyword">def</span> classTransform = <span class="keyword">new</span> MyClassTransform(project)</span><br><span class="line">        android.registerTransform(classTransform)</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------------结束----------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTransform</span> <span class="keyword">extends</span> <span class="title">Transform</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> transform(Context context, Collection&lt;TransformInput&gt; inputs, Collection&lt;TransformInput&gt; referencedInputs, TransformOutputProvider outputProvider, <span class="keyword">boolean</span> isIncremental) <span class="keyword">throws</span> IOException, TransformException, InterruptedException &#123;</span><br><span class="line">        <span class="keyword">super</span>.transform(context, inputs, referencedInputs, outputProvider, isIncremental)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// javassist 操作字节码</span></span><br><span class="line">        <span class="comment">// 获取MainActivity.class</span></span><br><span class="line">        CtClass ctClass = pool.getCtClass(<span class="string">"io.github.android9527.javassistdemo.MainActivity"</span>);</span><br><span class="line">        <span class="keyword">if</span> (ctClass.isFrozen())</span><br><span class="line">            ctClass.defrost()</span><br><span class="line">        <span class="comment">// 获取到OnCreate方法</span></span><br><span class="line">        CtMethod ctMethod = ctClass.getDeclaredMethod(<span class="string">"onCreate"</span>)</span><br><span class="line">        String insetBeforeStr = <span class="string">""" android.widget.Toast.makeText(this, "插入了Toast代码~", android.widget.Toast.LENGTH_SHORT).show();</span></span><br><span class="line"><span class="string">                                                        """</span></span><br><span class="line">        <span class="comment">//在方法开头插入代码</span></span><br><span class="line">        ctMethod.insertBefore(insetBeforeStr)</span><br><span class="line">        ctClass.writeFile(path)</span><br><span class="line">        ctClass.detach() <span class="comment">//释放</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>配置plugin 在main目录下创建resources文件夹，继续在resources下创建META-INF文件夹，<br>继续在META-INF文件夹下创建<code>gradle-plugins</code>文件夹，最后在gradle-plugins文件夹下创建一个xxx.properties文件，<br>注意：这个xxx就是在app下的build.gradle中引入时的名字，例如：apply plugin: ‘xxx’。<br>在文件中写 <code>implementation-class=io.github.android9527.MyPlugin</code>。</p></li><li><p>需改build.gradle 内容，然后执行 uploadArchives 这个task 上传到 maven 库，就将我们的这个插件打包上传到了本地 maven 中，可以去本地的 maven 库中查看</p></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'groovy'</span></span><br><span class="line">apply plugin: <span class="string">'maven'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// gradle sdk</span></span><br><span class="line">    <span class="keyword">compile</span> gradleApi()</span><br><span class="line">    <span class="comment">// groovy sdk</span></span><br><span class="line">    <span class="keyword">compile</span> localGroovy()</span><br><span class="line">    <span class="comment">// 可以引用其它库</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.tools.build:transform-api:1.5.0'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'javassist:javassist:3.12.1.GA'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.tools.build:gradle:3.1.2'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uploadArchives&#123;</span><br><span class="line">    <span class="keyword">repositories</span>&#123;</span><br><span class="line">        mavenDeployer&#123;</span><br><span class="line">            repository(url:uri(<span class="string">'../repo'</span>))</span><br><span class="line">            pom.groupId = <span class="string">'com.android9527.plugin'</span> <span class="comment">// 组名</span></span><br><span class="line">            pom.artifactId = <span class="string">'test'</span> <span class="comment">// 插件名</span></span><br><span class="line">            pom.version = <span class="string">'1.0.1-SNAPSHOT'</span> <span class="comment">// 版本号</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">group</span>=<span class="string">'com.android9527.plugin'</span></span><br><span class="line">version=<span class="string">'1.0-SNAPSHOT'</span></span><br></pre></td></tr></table></figure><ul><li>项目主 module 依赖该 plugin 运行项目，反编译之后查看字节码<br><img src="/images/aop/javassist.jpeg" alt="image"></li></ul><h4 id="4、Android中使用-AspectJ"><a href="#4、Android中使用-AspectJ" class="headerlink" title="4、Android中使用 AspectJ"></a>4、Android中使用 AspectJ</h4><p>代表项目：Hugo(打印每个方法的执行时间)  sa-sdk-android（全埋点技术）</p><h5 id="（1）原理-1"><a href="#（1）原理-1" class="headerlink" title="（1）原理"></a>（1）原理</h5><p>AspectJ 意思就是Java的Aspect，Java的AOP。它的核心是ajc（编译器 aspectjtools）和 weaver（织入器 aspectjweaver）。</p><p>ajc编译器：基于Java编译器之上的，它是用来编译.aj文件，aspectj在Java编译器的基础上增加了一些它自己的关键字和方法。因此，ajc也可以编译Java代码。</p><p>weaver织入器：为了在java编译器上使用AspectJ而不依赖于Ajc编译器，aspectJ 5出现了 @AspectJ，使用注释的方式编写AspectJ代码，可以在任何Java编译器上使用。<br>由于AndroidStudio默认是没有ajc编译器的，所以在Android中使用@AspectJ来编写。它在代码的编译期间扫描目标程序，根据切点（PointCut）匹配,将开发者编写的Aspect程序编织（Weave）到目标程序的.class文件中，对目标程序作了重构（重构单位是JoinPoint），目的就是建立目标程序与Aspect程序的连接（获得执行的对象、方法、参数等上下文信息），从而达到AOP的目的。</p><h5 id="（2）AspectJ-术语"><a href="#（2）AspectJ-术语" class="headerlink" title="（2）AspectJ 术语"></a>（2）AspectJ 术语</h5><p>切面（Aspect）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。其实就是共有功能的实现。如日志切面、权限切面、事务切面等。<br>通知（Advice）：是切面的具体实现。以目标方法为参照点，根据放置的地方不同，可分为前置通知（Before）、后置通知（AfterReturning）、异常通知（AfterThrowing）、最终通知（After）与环绕通知（Around）5种。在实际应用中通常是切面类中的一个方法，具体属于哪类通知由配置指定的。<br>切入点（Pointcut）：用于定义通知应该切入到哪些连接点上。不同的通知通常需要切入到不同的连接点上，这种精准的匹配是由切入点的正则表达式来定义的。<br>连接点（JoinPoint）：就是程序在运行过程中能够插入切面的地点。例如，方法调用、异常抛出或字段修改等。<br>目标对象（Target Object）：包含连接点的对象，也被称作被通知或被代理对象。这些对象中已经只剩下干干净净的核心业务逻辑代码了，所有的共有功能等代码则是等待AOP容器的切入。<br>AOP代理（AOP Proxy）：将通知应用到目标对象之后被动态创建的对象。可以简单地理解为，代理对象的功能等于目标对象的核心业务逻辑功能加上共有功能。代理对象对于使用者而言是透明的，是程序运行过程中的产物。<br>编织（Weaving）：将切面应用到目标对象从而创建一个新的代理对象的过程。这个过程可以发生在编译期、类装载期及运行期，当然不同的发生点有着不同的前提条件。譬如发生在编译期的话，就要求有一个支持这种AOP实现的特殊编译器（如AspectJ编译器）；发生在类装载期，就要求有一个支持AOP实现的特殊类装载器；只有发生在运行期，则可直接通过Java语言的反射机制与动态代理机制来动态实现（如Spring）。<br>引入（Introduction）：添加方法或字段到被通知的类。</p><h5 id="（3）在Android项目中使用AspectJ"><a href="#（3）在Android项目中使用AspectJ" class="headerlink" title="（3）在Android项目中使用AspectJ"></a>（3）在Android项目中使用AspectJ</h5><ul><li><p>gradle配置的方式：引入AspectJ是有点复杂的，需要引入大量的gradle命令配置有点麻烦，在build文件中添加了一些脚本，文章出处：<a href="https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/" target="_blank" rel="noopener">https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/</a></p></li><li><p>使用 gradle 插件（也是对 gradle 命令进行了包装）：Jake Wharton 大神的 hugo 项目（一款日志打印的插件）</p></li></ul><p>上海沪江团队的 gradle_plugin_android_aspectjx 一个基于AspectJ并在此基础上扩展出来可应用于Android开发平台的AOP框架，可作用于java源码，class文件及jar包，同时支持kotlin的应用。</p><p>AOP的用处非常广，从spring到Android，各个地方都有使用，特别是在后端，Spring中已经使用的非常方便了，而且功能非常强大，但是在Android中，AspectJ的实现是略阉割的版本，并不是所有功能都支持，但对于一般的客户端开发来说，已经完全足够用了。</p><h5 id="（4）以-AspectJX-接入说明"><a href="#（4）以-AspectJX-接入说明" class="headerlink" title="（4）以 AspectJX 接入说明"></a>（4）以 AspectJX 接入说明</h5><ul><li>首先，需要在项目根目录的build.gradle中增加依赖：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:2.3.3&apos;</span><br><span class="line">        classpath &apos;com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.4&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后module项目的 build.gradle 中加入 AspectJ 的依赖：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;android-aspectjx&apos;</span><br><span class="line">dependencies &#123;</span><br><span class="line">        compile &apos;org.aspectj:aspectjrt:1.8.+&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">aspectjx &#123;</span><br><span class="line">    //排除所有package路径中包含`android.support`的class文件及库（jar文件）</span><br><span class="line">    exclude &apos;org.apache.httpcomponents&apos;</span><br><span class="line">    exclude &apos;android.support&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>具体配置参见github地址 <a href="https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx" target="_blank" rel="noopener">https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx</a></p></li><li><p>我们通过一段简单的代码来了解下基本的使用方法和功能，新建一个AspectTest类文件，代码如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"xuyisheng"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* android.app.Activity.on**(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityMethodBefore</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String key = joinPoint.getSignature().toString();</span><br><span class="line">        Log.e(TAG, <span class="string">"onActivityMethodBefore: "</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(* android.app.Activity.on**(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityMethodAfter</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String key = joinPoint.getSignature().toString();</span><br><span class="line">        Log.e(TAG, <span class="string">"onActivityMethodAfter: "</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* android.app.Activity.on**(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityMethodAfter</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String key = joinPoint.getSignature().toString();</span><br><span class="line">        Log.e(TAG, <span class="string">"onActivityMethodBefore: "</span> + key);</span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        Log.e(TAG, <span class="string">"onActivityMethodAfter: "</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类的最开始，我们使用 @Aspect 注解来定义这样一个AspectJ文件，编译器在编译的时候，就会自动去解析，并不需要主动去调用AspectJ类里面的代码。</p><h5 id="（5）编织速度优化建议"><a href="#（5）编织速度优化建议" class="headerlink" title="（5）编织速度优化建议"></a>（5）编织速度优化建议</h5><ul><li>尽量使用精确的匹配规则,降低匹配时间。</li><li>排除不需要扫描的包。</li></ul><p>通过这种方式编译后，我们来看下生成的代码是怎样的。AspectJ的原理实际上是在编译的时候，根据一定的规则解析，然后插入一些代码，通过aspectj生成的代码，会在Build目录下：</p><p><img src="/images/aop/aspectj_class.jpeg" alt="image"></p><p>我们可以发现，在onCreate的最前面，插入了一行AspectJ的代码。这个就是AspectJ的主要功能，抛开AOP的思想来说，我们想做的，实际上就是『在不侵入原有代码的基础上，增加新的代码』。</p><h3 id="四、总结："><a href="#四、总结：" class="headerlink" title="四、总结："></a>四、总结：</h3><p>动态代理<br>优点：</p><ul><li>Java API 提供的，兼容性好，无需依赖其他库，</li><li>动态代理类的字节码在程序运行时由Java反射机制动态生成，无需程序员手工编写它的源代码。</li><li>动态代理类不仅简化了编程工作，而且提高了软件系统的可扩展性，因为Java 反射机制可以生成任意类型的动态代理类。</li></ul><p>缺点：</p><ul><li>只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理，cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理。</li><li>没有代码注入步骤，必须手动实例化并应用，</li><li>功能有限，只能在方法前后执行一些代码</li></ul><p>APT<br>优点：</p><ul><li>任何你不想做的繁杂的工作，它可以帮你减少样板代码</li><li>生成代码位置的可控性（可以在任意包位置生成代码），与原有代码的关联性更为紧密方便</li></ul><p>缺点：</p><ul><li>只有被注解标记了的类或方法等，才可以被处理或收集信息。</li><li>APT可以自动生成代码，但在运行时却需要主动调用</li></ul><p>Javassist ：</p><ul><li>功能强大，使用方便，</li><li>由于Javassist可以直接操作修改编译后的字节码，直接绕过了java编译器，所以可以做很多突破限制的事情，例如，跨dex引用，解决热修复中CLASS_ISPREVERIFIED的问题。</li><li>运行时生成，减少不必要的生成开销；通过将切面逻辑写入字节码，减少了生成子类的开销，不会产生过多子类。运行时加入切面逻辑，产生性能开销。</li></ul><p>Aspectj：</p><ul><li>AspectJ除了hook之外，AspectJ还可以为目标类添加变量，接口。另外，AspectJ也有抽象，继承等各种更高级的玩法。它能够在编译期间直接修改源代码生成class。</li><li>AspectJ语法比较多，但是掌握几个简单常用的，就能实现绝大多数切片，完全兼容Java（纯Java语言开发，然后使用AspectJ注解，简称@AspectJ。）</li></ul><h3 id="五、参考资料："><a href="#五、参考资料：" class="headerlink" title="五、参考资料："></a>五、参考资料：</h3><p><a href="https://blog.csdn.net/woshimalingyi/article/details/73252013" target="_blank" rel="noopener">AOP之@AspectJ技术原理详解</a></p><p><a href="https://juejin.im/entry/581aec732e958a0054d08213" target="_blank" rel="noopener">安卓 AOP 三剑客: APT,AspectJ,Javassist</a></p><p><a href="https://www.jianshu.com/p/a6be7cdcfc65" target="_blank" rel="noopener">Android动态编译技术 Plugin Transform Javassist操作Class文件</a></p><p><a href="https://blog.csdn.net/innost/article/details/49387395" target="_blank" rel="noopener">深入理解Android之AOP</a></p><p><a href="http://www.jianshu.com/p/2779e3bb1f14" target="_blank" rel="noopener">归纳AOP在Android开发中的几种常见用法</a></p><p><a href="http://blog.csdn.net/eclipsexys/article/details/54425414" target="_blank" rel="noopener">看AspectJ在Android中的强势插入</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、AOP概念&quot;&gt;&lt;a href=&quot;#一、AOP概念&quot; class=&quot;headerlink&quot; title=&quot;一、AOP概念&quot;&gt;&lt;/a&gt;一、AOP概念&lt;/h3&gt;&lt;p&gt;百度百科中对AOP的解释如下:&lt;br&gt;在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。
    
    </summary>
    
      <category term="Android" scheme="http://android9527.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="Aop" scheme="http://android9527.com/tags/Aop/"/>
    
      <category term="Aspectj" scheme="http://android9527.com/tags/Aspectj/"/>
    
      <category term="面向切面编程" scheme="http://android9527.com/tags/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>CoordinatorLayout使用过程中遇到的问题.md</title>
    <link href="http://android9527.com/2018/10/09/2018-10-09-CoordinatorLayout%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://android9527.com/2018/10/09/2018-10-09-CoordinatorLayout使用过程中遇到的问题/</id>
    <published>2018-10-08T16:00:00.000Z</published>
    <updated>2019-01-29T09:27:09.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CoordinatorLayout使用过程中遇到的问题"><a href="#CoordinatorLayout使用过程中遇到的问题" class="headerlink" title="CoordinatorLayout使用过程中遇到的问题"></a>CoordinatorLayout使用过程中遇到的问题</h2><p>CoordinatorLayout 一般配合 NestedScrollView 或者 RecyclerView 使用<br>常常用于ScrollView滚动，ToolBar伸缩，渐变等背景视差效果等</p><p>CoordinatorLayout + AppBarLayout + CollapsingToolbarLayout 配合使用才会有比较完美的效果<br>app:layout_behavior属性，只有CoordinatorLayout的直接子布局才能响应。</p><a id="more"></a><ul><li><p>无法联动CoordinatorLayout<br>增加app:layout_behavior=”@string/appbar_scrolling_view_behavior”<br>我这边用了一个自定义的FrameLayout结果在滚动的时候，AppBarLayout无法跟着联动，<br>原因分析: 默认FrameLayout没有实现NestedScrollingChild接口，RecyclerView和NestedScrollView都实现了NestedScrollingChild接口，<br>解决方法：ViewCompat.setNestedScrollingEnabled(frameLayout, true);</p></li><li><p>监听AppBarLayout 位置移动 AppBarLayout.addOnOffsetChangedListener(this);<br>运行后发现 SystemBarUtils.transparencyAndDark() 改变状态栏背景的代码会导致 AppBarLayout 重绘，从而重新调用 onOffsetChanged() 方法，导致出现循环<br>解决方法增加去重等，也可以增加当前状态栏标志位进行过滤。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOffsetChanged</span><span class="params">(AppBarLayout appBarLayout, <span class="keyword">int</span> verticalOffset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 修改状态栏会触发 AppBarLayout重绘 onOffsetChanged() 方法，这里加个去重</span></span><br><span class="line">    <span class="keyword">if</span> (mCurVerticalOffset == verticalOffset)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    mCurVerticalOffset = verticalOffset;</span><br><span class="line">    <span class="keyword">int</span> offset = Math.abs(verticalOffset);</span><br><span class="line">    <span class="keyword">int</span> scrollRange = appBarLayout.getTotalScrollRange();</span><br><span class="line">    <span class="keyword">if</span> (offset &lt;= scrollRange / <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        mTitleOpenView.setVisibility(View.VISIBLE);</span><br><span class="line">        mTitleCloseView.setVisibility(View.GONE);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        SystemBarUtils.transparencyAndDark(TestActivity.<span class="keyword">this</span>, <span class="keyword">true</span>);</span><br><span class="line">        mTitleOpenView.setVisibility(View.GONE);</span><br><span class="line">        mTitleCloseView.setVisibility(View.VISIBLE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.design.widget.CoordinatorLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">                                                 <span class="attr">xmlns:app</span>=<span class="string">"http://schemas.android.com/apk/res-auto"</span></span></span><br><span class="line"><span class="tag">                                                 <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                                                 <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                                                 <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">in.srain.cube.views.ptr.PtrClassicFrameLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/ptr"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:layout_behavior</span>=<span class="string">"@string/appbar_scrolling_view_behavior"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:ptr_duration_to_close</span>=<span class="string">"300"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:ptr_duration_to_close_header</span>=<span class="string">"2000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:ptr_keep_header_when_refresh</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:ptr_pull_to_fresh</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:ptr_ratio_of_header_height_to_refresh</span>=<span class="string">"1.2"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:ptr_resistance</span>=<span class="string">"1.7"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/list"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">in.srain.cube.views.ptr.PtrClassicFrameLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">android.support.design.widget.AppBarLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/app_bar"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"@dimen/app_bar_height"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">android.support.design.widget.CollapsingToolbarLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/toolbar_layout"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:fitsSystemWindows</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_scrollFlags</span>=<span class="string">"scroll|exitUntilCollapsed"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"56dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">app:layout_collapseMode</span>=<span class="string">"pin"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">android.support.design.widget.CollapsingToolbarLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">android.support.design.widget.AppBarLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.design.widget.CoordinatorLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><p>1、AppBarLayout的直接子控件可以设置的属性:layout_scrollFlags</p><ul><li>scroll|exitUntilCollapsed如果AppBarLayout的直接子控件设置该属性,该子控件可以滚动,向上滚动NestedScrollView出父布局(一般为CoordinatorLayout)时,会折叠到顶端,向下滚动时NestedScrollView必须滚动到最上面的时候才能拉出该布局</li><li>scroll|enterAlways:只要向下滚动该布局就会显示出来,只要向上滑动该布局就会向上收缩</li><li>scroll|enterAlwaysCollapsed:向下滚动NestedScrollView到最底端时该布局才会显示出来</li><li>如果不设置改属性,则改布局不能滑动</li></ul><p>2、CollapsingToolbarLayout,字面意思是折叠的toolbar,它确实是起到折叠作用的,可以把自己的自布局折叠 继承自framLayout,所以它的直接子类可以设置layout_gravity来控制显示的位置,它的直接子布局可以使用的属性:app:layout_collapseMode(折叠模式):可取的值如下:</p><ul><li>pin:在滑动过程中,此自布局会固定在它所在的位置不动,直到CollapsingToolbarLayout全部折叠或者全部展开</li><li>parallax:视察效果,在滑动过程中,不管上滑还是下滑都会有视察效果,不知道什么事视察效果自己看gif图(layout_collapseParallaxMultiplier视差因子 0~1之间取值,当设置了parallax时可以配合这个属性使用,调节自己想要的视差效果)</li><li>不设置:跟随NestedScrollView的滑动一起滑动,NestedScrollView滑动多少距离他就会跟着走多少距离</li></ul><p>3、在 support 25 及以下版本中，滑动并不流畅。在 RecyclerView 滑动到中间部分然后下拉的时候，顶部的 AppBarLayout 并不会跟随向下滑动详见视频。<br>在 26.1.0 以上的版本官方已经修改了。这里提供两个方法解决这个问题，但效果还不太理想。<br>第一种，自定义 AppBarLayout.Behavior ，监听 RecyclerView 的滚动事件，调用 onNestedFling 处理<br>在 layout android.support.design.widget.AppBarLayout 标签中使用<br>app:layout_behavior=”xx.xxx.Behavior”<br>第二种，直接代码监听 RecyclerView 的滚动事件，当一条数据完全展示时，将 AppBarLayout 设置为展开状态。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">RecyclerView.addOnScrollListener(<span class="keyword">new</span> RecyclerView.OnScrollListener()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> newState)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onScrollStateChanged(recyclerView, newState);</span><br><span class="line">        <span class="keyword">if</span> (newState == RecyclerView.SCROLL_STATE_IDLE)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> firstVisiblePosition = manager.findFirstCompletelyVisibleItemPosition();</span><br><span class="line">            <span class="keyword">if</span> (firstVisiblePosition == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                appbar.setExpanded(<span class="keyword">true</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>4、其他方案<br>  github 上有个库也是解决这个问题的 <a href="https://github.com/henrytao-me/smooth-app-bar-layout" target="_blank" rel="noopener">smooth-app-bar-layout</a><br>  当然解决的原理跟本文相差甚远，有兴趣可以阅读下，我自己也有用过，不过这个库比较蛋疼的就是得为RecyclerView 设置一个 head item， 这个 item 的高度必须跟 AppBarLayout 一样的高度，所以对于 wrap_content 就比较麻烦了，当然，这个跟这个库的实现思路有关系。</p><p><code>com.android.support:appcompat-v7:25.3.0</code><br><img src="/images/coordinatorlayout/25.3.0.gif" alt="image"></p><p><code>com.android.support:appcompat-v7:26.0.0</code><br><img src="/images/coordinatorlayout/26.0.0.gif" alt="image"></p><p>5、项目地址</p><p><a href="https://github.com/android9527/CollapsingToobarLayoutDemo" target="_blank" rel="noopener">https://github.com/android9527/CollapsingToobarLayoutDemo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CoordinatorLayout使用过程中遇到的问题&quot;&gt;&lt;a href=&quot;#CoordinatorLayout使用过程中遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;CoordinatorLayout使用过程中遇到的问题&quot;&gt;&lt;/a&gt;CoordinatorLayout使用过程中遇到的问题&lt;/h2&gt;&lt;p&gt;CoordinatorLayout 一般配合 NestedScrollView 或者 RecyclerView 使用&lt;br&gt;常常用于ScrollView滚动，ToolBar伸缩，渐变等背景视差效果等&lt;/p&gt;
&lt;p&gt;CoordinatorLayout + AppBarLayout + CollapsingToolbarLayout 配合使用才会有比较完美的效果&lt;br&gt;app:layout_behavior属性，只有CoordinatorLayout的直接子布局才能响应。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://android9527.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android WebView缓存优化</title>
    <link href="http://android9527.com/2018/07/13/2018-07-13-Android%20WebView%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96/"/>
    <id>http://android9527.com/2018/07/13/2018-07-13-Android WebView缓存优化/</id>
    <published>2018-07-12T16:00:00.000Z</published>
    <updated>2018-07-27T11:29:29.034Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><p>对于WebView的性能，给人最直观的莫过于：打开速度比native慢。<br>是的，当我们打开一个WebView页面，页面往往会慢吞吞的loading很久，若干秒后才出现你所需要看到的页面。这是为什么呢？</p><a id="more"></a><p>对于一个普通用户来讲，打开一个WebView通常会经历以下几个阶段：</p><ul><li>交互无反馈</li><li>到达新的页面，页面白屏</li><li>页面基本框架出现，但是没有数据；页面处于loading状态</li><li>出现所需的数据<br>如果从程序上观察，WebView启动过程大概分为以下几个阶段：</li></ul><p><img src="/images/webview_cache/webview_1.png" alt="image"><br>如何缩短这些过程的时间，就成了优化WebView性能的关键。</p><p>常规的前端和后端的性能优化已有前辈们总结过最佳实践，主要的是：</p><ul><li>降低请求量：合并资源，减少 HTTP 请求数，minify / gzip 压缩，webP。</li><li>加快请求速度：预解析DNS，减少域名数，并行加载，CDN 分发。</li><li>缓存：HTTP 协议缓存请求，离线缓存 manifest，离线数据缓存 localStorage。</li><li>渲染：JS/CSS优化，加载顺序，服务端渲染模板直出。</li></ul><h4 id="二、WebView的缓存类型"><a href="#二、WebView的缓存类型" class="headerlink" title="二、WebView的缓存类型"></a>二、WebView的缓存类型</h4><p>WebView主要包括两类缓存，一类是浏览器自带的网页数据缓存，这是所有的浏览器都支持的、由HTTP协议定义的缓存；另一类是H5缓存，这是由web页面的开发者设置的，H5缓存主要包括了App Cache、DOM Storage、Local Storage、Web SQL Database 存储机制等，这里我们主要介绍App Cache来缓存js文件。</p><h5 id="1、浏览器自带的网页数据缓存"><a href="#1、浏览器自带的网页数据缓存" class="headerlink" title="1、浏览器自带的网页数据缓存"></a>1、浏览器自带的网页数据缓存</h5><ul><li>浏览器缓存机制是通过HTTP协议Header里的Cache-Control（或Expires）和Last-Modified（或 Etag）等字段来控制文件缓存的机制。</li><li>WebView如何设置才能支持上面的协议</li></ul><p>Android WebView有下面几个Cache Mode：</p><ul><li>LOAD_DEFAULT：根据cache-control决定是否从网络上取数据。</li><li>LOAD_NORMAL：Deprecated，API level 17中已经废弃，从API level 11开始作用同LOAD_DEFAULT模式</li><li>LOAD_CACHE_ELSE_NETWORK：只要本地有，无论是否过期，都使用缓存中的数据。本地没有缓存时才从网络上获取。</li><li>LOAD_NO_CACHE：不使用缓存，只从网络获取数据。</li><li>LOAD_CACHE_ONLY： 不使用网络，只读取本地缓存数据。</li></ul><p>设置WebView缓存的Cache Mode示例代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> webSettings = webView.settings</span><br><span class="line">webSettings.cacheMode = WebSettings.LOAD_NO_CACHE</span><br><span class="line"></span><br><span class="line">webSettings.cacheMode = <span class="keyword">if</span> (YKNetworkUtil.isNetConnected()) &#123;</span><br><span class="line">    WebSettings.LOAD_NO_CACHE</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    WebSettings.LOAD_CACHE_ELSE_NETWORK</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、在手机里面的存储路径"><a href="#2、在手机里面的存储路径" class="headerlink" title="2、在手机里面的存储路径"></a>2、在手机里面的存储路径</h5><p>Android 6.0的目录：/data/data/包名/cache/org.chromium.android_webview/下面，如下图所示。<br><img src="/images/webview_cache/webview_path.jpeg" alt="image"></p><h5 id="Application-Cache-缓存机制"><a href="#Application-Cache-缓存机制" class="headerlink" title="Application Cache 缓存机制"></a>Application Cache 缓存机制</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// HTML 在头中通过 manifest 属性引用 manifest 文件</span><br><span class="line">// manifest 文件：就是上面以 appcache 结尾的文件，是一个普通文件文件，列出了需要缓存的文件</span><br><span class="line">// 浏览器在首次加载 HTML 文件时，会解析 manifest 属性，并读取 manifest 文件，获取 Section：CACHE MANIFEST 下要缓存的文件列表，再对文件缓存</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">"cache/demo.appcache"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">CACHE MANIFEST</span><br><span class="line">demo_time.js</span><br><span class="line">img_logo.gif</span><br><span class="line">NETWORK:</span><br><span class="line">*</span><br><span class="line">FALLBACK:</span><br><span class="line">404.html</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> webSettings = webView.settings</span><br><span class="line">webSettings.setAppCacheEnabled(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h5 id="3、Dom-Storage-缓存机制"><a href="#3、Dom-Storage-缓存机制" class="headerlink" title="3、Dom Storage 缓存机制"></a>3、Dom Storage 缓存机制</h5><p>a. 通过存储字符串的 Key - Value 对来提供<br>DOM Storage 分为 sessionStorage &amp;  localStorage； 二者使用方法基本相同，区别在于作用范围不同：<br>a. sessionStorage：具备临时性，即存储与页面相关的数据，它在页面关闭后无法使用<br>b. localStorage：具备持久性，即保存的数据在页面关闭后也可以使用。</p><p>b. 特点<br>存储空间大（ 5MB）：存储空间对于不同浏览器不同，如Cookies 才 4KB<br>存储安全、便捷： Dom Storage 存储的数据在本地，不需要经常和服务器进行交互<br>c. 应用场景<br>存储临时、简单的数据</p><p>具体实现，前端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem("lastName", "HaHa");</span><br><span class="line">var lastName = localStorage.getItem("lastName");</span><br><span class="line"></span><br><span class="line">sessionStorage.setItem("lastName", "HaHa");</span><br><span class="line">var lastName = sessionStorage.getItem("lastName");</span><br></pre></td></tr></table></figure><p>Android端</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> webSettings = webView.settings</span><br><span class="line">webSettings.domStorageEnabled = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="4、Web-SQL-Database-缓存机制"><a href="#4、Web-SQL-Database-缓存机制" class="headerlink" title="4、Web SQL Database 缓存机制"></a>4、Web SQL Database 缓存机制</h5><p>a. 原理<br>基于 SQL 的数据库存储机制</p><p>b. 特点<br>充分利用数据库的优势，可方便对数据进行增加、删除、修改、查询</p><p>c. 应用场景<br>存储适合数据库的结构化数据</p><p>d. 具体实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var db = openDatabase('testDB', '1.0', 'Test DB', 2 * 1024 * 1024);</span></span><br><span class="line"><span class="undefined">        var msg;</span></span><br><span class="line"><span class="undefined">        db.transaction(function (context) &#123;</span></span><br><span class="line"><span class="undefined">           context.executeSql('CREATE TABLE IF NOT EXISTS testTable (id unique, name)');</span></span><br><span class="line"><span class="undefined">           context.executeSql('INSERT INTO testTable (id, name) VALUES (0, "Byron")');</span></span><br><span class="line"><span class="undefined">           context.executeSql('INSERT INTO testTable (id, name) VALUES (1, "Casper")');</span></span><br><span class="line"><span class="undefined">           context.executeSql('INSERT INTO testTable (id, name) VALUES (2, "Frank")');</span></span><br><span class="line"><span class="undefined">         &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        db.transaction(function (context) &#123;</span></span><br><span class="line"><span class="undefined">           context.executeSql('SELECT * FROM testTable', [], function (context, results) &#123;</span></span><br><span class="line"><span class="undefined">            var len = results.rows.length, i;</span></span><br><span class="line"><span class="undefined">            console.log('Got '+len+' rows.');</span></span><br><span class="line"><span class="undefined">               for (i = 0; i &lt; len; i++)&#123;</span></span><br><span class="line"><span class="undefined">              console.log('id: '+results.rows.item(i).id);</span></span><br><span class="line"><span class="undefined">              console.log('name: '+results.rows.item(i).name);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">         &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> webSettings = webView.settings</span><br><span class="line">webSettings.databaseEnabled = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>特别说明<br>根据官方说明，Web SQL Database存储机制不再推荐使用（不再维护）,取而代之的是 IndexedDB缓存机制，下面会详细介绍</p><h5 id="5、indexedDB"><a href="#5、indexedDB" class="headerlink" title="5、indexedDB"></a>5、indexedDB</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">       function openDB (name) &#123;</span></span><br><span class="line"><span class="undefined">            var request=window.indexedDB.open(name);</span></span><br><span class="line"><span class="undefined">            request.onerror=function(e)&#123;</span></span><br><span class="line"><span class="undefined">                console.log('OPen Error!');</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">            request.onsuccess=function(e)&#123;</span></span><br><span class="line"><span class="undefined">                myDB.db=e.target.result;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var myDB=&#123;</span></span><br><span class="line"><span class="undefined">            name:'test',</span></span><br><span class="line"><span class="undefined">            version:1,</span></span><br><span class="line"><span class="undefined">            db:null</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">        openDB(myDB.name);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="三、缓存机制汇总"><a href="#三、缓存机制汇总" class="headerlink" title="三、缓存机制汇总"></a>三、缓存机制汇总</h4><p><img src="/images/webview_cache/webview_cache_3.png" alt="image"></p><p>结论：综合各种缓存机制比较，对于静态文件，如 JS、CSS、字体、图片等，适合通过浏览器缓存机制来进行缓存，通过缓存文件可大幅提升 Web 的加载速度，且节省流量。但也有一些不足：缓存文件需要首次加载后才会产生；浏览器缓存的存储空间有限，缓存有被清除的可能；缓存的文件没有校验。</p><h4 id="四、APP端主要缓存方案"><a href="#四、APP端主要缓存方案" class="headerlink" title="四、APP端主要缓存方案"></a>四、APP端主要缓存方案</h4><h5 id="1、全局WebView，WebView独立进程"><a href="#1、全局WebView，WebView独立进程" class="headerlink" title="1、全局WebView，WebView独立进程"></a>1、全局WebView，WebView独立进程</h5><p>在客户端刚启动时，就初始化一个全局的WebView待用，并隐藏；<br>当用户访问了WebView时，直接使用这个WebView加载对应网页，并展示。<br>这种方法可以比较有效的减少WebView在App中的首次打开时间。当用户访问页面时，不需要初始化WebView的时间。</p><p>当然这也带来了一些问题，包括：</p><p>额外的内存消耗。<br>页面间跳转需要清空上一个页面的痕迹，更容易内存泄露。</p><h5 id="2、APP端代理网络请求"><a href="#2、APP端代理网络请求" class="headerlink" title="2、APP端代理网络请求"></a>2、APP端代理网络请求</h5><p>在客户端初始化WebView的同时，直接由APP端开始网络请求数据；<br>当页面初始化完成后，向客户端获取其代理请求的数据。</p><p>此方法虽然不能减小WebView初始化时间，但数据请求和WebView初始化可以并行进行，总体的页面加载时间就缩短了；缩短总体的页面加载时间：</p><h5 id="3、WebView采用和客户端API相同的域名"><a href="#3、WebView采用和客户端API相同的域名" class="headerlink" title="3、WebView采用和客户端API相同的域名"></a>3、WebView采用和客户端API相同的域名</h5><p>DNS会在系统级别进行缓存，对于WebView的地址，如果使用的域名与native的API相同，则可以直接使用缓存的DNS。</p><p>根据上面的统计，至少10%的用户打开WebView时耗费了60ms在DNS上面，如果WebView的域名与App的API域名统一，则可以让WebView的DNS时间全部达到1.3ms的量级。</p><p>静态资源同理，最好与客户端的资源域名保持一致。</p><h5 id="4、资源预加载"><a href="#4、资源预加载" class="headerlink" title="4、资源预加载"></a>4、资源预加载</h5><p>预加载WebView对象 &amp; 预加载H5资源</p><p>Application启动或者其他时机预加载WebView对象，WebView初始化之后，即使WebView已经释放，但一些公用的资源仍未释放</p><p>构建WebView对象池，采用多个WebView对象重复使用，而不需要每次打开H5都创建对象</p><h5 id="5、离线资源包等"><a href="#5、离线资源包等" class="headerlink" title="5、离线资源包等"></a>5、离线资源包等</h5><ul><li>事先将更新频率较低、常用 &amp; 固定的H5静态资源 文件（如JS、CSS文件、图片等） 放到本地</li><li>拦截H5页面的资源网络请求 并进行检测</li><li>如果检测到本地具有相同的静态资源 就 直接从本地读取进行替换 而 不发送该资源的网络请求 到 服务器获取</li><li>资源包更新策略，增量更新等</li></ul><p>目前客户端缓存策略：</p><p>H5加载—拦截网络请求进行资源监测—本地是否具有相同的资源—-Y —- 不发送网络请求—-取本地资源—-结束<br>                                                  —-N —- 继续发送网络请求—资源缓存本地—-结束</p><p>具体实现：重写<code>WebViewClient</code>的<code>shouldInterceptRequest</code>方法，进行本地资源监测和替换</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">shouldInterceptRequest</span><span class="params">(view: <span class="type">WebView</span>, url: <span class="type">String</span>?)</span></span>: WebResourceResponse? &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (!mIsEnableCache) &#123;</span><br><span class="line">        <span class="keyword">super</span>.shouldInterceptRequest(view, url)</span><br><span class="line">    &#125; <span class="keyword">else</span> webViewCacheManage.getWebResourceResponse(<span class="keyword">this</span>, url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TargetApi(Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">shouldInterceptRequest</span><span class="params">(view: <span class="type">WebView</span>, request: <span class="type">WebResourceRequest</span>?)</span></span>: WebResourceResponse? &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (!mIsEnableCache) &#123;</span><br><span class="line">        <span class="keyword">super</span>.shouldInterceptRequest(view, request)</span><br><span class="line">    &#125; <span class="keyword">else</span> webViewCacheManage.getWebResourceResponse(<span class="keyword">this</span>, request?.url?.toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>有效解决 H5页面静态资源 加载速度慢 &amp; 流量消耗多的问题</li><li>开发成本低，没有改变前端H5的任何代码，只需APP端开发</li><li>配置灵活，支持自定义缓存策略，自定义缓存类型等</li></ul><p>缺点：</p><ul><li>缓存的Key依赖前端资源中的url，如果前端资源需要更新则必须要更改名字</li><li>资源文件的缓存只有在第二次打开页面才会生效</li></ul><p>TODO：</p><ul><li>资源预加载方案，WebView预初始化</li><li>针对单个页面独立配置</li><li>完善资源缓存方案</li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://tech.meituan.com/WebViewPerf.html" target="_blank" rel="noopener">WebView性能、体验分析与优化</a><br><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&amp;mid=2651229156&amp;idx=1&amp;sn=fdd48acd893ddd11ccd2460c46a3c2d1" target="_blank" rel="noopener">WebView缓存原理分析和应用</a><br><a href="https://www.jianshu.com/p/5e7075f4875f" target="_blank" rel="noopener">Android：手把手教你构建 全面的WebView 缓存机制 &amp; 资源加载方案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h4&gt;&lt;p&gt;对于WebView的性能，给人最直观的莫过于：打开速度比native慢。&lt;br&gt;是的，当我们打开一个WebView页面，页面往往会慢吞吞的loading很久，若干秒后才出现你所需要看到的页面。这是为什么呢？&lt;/p&gt;
    
    </summary>
    
      <category term="WebView" scheme="http://android9527.com/categories/WebView/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="WebView" scheme="http://android9527.com/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>自签名证书实现HTTPS单双向认证</title>
    <link href="http://android9527.com/2018/06/02/2018-06-02-%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%AE%9E%E7%8E%B0HTTPS%E5%8D%95%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81/"/>
    <id>http://android9527.com/2018/06/02/2018-06-02-自签名证书实现HTTPS单双向认证/</id>
    <published>2018-06-01T16:00:00.000Z</published>
    <updated>2018-06-08T02:31:50.195Z</updated>
    
    <content type="html"><![CDATA[<h4 id="自签名证书生成过程"><a href="#自签名证书生成过程" class="headerlink" title="自签名证书生成过程"></a>自签名证书生成过程</h4><p>对于向权威机构申请过证书的网络地址,用OkHttp或者HttpsURLConnection都可以直接访问，不需要做额外的事情。但是申请证书要$$的，所以开发的时候我们接口经常是使用自签名证书，或者即使上线了也还是用自签名的</p><h4 id="使用keytool生成证书"><a href="#使用keytool生成证书" class="headerlink" title="使用keytool生成证书"></a>使用keytool生成证书</h4><p>keytool是JDK提供的管理加密密钥、X.509证书链和可信证书密钥库的简便工具。可以直接在终端或DOC窗口输入keytool命令来查看帮助。<br><a id="more"></a></p><h4 id="单向认证"><a href="#单向认证" class="headerlink" title="单向认证"></a>单向认证</h4><h5 id="一、生成密钥对"><a href="#一、生成密钥对" class="headerlink" title="一、生成密钥对"></a>一、生成密钥对</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias server -keyalg RSA -keystore server.jks</span><br></pre></td></tr></table></figure><p>-alias后面跟的是唯一别名，-keystore后面填保存秘钥对的文件路径<br>还可以添加一个-validity 天数声明有效期</p><p>需要注意的地方：执行命令之后第一个问题让你输入名字的地方最好设置成域名，比如这样baidu.com</p><h5 id="二、导出证书"><a href="#二、导出证书" class="headerlink" title="二、导出证书"></a>二、导出证书</h5><p>上面生成了服务端使用的密钥对，现在可以通过它生成证书给客户端使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -export -alias server -storepass 123456 -keystore server.jks -file server.cer</span><br></pre></td></tr></table></figure><p>-storepass后面跟的是你刚才设置的密码,不加这个也没关系，它会主动问你！；-file设置了保存证书的路径</p><h5 id="三、服务端配置"><a href="#三、服务端配置" class="headerlink" title="三、服务端配置"></a>三、服务端配置</h5><p>这里我使用tomcat8进行测试，它的配置很简单，修改tomcat目录下的conf/server.xml文件，添加如下内容，这里设置了端口号为8443</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span><br><span class="line">            maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</span><br><span class="line">            clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot;</span><br><span class="line">            keystoreFile=&quot;密钥库文件路径，也就是.jks文件&quot;</span><br><span class="line">            keystorePass=&quot;密码&quot; /&gt;</span><br></pre></td></tr></table></figure><h5 id="四、安卓端配置"><a href="#四、安卓端配置" class="headerlink" title="四、安卓端配置"></a>四、安卓端配置</h5><p>此时PC端访问服务器时提示警告</p><p><img src="/images/https/单向验证提示.jpeg" alt="单向验证提示"></p><p>在客户端未配置前采用HTTPS请求服务器时抛出异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">05-31 15:47:41.190 26222-26616/io.github.android9527.httpsapplication I/System.out: OKHTTP3 ----&gt;&lt;-- HTTP FAILED: javax.net.ssl.SSLHandshakeException: Handshake failed</span><br><span class="line">05-31 15:47:41.190 26222-26616/io.github.android9527.httpsapplication W/System.err: javax.net.ssl.SSLHandshakeException: Handshake failed</span><br><span class="line">        at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:396)</span><br><span class="line">        at okhttp3.internal.connection.RealConnection.connectTls(RealConnection.java:302)</span><br><span class="line">        at okhttp3.internal.connection.RealConnection.establishProtocol(RealConnection.java:270)</span><br><span class="line">        at okhttp3.internal.connection.RealConnection.connect(RealConnection.java:162)</span><br><span class="line">        at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)</span><br><span class="line">        at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)</span><br><span class="line">        at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)</span><br><span class="line">        at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br></pre></td></tr></table></figure></p><ul><li><p>加载证书<br>把之前生成的证书（.cer）放到安卓项目的assets或者raw目录下，读取文件流用以下方法获取SSLSocketFactory 。</p></li><li><p>OkHttpClient配置<br>在OkHttp中使用很简单，获取SSLSocketFactory之后通过OkHttp的构建方法传入就行了。<br>使用的OkHttp版本是3.10.0。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient client = new OkHttpClient.Builder()</span><br><span class="line">                .sslSocketFactory(sslSocketFactory)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">HttpsURLConnection.setSSLSocketFactory(sslSocketFactory);</span><br></pre></td></tr></table></figure><p>设置完之后你就可以访问该证书对应的域名地址了，不需要别的附加操作了。</p><h4 id="双向验证"><a href="#双向验证" class="headerlink" title="双向验证"></a>双向验证</h4><p>双向认证需要两个密钥实体，一个放服务端一个放客户端。<br>前面我们已经实现单向的认证，现在只需要给客户端生成一个密钥库，并且让服务端信任客户端就可以了。</p><h5 id="一、生成客户端密钥"><a href="#一、生成客户端密钥" class="headerlink" title="一、生成客户端密钥"></a>一、生成客户端密钥</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias android -keyalg RSA -keystore android.jks</span><br></pre></td></tr></table></figure><h5 id="二、导出客户端证书（字符串形式）"><a href="#二、导出客户端证书（字符串形式）" class="headerlink" title="二、导出客户端证书（字符串形式）"></a>二、导出客户端证书（字符串形式）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -keystore android.jks -alias android -exportcert -rfc &gt; android.pem</span><br></pre></td></tr></table></figure><p>将导出的证书添加信任到服务端的密钥库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -importcert -trustcacerts -alias android -keystore server.jks -file android.pem</span><br></pre></td></tr></table></figure></p><h5 id="三、服务端配置-1"><a href="#三、服务端配置-1" class="headerlink" title="三、服务端配置"></a>三、服务端配置</h5><p>修改tomcat目录下的conf/server.xml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span><br><span class="line">            maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</span><br><span class="line">            sslProtocol=&quot;TLS&quot;</span><br><span class="line">            keystoreFile=&quot;密钥库文件路径，也就是.jks文件&quot;</span><br><span class="line">            keystorePass=&quot;密码&quot;</span><br><span class="line">            //修改两条内容，其它和之前单向认证一样就行</span><br><span class="line">            clientAuth=&quot;true&quot;</span><br><span class="line">            truststoreFile=&quot;和keystoreFile填一样&quot; /&gt;</span><br></pre></td></tr></table></figure><h5 id="四、安卓端配置-1"><a href="#四、安卓端配置-1" class="headerlink" title="四、安卓端配置"></a>四、安卓端配置</h5><p>此时PC端访问服务器时提示警告</p><p><img src="/images/https/双向验证提示.jpeg" alt="双向验证提示"></p><p>在未配置前采用HTTPS请求服务器时抛出异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">05-31 15:47:41.190 26222-26616/io.github.android9527.httpsapplication I/System.out: OKHTTP3 ----&gt;&lt;-- HTTP FAILED: javax.net.ssl.SSLHandshakeException: Handshake failed</span><br><span class="line">05-31 15:47:41.190 26222-26616/io.github.android9527.httpsapplication W/System.err: javax.net.ssl.SSLHandshakeException: Handshake failed</span><br><span class="line">        at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:396)</span><br><span class="line">        at okhttp3.internal.connection.RealConnection.connectTls(RealConnection.java:302)</span><br><span class="line">        at okhttp3.internal.connection.RealConnection.establishProtocol(RealConnection.java:270)</span><br><span class="line">        at okhttp3.internal.connection.RealConnection.connect(RealConnection.java:162)</span><br><span class="line">        at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)</span><br><span class="line">        at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)</span><br><span class="line">        at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)</span><br><span class="line">        at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br></pre></td></tr></table></figure><p>刚才生成了客户端的密钥库android.jks。但是安卓默认是不支持jks格式的！比较常规的解决方式是用<code>Portecle</code>工具将它转换成bks文件。</p><p>点这里下载<code>Portecle</code>工具（<a href="https://sourceforge.net/projects/portecle/?source=typ_redirect）" target="_blank" rel="noopener">https://sourceforge.net/projects/portecle/?source=typ_redirect）</a></p><p>下载完之后解压并在目录下运行命令：java -jar portecle.jar 打开</p><p>运行之后就会出来UI界面，用它打开android.jks然后选菜单 Tools –&gt; Change Keystore Type –&gt; BKS 在弹出框输入密码进行转换，最后别忘记选菜单 File –&gt; Save Keystore As 将它另存为android.kbs(名字随意)</p><p>生成kbs文件之后，把它放到安卓的目录下assets或者raw。</p><p>然后把获取SSLSocketFactory的方法改成下面这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String keyStoreType2 = <span class="string">"BKS"</span>;</span><br><span class="line">KeyStore keyStore2 = KeyStore.getInstance(keyStoreType2);</span><br><span class="line">keyStore2.load(key, keyPassword.toCharArray());</span><br><span class="line"></span><br><span class="line">String kmfAlgorithm = KeyManagerFactory.getDefaultAlgorithm();</span><br><span class="line">KeyManagerFactory kmf = KeyManagerFactory.getInstance(kmfAlgorithm);</span><br><span class="line">kmf.init(keyStore2,keyPassword.toCharArray());</span><br><span class="line"></span><br><span class="line">sslContext = SSLContext.getInstance(<span class="string">"TLS"</span>);</span><br><span class="line">sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>上面的都改完之后，双向验证的配置就完成了。你可以打开浏览器访问下你配置好的地址，应该不能访问，提示你:不接受您的登录证书，或者您的登录证书可能已过期。因为你的系统没有加入刚才生成的客户端密钥库，安卓端像上面一样设置完SSLSocketFactory就可以正常访问了。</p><h4 id="源码地址-https-github-com-android9527-HttpsApplication"><a href="#源码地址-https-github-com-android9527-HttpsApplication" class="headerlink" title="源码地址 (https://github.com/android9527/HttpsApplication/)"></a>源码地址 (<a href="https://github.com/android9527/HttpsApplication/" target="_blank" rel="noopener">https://github.com/android9527/HttpsApplication/</a>)</h4><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://blog.majiajie.me/2016/05/11/Android-%E5%81%B6%E9%81%87HTTPS/" target="_blank" rel="noopener">Android 偶遇HTTPS</a></p><p><a href="http://pingguohe.net/2016/02/26/Android-App-secure-ssl.html" target="_blank" rel="noopener">苹果核 - Android App 安全的HTTPS 通信</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;自签名证书生成过程&quot;&gt;&lt;a href=&quot;#自签名证书生成过程&quot; class=&quot;headerlink&quot; title=&quot;自签名证书生成过程&quot;&gt;&lt;/a&gt;自签名证书生成过程&lt;/h4&gt;&lt;p&gt;对于向权威机构申请过证书的网络地址,用OkHttp或者HttpsURLConnection都可以直接访问，不需要做额外的事情。但是申请证书要$$的，所以开发的时候我们接口经常是使用自签名证书，或者即使上线了也还是用自签名的&lt;/p&gt;
&lt;h4 id=&quot;使用keytool生成证书&quot;&gt;&lt;a href=&quot;#使用keytool生成证书&quot; class=&quot;headerlink&quot; title=&quot;使用keytool生成证书&quot;&gt;&lt;/a&gt;使用keytool生成证书&lt;/h4&gt;&lt;p&gt;keytool是JDK提供的管理加密密钥、X.509证书链和可信证书密钥库的简便工具。可以直接在终端或DOC窗口输入keytool命令来查看帮助。&lt;br&gt;
    
    </summary>
    
      <category term="HTTPS" scheme="http://android9527.com/categories/HTTPS/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="HTTPS" scheme="http://android9527.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>Android App 安全的HTTPS 通信</title>
    <link href="http://android9527.com/2018/06/01/2018-06-01-Android%20App%20%E5%AE%89%E5%85%A8%E7%9A%84HTTPS%20%E9%80%9A%E4%BF%A1/"/>
    <id>http://android9527.com/2018/06/01/2018-06-01-Android App 安全的HTTPS 通信/</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2018-06-01T08:17:48.187Z</updated>
    
    <content type="html"><![CDATA[<h5 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h5><p>对于数字证书相关概念、Android 里 https 通信代码就不再复述了，直接讲问题。缺少相应的安全校验很容易导致中间人攻击，而漏洞的形式主要有以下3种：</p><ul><li>自定义<code>X509TrustManager</code>。<br>在使用HttpsURLConnection发起 HTTPS 请求的时候，提供了一个自定义的X509TrustManager，<br>未实现安全校验逻辑，下面片段就是常见的容易犯错的代码片段。如果不提供自定义的X509TrustManager，<br>代码运行起来可能会报异常（原因下文解释），初学者就很容易在不明真相的情况下提供了一个自定义的X509TrustManager，<br>却忘记正确地实现相应的方法。本文重点介绍这种场景的处理方式。<a id="more"></a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义X509TrustManager，存在安全漏洞</span></span><br><span class="line"><span class="comment"> * 跳过证书校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnSafeTrustManager</span> <span class="keyword">implements</span> <span class="title">X509TrustManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">        <span class="comment">//do nothing，接受任意客户端证书</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">        <span class="comment">//do nothing，接受任意服务端证书</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义了<code>HostnameVerifier</code>。<br>在握手期间，如果 URL 的主机名和服务器的标识主机名不匹配，则验证机制可以回调此接口的实现程序来确定是否应该允许此连接。<br>如果回调内实现不恰当，默认接受所有域名，则有安全风险。代码示例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by chenfeiyue on 2018/6/1.</span></span><br><span class="line"><span class="comment"> * Description ：UnSafeHostnameVerifier</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnSafeHostnameVerifier</span> <span class="keyword">implements</span> <span class="title">HostnameVerifier</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String hostname, SSLSession session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Always return true，接受任意域名服务器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HttpsURLConnection.setDefaultHostnameVerifier(<span class="keyword">new</span> UnSafeHostnameVerifier());</span><br></pre></td></tr></table></figure><h4 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h4><p>分而治之，针对不同的漏洞点分别描述，这里就讲的修复方案主要是针对非浏览器App，非浏览器 App 的服务端通信对象比较固定，一般都是自家服务器，可以做很多特定场景的定制化校验。如果是浏览器 App，校验策略就有更通用一些。</p><ul><li>自定义X509TrustManager。前面说到，当发起 HTTPS 请求时，可能抛起一个异常，以下面这段代码为例（来自官方文档）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    URL url = <span class="keyword">new</span> URL(<span class="string">"https://certs.cac.washington.edu/CAtest/"</span>);</span><br><span class="line">    URLConnection urlConnection = url.openConnection();</span><br><span class="line">    InputStream in = urlConnection.getInputStream();</span><br><span class="line">    copyInputStreamToOutputStream(in, System.out);</span><br><span class="line">&#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copyInputStreamToOutputStream</span><span class="params">(InputStream in, PrintStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        out.write(buffer, <span class="number">0</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它会抛出一个<code>SSLHandshakeException</code>的异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">javax.net.ssl.SSLHandshakeException: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.</span><br><span class="line">    at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:322)</span><br><span class="line">    at com.android.okhttp.Connection.upgradeToTls(Connection.java:201)</span><br><span class="line">    at com.android.okhttp.Connection.connect(Connection.java:155)</span><br><span class="line">    at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:276)</span><br><span class="line">    at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:211)</span><br><span class="line">    at com.android.okhttp.internal.http.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:382)</span><br><span class="line">    at com.android.okhttp.internal.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:332)</span><br><span class="line">    at com.android.okhttp.internal.http.HttpURLConnectionImpl.getInputStream(HttpURLConnectionImpl.java:199)</span><br><span class="line">    at com.android.okhttp.internal.http.DelegatingHttpsURLConnection.getInputStream(DelegatingHttpsURLConnection.java:210)</span><br><span class="line">    at com.android.okhttp.internal.http.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:25)</span><br><span class="line">    at me.longerian.abcandroid.datetimepicker.TestDateTimePickerActivity$1.run(TestDateTimePickerActivity.java:236)</span><br><span class="line">Caused by: java.security.cert.CertificateException: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.</span><br><span class="line">    at com.android.org.conscrypt.TrustManagerImpl.checkTrusted(TrustManagerImpl.java:318)</span><br><span class="line">    at com.android.org.conscrypt.TrustManagerImpl.checkServerTrusted(TrustManagerImpl.java:219)</span><br><span class="line">    at com.android.org.conscrypt.Platform.checkServerTrusted(Platform.java:114)</span><br><span class="line">    at com.android.org.conscrypt.OpenSSLSocketImpl.verifyCertificateChain(OpenSSLSocketImpl.java:550)</span><br><span class="line">    at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)</span><br><span class="line">    at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:318)</span><br><span class="line"> ... 10 more</span><br><span class="line">Caused by: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.</span><br><span class="line"> ... 16 more</span><br></pre></td></tr></table></figure><p>Android 手机有一套共享证书的机制，如果目标 URL 服务器下发的证书不在已信任的证书列表里，或者该证书是自签名的，不是由权威机构颁发，那么会出异常。对于我们这种非浏览器 app 来说，如果提示用户去下载安装证书，可能会显得比较诡异。幸好还可以通过自定义的验证机制让证书通过验证。验证的思路有两种：</p><h5 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h5><p>不论是权威机构颁发的证书还是自签名的，打包一份到 app 内部，比如存放在 asset 里。通过这份内置的证书初始化一个KeyStore，然后用这个KeyStore去引导生成的TrustManager来提供验证，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</span><br><span class="line">  <span class="comment">// uwca.crt 打包在 asset 中，该证书可以从https://itconnect.uw.edu/security/securing-computer/install/safari-os-x/下载</span></span><br><span class="line">  InputStream caInput = <span class="keyword">new</span> BufferedInputStream(getAssets().open(<span class="string">"uwca.crt"</span>));</span><br><span class="line">  Certificate ca;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      ca = cf.generateCertificate(caInput);</span><br><span class="line">      Log.i(<span class="string">"Longer"</span>, <span class="string">"ca="</span> + ((X509Certificate) ca).getSubjectDN());</span><br><span class="line">      Log.i(<span class="string">"Longer"</span>, <span class="string">"key="</span> + ((X509Certificate) ca).getPublicKey();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      caInput.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a KeyStore containing our trusted CAs</span></span><br><span class="line">  String keyStoreType = KeyStore.getDefaultType();</span><br><span class="line">  KeyStore keyStore = KeyStore.getInstance(keyStoreType);</span><br><span class="line">  keyStore.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">  keyStore.setCertificateEntry(<span class="string">"ca"</span>, ca);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a TrustManager that trusts the CAs in our KeyStore</span></span><br><span class="line">  String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();</span><br><span class="line">  TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmfAlgorithm);</span><br><span class="line">  tmf.init(keyStore);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create an SSLContext that uses our TrustManager</span></span><br><span class="line">  SSLContext context = SSLContext.getInstance(<span class="string">"TLSv1"</span>,<span class="string">"AndroidOpenSSL"</span>);</span><br><span class="line">  context.init(<span class="keyword">null</span>, tmf.getTrustManagers(), <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">  URL url = <span class="keyword">new</span> URL(<span class="string">"https://certs.cac.washington.edu/CAtest/"</span>);</span><br><span class="line">  HttpsURLConnection urlConnection =</span><br><span class="line">          (HttpsURLConnection)url.openConnection();</span><br><span class="line">  urlConnection.setSSLSocketFactory(context.getSocketFactory());</span><br><span class="line">  InputStream in = urlConnection.getInputStream();</span><br><span class="line">  copyInputStreamToOutputStream(in, System.out);</span><br><span class="line">&#125; <span class="keyword">catch</span> (CertificateException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (KeyStoreException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (KeyManagementException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchProviderException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h5><p>同方案1，打包一份到证书到 app 内部，但不通过<code>KeyStore</code>去引导生成的<code>TrustManager</code>，而是干脆直接自定义一个<code>TrustManager</code>，自己实现校验逻辑；校验逻辑主要包括：</p><ul><li>服务器证书是否过期</li><li>证书签名是否合法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchProviderException;</span><br><span class="line"><span class="keyword">import</span> java.security.SignatureException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.X509TrustManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by chenfeiyue on 2018/6/1.</span></span><br><span class="line"><span class="comment"> * Description ：自定义TrustManager 校验服务端证书，有效期等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SafeTrustManager</span> <span class="keyword">implements</span> <span class="title">X509TrustManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SafeTrustManager</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 此处存放服务器证书密钥 */</span></span><br><span class="line"><span class="comment">//    private static final String PUB_KEY =</span></span><br><span class="line"><span class="comment">//            "30820122300d06092a864886f70d01010105000382010f003082010a0282010100add086cfc3df3bcf54bffb4e044a911cc0eadbab61ead529a96525833a1a00f75df3d746e11666dbdf4ed8594c4f9194456a49a32a3dce999d9679d2cbc59cf9082935517e35a0706f1041ad053b727c9c92a47507d0313cf5b3788c609733255a89d40c6a8b8d1a90f0761e7dacf117e43fe1b5ae093e160f902a42433ebd57f91cf27b88cd46dcebb85aa0b33c6a48771ca445ace6f6668626d60156eecd1fc2feb282809f8f835b5f5c457890694f495fbf1620070b4a18094c44680beafac05c59ba062b2e889cc8e6a5feca13c3e473700858aceeac0e25f2ba0bfdf44b1040a9ecb15a3f7ea91a366baeeed02f0af78f982d5d0db854bf9476db5f15c10203010001";</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (X509Certificate cert : chain) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Make sure that it hasn't expired.</span></span><br><span class="line">            cert.checkValidity();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Verify the certificate's public key chain.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                X509Certificate x509Certificate = TLSSocketFactory.getX509Certificate(mContext);</span><br><span class="line">                cert.verify(x509Certificate.getPublicKey());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchProviderException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样上述代码只能访问 certs.cac.washington.edu 相关域名地址，如果访问 <a href="https://www.taobao.com/" target="_blank" rel="noopener">https://www.taobao.com/</a> 或者 <a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a> ，则会在cert.verify(((X509Certificate) ca).getPublicKey());处抛异常，导致连接失败。</p><ul><li>自定义HostnameVerifier，简单的话就是根据域名进行字符串匹配校验；业务复杂的话，还可以结合配置中心、白名单、黑名单、正则匹配等多级别动态校验；总体来说逻辑还是比较简单的，反正只要正确地实现那个方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HostnameVerifier hnv = <span class="keyword">new</span> HostnameVerifier() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String hostname, SSLSession session)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//示例</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"yourhostname"</span>.equals(hostname))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      HostnameVerifier hv =</span><br><span class="line">            HttpsURLConnection.getDefaultHostnameVerifier();</span><br><span class="line">      <span class="keyword">return</span> hv.verify(hostname, session);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://pingguohe.net/2016/02/26/Android-App-secure-ssl.html" target="_blank" rel="noopener">苹果核 - Android App 安全的HTTPS 通信</a><br><a href="https://developer.android.com/training/articles/security-ssl" target="_blank" rel="noopener">通过 HTTPS 和 SSL 确保安全</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;漏洞描述&quot;&gt;&lt;a href=&quot;#漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;漏洞描述&quot;&gt;&lt;/a&gt;漏洞描述&lt;/h5&gt;&lt;p&gt;对于数字证书相关概念、Android 里 https 通信代码就不再复述了，直接讲问题。缺少相应的安全校验很容易导致中间人攻击，而漏洞的形式主要有以下3种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义&lt;code&gt;X509TrustManager&lt;/code&gt;。&lt;br&gt;在使用HttpsURLConnection发起 HTTPS 请求的时候，提供了一个自定义的X509TrustManager，&lt;br&gt;未实现安全校验逻辑，下面片段就是常见的容易犯错的代码片段。如果不提供自定义的X509TrustManager，&lt;br&gt;代码运行起来可能会报异常（原因下文解释），初学者就很容易在不明真相的情况下提供了一个自定义的X509TrustManager，&lt;br&gt;却忘记正确地实现相应的方法。本文重点介绍这种场景的处理方式。
    
    </summary>
    
      <category term="HTTPS" scheme="http://android9527.com/categories/HTTPS/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="HTTPS" scheme="http://android9527.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>SSL单向认证和双向认证说明</title>
    <link href="http://android9527.com/2018/06/01/2018-06-01-SSL%E5%8D%95%E5%90%91%E8%AE%A4%E8%AF%81%E5%92%8C%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81%E8%AF%B4%E6%98%8E/"/>
    <id>http://android9527.com/2018/06/01/2018-06-01-SSL单向认证和双向认证说明/</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2018-06-01T08:10:49.589Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SSL单向认证具体过程"><a href="#SSL单向认证具体过程" class="headerlink" title="SSL单向认证具体过程"></a>SSL单向认证具体过程</h4><ul><li>客户端的浏览器向服务器传送客户端SSL协议的版本号，加密算法的种类，产生的随机数，以及其他服务器和客户端之间通讯所需要的各种信息。</li><li>服务器向客户端传送SSL协议的版本号，加密算法的种类，随机数以及其他相关信息，同时服务器还将向客户端传 送自己的证书。</li><li>客户利用服务器传过来的信息验证服务器的合法性，服务器的合法性包括：证书是否过期，发行服务器证书的CA是否可靠，发行者证书的公钥能否正确解开服务器证书的”发行者的数字签名，服务器证书的域名是否和服务器的<a id="more"></a></li><li>实际域名相匹配。如果合法性验证没有通过，通讯将断开;如果合法性验证通过，将继续进行第四步。</li><li>用户端随机产生一个用于后面通讯的”对称密码”，然后用服务器的公钥(服务器的公钥从第二步中的服务器的证书中获得)对其加密，然后将加密后的”预主密码”传给服务器。</li><li>如果服务器要求客户的身份认证(在握手过程中为可选)，用户可以建立一个随机数然后对其进行数据签名，将这个含有签名的随机数和客户自己的证书以及加密过的”预主密码”一起传给服务器。</li></ul><h4 id="SSL双向认证具体过程"><a href="#SSL双向认证具体过程" class="headerlink" title="SSL双向认证具体过程"></a>SSL双向认证具体过程</h4><ul><li>浏览器发送一个连接请求给安全服务器。</li><li>服务器将自己的证书，以及同证书相关的信息发送给客户浏览器。</li><li>客户浏览器检查服务器送过来的证书是否是由自己信赖的CA中心所签发的。如果是，就继续执行协议; 如果不是，客户浏览器就给客户一个警告消息：警告客户这个证书不是可以信赖的，询问客户是否需要继续。</li><li>接着客户浏览器比较证书里的消息，例如域名和公钥，与服务器刚刚发送的相关消息是否一致，如果是一致的，</li><li>客户浏览器认可这个服务器的合法身份。</li><li>服务器要求客户发送客户自己的证书。收到后，服务器验证客户的证书，如果没有通过验证，拒绝连接;如果通过验证，服务器获得用户的公钥。</li><li>客户浏览器告诉服务器自己所能够支持的通讯对称密码方案。</li><li>服务器从客户发送过来的密码方案中，选择一种加密程度最高的密码方案，用客户的公钥加过密后通知浏览器。</li><li>浏览器针对这个密码方案，选择一个通话密钥，接着用服务器的公钥加过密后发送给服务器。</li><li>服务器接收到浏览器送过来的消息，用自己的私钥解密，获得通话密钥。</li><li>服务器、浏览器接下来的通讯都是用对称密码方案，对称密钥是加过密的。</li></ul><p>双向认证则是需要服务端与客户端提供身份认证，只能是服务端允许的客户能去访问，安全性相对较高一些</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;SSL单向认证具体过程&quot;&gt;&lt;a href=&quot;#SSL单向认证具体过程&quot; class=&quot;headerlink&quot; title=&quot;SSL单向认证具体过程&quot;&gt;&lt;/a&gt;SSL单向认证具体过程&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;客户端的浏览器向服务器传送客户端SSL协议的版本号，加密算法的种类，产生的随机数，以及其他服务器和客户端之间通讯所需要的各种信息。&lt;/li&gt;
&lt;li&gt;服务器向客户端传送SSL协议的版本号，加密算法的种类，随机数以及其他相关信息，同时服务器还将向客户端传 送自己的证书。&lt;/li&gt;
&lt;li&gt;客户利用服务器传过来的信息验证服务器的合法性，服务器的合法性包括：证书是否过期，发行服务器证书的CA是否可靠，发行者证书的公钥能否正确解开服务器证书的”发行者的数字签名，服务器证书的域名是否和服务器的
    
    </summary>
    
      <category term="HTTPS" scheme="http://android9527.com/categories/HTTPS/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="HTTPS" scheme="http://android9527.com/tags/HTTPS/"/>
    
      <category term="SSL" scheme="http://android9527.com/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler抓取HTTPS原理</title>
    <link href="http://android9527.com/2018/05/21/2018-05-21-%EF%BB%BFFiddler%E6%8A%93%E5%8F%96HTTPS%E5%8E%9F%E7%90%86/"/>
    <id>http://android9527.com/2018/05/21/2018-05-21-﻿Fiddler抓取HTTPS原理/</id>
    <published>2018-05-20T16:00:00.000Z</published>
    <updated>2018-06-01T08:23:18.483Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Fiddler抓取HTTPS原理"><a href="#Fiddler抓取HTTPS原理" class="headerlink" title="Fiddler抓取HTTPS原理"></a>Fiddler抓取HTTPS原理</h4><ul><li>首先fiddler截获客户端浏览器发送给服务器的https请求， 此时还未建立握手。</li><li>fiddler向服务器发送请求进行握手， 获取到服务器的CA证书， 用根证书公钥进行解密， 验证服务器数据签名， 获取到服务器CA证书公钥。</li><li>fiddler伪造自己的CA证书， 冒充服务器证书传递给客户端浏览器， 客户端浏览器做跟fiddler一样的事。</li><li>客户端浏览器生成https通信用的对称密钥， 用fiddler伪造的证书公钥加密后传递给服务器， 被fiddler截获。<a id="more"></a></li><li>fiddler将截获的密文用自己伪造证书的私钥解开， 获得https通信用的对称密钥。</li><li>fiddler将对称密钥用服务器证书公钥加密传递给服务器， 服务器用私钥解开后建立信任， 握手完成， 用对称密钥加密消息， 开始通信。</li><li>fiddler接收到服务器发送的密文， 用对称密钥解开， 获得服务器发送的明文。再次加密， 发送给客户端浏览器。</li><li>客户端向服务器发送消息， 用对称密钥加密， 被fidller截获后， 解密获得明文。由于fiddler一直拥有通信用对称密钥， 所以在整个https通信过程中信息对其透明。</li></ul><h4 id="为什么使用了HTTPS还是可以被抓包"><a href="#为什么使用了HTTPS还是可以被抓包" class="headerlink" title="﻿为什么使用了HTTPS还是可以被抓包"></a>﻿为什么使用了HTTPS还是可以被抓包</h4><ul><li>https把流量加密了，正常抓包，你看到的内容是一堆乱码。</li><li>https的加密没有安全问题，但它只是用来防止通信过程中被第三方获取明文。如果黑客能直接控制通信的双方（你的电脑，或服务器)，那么黑客肯定能看到https明文的。</li><li>所以，你用charles之所以能看到https明文，是因为你允许了charles在你的电脑上做手脚，关键就是你同意charles在你电脑上安装证书。</li><li>具体一点，charles通过使用了https代理功能，来完成查看https明文的目的，也就是SSL中间人攻击。简单来说，你并不是直接与https的另一端通信，而是与charles通信，charles再与另一端通信，这种结构下，charles才能看到通信明文。这个问题的原理比较复杂，涉及到整套RSA系统，想了解原理的话，建议去看【信息安全】相关书籍，但这类书籍的门槛非常高。另外Fiddle也有这个功能，而且原理也一样。</li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.zhihu.com/question/24484809/answer/70126366" target="_blank" rel="noopener">Fiddler抓取HTTPS原理</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Fiddler抓取HTTPS原理&quot;&gt;&lt;a href=&quot;#Fiddler抓取HTTPS原理&quot; class=&quot;headerlink&quot; title=&quot;Fiddler抓取HTTPS原理&quot;&gt;&lt;/a&gt;Fiddler抓取HTTPS原理&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;首先fiddler截获客户端浏览器发送给服务器的https请求， 此时还未建立握手。&lt;/li&gt;
&lt;li&gt;fiddler向服务器发送请求进行握手， 获取到服务器的CA证书， 用根证书公钥进行解密， 验证服务器数据签名， 获取到服务器CA证书公钥。&lt;/li&gt;
&lt;li&gt;fiddler伪造自己的CA证书， 冒充服务器证书传递给客户端浏览器， 客户端浏览器做跟fiddler一样的事。&lt;/li&gt;
&lt;li&gt;客户端浏览器生成https通信用的对称密钥， 用fiddler伪造的证书公钥加密后传递给服务器， 被fiddler截获。
    
    </summary>
    
      <category term="HTTPS" scheme="http://android9527.com/categories/HTTPS/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="HTTPS" scheme="http://android9527.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin语法小结(3)-面向对象</title>
    <link href="http://android9527.com/2018/04/10/2018-04-10-Kotlin%E8%AF%AD%E6%B3%95%E5%B0%8F%E7%BB%93(3)-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://android9527.com/2018/04/10/2018-04-10-Kotlin语法小结(3)-面向对象/</id>
    <published>2018-04-09T16:00:00.000Z</published>
    <updated>2018-12-05T09:12:30.117Z</updated>
    
    <content type="html"><![CDATA[<h4 id="三、-面向对象"><a href="#三、-面向对象" class="headerlink" title="三、 面向对象"></a>三、 面向对象</h4><h5 id="类和继承"><a href="#类和继承" class="headerlink" title="类和继承"></a>类和继承</h5><p>Kotlin 中使⽤关键字 <code>class</code> 声明类<br>类声明由类名、 类头 （指定其类型参数、 主构造函数等） 和由⼤括号包围的类体构成。 类头和类体都是可选的； 如果⼀个类没有类体， 可以省略花括号。</p><ul><li>构造函数</li></ul><p>在 Kotlin 中的⼀个类可以有⼀个主构造函数和⼀个或多个次构造函数。 主构造函数是类头的⼀部分： 它跟在类名 （和可选的类型参数） 后。<br><a id="more"></a><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规用法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">constructor</span></span>(firstName: String) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果主构造函数没有任何注解或者可⻅性修饰符， 可以省略这个 constructor 关键字。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当主构造函数有注解或者可见性修饰符，需加 constructor 关键字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People2</span> <span class="keyword">public</span> <span class="meta">@Inject</span> <span class="keyword">constructor</span></span>(name: String) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若主构造函数中，不进行初始化, 可放在init&#123;&#125;中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People3</span></span>(name: String) &#123;</span><br><span class="line">    <span class="keyword">val</span> name: String</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        println(<span class="string">"initialize"</span>)</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果类有一个主构造函数（无论有无参数），每个次构造函数需要直接或间接委托给主构造函数，用this关键字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        println(<span class="string">"constructor"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(name: String) : <span class="keyword">this</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(name: String, age: <span class="built_in">Int</span>) : <span class="keyword">this</span>(name) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>局部函数和顶层函数<br>Kotlin 支持局部函数，即一个函数在另一个函数内部<br>Kotlin中通过使用顶层函数和顶层属性减少Java中常见的静态工具类，使我们的代码更加整洁</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(i: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(m :<span class="type">Int</span>, n : <span class="type">Int</span>)</span></span> : <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m + n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> result = add(i, <span class="number">5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部函数可以访问外部函数的局部变量，所以在上例中，n 可以是局部变量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(i: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> n = <span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(m :<span class="type">Int</span>)</span></span> : <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m + n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> result = add(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>抽象类<br>类和其中的某些成员可以声明为 abstract。 抽象成员在本类中可以不⽤实现。 需要注意的是， 我们并不需要⽤ open 标注⼀个抽象类或者抽象函数</li></ul><h5 id="open"><a href="#open" class="headerlink" title="open"></a>open</h5><p>open 关键字与java 中的 final相反:它允许别的类继承这个类。默认情形下，kotlin 中所有的类和函数都是 final</p><ul><li>覆盖⽅法</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">nv</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span></span>() : Base() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Derived.v() 函数上必须加上 <code>override</code>标注。 如果没写， 编译器将会报错。 如果函数没有标注 open 如 Base.nv() ， 则⼦类中不允许定义相同签名的函数，不论加不加 override。 在⼀个 final 类中 （没有⽤ open 标注的类） ， 开放成员是禁⽌的</p><ul><li>覆盖属性<br>属性覆盖与⽅法覆盖类似； 在超类中声明然后在派⽣类中重新声明的属性必须以 override 开头， 并且它们必须具有兼容的类型。 每个声明的属性可以由<br>具有初始化器的属性或者具有 getter ⽅法的属性覆盖。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">val</span> x: <span class="built_in">Int</span> <span class="keyword">get</span>() = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar1</span> : <span class="type">Foo</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> x: <span class="built_in">Int</span> = <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><p>Kotlin 的接口与 Java 8 类似，既包含抽象方法的声明，也包含实现。与抽象类不同的是，接口无法保存状态。它可以有属性但必须声明为抽象或提供访问器实现。<br>使用关键字 interface 来定义接口</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="comment">// 可选的方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现接口</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">MyInterface &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TODO函数<br>调用含有<code>TODO</code>关键字的方法将直接抛出异常</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">        TODO(<span class="string">"not implemented!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口中的属性</li></ul><p>你可以在接口中定义属性。在接口中声明的属性要么是抽象的，要么提供访问器的实现。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> prop: <span class="built_in">Int</span> <span class="comment">// 抽象的,需要子类重写</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> propertyWithImplementation: String</span><br><span class="line">        <span class="keyword">get</span>() = <span class="string">"foo"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        print(prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">MyInterface &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> prop: <span class="built_in">Int</span> = <span class="number">29</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>解决覆盖冲突</li></ul><p>实现多个接口时，可能会遇到同一方法继承多个实现的问题。例如</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; print(<span class="string">"A"</span>) &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; print(<span class="string">"B"</span>) &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; print(<span class="string">"bar"</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> : <span class="type">A &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; print(<span class="string">"bar"</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> : <span class="type">A</span>, <span class="type">B &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;A&gt;.foo()</span><br><span class="line">        <span class="keyword">super</span>&lt;B&gt;.foo()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;B&gt;.bar()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，接口 A 和 B 都定义了方法 foo() 和 bar()。 两者都实现了 foo(), 但是只有 B 实现了 bar()，(bar() 在 A 中没有标记为抽象， 因为没有方法体时默认为抽象）。因为 C 是一个实现了 A 的具体类，所以必须要重写 bar() 并实现这个抽象方法。<br>然而，如果我们从 A 和 B 派生 D，我们需要实现我们从多个接口继承的所有方法，并指明 D 应该如何实现它们。这一规则既适用于继承单个实现（bar()）的方法也适用于继承多个实现（foo()）的方法。</p><h5 id="data-class，object-class，伴生对象和内部类"><a href="#data-class，object-class，伴生对象和内部类" class="headerlink" title="data class，object class，伴生对象和内部类"></a>data class，object class，伴生对象和内部类</h5><ul><li>data class</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 减少样板代码</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br></pre></td></tr></table></figure><ul><li>object class</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象声明是定义单例的一种形式</span></span><br><span class="line"><span class="comment"> * object class 等同于java 饿汉式单例</span></span><br><span class="line"><span class="comment"> * public static final ObjectTest INSTANCE = new ObjectTest();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">object</span> ObjectTest : ArrayList&lt;String&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 Java 或 C# 不同， 在 Kotlin 中类没有静态⽅法。 在⼤多数情况下，它建议简单地使⽤包级函数。</p><ul><li><p>伴生对象和静态成员</p></li><li><p>内部类 静态非静态，匿名内部类</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内部类</span></span><br><span class="line"><span class="comment"> * 1.kotlin 默认内部类为public static final，不能持有外部类的状态（属性、方法等）</span></span><br><span class="line"><span class="comment"> * 2.给内部类加上inner关键词之后，就会变成非静态内部类，可以访问外部类的属性和方法</span></span><br><span class="line"><span class="comment"> * 3.非静态内部类想访问外部类的属性，可以使用 this@外部类名.外部类属性名 的形式访问</span></span><br><span class="line"><span class="comment"> * 4.非静态内部类可以访问到外部静态内部类的方法和属性，静态内部类访问不到外部所有的属性和方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意调用方式及内存泄漏相关</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 对象表达式用来替代Java的匿名内部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">     <span class="keyword">val</span> helloWorld = <span class="string">"Hello World"</span></span><br><span class="line">     <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">         <span class="function"><span class="keyword">fun</span> <span class="title">getOuter</span><span class="params">()</span></span>: Outer &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">this</span><span class="symbol">@Outer</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">     <span class="keyword">val</span> outer = Outer()</span><br><span class="line">     <span class="keyword">val</span> innerClass = outer.Inner()</span><br><span class="line">     <span class="keyword">val</span> view = View()</span><br><span class="line">     <span class="comment">// kotlin匿名内部类，可以继承一个类，实现多个接口</span></span><br><span class="line">     view.setOnClickListener(<span class="keyword">object</span> : Any(), View.OnClickListener &#123;</span><br><span class="line">         <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(view: <span class="type">View</span>)</span></span> &#123;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><ul><li>函数重载overload和默认参数</li></ul><p>Kotlin允许包级函数一级函数参数存在默认值<br>函数参数可以有默认值，当省略相应的参数时使用默认值。与其他语言相比，这可以减少重载数量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">read</span><span class="params">(b: <span class="type">Array</span>&lt;<span class="type">Byte</span>&gt;, off: <span class="type">Int</span> = <span class="number">0</span>, len: <span class="type">Int</span> = b.size)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认值通过类型后面的 = 及给出的值来定义。<br>覆盖方法总是使用与基类型方法相同的默认参数值。 当覆盖一个带有默认参数值的方法时，必须从签名中省略默认参数值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(i: <span class="type">Int</span> = <span class="number">10</span>)</span></span> &#123;  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> : <span class="type">A</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(i: <span class="type">Int</span>)</span></span> &#123;  &#125;  <span class="comment">// 不能有默认值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具名参数<br>调用函数时, 可以通过参数名来指定参数. 当函数参数很多, 或者存在默认参数时, 指定参数名是一种非常便利的功能</li></ul><p>可以在调用函数时使用命名的函数参数。当一个函数有大量的参数或默认参数时这会非常方便。<br>给定以下函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">reformat</span><span class="params">(str: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             normalizeCase: <span class="type">Boolean</span> = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             upperCaseFirstLetter: <span class="type">Boolean</span> = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             divideByCamelHumps: <span class="type">Boolean</span> = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             wordSeparator: <span class="type">Char</span> = <span class="string">' '</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以使用默认参数来调用它</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 我们可以使用默认参数来调用它</span></span><br><span class="line">    reformat(str)</span><br><span class="line">    <span class="comment">// 然而，当使用非默认参数调用它时，该调用看起来就像</span></span><br><span class="line">    reformat(str, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">'_'</span>)</span><br><span class="line">    <span class="comment">// 使用命名参数我们可以使代码更具有可读性</span></span><br><span class="line">    reformat(str,</span><br><span class="line">            normalizeCase = <span class="literal">true</span>,</span><br><span class="line">            upperCaseFirstLetter = <span class="literal">true</span>,</span><br><span class="line">            divideByCamelHumps = <span class="literal">false</span>,</span><br><span class="line">            wordSeparator = <span class="string">'_'</span>)</span><br><span class="line">    <span class="comment">// 并且如果我们不需要所有的参数</span></span><br><span class="line">    reformat(str, wordSeparator = <span class="string">'_'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，在调用 Java 函数时不能使用命名参数语法，因为 Java 字节码并不总是保留函数参数的名称。</p><ul><li><p>中缀表示法 （函数还可以用中缀表示法调，当满足以下条件时）</p></li><li><p>他们是成员函数或扩展函数</p></li><li>他们只有一个参数</li><li>他们用 infix 关键字标注</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给 Int 定义扩展</span></span><br><span class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">shl</span><span class="params">(x: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用中缀表示法调用扩展函数</span></span><br><span class="line"><span class="number">1</span> shl <span class="number">2</span></span><br><span class="line"><span class="comment">// 等同于这样</span></span><br><span class="line"><span class="number">1</span>.shl(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>Kotlin 支持函数扩展和属性扩展<br>扩展实际上并没有修改它所扩展的类。定义一个扩展，你并没有在类中插入一个新的成员，只是让这个类的实例对象能够通过.调用新的函数。<br>注意，由于扩展并不会真正给类添加了成员属性，因此也没有办法让扩展属性拥有一个备份字段(backing field).这也是为什么初始化函数不允许有扩展属性。扩展属性只能够通过明确提供 getter 和 setter方法来进行定义.<br>如果有同名同参数的成员函数和扩展函数，调用的时候必然会使用成员函数</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> bd = <span class="string">"3"</span>.bd</span><br><span class="line">    <span class="keyword">val</span> d = <span class="number">4.00</span>.bd</span><br><span class="line">    println(bd.add(d))</span><br><span class="line">    println(bd.addAndMul(d))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对Double属性扩展</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> <span class="built_in">Double</span>.bd : BigDecimal</span><br><span class="line">    <span class="keyword">get</span>() = BigDecimal(<span class="keyword">this</span>.toString())</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> String.bd : BigDecimal</span><br><span class="line">    <span class="keyword">get</span>() = BigDecimal(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对BigDecimal函数扩展,增加相加然后相乘的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> BigDecimal.<span class="title">addAndMul</span><span class="params">(parm: <span class="type">BigDecimal</span>)</span></span> : BigDecimal &#123;</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="keyword">this</span> + parm</span><br><span class="line">    temp *= parm</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="属性代理"><a href="#属性代理" class="headerlink" title="属性代理"></a>属性代理</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by chenfeiyue on 18/2/12.</span></span><br><span class="line"><span class="comment"> * Description: 属性代理</span></span><br><span class="line"><span class="comment"> * 语法结构是： val/var &lt;property name&gt;: &lt;Type&gt; by &lt;expression&gt; 在 by 后面的属性就是代理，</span></span><br><span class="line"><span class="comment"> * 这样这个属性的 get() 和 set() 方法就代理给了它。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 系统提供的代理</span></span><br><span class="line">    <span class="keyword">val</span> hello <span class="keyword">by</span> lazy(LazyThreadSafetyMode.SYNCHRONIZED) &#123;</span><br><span class="line">        println(<span class="string">"hello by lazy"</span>)</span><br><span class="line">        <span class="string">"Hello World"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> x: String <span class="keyword">by</span> Delegate()</span><br><span class="line">    <span class="keyword">var</span> y <span class="keyword">by</span> Delegate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> test = Test()</span><br><span class="line">    println(test.x)</span><br><span class="line">    test.y = <span class="string">"y"</span></span><br><span class="line">    println(test.y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Delegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value: String? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</span><br><span class="line">        <span class="comment">// 读取缓存、数据库等</span></span><br><span class="line">        <span class="keyword">return</span> value ?: <span class="string">"default value"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(any: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;, value: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value</span><br><span class="line">        <span class="comment">// 写入缓存等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Kotlin的inline内联函数"><a href="#Kotlin的inline内联函数" class="headerlink" title="Kotlin的inline内联函数"></a>Kotlin的inline内联函数</h5><ul><li><p>方法调用流程<br>调用一个方法是一个压栈和出栈的过程，调用方法时将栈针压入方法栈，然后执行方法体，方法结束时将栈针出栈，这个压栈和出栈的过程会耗费资源，这个过程中传递形参也会耗费资源。</p></li><li><p>为什么需要inline<br>有些简单的方法会被频繁调用，会增加方法调用的开销，内联函数在编译器直接将方法体插入在函数调用的地方。</p></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.kotlincn.net/" target="_blank" rel="noopener">Kotlin中文站</a></p><p><a href="http://blog.csdn.net/jhj_24/article/details/53896224" target="_blank" rel="noopener">Kotlin控制流</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;三、-面向对象&quot;&gt;&lt;a href=&quot;#三、-面向对象&quot; class=&quot;headerlink&quot; title=&quot;三、 面向对象&quot;&gt;&lt;/a&gt;三、 面向对象&lt;/h4&gt;&lt;h5 id=&quot;类和继承&quot;&gt;&lt;a href=&quot;#类和继承&quot; class=&quot;headerlink&quot; title=&quot;类和继承&quot;&gt;&lt;/a&gt;类和继承&lt;/h5&gt;&lt;p&gt;Kotlin 中使⽤关键字 &lt;code&gt;class&lt;/code&gt; 声明类&lt;br&gt;类声明由类名、 类头 （指定其类型参数、 主构造函数等） 和由⼤括号包围的类体构成。 类头和类体都是可选的； 如果⼀个类没有类体， 可以省略花括号。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Kotlin 中的⼀个类可以有⼀个主构造函数和⼀个或多个次构造函数。 主构造函数是类头的⼀部分： 它跟在类名 （和可选的类型参数） 后。&lt;br&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://android9527.com/categories/Kotlin/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://android9527.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin语法小结(1)-基础语法</title>
    <link href="http://android9527.com/2018/04/10/2018-04-10-Kotlin%E8%AF%AD%E6%B3%95%E5%B0%8F%E7%BB%93(1)-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://android9527.com/2018/04/10/2018-04-10-Kotlin语法小结(1)-基础语法/</id>
    <published>2018-04-09T16:00:00.000Z</published>
    <updated>2018-12-05T09:11:42.476Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Kotlin语法特点"><a href="#Kotlin语法特点" class="headerlink" title="Kotlin语法特点"></a>Kotlin语法特点</h4><ul><li>兼容性：Kotlin 与 JDK 6 完全兼容，保障了 Kotlin 应用程序可以在较旧的 Android 设备上运行而无任何问题。Kotlin 工具在 Android Studio 中会完全支持，并且兼容 Android 构建系统。</li><li>性能：由于非常相似的字节码结构，Kotlin 应用程序的运行速度与 Java 类似。 随着 Kotlin 对内联函数的支持，使用 lambda 表达式的代码通常比用 Java 写的代码运行得更快。<a id="more"></a></li><li>互操作性：Kotlin 可与 Java 进行 100％ 的互操作，允许在 Kotlin 应用程序中使用所有现有的 Android 库 。这包括注解处理，所以数据绑定和 Dagger 也是一样。</li><li>占用：Kotlin 具有非常紧凑的运行时库，可以通过使用 ProGuard 进一步减少。 在实际应用程序中，Kotlin 运行时只增加几百个方法以及 .apk 文件不到 100K 大小。</li><li>编译时长：Kotlin 支持高效的增量编译，所以对于清理构建会有额外的开销，增量构建通常与 Java 一样快或者更快。</li></ul><h4 id="为什么选择-Kotlin？"><a href="#为什么选择-Kotlin？" class="headerlink" title="为什么选择 Kotlin？"></a>为什么选择 Kotlin？</h4><ul><li>简洁</li></ul><p>使用一行代码创建一个包含 getters、 setters、 equals()、 hashCode()、 toString() 以及 copy() 的 POJO：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> email: String, <span class="keyword">val</span> company: String)</span><br></pre></td></tr></table></figure><p>或者使用 lambda 表达式来过滤列表：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> positiveNumbers = list.filter &#123; it &gt; <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure><p>想要单例？创建一个 object 就可以了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> ThisIsASingleton &#123;</span><br><span class="line">    <span class="keyword">val</span> companyName: String = <span class="string">"JetBrains"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>安全</li></ul><p>彻底告别那些烦人的 NPE(NullPointerException)。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> output: String</span><br><span class="line">output = <span class="literal">null</span>   <span class="comment">// 编译错误</span></span><br></pre></td></tr></table></figure><p>Kotlin 可以保护你避免对可空类型的误操作。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name: String? = <span class="literal">null</span>    <span class="comment">// 可空类型</span></span><br><span class="line">println(name.length())      <span class="comment">// 编译错误</span></span><br></pre></td></tr></table></figure><p>智能类型转换，编译器会为你做自动类型转换。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">is</span> String) &#123;</span><br><span class="line">        <span class="comment">// `obj` 在该条件分⽀内⾃动转换成 `String`</span></span><br><span class="line">        <span class="keyword">return</span> obj.length</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在离开类型检测分⽀后，`obj` 仍然是 `Any` 类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>互操作性</li></ul><p>使用 JVM 上的任何现有库，因为有 100％ 的兼容性，包括 SAM(Single Abstract Method) 支持。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.reactivex.Flowable</span><br><span class="line"><span class="keyword">import</span> io.reactivex.schedulers.Schedulers</span><br><span class="line"></span><br><span class="line">Flowable</span><br><span class="line">    .fromCallable &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>) <span class="comment">//  模仿高开销的计算</span></span><br><span class="line">        <span class="string">"Done"</span></span><br><span class="line">    &#125;</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(Schedulers.single())</span><br><span class="line">    .subscribe(::println, Throwable::printStackTrace)</span><br></pre></td></tr></table></figure><p>无论是 JVM 还是 JavaScript 目标平台，都可用 Kotlin 写代码然后部署到你想要的地方</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.browser.window</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">onLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    window.document.body!!.innerHTML += <span class="string">"&lt;br/&gt;Hello, Kotlin!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>工具友好</li></ul><p>一门语言需要工具化，而在 JetBrains，这正是我们做得最好的地方！<br><img src="/images/kotlin/kotlin1.png" alt="TCP"></p><p><img src="/images/kotlin/kotlin2.png" alt="TCP"></p><p>Kotlin相关知识</p><h4 id="一、基础语法"><a href="#一、基础语法" class="headerlink" title="一、基础语法"></a>一、基础语法</h4><h5 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h5><ul><li>基本数据类型<br>在 Kotlin 中，所有东西都是对象，在这个意义上讲我们可以在任何变量上调⽤成员函数和属性。<br>Kotlin 处理数字在某种程度上接近 Java， 但是并不完全相同。 例如， 对于数字没有隐式拓宽转换 （如 Java 中 int 可以隐式转换为 long)， 另外有些情况的字⾯值略有不同。<br>Kotlin 提供了如下的内置类型来表⽰数字 （与 Java 很相近）</li></ul><style>table th:first-of-type {    width: 100px;}th:nth-of-type(2) {    width: 200px;}</style><table><thead><tr><th style="text-align:left">Type</th><th style="text-align:left">Bit width</th></tr></thead><tbody><tr><td style="text-align:left">Double</td><td style="text-align:left">64</td></tr><tr><td style="text-align:left">Float</td><td style="text-align:left">32</td></tr><tr><td style="text-align:left">Long</td><td style="text-align:left">64</td></tr><tr><td style="text-align:left">Int</td><td style="text-align:left">32</td></tr><tr><td style="text-align:left">Short</td><td style="text-align:left">16</td></tr><tr><td style="text-align:left">Byte</td><td style="text-align:left">8</td></tr></tbody></table><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// kotlin 没有隐式转换</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(l: <span class="type">Long</span>)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> i = <span class="number">10</span></span><br><span class="line">    test(i.toLong())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字符串<br>字符串⽤ String 类型表⽰。 字符串是不可变的。 字符串的元素⸺字符可以使⽤索引运算符访问: s[i] 。 可以⽤ for 循环迭代字符串:</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (c <span class="keyword">in</span> name) &#123;</span><br><span class="line">    println(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Kotlin 有两种类型的字符串字⾯值: 转义字符串, 以及原⽣字符串可以包含换⾏和任意⽂本。转义字符串很像 Java 字符串:</span></span><br><span class="line"><span class="keyword">val</span> s = <span class="string">"Hello, world!\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用原⽣字符串 使⽤三个引号（ """ ） 分界符括起来， 内部没有转义并且可以包含换⾏和任何其他字符:</span></span><br><span class="line"><span class="keyword">val</span> text = <span class="string">""" \n</span></span><br><span class="line"><span class="string">    for (c in "foo")</span></span><br><span class="line"><span class="string">        print(c) """</span></span><br></pre></td></tr></table></figure><p>你可以通过 trimMargin() 函数去除前导空格：</p><ul><li>字符串模板<br>字符串可以包含模板表达式 ， 即⼀些⼩段代码， 会求值并把结果合并到字符串中。 模板表达式以美元符 （ $ ） 开头， 由⼀个简单的名字构成:</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> string = <span class="string">"Hello World"</span></span><br><span class="line">println(<span class="string">"result is <span class="variable">$string</span>"</span>)</span><br><span class="line">println(<span class="string">"result is <span class="subst">$&#123;string.replace(" ", "")&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><h5 id="2、语法定义"><a href="#2、语法定义" class="headerlink" title="2、语法定义"></a>2、语法定义</h5><ul><li>定义包、定义函数、定义常量、变量、变长参数vararg</li></ul><p>（1）定义包：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> my.demo</span><br><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>包名不必和文件夹路径一致：源文件可以放在任意位置。</p><p>（2）定义函数</p><p>定义一个函数接受两个 int 型参数，返回值为 int ：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span> , b: <span class="type">Int</span>)</span></span> : <span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数只有一个表达式函数体以及一个自推导型的返回值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">  println(<span class="string">"sum of 19 and 23 is <span class="subst">$&#123;sum(<span class="number">19</span>, <span class="number">23</span>)&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kotlin没有void关键字，用Unit表示返回一个没有意义的值， Unit 的返回类型可以省略：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">   println(<span class="string">"sum of <span class="variable">$a</span> and <span class="variable">$b</span> is <span class="subst">$&#123;a + b&#125;</span>"</span>)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">   println(<span class="string">"sum of <span class="variable">$a</span> and <span class="variable">$b</span> is <span class="subst">$&#123;a + b&#125;</span>"</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>（3）定义变量、常量</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">1</span>  <span class="comment">// 立即初始化</span></span><br><span class="line">   <span class="keyword">val</span> b = <span class="number">2</span>   <span class="comment">// 推导出Int型</span></span><br><span class="line">   <span class="keyword">val</span> c: <span class="built_in">Int</span>  <span class="comment">// 当没有初始化值时必须声明类型</span></span><br><span class="line">   c = <span class="number">3</span>       <span class="comment">// 赋值</span></span><br><span class="line">   println(<span class="string">"a = <span class="variable">$a</span>, b = <span class="variable">$b</span>, c = <span class="variable">$c</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> x = <span class="number">5</span> <span class="comment">// 推导出Int类型</span></span><br><span class="line">   x += <span class="number">1</span></span><br><span class="line">   println(<span class="string">"x = <span class="variable">$x</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）变长参数 vararg</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * kotlin 变长参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(<span class="keyword">vararg</span> arg: <span class="type">Int</span>, string: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    arg.forEach &#123; n -&gt;</span><br><span class="line">        sum += n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, string = <span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>在java中变长参数必须放在所有参数的后面，kotlin由于具名参数的存在可以放在任何位置</p><ul><li>注释</li></ul><p>注释正如Java 和 JavaScript， Kotlin ⽀持⾏注释及块注释。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是⼀个⾏注释</span></span><br><span class="line"><span class="comment">/* 这是⼀个多⾏的</span></span><br><span class="line"><span class="comment"> 块注释。 */</span></span><br><span class="line"><span class="comment">/** /** */</span> */</span><br></pre></td></tr></table></figure><p>  与 Java 不同的是， Kotlin 的块注释可以嵌套。</p><ul><li>可空类型 String?<br>当某个变量的值可以为 null 的时候， 必须在声明处的类型后添加 ? 来标识该引⽤可为空。<br>如果 str 的内容不是数字返回 null：</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parseInt</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、import引用，区间使用（参见控制流）"><a href="#3、import引用，区间使用（参见控制流）" class="headerlink" title="3、import引用，区间使用（参见控制流）"></a>3、import引用，区间使用（参见控制流）</h5><p>源⽂件通常以包声明开头:package foo.bar</p><ul><li>默认导⼊</li></ul><p>有多个包会默认导⼊到每个 Kotlin ⽂件中：<br>kotlin.<em><br>kotlin.annotation.</em><br>…<br>kotlin.io.<em><br>kotlin.text.</em><br>根据⽬标平台还会导⼊额外的包：<br>JVM:<br>java.lang.<em><br>kotlin.jvm.</em><br>JS:<br>kotlin.js.*</p><ul><li><p>也可以导⼊⼀个作⽤域下的所有内容 （包、 类、 对象等） :<br>import foo.* // “foo”中的⼀切都可访问<br>如果出现名字冲突， 可以使⽤ as 关键字在本地重命名冲突项来消歧义：<br>import foo.Bar // Bar 可访问<br>import bar.Bar as bBar // bBar 代表“bar.Bar”</p></li><li><p>import 并不仅限于导⼊类； 也可⽤它来导⼊其他声明：<br>顶层函数及属性；<br>在对象声明中声明的函数和属性;<br>枚举常量。</p></li><li><p>与 Java 不同， Kotlin 没有单独的 “import static” 语法； 所有这些声明都⽤ import 关键字导⼊。</p></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.kotlincn.net/" target="_blank" rel="noopener">Kotlin中文站</a></p><p><a href="http://blog.csdn.net/jhj_24/article/details/53896224" target="_blank" rel="noopener">Kotlin控制流</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Kotlin语法特点&quot;&gt;&lt;a href=&quot;#Kotlin语法特点&quot; class=&quot;headerlink&quot; title=&quot;Kotlin语法特点&quot;&gt;&lt;/a&gt;Kotlin语法特点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;兼容性：Kotlin 与 JDK 6 完全兼容，保障了 Kotlin 应用程序可以在较旧的 Android 设备上运行而无任何问题。Kotlin 工具在 Android Studio 中会完全支持，并且兼容 Android 构建系统。&lt;/li&gt;
&lt;li&gt;性能：由于非常相似的字节码结构，Kotlin 应用程序的运行速度与 Java 类似。 随着 Kotlin 对内联函数的支持，使用 lambda 表达式的代码通常比用 Java 写的代码运行得更快。
    
    </summary>
    
      <category term="Kotlin" scheme="http://android9527.com/categories/Kotlin/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://android9527.com/tags/Kotlin/"/>
    
  </entry>
  
</feed>
