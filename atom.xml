<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://android9527.com/"/>
  <updated>2018-12-18T07:51:20.719Z</updated>
  <id>http://android9527.com/</id>
  
  <author>
    <name>陈飞跃</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>未来世界的幸存者</title>
    <link href="http://android9527.com/2018/12/06/2018-12-03-%E3%80%8A%E6%9C%AA%E6%9D%A5%E4%B8%96%E7%95%8C%E7%9A%84%E5%B9%B8%E5%AD%98%E8%80%85%E3%80%8B/"/>
    <id>http://android9527.com/2018/12/06/2018-12-03-《未来世界的幸存者》/</id>
    <published>2018-12-05T16:00:00.000Z</published>
    <updated>2018-12-18T07:51:20.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="《未来世界的幸存者》读书笔记"><a href="#《未来世界的幸存者》读书笔记" class="headerlink" title="《未来世界的幸存者》读书笔记"></a>《未来世界的幸存者》读书笔记</h2><h4 id="机器取代人类"><a href="#机器取代人类" class="headerlink" title="机器取代人类"></a>机器取代人类</h4><p>技术信息革命人工智能和无人驾驶大数据技术目标就是不需要人类的参与，掌握核心技术的人的处境会越来越有利，优势成倍放大。</p><h4 id="贫富差距会越来越大"><a href="#贫富差距会越来越大" class="headerlink" title="贫富差距会越来越大"></a>贫富差距会越来越大</h4><p>这种趋势只会增强，不会逆转，寒门再难出贵子。以前可以通过不懈努力完全有可能晋升到更高的社会阶层，改变自己的命运，以后会越来越难，因为跟你竞争的是软件和机器人，永远不会超过它们。<br>如果你是穷人，80%的概率以后你还是穷人；如果你是富人，84%的概率以后还是富人。<br><a id="more"></a></p><h4 id="B计划"><a href="#B计划" class="headerlink" title="B计划"></a>B计划</h4><p>对于人生来说，你现在的职业就是A计划，应该努力追求职业成功。但是，也要做好两手准备，万一A计划失败，还需要一个B计划，对自己的退路有所安排。B计划就是你的消防通道，万一人生发生火灾，你知道该往哪里走，避免乱跑乱撞，被大火困住。本质上，B计划是人生的一种风险控制。你也许见过各种商业计划书，其中必不可少的几个章节是《备用方案》、《应急预案》、《风险控制》……如果你尝试给自己写一份人生计划书，这些章节的内容就是B计划。你可能永远不会用到这些章节，但是它们的存在，会让你的人生少一些风险，生活得更加安心。凡事都要留有Plan B。你要做的就是自主、跨界、终身学习。</p><h4 id="也有提到对与基因编辑技术的看法"><a href="#也有提到对与基因编辑技术的看法" class="headerlink" title="也有提到对与基因编辑技术的看法"></a>也有提到对与基因编辑技术的看法</h4><p>如果被广泛利用，富人则会越来越优秀，贫富分化将越来越严重，而且会世袭，穷人毫无翻身的可能。<br>上层社会的人们利用基因编辑技术，创造自己的生理优势，删除生理劣势。从胚胎开始，他们就拥有更好的基因，智力更发达、容貌更俊美，体格更健康，再加上后天的悉心培养，良好的营养和教育投入，以及家族在事业上的帮助，很容易就能取得人生成功，控制社会资源，普通人将难以与他们竞争。他们会形成自己的圈子和阶层。最终，社会分裂成两种人：一种是普通人（基因没有优化过），另一种是高级人类（基因经过优化）。前者智力平平，长相平庸，体格矮小，无论在形体还是能力上，都比后者逊色。经过几代人的基因编辑的累积，底层的人们将全面落后于上层社会，毫无翻身的希望。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;《未来世界的幸存者》读书笔记&quot;&gt;&lt;a href=&quot;#《未来世界的幸存者》读书笔记&quot; class=&quot;headerlink&quot; title=&quot;《未来世界的幸存者》读书笔记&quot;&gt;&lt;/a&gt;《未来世界的幸存者》读书笔记&lt;/h2&gt;&lt;h4 id=&quot;机器取代人类&quot;&gt;&lt;a href=&quot;#机器取代人类&quot; class=&quot;headerlink&quot; title=&quot;机器取代人类&quot;&gt;&lt;/a&gt;机器取代人类&lt;/h4&gt;&lt;p&gt;技术信息革命人工智能和无人驾驶大数据技术目标就是不需要人类的参与，掌握核心技术的人的处境会越来越有利，优势成倍放大。&lt;/p&gt;
&lt;h4 id=&quot;贫富差距会越来越大&quot;&gt;&lt;a href=&quot;#贫富差距会越来越大&quot; class=&quot;headerlink&quot; title=&quot;贫富差距会越来越大&quot;&gt;&lt;/a&gt;贫富差距会越来越大&lt;/h4&gt;&lt;p&gt;这种趋势只会增强，不会逆转，寒门再难出贵子。以前可以通过不懈努力完全有可能晋升到更高的社会阶层，改变自己的命运，以后会越来越难，因为跟你竞争的是软件和机器人，永远不会超过它们。&lt;br&gt;如果你是穷人，80%的概率以后你还是穷人；如果你是富人，84%的概率以后还是富人。&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://android9527.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="读书笔记" scheme="http://android9527.com/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>单例模式的实现方式</title>
    <link href="http://android9527.com/2018/12/03/2018-12-03-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>http://android9527.com/2018/12/03/2018-12-03-单例模式的实现方式/</id>
    <published>2018-12-02T16:00:00.000Z</published>
    <updated>2018-12-05T02:56:01.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单例模式介绍"><a href="#单例模式介绍" class="headerlink" title="单例模式介绍"></a>单例模式介绍</h2><p>单例模式是应用最广的模式之一，在应用这个模式时，单例对象的类必须保证只有一个实例存在。<br>如在一个应用中，应该只有一个 ImageLoader 实例，这个 ImageLoader 中又包含有线程池、缓存系统、网络请求等，很消耗资源，因此，没有理由让它构造多个实例。</p><h2 id="单例模式的使用场景"><a href="#单例模式的使用场景" class="headerlink" title="单例模式的使用场景"></a>单例模式的使用场景</h2><p>确保某个类有且只有一个对象的场景，避免产生多个对象消耗过多的资源，或者某种类型的对象应该有且只有一个。</p><a id="more"></a><h2 id="单例模式-UML-类图"><a href="#单例模式-UML-类图" class="headerlink" title="单例模式 UML 类图"></a>单例模式 UML 类图</h2><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><ul><li>简单的懒汉模式</li></ul><p>懒汉模式在用户第一次调用 getInstance() 时进行初始化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton mInstance;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数私有化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>优点是单例只有在使用时才会被实例化，在一定程度上节约了资源；<br>缺点是每次调用 getInstance() 都进行同步，造成不必要的同步开销。这种模式一般不建议使用。</p><ul><li>Double Check Lock（DCL）实现单例<br>DCL 方式实现单例模式的优点是既能够在需要时才初始化单例，又能保证线程安全，且单例对象初始化后不进行同步锁。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton mInstance;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数私有化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mInstance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到进行了两次非空判断，第一层判断主要是为了避免不必要的同步，只有实例第一次被访问时，才会有线程进入同步块，这样极大提高了性能。避免了synchronized带来的较大性能损失。</p><p>第一次访问时，如果有多个线程同时进入if块，只有第一个线程会获得锁，其他线程被阻塞，第一个线程可以创建实例，退出 synchronized 。被阻塞的线程会进入同步块，进行第二次check,如果此时实例不为null，则返回。</p><p>仔细一想，这个代码挺完美的，但是不是这个样子的，具体问题出现在哪呢？</p><p>Java程序创建一个实例的过程为： <code>mInstance = new Singleton()</code> 语句，这里看起来是一句代码，但实际上它并不是一个原子操作，这句代码最终会被编译成多条汇编指令，它大致做了3件事情：<br>（1）给 Singleton 的实例分配内存<br>（2）调用 Singleton() 的构造函数，初始化成员字段；<br>（3）将 mInstance 对象指向分配的内存空间（此时 mInstance 就不是 null 了）。</p><p>但是，由于 Java 编译器允许处理器乱序执行，上面的第二和第三的顺序是无法保证的。也就是说，执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，并且在 3 执行完毕、2 未执行之前，被切换到线程 B 上，这时候 mInstance 因为已经在线程 A 内执行过了第三点，mInstance 已经是非空了，所以，线程 B 直接取走 mInstance，再次使用时就会出错，这就是 DCL 失效问题。</p><p>在 JDK 1.5 之后，SUN官方已经注意到这种问题，调整了 JVM，具体化了 volatile 关键字，<br>用该关键字修饰的变量在被变更时会被其他变量可见，最主要的是防止了重排序。因此在 JDK1.5 之后只需要改成 <code>private volatile static Singleton mInstance;</code> 就可以保证 mInstance 对象内存都是从主内存中读取，就可以使用 DCL 的写法来完成单例模式。<br>当然，volatile 或多或少也会影响性能，但考虑到程序的正确性，牺牲着点性能耗时值得的。</p><p>DCL 的优点：资源利用率高，第一次执行 getInstance 时单例对象才会被实例化，效率高。<br>缺点：第一次加载时反应稍慢，也由于 JMM 的原因偶尔会失败。在高并发环境下有一点的缺陷。</p><ul><li>静态内部类单例模式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.mInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton mInstance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当第一次加载 Singleton 类时并不会初始化 mInstance，只有在第一次调用 Singleton 的 getInstance 方法时才会导致 mInstance 被初始化。因此，第一次调用 getInstance 方法会导致虚拟机加载 SingletonHolder 类，这种方式不仅能够确保线程安全，也能够保证单例对象的唯一性，同时也延迟了单例的实例化，所以这是推荐使用的单例实现方式。</p><ul><li>枚举单例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonEnum &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写法简单是枚举单例最大的优点，枚举在 java 中与普通的类是一样的，不仅能够有字段，还能够有自己的方法。最重要的是默认枚举实例的创建是线程安全的，并且在任何情况下它都是一个单例。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单例模式介绍&quot;&gt;&lt;a href=&quot;#单例模式介绍&quot; class=&quot;headerlink&quot; title=&quot;单例模式介绍&quot;&gt;&lt;/a&gt;单例模式介绍&lt;/h2&gt;&lt;p&gt;单例模式是应用最广的模式之一，在应用这个模式时，单例对象的类必须保证只有一个实例存在。&lt;br&gt;如在一个应用中，应该只有一个 ImageLoader 实例，这个 ImageLoader 中又包含有线程池、缓存系统、网络请求等，很消耗资源，因此，没有理由让它构造多个实例。&lt;/p&gt;
&lt;h2 id=&quot;单例模式的使用场景&quot;&gt;&lt;a href=&quot;#单例模式的使用场景&quot; class=&quot;headerlink&quot; title=&quot;单例模式的使用场景&quot;&gt;&lt;/a&gt;单例模式的使用场景&lt;/h2&gt;&lt;p&gt;确保某个类有且只有一个对象的场景，避免产生多个对象消耗过多的资源，或者某种类型的对象应该有且只有一个。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://android9527.com/categories/Android/"/>
    
      <category term="Design Patterns" scheme="http://android9527.com/categories/Android/Design-Patterns/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="单例" scheme="http://android9527.com/tags/%E5%8D%95%E4%BE%8B/"/>
    
      <category term="Design Patterns" scheme="http://android9527.com/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>AOP技术的几种实现方式</title>
    <link href="http://android9527.com/2018/10/20/2018-10-20-AOP%E6%8A%80%E6%9C%AF%E7%9A%84%E5%87%A0%E7%A7%8D%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F/"/>
    <id>http://android9527.com/2018/10/20/2018-10-20-AOP技术的几种实现方式/</id>
    <published>2018-10-19T16:00:00.000Z</published>
    <updated>2018-11-06T06:39:21.963Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、AOP概念"><a href="#一、AOP概念" class="headerlink" title="一、AOP概念"></a>一、AOP概念</h3><p>百度百科中对AOP的解释如下:<br>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。 <a id="more"></a>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>AOP只是一种思想的统称，实现这种思想的方法有挺多。AOP通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，提高开发效率。</p><h4 id="（1）AOP与OOP的关系"><a href="#（1）AOP与OOP的关系" class="headerlink" title="（1）AOP与OOP的关系"></a>（1）AOP与OOP的关系</h4><p>OOP（面向对象编程）针对业务处理过程的实体及其属性和行为进行抽象封装，以获得更加清晰高效的逻辑单元划分。但是也有它的缺点，最明显的就是关注点聚焦时，面向对象无法简单的解决这个问题，一个关注点是面向所有而不是单一的类，不受类的边界的约束，因此OOP无法将关注点聚焦来解决，只能分散到各个类中。<br>AOP（面向切面编程）则是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合性的隔离效果。这两种设计思想在目标上有着本质的差异。<br>AOP并不是与OOP对立的，而是为了弥补OOP的不足。OOP解决了竖向的问题，AOP则解决横向的问题。因为有了AOP我们的调试和监控就变得简单清晰。</p><p>简单的来讲，AOP是一种：可以在不改变原来代码的基础上，通过“动态注入”代码，来改变原来执行结果的技术。</p><h4 id="（2）AOP主要应用场景"><a href="#（2）AOP主要应用场景" class="headerlink" title="（2）AOP主要应用场景"></a>（2）AOP主要应用场景</h4><p>日志记录，性能统计，安全控制，事务处理，异常处理等等。</p><h4 id="（3）主要目标"><a href="#（3）主要目标" class="headerlink" title="（3）主要目标"></a>（3）主要目标</h4><p>将日志记录，性能统计，安全控制，事务处理，异常处理等代码从业务逻辑代码中划分出来，通过对这些行为的分离，我们希望可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。</p><p><img src="/images/aop/aop2.png" alt="image"></p><p>上图是一个APP模块结构示例，按照照OOP的思想划分为“视图交互”，“业务逻辑”，“网络”等三个模块，而现在假设想要对所有模块的每个方法耗时（性能监控模块）进行统计。这个性能监控模块的功能就是需要横跨并嵌入众多模块里的，这就是典型的AOP的应用场景。</p><p>AOP的目标是把这些横跨并嵌入众多模块里的功能（如监控每个方法的性能） 集中起来，放到一个统一的地方来控制和管理。如果说，OOP如果是把问题划分到单个模块的话，那么AOP就是把涉及到众多模块的某一类问题进行统一管理。</p><p>对比：</p><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">OOP</th><th style="text-align:left">AOP</th></tr></thead><tbody><tr><td style="text-align:left">增加日志</td><td style="text-align:left">所有功能模块单独添加，容易出错</td><td style="text-align:left">能够将同一个关注点聚焦在一处解决</td></tr><tr><td style="text-align:left">修改日志</td><td style="text-align:left">功能代码分散，不方便调试</td><td style="text-align:left">能够实现一处修改，处处生效</td></tr></tbody></table><p>例如：在不改变 main 方法的同时通过代码注入的方式达到目的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Before</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * After</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis() - start;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、AOP代码注入时机"><a href="#二、AOP代码注入时机" class="headerlink" title="二、AOP代码注入时机"></a>二、AOP代码注入时机</h3><p>代码注入主要利用了Java的反射和注解机制，根据注解时机的不同，主要分为运行时、加载时和编译时。</p><p>运行时：你的代码对增强代码的需求很明确，比如，必须使用动态代理（这可以说并不是真正的代码注入）。<br>加载时：当目标类被Dalvik或者ART加载的时候修改才会被执行。这是对Java字节码文件或者Android的dex文件进行的注入操作。<br>编译时：在打包发布程序之前，通过向编译过程添加额外的步骤来修改被编译的类。</p><h3 id="三、AOP的几种实现方式"><a href="#三、AOP的几种实现方式" class="headerlink" title="三、AOP的几种实现方式"></a>三、AOP的几种实现方式</h3><ul><li>Java 中的动态代理，运行时动态创建 Proxy 类实例</li><li>APT，注解处理器，编译时生成 .java 代码</li><li>Javassist for Android：一个移植到Android平台的非常知名的操纵字节码的java库，对 class 字节码进行修改</li><li>AspectJ：和Java语言无缝衔接的面向切面的编程的扩展工具（可用于Android）。</li></ul><h4 id="1、动态代理"><a href="#1、动态代理" class="headerlink" title="1、动态代理"></a>1、动态代理</h4><h5 id="动态代理本质上还是java中的“代理设计模式”，不需要依赖其他类库，主要涉及到两个类"><a href="#动态代理本质上还是java中的“代理设计模式”，不需要依赖其他类库，主要涉及到两个类" class="headerlink" title="动态代理本质上还是java中的“代理设计模式”，不需要依赖其他类库，主要涉及到两个类"></a>动态代理本质上还是java中的“代理设计模式”，不需要依赖其他类库，主要涉及到两个类</h5><p><code>InvocationHandler.java</code>  InvocationHandler is the interface implemented by the invocation handler of a proxy instance.</p><p><code>Proxy.java</code>  Proxy provides static methods for creating dynamic proxy classes and instances, and it is also the superclass of all<br>            dynamic proxy classes created by those methods.</p><h5 id="编码实现步骤"><a href="#编码实现步骤" class="headerlink" title="编码实现步骤"></a>编码实现步骤</h5><p>（1）创建目标接口UserService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Log</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String name)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）创建具体实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"addUser "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"remove "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）创建代理对象 implements InvocationHandler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method.isAnnotationPresent(Log.class)) &#123;</span><br><span class="line">        System.out.println(<span class="string">"before method do something..."</span>);</span><br><span class="line">        Object object = method.invoke(src, args);</span><br><span class="line">        System.out.println(<span class="string">"after method do something..."</span>);</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(src, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）客户端调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testProxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 设置这个值，可以把生成的代理类，输出出来。</span></span><br><span class="line">    System.getProperties().put(<span class="string">"sun.misc.ProxyGenerator.saveGeneratedFiles"</span>, <span class="string">"true"</span>);</span><br><span class="line">    UserService service = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    <span class="comment">//生成被代理类的接口的子类</span></span><br><span class="line">    UserService proxy = (UserService) Proxy.newProxyInstance(LogProxy.class.getClassLoader(), service.getClass().getInterfaces(),</span><br><span class="line">                    <span class="keyword">new</span> LogProxy(service));</span><br><span class="line">    proxy.addUser(<span class="string">"name1"</span>);</span><br><span class="line">    proxy.remove(<span class="string">"name2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理对象的生成实际上是在运行时利用反射获取构造函数，通过加载构造函数在内存中生成的，其中生成的对象持有调用处理器InvocationHandler，最后会调用h.invoke()方法</p><p><img src="/images/aop/proxy.jpeg" alt="image"></p><h5 id="想要实现特定方法写入日志，可以使用注解等方式。"><a href="#想要实现特定方法写入日志，可以使用注解等方式。" class="headerlink" title="想要实现特定方法写入日志，可以使用注解等方式。"></a>想要实现特定方法写入日志，可以使用注解等方式。</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义日志注解，用于判断该方法执行前是否需要写入日志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(value = ElementType.METHOD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Log</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、编译时注解APT实现"><a href="#2、编译时注解APT实现" class="headerlink" title="2、编译时注解APT实现"></a>2、编译时注解APT实现</h4><p>代表项目：ButterKnife, Dagger2, DataBinding</p><h5 id="（1）APT的介绍"><a href="#（1）APT的介绍" class="headerlink" title="（1）APT的介绍"></a>（1）APT的介绍</h5><p>全名Annotation Processing Tool，注解处理器。对源代码文件进行检测找出其中的Annotation，使用 Annotation 进行额外的处理。<br>APT在处理 Annotation 时可以根据源文件中的 Annotation 生成额外的源文件和其它的文件(文件具体内容由Annotation处理器的编写者决定)，APT还会编译生成的源文件和原来的源文件，将它们一起生成class文件。<br>总结一句话，就是在编译时候，根据注解生成对应需要的文件，这样在app运行的时候就不会导致性能损耗。</p><h5 id="（2）APT的处理要素"><a href="#（2）APT的处理要素" class="headerlink" title="（2）APT的处理要素"></a>（2）APT的处理要素</h5><p>注解处理器（AbstractProcess）+ 代码处理（javaPoet）+ 注册处理器（AutoService）</p><h5 id="（3）使用APT来处理-Annotation-的流程"><a href="#（3）使用APT来处理-Annotation-的流程" class="headerlink" title="（3）使用APT来处理 Annotation 的流程"></a>（3）使用APT来处理 Annotation 的流程</h5><p>1.定义注解（如@ViewBind）<br>2.定义注解处理器 继承 AbstractProcessor<br>3.在处理器里面完成处理方式，生成java代码。<br>4.注册 处理器 @AutoService(Processor.class)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要把处理器注册到javac中，需要打包一个特定的文件javax.annotation.processing.Processor到META-INF/services路径下</span></span><br><span class="line"><span class="comment"> * AutoService 会自动生成配置文件，注册处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AutoService</span>(Processor.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewBindProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理器的初始化方法，可以获取相关的工具类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessingEnvironment processingEnv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.init(processingEnv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理器的主方法，用于扫描处理注解，生成java文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">process</span><span class="params">(Set&lt;? extends TypeElement&gt; annotations, RoundEnvironment roundEnv)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、Javassist-实现"><a href="#3、Javassist-实现" class="headerlink" title="3、Javassist 实现"></a>3、Javassist 实现</h4><p>代表项目：Hotfix   Instant Run</p><h5 id="（1）原理"><a href="#（1）原理" class="headerlink" title="（1）原理"></a>（1）原理</h5><p>Javassist 可以直接操作字节码，从而实现代码注入，所以使用 Javassist 的时机就是在构建工具 Gradle 将源文件编译成 .class 文件之后，将 .class 打包成 dex 文件之前。</p><p>该方式需要借助Google提供的Transform API</p><p>先说一下Transform是什么<br>gradle从1.5开始，gradle 插件包含了一个叫Transform的API，这个API允许第三方插件在class文件转为为dex文件前操作编译好的class文件，<br>这个API的目标是简化自定义类操作，而不必处理Task，并且在操作上提供更大的灵活性。<br>官方文档：<a href="http://google.github.io/android-gradle-dsl/javadoc/" target="_blank" rel="noopener">http://google.github.io/android-gradle-dsl/javadoc/</a></p><h5 id="（2）开发步骤："><a href="#（2）开发步骤：" class="headerlink" title="（2）开发步骤："></a>（2）开发步骤：</h5><ul><li>创建自定义 Gradle plugin module<br>新建Android library module 留下src/main和build.gradle，其他的文件删除</li><li>Gradle Transform API<br> 在main目录下创建 groovy 文件夹，然后在 groovy 目录下就可以创建我们的包名和 groovy 文件了,记得后缀要已 .groovy 结尾。在这个文件中引入创建的包名，然后写一个Class继承于Plugin&lt; Project &gt; 并重写apply方法<br>创建 MyPlugin.groovy 文件</li><li>利用 javassist 或者 ASM 修改原有的class文件或者新增class</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPlugin</span> <span class="keyword">implements</span> <span class="title">Plugin</span>&lt;<span class="title">Project</span>&gt; &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> apply(Project project) &#123;</span><br><span class="line">        System.out.println(<span class="string">"------------------开始----------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//AppExtension就是build.gradle中android&#123;...&#125;这一块</span></span><br><span class="line">        <span class="keyword">def</span> android = project.extensions.getByType(AppExtension)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//注册一个Transform</span></span><br><span class="line">        <span class="keyword">def</span> classTransform = <span class="keyword">new</span> MyClassTransform(project)</span><br><span class="line">        android.registerTransform(classTransform)</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------------------结束----------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTransform</span> <span class="keyword">extends</span> <span class="title">Transform</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> transform(Context context, Collection&lt;TransformInput&gt; inputs, Collection&lt;TransformInput&gt; referencedInputs, TransformOutputProvider outputProvider, <span class="keyword">boolean</span> isIncremental) <span class="keyword">throws</span> IOException, TransformException, InterruptedException &#123;</span><br><span class="line">        <span class="keyword">super</span>.transform(context, inputs, referencedInputs, outputProvider, isIncremental)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// javassist 操作字节码</span></span><br><span class="line">        <span class="comment">// 获取MainActivity.class</span></span><br><span class="line">        CtClass ctClass = pool.getCtClass(<span class="string">"io.github.android9527.javassistdemo.MainActivity"</span>);</span><br><span class="line">        <span class="keyword">if</span> (ctClass.isFrozen())</span><br><span class="line">            ctClass.defrost()</span><br><span class="line">        <span class="comment">// 获取到OnCreate方法</span></span><br><span class="line">        CtMethod ctMethod = ctClass.getDeclaredMethod(<span class="string">"onCreate"</span>)</span><br><span class="line">        String insetBeforeStr = <span class="string">""" android.widget.Toast.makeText(this, "插入了Toast代码~", android.widget.Toast.LENGTH_SHORT).show();</span></span><br><span class="line"><span class="string">                                                        """</span></span><br><span class="line">        <span class="comment">//在方法开头插入代码</span></span><br><span class="line">        ctMethod.insertBefore(insetBeforeStr)</span><br><span class="line">        ctClass.writeFile(path)</span><br><span class="line">        ctClass.detach() <span class="comment">//释放</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>配置plugin 在main目录下创建resources文件夹，继续在resources下创建META-INF文件夹，<br>继续在META-INF文件夹下创建<code>gradle-plugins</code>文件夹，最后在gradle-plugins文件夹下创建一个xxx.properties文件，<br>注意：这个xxx就是在app下的build.gradle中引入时的名字，例如：apply plugin: ‘xxx’。<br>在文件中写 <code>implementation-class=io.github.android9527.MyPlugin</code>。</p></li><li><p>需改build.gradle 内容，然后执行 uploadArchives 这个task 上传到 maven 库，就将我们的这个插件打包上传到了本地 maven 中，可以去本地的 maven 库中查看</p></li></ul><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'groovy'</span></span><br><span class="line">apply plugin: <span class="string">'maven'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="comment">// gradle sdk</span></span><br><span class="line">    <span class="keyword">compile</span> gradleApi()</span><br><span class="line">    <span class="comment">// groovy sdk</span></span><br><span class="line">    <span class="keyword">compile</span> localGroovy()</span><br><span class="line">    <span class="comment">// 可以引用其它库</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">fileTree</span>(dir: <span class="string">'libs'</span>, <span class="keyword">include</span>: [<span class="string">'*.jar'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.tools.build:transform-api:1.5.0'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'javassist:javassist:3.12.1.GA'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'com.android.tools.build:gradle:3.1.2'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uploadArchives&#123;</span><br><span class="line">    <span class="keyword">repositories</span>&#123;</span><br><span class="line">        mavenDeployer&#123;</span><br><span class="line">            repository(url:uri(<span class="string">'../repo'</span>))</span><br><span class="line">            pom.groupId = <span class="string">'com.android9527.plugin'</span> <span class="comment">// 组名</span></span><br><span class="line">            pom.artifactId = <span class="string">'test'</span> <span class="comment">// 插件名</span></span><br><span class="line">            pom.version = <span class="string">'1.0.1-SNAPSHOT'</span> <span class="comment">// 版本号</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">group</span>=<span class="string">'com.android9527.plugin'</span></span><br><span class="line">version=<span class="string">'1.0-SNAPSHOT'</span></span><br></pre></td></tr></table></figure><ul><li>项目主 module 依赖该 plugin 运行项目，反编译之后查看字节码<br><img src="/images/aop/javassist.jpeg" alt="image"></li></ul><h4 id="4、Android中使用-AspectJ"><a href="#4、Android中使用-AspectJ" class="headerlink" title="4、Android中使用 AspectJ"></a>4、Android中使用 AspectJ</h4><p>代表项目：Hugo(打印每个方法的执行时间)  sa-sdk-android（全埋点技术）</p><h5 id="（1）原理-1"><a href="#（1）原理-1" class="headerlink" title="（1）原理"></a>（1）原理</h5><p>AspectJ 意思就是Java的Aspect，Java的AOP。它的核心是ajc（编译器 aspectjtools）和 weaver（织入器 aspectjweaver）。</p><p>ajc编译器：基于Java编译器之上的，它是用来编译.aj文件，aspectj在Java编译器的基础上增加了一些它自己的关键字和方法。因此，ajc也可以编译Java代码。</p><p>weaver织入器：为了在java编译器上使用AspectJ而不依赖于Ajc编译器，aspectJ 5出现了 @AspectJ，使用注释的方式编写AspectJ代码，可以在任何Java编译器上使用。<br>由于AndroidStudio默认是没有ajc编译器的，所以在Android中使用@AspectJ来编写。它在代码的编译期间扫描目标程序，根据切点（PointCut）匹配,将开发者编写的Aspect程序编织（Weave）到目标程序的.class文件中，对目标程序作了重构（重构单位是JoinPoint），目的就是建立目标程序与Aspect程序的连接（获得执行的对象、方法、参数等上下文信息），从而达到AOP的目的。</p><h5 id="（2）AspectJ-术语"><a href="#（2）AspectJ-术语" class="headerlink" title="（2）AspectJ 术语"></a>（2）AspectJ 术语</h5><p>切面（Aspect）：一个关注点的模块化，这个关注点实现可能另外横切多个对象。其实就是共有功能的实现。如日志切面、权限切面、事务切面等。<br>通知（Advice）：是切面的具体实现。以目标方法为参照点，根据放置的地方不同，可分为前置通知（Before）、后置通知（AfterReturning）、异常通知（AfterThrowing）、最终通知（After）与环绕通知（Around）5种。在实际应用中通常是切面类中的一个方法，具体属于哪类通知由配置指定的。<br>切入点（Pointcut）：用于定义通知应该切入到哪些连接点上。不同的通知通常需要切入到不同的连接点上，这种精准的匹配是由切入点的正则表达式来定义的。<br>连接点（JoinPoint）：就是程序在运行过程中能够插入切面的地点。例如，方法调用、异常抛出或字段修改等。<br>目标对象（Target Object）：包含连接点的对象，也被称作被通知或被代理对象。这些对象中已经只剩下干干净净的核心业务逻辑代码了，所有的共有功能等代码则是等待AOP容器的切入。<br>AOP代理（AOP Proxy）：将通知应用到目标对象之后被动态创建的对象。可以简单地理解为，代理对象的功能等于目标对象的核心业务逻辑功能加上共有功能。代理对象对于使用者而言是透明的，是程序运行过程中的产物。<br>编织（Weaving）：将切面应用到目标对象从而创建一个新的代理对象的过程。这个过程可以发生在编译期、类装载期及运行期，当然不同的发生点有着不同的前提条件。譬如发生在编译期的话，就要求有一个支持这种AOP实现的特殊编译器（如AspectJ编译器）；发生在类装载期，就要求有一个支持AOP实现的特殊类装载器；只有发生在运行期，则可直接通过Java语言的反射机制与动态代理机制来动态实现（如Spring）。<br>引入（Introduction）：添加方法或字段到被通知的类。</p><h5 id="（3）在Android项目中使用AspectJ"><a href="#（3）在Android项目中使用AspectJ" class="headerlink" title="（3）在Android项目中使用AspectJ"></a>（3）在Android项目中使用AspectJ</h5><ul><li><p>gradle配置的方式：引入AspectJ是有点复杂的，需要引入大量的gradle命令配置有点麻烦，在build文件中添加了一些脚本，文章出处：<a href="https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/" target="_blank" rel="noopener">https://fernandocejas.com/2014/08/03/aspect-oriented-programming-in-android/</a></p></li><li><p>使用 gradle 插件（也是对 gradle 命令进行了包装）：Jake Wharton 大神的 hugo 项目（一款日志打印的插件）</p></li></ul><p>上海沪江团队的 gradle_plugin_android_aspectjx 一个基于AspectJ并在此基础上扩展出来可应用于Android开发平台的AOP框架，可作用于java源码，class文件及jar包，同时支持kotlin的应用。</p><p>AOP的用处非常广，从spring到Android，各个地方都有使用，特别是在后端，Spring中已经使用的非常方便了，而且功能非常强大，但是在Android中，AspectJ的实现是略阉割的版本，并不是所有功能都支持，但对于一般的客户端开发来说，已经完全足够用了。</p><h5 id="（4）以-AspectJX-接入说明"><a href="#（4）以-AspectJX-接入说明" class="headerlink" title="（4）以 AspectJX 接入说明"></a>（4）以 AspectJX 接入说明</h5><ul><li>首先，需要在项目根目录的build.gradle中增加依赖：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:2.3.3&apos;</span><br><span class="line">        classpath &apos;com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.4&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然后module项目的 build.gradle 中加入 AspectJ 的依赖：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;android-aspectjx&apos;</span><br><span class="line">dependencies &#123;</span><br><span class="line">        compile &apos;org.aspectj:aspectjrt:1.8.+&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">aspectjx &#123;</span><br><span class="line">    //排除所有package路径中包含`android.support`的class文件及库（jar文件）</span><br><span class="line">    exclude &apos;org.apache.httpcomponents&apos;</span><br><span class="line">    exclude &apos;android.support&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>具体配置参见github地址 <a href="https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx" target="_blank" rel="noopener">https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx</a></p></li><li><p>我们通过一段简单的代码来了解下基本的使用方法和功能，新建一个AspectTest类文件，代码如下：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"xuyisheng"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* android.app.Activity.on**(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityMethodBefore</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String key = joinPoint.getSignature().toString();</span><br><span class="line">        Log.e(TAG, <span class="string">"onActivityMethodBefore: "</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"execution(* android.app.Activity.on**(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityMethodAfter</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String key = joinPoint.getSignature().toString();</span><br><span class="line">        Log.e(TAG, <span class="string">"onActivityMethodAfter: "</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* android.app.Activity.on**(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityMethodAfter</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String key = joinPoint.getSignature().toString();</span><br><span class="line">        Log.e(TAG, <span class="string">"onActivityMethodBefore: "</span> + key);</span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        Log.e(TAG, <span class="string">"onActivityMethodAfter: "</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类的最开始，我们使用 @Aspect 注解来定义这样一个AspectJ文件，编译器在编译的时候，就会自动去解析，并不需要主动去调用AspectJ类里面的代码。</p><h5 id="（5）编织速度优化建议"><a href="#（5）编织速度优化建议" class="headerlink" title="（5）编织速度优化建议"></a>（5）编织速度优化建议</h5><ul><li>尽量使用精确的匹配规则,降低匹配时间。</li><li>排除不需要扫描的包。</li></ul><p>通过这种方式编译后，我们来看下生成的代码是怎样的。AspectJ的原理实际上是在编译的时候，根据一定的规则解析，然后插入一些代码，通过aspectj生成的代码，会在Build目录下：</p><p><img src="/images/aop/aspectj_class.jpeg" alt="image"></p><p>我们可以发现，在onCreate的最前面，插入了一行AspectJ的代码。这个就是AspectJ的主要功能，抛开AOP的思想来说，我们想做的，实际上就是『在不侵入原有代码的基础上，增加新的代码』。</p><h3 id="四、总结："><a href="#四、总结：" class="headerlink" title="四、总结："></a>四、总结：</h3><p>动态代理<br>优点：</p><ul><li>Java API 提供的，兼容性好，无需依赖其他库，</li><li>动态代理类的字节码在程序运行时由Java反射机制动态生成，无需程序员手工编写它的源代码。</li><li>动态代理类不仅简化了编程工作，而且提高了软件系统的可扩展性，因为Java 反射机制可以生成任意类型的动态代理类。</li></ul><p>缺点：</p><ul><li>只能代理实现了接口的类，而不能实现接口的类就不能实现JDK的动态代理，cglib是针对类来实现代理的，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但因为采用的是继承，所以不能对final修饰的类进行代理。</li><li>没有代码注入步骤，必须手动实例化并应用，</li><li>功能有限，只能在方法前后执行一些代码</li></ul><p>APT<br>优点：</p><ul><li>任何你不想做的繁杂的工作，它可以帮你减少样板代码</li><li>生成代码位置的可控性（可以在任意包位置生成代码），与原有代码的关联性更为紧密方便</li></ul><p>缺点：</p><ul><li>只有被注解标记了的类或方法等，才可以被处理或收集信息。</li><li>APT可以自动生成代码，但在运行时却需要主动调用</li></ul><p>Javassist ：</p><ul><li>功能强大，使用方便，</li><li>由于Javassist可以直接操作修改编译后的字节码，直接绕过了java编译器，所以可以做很多突破限制的事情，例如，跨dex引用，解决热修复中CLASS_ISPREVERIFIED的问题。</li><li>运行时生成，减少不必要的生成开销；通过将切面逻辑写入字节码，减少了生成子类的开销，不会产生过多子类。运行时加入切面逻辑，产生性能开销。</li></ul><p>Aspectj：</p><ul><li>AspectJ除了hook之外，AspectJ还可以为目标类添加变量，接口。另外，AspectJ也有抽象，继承等各种更高级的玩法。它能够在编译期间直接修改源代码生成class。</li><li>AspectJ语法比较多，但是掌握几个简单常用的，就能实现绝大多数切片，完全兼容Java（纯Java语言开发，然后使用AspectJ注解，简称@AspectJ。）</li></ul><h3 id="五、参考资料："><a href="#五、参考资料：" class="headerlink" title="五、参考资料："></a>五、参考资料：</h3><p><a href="https://blog.csdn.net/woshimalingyi/article/details/73252013" target="_blank" rel="noopener">AOP之@AspectJ技术原理详解</a></p><p><a href="https://juejin.im/entry/581aec732e958a0054d08213" target="_blank" rel="noopener">安卓 AOP 三剑客: APT,AspectJ,Javassist</a></p><p><a href="https://www.jianshu.com/p/a6be7cdcfc65" target="_blank" rel="noopener">Android动态编译技术 Plugin Transform Javassist操作Class文件</a></p><p><a href="https://blog.csdn.net/innost/article/details/49387395" target="_blank" rel="noopener">深入理解Android之AOP</a></p><p><a href="http://www.jianshu.com/p/2779e3bb1f14" target="_blank" rel="noopener">归纳AOP在Android开发中的几种常见用法</a></p><p><a href="http://blog.csdn.net/eclipsexys/article/details/54425414" target="_blank" rel="noopener">看AspectJ在Android中的强势插入</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一、AOP概念&quot;&gt;&lt;a href=&quot;#一、AOP概念&quot; class=&quot;headerlink&quot; title=&quot;一、AOP概念&quot;&gt;&lt;/a&gt;一、AOP概念&lt;/h3&gt;&lt;p&gt;百度百科中对AOP的解释如下:&lt;br&gt;在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。
    
    </summary>
    
      <category term="Android" scheme="http://android9527.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="Aop" scheme="http://android9527.com/tags/Aop/"/>
    
      <category term="Aspectj" scheme="http://android9527.com/tags/Aspectj/"/>
    
      <category term="面向切面编程" scheme="http://android9527.com/tags/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>CoordinatorLayout使用过程中遇到的问题.md</title>
    <link href="http://android9527.com/2018/10/09/2018-10-09-CoordinatorLayout%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://android9527.com/2018/10/09/2018-10-09-CoordinatorLayout使用过程中遇到的问题/</id>
    <published>2018-10-08T16:00:00.000Z</published>
    <updated>2018-12-18T07:51:20.722Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CoordinatorLayout使用过程中遇到的问题"><a href="#CoordinatorLayout使用过程中遇到的问题" class="headerlink" title="CoordinatorLayout使用过程中遇到的问题"></a>CoordinatorLayout使用过程中遇到的问题</h2><p>CoordinatorLayout 一般配合 NestedScrollView 或者 RecyclerView 使用<br>常常用于ScrollView滚动，ToolBar伸缩，渐变等背景视差效果等</p><p>CoordinatorLayout + AppBarLayout + CollapsingToolbarLayout 配合使用才会有比较完美的效果<br>app:layout_behavior属性，只有CoordinatorLayout的直接子布局才能响应。</p><a id="more"></a><ul><li><p>无法联动CoordinatorLayout<br>增加app:layout_behavior=”@string/appbar_scrolling_view_behavior”<br>我这边用了一个自定义的FrameLayout结果在滚动的时候，AppBarLayout无法跟着联动，<br>原因分析: 默认FrameLayout没有实现NestedScrollingChild接口，RecyclerView和NestedScrollView都实现了NestedScrollingChild接口，<br>解决方法：ViewCompat.setNestedScrollingEnabled(frameLayout, true);</p></li><li><p>监听AppBarLayout 位置移动 AppBarLayout.addOnOffsetChangedListener(this);<br>运行后发现 SystemBarUtils.transparencyAndDark() 改变状态栏背景的代码会导致 AppBarLayout 重绘，从而重新调用 onOffsetChanged() 方法，导致出现循环<br>解决方法增加去重等，也可以增加当前状态栏标志位进行过滤。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOffsetChanged</span><span class="params">(AppBarLayout appBarLayout, <span class="keyword">int</span> verticalOffset)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 修改状态栏会触发 AppBarLayout重绘 onOffsetChanged() 方法，这里加个去重</span></span><br><span class="line">    <span class="keyword">if</span> (mCurVerticalOffset == verticalOffset)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    mCurVerticalOffset = verticalOffset;</span><br><span class="line">    mShortVideoView.setVerticalOffset(verticalOffset);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> offset = Math.abs(verticalOffset);</span><br><span class="line">    <span class="keyword">int</span> scrollRange = appBarLayout.getTotalScrollRange();</span><br><span class="line">    <span class="keyword">if</span> (offset &lt;= scrollRange / <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        SystemBarUtils.transparencyAndDark(TopicDetailActivity.<span class="keyword">this</span>, <span class="keyword">false</span>);</span><br><span class="line">        mTopicTitleView.setVisibility(View.VISIBLE);</span><br><span class="line">        mTopicTitleCloseView.setVisibility(View.GONE);</span><br><span class="line">        <span class="keyword">float</span> openPer = (<span class="keyword">float</span>) offset / (scrollRange / <span class="number">2</span>);</span><br><span class="line">        mTopicTitleView.setAlpha(<span class="number">1</span> - openPer);</span><br><span class="line">    &#125; <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        SystemBarUtils.transparencyAndDark(TopicDetailActivity.<span class="keyword">this</span>, <span class="keyword">true</span>);</span><br><span class="line">        mTopicTitleView.setVisibility(View.GONE);</span><br><span class="line">        mTopicTitleCloseView.setVisibility(View.VISIBLE);</span><br><span class="line">        <span class="keyword">float</span> closePer = (<span class="keyword">float</span>) (scrollRange - offset) / (scrollRange / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> closeAlpha = (<span class="keyword">int</span>) (<span class="number">255</span> * (<span class="number">1</span> - closePer));</span><br><span class="line">        mTopicTitleCloseView.setAlpha(<span class="number">1</span> - closePer);</span><br><span class="line">        <span class="keyword">int</span> color = Color.argb(closeAlpha, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">        mCollapsingToolbarLayout.setContentScrimColor(color);</span><br><span class="line">        mCollapsingToolbarLayout.setStatusBarScrimColor(color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>1、AppBarLayout的直接子控件可以设置的属性:layout_scrollFlags</p><ul><li>scroll|exitUntilCollapsed如果AppBarLayout的直接子控件设置该属性,该子控件可以滚动,向上滚动NestedScrollView出父布局(一般为CoordinatorLayout)时,会折叠到顶端,向下滚动时NestedScrollView必须滚动到最上面的时候才能拉出该布局</li><li>scroll|enterAlways:只要向下滚动该布局就会显示出来,只要向上滑动该布局就会向上收缩</li><li>scroll|enterAlwaysCollapsed:向下滚动NestedScrollView到最底端时该布局才会显示出来</li><li>如果不设置改属性,则改布局不能滑动</li></ul><p>2、CollapsingToolbarLayout,字面意思是折叠的toolbar,它确实是起到折叠作用的,可以把自己的自布局折叠 继承自framLayout,所以它的直接子类可以设置layout_gravity来控制显示的位置,它的直接子布局可以使用的属性:app:layout_collapseMode(折叠模式):可取的值如下:</p><ul><li>pin:在滑动过程中,此自布局会固定在它所在的位置不动,直到CollapsingToolbarLayout全部折叠或者全部展开</li><li>parallax:视察效果,在滑动过程中,不管上滑还是下滑都会有视察效果,不知道什么事视察效果自己看gif图(layout_collapseParallaxMultiplier视差因子 0~1之间取值,当设置了parallax时可以配合这个属性使用,调节自己想要的视差效果)</li><li>不设置:跟随NestedScrollView的滑动一起滑动,NestedScrollView滑动多少距离他就会跟着走多少距离</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;CoordinatorLayout使用过程中遇到的问题&quot;&gt;&lt;a href=&quot;#CoordinatorLayout使用过程中遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;CoordinatorLayout使用过程中遇到的问题&quot;&gt;&lt;/a&gt;CoordinatorLayout使用过程中遇到的问题&lt;/h2&gt;&lt;p&gt;CoordinatorLayout 一般配合 NestedScrollView 或者 RecyclerView 使用&lt;br&gt;常常用于ScrollView滚动，ToolBar伸缩，渐变等背景视差效果等&lt;/p&gt;
&lt;p&gt;CoordinatorLayout + AppBarLayout + CollapsingToolbarLayout 配合使用才会有比较完美的效果&lt;br&gt;app:layout_behavior属性，只有CoordinatorLayout的直接子布局才能响应。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://android9527.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android WebView缓存优化</title>
    <link href="http://android9527.com/2018/07/13/2018-07-13-Android%20WebView%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96/"/>
    <id>http://android9527.com/2018/07/13/2018-07-13-Android WebView缓存优化/</id>
    <published>2018-07-12T16:00:00.000Z</published>
    <updated>2018-07-27T11:29:29.034Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><p>对于WebView的性能，给人最直观的莫过于：打开速度比native慢。<br>是的，当我们打开一个WebView页面，页面往往会慢吞吞的loading很久，若干秒后才出现你所需要看到的页面。这是为什么呢？</p><a id="more"></a><p>对于一个普通用户来讲，打开一个WebView通常会经历以下几个阶段：</p><ul><li>交互无反馈</li><li>到达新的页面，页面白屏</li><li>页面基本框架出现，但是没有数据；页面处于loading状态</li><li>出现所需的数据<br>如果从程序上观察，WebView启动过程大概分为以下几个阶段：</li></ul><p><img src="/images/webview_cache/webview_1.png" alt="image"><br>如何缩短这些过程的时间，就成了优化WebView性能的关键。</p><p>常规的前端和后端的性能优化已有前辈们总结过最佳实践，主要的是：</p><ul><li>降低请求量：合并资源，减少 HTTP 请求数，minify / gzip 压缩，webP。</li><li>加快请求速度：预解析DNS，减少域名数，并行加载，CDN 分发。</li><li>缓存：HTTP 协议缓存请求，离线缓存 manifest，离线数据缓存 localStorage。</li><li>渲染：JS/CSS优化，加载顺序，服务端渲染模板直出。</li></ul><h4 id="二、WebView的缓存类型"><a href="#二、WebView的缓存类型" class="headerlink" title="二、WebView的缓存类型"></a>二、WebView的缓存类型</h4><p>WebView主要包括两类缓存，一类是浏览器自带的网页数据缓存，这是所有的浏览器都支持的、由HTTP协议定义的缓存；另一类是H5缓存，这是由web页面的开发者设置的，H5缓存主要包括了App Cache、DOM Storage、Local Storage、Web SQL Database 存储机制等，这里我们主要介绍App Cache来缓存js文件。</p><h5 id="1、浏览器自带的网页数据缓存"><a href="#1、浏览器自带的网页数据缓存" class="headerlink" title="1、浏览器自带的网页数据缓存"></a>1、浏览器自带的网页数据缓存</h5><ul><li>浏览器缓存机制是通过HTTP协议Header里的Cache-Control（或Expires）和Last-Modified（或 Etag）等字段来控制文件缓存的机制。</li><li>WebView如何设置才能支持上面的协议</li></ul><p>Android WebView有下面几个Cache Mode：</p><ul><li>LOAD_DEFAULT：根据cache-control决定是否从网络上取数据。</li><li>LOAD_NORMAL：Deprecated，API level 17中已经废弃，从API level 11开始作用同LOAD_DEFAULT模式</li><li>LOAD_CACHE_ELSE_NETWORK：只要本地有，无论是否过期，都使用缓存中的数据。本地没有缓存时才从网络上获取。</li><li>LOAD_NO_CACHE：不使用缓存，只从网络获取数据。</li><li>LOAD_CACHE_ONLY： 不使用网络，只读取本地缓存数据。</li></ul><p>设置WebView缓存的Cache Mode示例代码如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> webSettings = webView.settings</span><br><span class="line">webSettings.cacheMode = WebSettings.LOAD_NO_CACHE</span><br><span class="line"></span><br><span class="line">webSettings.cacheMode = <span class="keyword">if</span> (YKNetworkUtil.isNetConnected()) &#123;</span><br><span class="line">    WebSettings.LOAD_NO_CACHE</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    WebSettings.LOAD_CACHE_ELSE_NETWORK</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、在手机里面的存储路径"><a href="#2、在手机里面的存储路径" class="headerlink" title="2、在手机里面的存储路径"></a>2、在手机里面的存储路径</h5><p>Android 6.0的目录：/data/data/包名/cache/org.chromium.android_webview/下面，如下图所示。<br><img src="/images/webview_cache/webview_path.jpeg" alt="image"></p><h5 id="Application-Cache-缓存机制"><a href="#Application-Cache-缓存机制" class="headerlink" title="Application Cache 缓存机制"></a>Application Cache 缓存机制</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// HTML 在头中通过 manifest 属性引用 manifest 文件</span><br><span class="line">// manifest 文件：就是上面以 appcache 结尾的文件，是一个普通文件文件，列出了需要缓存的文件</span><br><span class="line">// 浏览器在首次加载 HTML 文件时，会解析 manifest 属性，并读取 manifest 文件，获取 Section：CACHE MANIFEST 下要缓存的文件列表，再对文件缓存</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">"cache/demo.appcache"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">CACHE MANIFEST</span><br><span class="line">demo_time.js</span><br><span class="line">img_logo.gif</span><br><span class="line">NETWORK:</span><br><span class="line">*</span><br><span class="line">FALLBACK:</span><br><span class="line">404.html</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> webSettings = webView.settings</span><br><span class="line">webSettings.setAppCacheEnabled(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h5 id="3、Dom-Storage-缓存机制"><a href="#3、Dom-Storage-缓存机制" class="headerlink" title="3、Dom Storage 缓存机制"></a>3、Dom Storage 缓存机制</h5><p>a. 通过存储字符串的 Key - Value 对来提供<br>DOM Storage 分为 sessionStorage &amp;  localStorage； 二者使用方法基本相同，区别在于作用范围不同：<br>a. sessionStorage：具备临时性，即存储与页面相关的数据，它在页面关闭后无法使用<br>b. localStorage：具备持久性，即保存的数据在页面关闭后也可以使用。</p><p>b. 特点<br>存储空间大（ 5MB）：存储空间对于不同浏览器不同，如Cookies 才 4KB<br>存储安全、便捷： Dom Storage 存储的数据在本地，不需要经常和服务器进行交互<br>c. 应用场景<br>存储临时、简单的数据</p><p>具体实现，前端</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">localStorage.setItem("lastName", "HaHa");</span><br><span class="line">var lastName = localStorage.getItem("lastName");</span><br><span class="line"></span><br><span class="line">sessionStorage.setItem("lastName", "HaHa");</span><br><span class="line">var lastName = sessionStorage.getItem("lastName");</span><br></pre></td></tr></table></figure><p>Android端</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> webSettings = webView.settings</span><br><span class="line">webSettings.domStorageEnabled = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h5 id="4、Web-SQL-Database-缓存机制"><a href="#4、Web-SQL-Database-缓存机制" class="headerlink" title="4、Web SQL Database 缓存机制"></a>4、Web SQL Database 缓存机制</h5><p>a. 原理<br>基于 SQL 的数据库存储机制</p><p>b. 特点<br>充分利用数据库的优势，可方便对数据进行增加、删除、修改、查询</p><p>c. 应用场景<br>存储适合数据库的结构化数据</p><p>d. 具体实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var db = openDatabase('testDB', '1.0', 'Test DB', 2 * 1024 * 1024);</span></span><br><span class="line"><span class="undefined">        var msg;</span></span><br><span class="line"><span class="undefined">        db.transaction(function (context) &#123;</span></span><br><span class="line"><span class="undefined">           context.executeSql('CREATE TABLE IF NOT EXISTS testTable (id unique, name)');</span></span><br><span class="line"><span class="undefined">           context.executeSql('INSERT INTO testTable (id, name) VALUES (0, "Byron")');</span></span><br><span class="line"><span class="undefined">           context.executeSql('INSERT INTO testTable (id, name) VALUES (1, "Casper")');</span></span><br><span class="line"><span class="undefined">           context.executeSql('INSERT INTO testTable (id, name) VALUES (2, "Frank")');</span></span><br><span class="line"><span class="undefined">         &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        db.transaction(function (context) &#123;</span></span><br><span class="line"><span class="undefined">           context.executeSql('SELECT * FROM testTable', [], function (context, results) &#123;</span></span><br><span class="line"><span class="undefined">            var len = results.rows.length, i;</span></span><br><span class="line"><span class="undefined">            console.log('Got '+len+' rows.');</span></span><br><span class="line"><span class="undefined">               for (i = 0; i &lt; len; i++)&#123;</span></span><br><span class="line"><span class="undefined">              console.log('id: '+results.rows.item(i).id);</span></span><br><span class="line"><span class="undefined">              console.log('name: '+results.rows.item(i).name);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">         &#125;);</span></span><br><span class="line"><span class="undefined">        &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> webSettings = webView.settings</span><br><span class="line">webSettings.databaseEnabled = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>特别说明<br>根据官方说明，Web SQL Database存储机制不再推荐使用（不再维护）,取而代之的是 IndexedDB缓存机制，下面会详细介绍</p><h5 id="5、indexedDB"><a href="#5、indexedDB" class="headerlink" title="5、indexedDB"></a>5、indexedDB</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">       function openDB (name) &#123;</span></span><br><span class="line"><span class="undefined">            var request=window.indexedDB.open(name);</span></span><br><span class="line"><span class="undefined">            request.onerror=function(e)&#123;</span></span><br><span class="line"><span class="undefined">                console.log('OPen Error!');</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">            request.onsuccess=function(e)&#123;</span></span><br><span class="line"><span class="undefined">                myDB.db=e.target.result;</span></span><br><span class="line"><span class="undefined">            &#125;;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        var myDB=&#123;</span></span><br><span class="line"><span class="undefined">            name:'test',</span></span><br><span class="line"><span class="undefined">            version:1,</span></span><br><span class="line"><span class="undefined">            db:null</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">        openDB(myDB.name);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="三、缓存机制汇总"><a href="#三、缓存机制汇总" class="headerlink" title="三、缓存机制汇总"></a>三、缓存机制汇总</h4><p><img src="/images/webview_cache/webview_cache_3.png" alt="image"></p><p>结论：综合各种缓存机制比较，对于静态文件，如 JS、CSS、字体、图片等，适合通过浏览器缓存机制来进行缓存，通过缓存文件可大幅提升 Web 的加载速度，且节省流量。但也有一些不足：缓存文件需要首次加载后才会产生；浏览器缓存的存储空间有限，缓存有被清除的可能；缓存的文件没有校验。</p><h4 id="四、APP端主要缓存方案"><a href="#四、APP端主要缓存方案" class="headerlink" title="四、APP端主要缓存方案"></a>四、APP端主要缓存方案</h4><h5 id="1、全局WebView，WebView独立进程"><a href="#1、全局WebView，WebView独立进程" class="headerlink" title="1、全局WebView，WebView独立进程"></a>1、全局WebView，WebView独立进程</h5><p>在客户端刚启动时，就初始化一个全局的WebView待用，并隐藏；<br>当用户访问了WebView时，直接使用这个WebView加载对应网页，并展示。<br>这种方法可以比较有效的减少WebView在App中的首次打开时间。当用户访问页面时，不需要初始化WebView的时间。</p><p>当然这也带来了一些问题，包括：</p><p>额外的内存消耗。<br>页面间跳转需要清空上一个页面的痕迹，更容易内存泄露。</p><h5 id="2、APP端代理网络请求"><a href="#2、APP端代理网络请求" class="headerlink" title="2、APP端代理网络请求"></a>2、APP端代理网络请求</h5><p>在客户端初始化WebView的同时，直接由APP端开始网络请求数据；<br>当页面初始化完成后，向客户端获取其代理请求的数据。</p><p>此方法虽然不能减小WebView初始化时间，但数据请求和WebView初始化可以并行进行，总体的页面加载时间就缩短了；缩短总体的页面加载时间：</p><h5 id="3、WebView采用和客户端API相同的域名"><a href="#3、WebView采用和客户端API相同的域名" class="headerlink" title="3、WebView采用和客户端API相同的域名"></a>3、WebView采用和客户端API相同的域名</h5><p>DNS会在系统级别进行缓存，对于WebView的地址，如果使用的域名与native的API相同，则可以直接使用缓存的DNS。</p><p>根据上面的统计，至少10%的用户打开WebView时耗费了60ms在DNS上面，如果WebView的域名与App的API域名统一，则可以让WebView的DNS时间全部达到1.3ms的量级。</p><p>静态资源同理，最好与客户端的资源域名保持一致。</p><h5 id="4、资源预加载"><a href="#4、资源预加载" class="headerlink" title="4、资源预加载"></a>4、资源预加载</h5><p>预加载WebView对象 &amp; 预加载H5资源</p><p>Application启动或者其他时机预加载WebView对象，WebView初始化之后，即使WebView已经释放，但一些公用的资源仍未释放</p><p>构建WebView对象池，采用多个WebView对象重复使用，而不需要每次打开H5都创建对象</p><h5 id="5、离线资源包等"><a href="#5、离线资源包等" class="headerlink" title="5、离线资源包等"></a>5、离线资源包等</h5><ul><li>事先将更新频率较低、常用 &amp; 固定的H5静态资源 文件（如JS、CSS文件、图片等） 放到本地</li><li>拦截H5页面的资源网络请求 并进行检测</li><li>如果检测到本地具有相同的静态资源 就 直接从本地读取进行替换 而 不发送该资源的网络请求 到 服务器获取</li><li>资源包更新策略，增量更新等</li></ul><p>目前客户端缓存策略：</p><p>H5加载—拦截网络请求进行资源监测—本地是否具有相同的资源—-Y —- 不发送网络请求—-取本地资源—-结束<br>                                                  —-N —- 继续发送网络请求—资源缓存本地—-结束</p><p>具体实现：重写<code>WebViewClient</code>的<code>shouldInterceptRequest</code>方法，进行本地资源监测和替换</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">shouldInterceptRequest</span><span class="params">(view: <span class="type">WebView</span>, url: <span class="type">String</span>?)</span></span>: WebResourceResponse? &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (!mIsEnableCache) &#123;</span><br><span class="line">        <span class="keyword">super</span>.shouldInterceptRequest(view, url)</span><br><span class="line">    &#125; <span class="keyword">else</span> webViewCacheManage.getWebResourceResponse(<span class="keyword">this</span>, url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TargetApi(Build.VERSION_CODES.LOLLIPOP)</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">shouldInterceptRequest</span><span class="params">(view: <span class="type">WebView</span>, request: <span class="type">WebResourceRequest</span>?)</span></span>: WebResourceResponse? &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">if</span> (!mIsEnableCache) &#123;</span><br><span class="line">        <span class="keyword">super</span>.shouldInterceptRequest(view, request)</span><br><span class="line">    &#125; <span class="keyword">else</span> webViewCacheManage.getWebResourceResponse(<span class="keyword">this</span>, request?.url?.toString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优点：</p><ul><li>有效解决 H5页面静态资源 加载速度慢 &amp; 流量消耗多的问题</li><li>开发成本低，没有改变前端H5的任何代码，只需APP端开发</li><li>配置灵活，支持自定义缓存策略，自定义缓存类型等</li></ul><p>缺点：</p><ul><li>缓存的Key依赖前端资源中的url，如果前端资源需要更新则必须要更改名字</li><li>资源文件的缓存只有在第二次打开页面才会生效</li></ul><p>TODO：</p><ul><li>资源预加载方案，WebView预初始化</li><li>针对单个页面独立配置</li><li>完善资源缓存方案</li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://tech.meituan.com/WebViewPerf.html" target="_blank" rel="noopener">WebView性能、体验分析与优化</a><br><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&amp;mid=2651229156&amp;idx=1&amp;sn=fdd48acd893ddd11ccd2460c46a3c2d1" target="_blank" rel="noopener">WebView缓存原理分析和应用</a><br><a href="https://www.jianshu.com/p/5e7075f4875f" target="_blank" rel="noopener">Android：手把手教你构建 全面的WebView 缓存机制 &amp; 资源加载方案</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h4&gt;&lt;p&gt;对于WebView的性能，给人最直观的莫过于：打开速度比native慢。&lt;br&gt;是的，当我们打开一个WebView页面，页面往往会慢吞吞的loading很久，若干秒后才出现你所需要看到的页面。这是为什么呢？&lt;/p&gt;
    
    </summary>
    
      <category term="WebView" scheme="http://android9527.com/categories/WebView/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="WebView" scheme="http://android9527.com/tags/WebView/"/>
    
  </entry>
  
  <entry>
    <title>自签名证书实现HTTPS单双向认证</title>
    <link href="http://android9527.com/2018/06/02/2018-06-02-%E8%87%AA%E7%AD%BE%E5%90%8D%E8%AF%81%E4%B9%A6%E5%AE%9E%E7%8E%B0HTTPS%E5%8D%95%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81/"/>
    <id>http://android9527.com/2018/06/02/2018-06-02-自签名证书实现HTTPS单双向认证/</id>
    <published>2018-06-01T16:00:00.000Z</published>
    <updated>2018-06-08T02:31:50.195Z</updated>
    
    <content type="html"><![CDATA[<h4 id="自签名证书生成过程"><a href="#自签名证书生成过程" class="headerlink" title="自签名证书生成过程"></a>自签名证书生成过程</h4><p>对于向权威机构申请过证书的网络地址,用OkHttp或者HttpsURLConnection都可以直接访问，不需要做额外的事情。但是申请证书要$$的，所以开发的时候我们接口经常是使用自签名证书，或者即使上线了也还是用自签名的</p><h4 id="使用keytool生成证书"><a href="#使用keytool生成证书" class="headerlink" title="使用keytool生成证书"></a>使用keytool生成证书</h4><p>keytool是JDK提供的管理加密密钥、X.509证书链和可信证书密钥库的简便工具。可以直接在终端或DOC窗口输入keytool命令来查看帮助。<br><a id="more"></a></p><h4 id="单向认证"><a href="#单向认证" class="headerlink" title="单向认证"></a>单向认证</h4><h5 id="一、生成密钥对"><a href="#一、生成密钥对" class="headerlink" title="一、生成密钥对"></a>一、生成密钥对</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias server -keyalg RSA -keystore server.jks</span><br></pre></td></tr></table></figure><p>-alias后面跟的是唯一别名，-keystore后面填保存秘钥对的文件路径<br>还可以添加一个-validity 天数声明有效期</p><p>需要注意的地方：执行命令之后第一个问题让你输入名字的地方最好设置成域名，比如这样baidu.com</p><h5 id="二、导出证书"><a href="#二、导出证书" class="headerlink" title="二、导出证书"></a>二、导出证书</h5><p>上面生成了服务端使用的密钥对，现在可以通过它生成证书给客户端使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -export -alias server -storepass 123456 -keystore server.jks -file server.cer</span><br></pre></td></tr></table></figure><p>-storepass后面跟的是你刚才设置的密码,不加这个也没关系，它会主动问你！；-file设置了保存证书的路径</p><h5 id="三、服务端配置"><a href="#三、服务端配置" class="headerlink" title="三、服务端配置"></a>三、服务端配置</h5><p>这里我使用tomcat8进行测试，它的配置很简单，修改tomcat目录下的conf/server.xml文件，添加如下内容，这里设置了端口号为8443</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span><br><span class="line">            maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</span><br><span class="line">            clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot;</span><br><span class="line">            keystoreFile=&quot;密钥库文件路径，也就是.jks文件&quot;</span><br><span class="line">            keystorePass=&quot;密码&quot; /&gt;</span><br></pre></td></tr></table></figure><h5 id="四、安卓端配置"><a href="#四、安卓端配置" class="headerlink" title="四、安卓端配置"></a>四、安卓端配置</h5><p>此时PC端访问服务器时提示警告</p><p><img src="/images/https/单向验证提示.jpeg" alt="单向验证提示"></p><p>在客户端未配置前采用HTTPS请求服务器时抛出异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">05-31 15:47:41.190 26222-26616/io.github.android9527.httpsapplication I/System.out: OKHTTP3 ----&gt;&lt;-- HTTP FAILED: javax.net.ssl.SSLHandshakeException: Handshake failed</span><br><span class="line">05-31 15:47:41.190 26222-26616/io.github.android9527.httpsapplication W/System.err: javax.net.ssl.SSLHandshakeException: Handshake failed</span><br><span class="line">        at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:396)</span><br><span class="line">        at okhttp3.internal.connection.RealConnection.connectTls(RealConnection.java:302)</span><br><span class="line">        at okhttp3.internal.connection.RealConnection.establishProtocol(RealConnection.java:270)</span><br><span class="line">        at okhttp3.internal.connection.RealConnection.connect(RealConnection.java:162)</span><br><span class="line">        at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)</span><br><span class="line">        at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)</span><br><span class="line">        at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)</span><br><span class="line">        at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br></pre></td></tr></table></figure></p><ul><li><p>加载证书<br>把之前生成的证书（.cer）放到安卓项目的assets或者raw目录下，读取文件流用以下方法获取SSLSocketFactory 。</p></li><li><p>OkHttpClient配置<br>在OkHttp中使用很简单，获取SSLSocketFactory之后通过OkHttp的构建方法传入就行了。<br>使用的OkHttp版本是3.10.0。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OkHttpClient client = new OkHttpClient.Builder()</span><br><span class="line">                .sslSocketFactory(sslSocketFactory)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">HttpsURLConnection.setSSLSocketFactory(sslSocketFactory);</span><br></pre></td></tr></table></figure><p>设置完之后你就可以访问该证书对应的域名地址了，不需要别的附加操作了。</p><h4 id="双向验证"><a href="#双向验证" class="headerlink" title="双向验证"></a>双向验证</h4><p>双向认证需要两个密钥实体，一个放服务端一个放客户端。<br>前面我们已经实现单向的认证，现在只需要给客户端生成一个密钥库，并且让服务端信任客户端就可以了。</p><h5 id="一、生成客户端密钥"><a href="#一、生成客户端密钥" class="headerlink" title="一、生成客户端密钥"></a>一、生成客户端密钥</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias android -keyalg RSA -keystore android.jks</span><br></pre></td></tr></table></figure><h5 id="二、导出客户端证书（字符串形式）"><a href="#二、导出客户端证书（字符串形式）" class="headerlink" title="二、导出客户端证书（字符串形式）"></a>二、导出客户端证书（字符串形式）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -keystore android.jks -alias android -exportcert -rfc &gt; android.pem</span><br></pre></td></tr></table></figure><p>将导出的证书添加信任到服务端的密钥库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -importcert -trustcacerts -alias android -keystore server.jks -file android.pem</span><br></pre></td></tr></table></figure></p><h5 id="三、服务端配置-1"><a href="#三、服务端配置-1" class="headerlink" title="三、服务端配置"></a>三、服务端配置</h5><p>修改tomcat目录下的conf/server.xml文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span><br><span class="line">            maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</span><br><span class="line">            sslProtocol=&quot;TLS&quot;</span><br><span class="line">            keystoreFile=&quot;密钥库文件路径，也就是.jks文件&quot;</span><br><span class="line">            keystorePass=&quot;密码&quot;</span><br><span class="line">            //修改两条内容，其它和之前单向认证一样就行</span><br><span class="line">            clientAuth=&quot;true&quot;</span><br><span class="line">            truststoreFile=&quot;和keystoreFile填一样&quot; /&gt;</span><br></pre></td></tr></table></figure><h5 id="四、安卓端配置-1"><a href="#四、安卓端配置-1" class="headerlink" title="四、安卓端配置"></a>四、安卓端配置</h5><p>此时PC端访问服务器时提示警告</p><p><img src="/images/https/双向验证提示.jpeg" alt="双向验证提示"></p><p>在未配置前采用HTTPS请求服务器时抛出异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">05-31 15:47:41.190 26222-26616/io.github.android9527.httpsapplication I/System.out: OKHTTP3 ----&gt;&lt;-- HTTP FAILED: javax.net.ssl.SSLHandshakeException: Handshake failed</span><br><span class="line">05-31 15:47:41.190 26222-26616/io.github.android9527.httpsapplication W/System.err: javax.net.ssl.SSLHandshakeException: Handshake failed</span><br><span class="line">        at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:396)</span><br><span class="line">        at okhttp3.internal.connection.RealConnection.connectTls(RealConnection.java:302)</span><br><span class="line">        at okhttp3.internal.connection.RealConnection.establishProtocol(RealConnection.java:270)</span><br><span class="line">        at okhttp3.internal.connection.RealConnection.connect(RealConnection.java:162)</span><br><span class="line">        at okhttp3.internal.connection.StreamAllocation.findConnection(StreamAllocation.java:257)</span><br><span class="line">        at okhttp3.internal.connection.StreamAllocation.findHealthyConnection(StreamAllocation.java:135)</span><br><span class="line">        at okhttp3.internal.connection.StreamAllocation.newStream(StreamAllocation.java:114)</span><br><span class="line">        at okhttp3.internal.connection.ConnectInterceptor.intercept(ConnectInterceptor.java:42)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:147)</span><br><span class="line">        at okhttp3.internal.http.RealInterceptorChain.proceed(RealInterceptorChain.java:121)</span><br></pre></td></tr></table></figure><p>刚才生成了客户端的密钥库android.jks。但是安卓默认是不支持jks格式的！比较常规的解决方式是用<code>Portecle</code>工具将它转换成bks文件。</p><p>点这里下载<code>Portecle</code>工具（<a href="https://sourceforge.net/projects/portecle/?source=typ_redirect）" target="_blank" rel="noopener">https://sourceforge.net/projects/portecle/?source=typ_redirect）</a></p><p>下载完之后解压并在目录下运行命令：java -jar portecle.jar 打开</p><p>运行之后就会出来UI界面，用它打开android.jks然后选菜单 Tools –&gt; Change Keystore Type –&gt; BKS 在弹出框输入密码进行转换，最后别忘记选菜单 File –&gt; Save Keystore As 将它另存为android.kbs(名字随意)</p><p>生成kbs文件之后，把它放到安卓的目录下assets或者raw。</p><p>然后把获取SSLSocketFactory的方法改成下面这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">String keyStoreType2 = <span class="string">"BKS"</span>;</span><br><span class="line">KeyStore keyStore2 = KeyStore.getInstance(keyStoreType2);</span><br><span class="line">keyStore2.load(key, keyPassword.toCharArray());</span><br><span class="line"></span><br><span class="line">String kmfAlgorithm = KeyManagerFactory.getDefaultAlgorithm();</span><br><span class="line">KeyManagerFactory kmf = KeyManagerFactory.getInstance(kmfAlgorithm);</span><br><span class="line">kmf.init(keyStore2,keyPassword.toCharArray());</span><br><span class="line"></span><br><span class="line">sslContext = SSLContext.getInstance(<span class="string">"TLS"</span>);</span><br><span class="line">sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>上面的都改完之后，双向验证的配置就完成了。你可以打开浏览器访问下你配置好的地址，应该不能访问，提示你:不接受您的登录证书，或者您的登录证书可能已过期。因为你的系统没有加入刚才生成的客户端密钥库，安卓端像上面一样设置完SSLSocketFactory就可以正常访问了。</p><h4 id="源码地址-https-github-com-android9527-HttpsApplication"><a href="#源码地址-https-github-com-android9527-HttpsApplication" class="headerlink" title="源码地址 (https://github.com/android9527/HttpsApplication/)"></a>源码地址 (<a href="https://github.com/android9527/HttpsApplication/" target="_blank" rel="noopener">https://github.com/android9527/HttpsApplication/</a>)</h4><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://blog.majiajie.me/2016/05/11/Android-%E5%81%B6%E9%81%87HTTPS/" target="_blank" rel="noopener">Android 偶遇HTTPS</a></p><p><a href="http://pingguohe.net/2016/02/26/Android-App-secure-ssl.html" target="_blank" rel="noopener">苹果核 - Android App 安全的HTTPS 通信</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;自签名证书生成过程&quot;&gt;&lt;a href=&quot;#自签名证书生成过程&quot; class=&quot;headerlink&quot; title=&quot;自签名证书生成过程&quot;&gt;&lt;/a&gt;自签名证书生成过程&lt;/h4&gt;&lt;p&gt;对于向权威机构申请过证书的网络地址,用OkHttp或者HttpsURLConnection都可以直接访问，不需要做额外的事情。但是申请证书要$$的，所以开发的时候我们接口经常是使用自签名证书，或者即使上线了也还是用自签名的&lt;/p&gt;
&lt;h4 id=&quot;使用keytool生成证书&quot;&gt;&lt;a href=&quot;#使用keytool生成证书&quot; class=&quot;headerlink&quot; title=&quot;使用keytool生成证书&quot;&gt;&lt;/a&gt;使用keytool生成证书&lt;/h4&gt;&lt;p&gt;keytool是JDK提供的管理加密密钥、X.509证书链和可信证书密钥库的简便工具。可以直接在终端或DOC窗口输入keytool命令来查看帮助。&lt;br&gt;
    
    </summary>
    
      <category term="HTTPS" scheme="http://android9527.com/categories/HTTPS/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="HTTPS" scheme="http://android9527.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>Android App 安全的HTTPS 通信</title>
    <link href="http://android9527.com/2018/06/01/2018-06-01-Android%20App%20%E5%AE%89%E5%85%A8%E7%9A%84HTTPS%20%E9%80%9A%E4%BF%A1/"/>
    <id>http://android9527.com/2018/06/01/2018-06-01-Android App 安全的HTTPS 通信/</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2018-06-01T08:17:48.187Z</updated>
    
    <content type="html"><![CDATA[<h5 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h5><p>对于数字证书相关概念、Android 里 https 通信代码就不再复述了，直接讲问题。缺少相应的安全校验很容易导致中间人攻击，而漏洞的形式主要有以下3种：</p><ul><li>自定义<code>X509TrustManager</code>。<br>在使用HttpsURLConnection发起 HTTPS 请求的时候，提供了一个自定义的X509TrustManager，<br>未实现安全校验逻辑，下面片段就是常见的容易犯错的代码片段。如果不提供自定义的X509TrustManager，<br>代码运行起来可能会报异常（原因下文解释），初学者就很容易在不明真相的情况下提供了一个自定义的X509TrustManager，<br>却忘记正确地实现相应的方法。本文重点介绍这种场景的处理方式。<a id="more"></a></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义X509TrustManager，存在安全漏洞</span></span><br><span class="line"><span class="comment"> * 跳过证书校验</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnSafeTrustManager</span> <span class="keyword">implements</span> <span class="title">X509TrustManager</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">        <span class="comment">//do nothing，接受任意客户端证书</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">        <span class="comment">//do nothing，接受任意服务端证书</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>自定义了<code>HostnameVerifier</code>。<br>在握手期间，如果 URL 的主机名和服务器的标识主机名不匹配，则验证机制可以回调此接口的实现程序来确定是否应该允许此连接。<br>如果回调内实现不恰当，默认接受所有域名，则有安全风险。代码示例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by chenfeiyue on 2018/6/1.</span></span><br><span class="line"><span class="comment"> * Description ：UnSafeHostnameVerifier</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnSafeHostnameVerifier</span> <span class="keyword">implements</span> <span class="title">HostnameVerifier</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String hostname, SSLSession session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Always return true，接受任意域名服务器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HttpsURLConnection.setDefaultHostnameVerifier(<span class="keyword">new</span> UnSafeHostnameVerifier());</span><br></pre></td></tr></table></figure><h4 id="修复方案"><a href="#修复方案" class="headerlink" title="修复方案"></a>修复方案</h4><p>分而治之，针对不同的漏洞点分别描述，这里就讲的修复方案主要是针对非浏览器App，非浏览器 App 的服务端通信对象比较固定，一般都是自家服务器，可以做很多特定场景的定制化校验。如果是浏览器 App，校验策略就有更通用一些。</p><ul><li>自定义X509TrustManager。前面说到，当发起 HTTPS 请求时，可能抛起一个异常，以下面这段代码为例（来自官方文档）：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    URL url = <span class="keyword">new</span> URL(<span class="string">"https://certs.cac.washington.edu/CAtest/"</span>);</span><br><span class="line">    URLConnection urlConnection = url.openConnection();</span><br><span class="line">    InputStream in = urlConnection.getInputStream();</span><br><span class="line">    copyInputStreamToOutputStream(in, System.out);</span><br><span class="line">&#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">copyInputStreamToOutputStream</span><span class="params">(InputStream in, PrintStream out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((c = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        out.write(buffer, <span class="number">0</span>, c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它会抛出一个<code>SSLHandshakeException</code>的异常。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">javax.net.ssl.SSLHandshakeException: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.</span><br><span class="line">    at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:322)</span><br><span class="line">    at com.android.okhttp.Connection.upgradeToTls(Connection.java:201)</span><br><span class="line">    at com.android.okhttp.Connection.connect(Connection.java:155)</span><br><span class="line">    at com.android.okhttp.internal.http.HttpEngine.connect(HttpEngine.java:276)</span><br><span class="line">    at com.android.okhttp.internal.http.HttpEngine.sendRequest(HttpEngine.java:211)</span><br><span class="line">    at com.android.okhttp.internal.http.HttpURLConnectionImpl.execute(HttpURLConnectionImpl.java:382)</span><br><span class="line">    at com.android.okhttp.internal.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:332)</span><br><span class="line">    at com.android.okhttp.internal.http.HttpURLConnectionImpl.getInputStream(HttpURLConnectionImpl.java:199)</span><br><span class="line">    at com.android.okhttp.internal.http.DelegatingHttpsURLConnection.getInputStream(DelegatingHttpsURLConnection.java:210)</span><br><span class="line">    at com.android.okhttp.internal.http.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:25)</span><br><span class="line">    at me.longerian.abcandroid.datetimepicker.TestDateTimePickerActivity$1.run(TestDateTimePickerActivity.java:236)</span><br><span class="line">Caused by: java.security.cert.CertificateException: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.</span><br><span class="line">    at com.android.org.conscrypt.TrustManagerImpl.checkTrusted(TrustManagerImpl.java:318)</span><br><span class="line">    at com.android.org.conscrypt.TrustManagerImpl.checkServerTrusted(TrustManagerImpl.java:219)</span><br><span class="line">    at com.android.org.conscrypt.Platform.checkServerTrusted(Platform.java:114)</span><br><span class="line">    at com.android.org.conscrypt.OpenSSLSocketImpl.verifyCertificateChain(OpenSSLSocketImpl.java:550)</span><br><span class="line">    at com.android.org.conscrypt.NativeCrypto.SSL_do_handshake(Native Method)</span><br><span class="line">    at com.android.org.conscrypt.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:318)</span><br><span class="line"> ... 10 more</span><br><span class="line">Caused by: java.security.cert.CertPathValidatorException: Trust anchor for certification path not found.</span><br><span class="line"> ... 16 more</span><br></pre></td></tr></table></figure><p>Android 手机有一套共享证书的机制，如果目标 URL 服务器下发的证书不在已信任的证书列表里，或者该证书是自签名的，不是由权威机构颁发，那么会出异常。对于我们这种非浏览器 app 来说，如果提示用户去下载安装证书，可能会显得比较诡异。幸好还可以通过自定义的验证机制让证书通过验证。验证的思路有两种：</p><h5 id="方案1"><a href="#方案1" class="headerlink" title="方案1"></a>方案1</h5><p>不论是权威机构颁发的证书还是自签名的，打包一份到 app 内部，比如存放在 asset 里。通过这份内置的证书初始化一个KeyStore，然后用这个KeyStore去引导生成的TrustManager来提供验证，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</span><br><span class="line">  <span class="comment">// uwca.crt 打包在 asset 中，该证书可以从https://itconnect.uw.edu/security/securing-computer/install/safari-os-x/下载</span></span><br><span class="line">  InputStream caInput = <span class="keyword">new</span> BufferedInputStream(getAssets().open(<span class="string">"uwca.crt"</span>));</span><br><span class="line">  Certificate ca;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">      ca = cf.generateCertificate(caInput);</span><br><span class="line">      Log.i(<span class="string">"Longer"</span>, <span class="string">"ca="</span> + ((X509Certificate) ca).getSubjectDN());</span><br><span class="line">      Log.i(<span class="string">"Longer"</span>, <span class="string">"key="</span> + ((X509Certificate) ca).getPublicKey();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      caInput.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a KeyStore containing our trusted CAs</span></span><br><span class="line">  String keyStoreType = KeyStore.getDefaultType();</span><br><span class="line">  KeyStore keyStore = KeyStore.getInstance(keyStoreType);</span><br><span class="line">  keyStore.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">  keyStore.setCertificateEntry(<span class="string">"ca"</span>, ca);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a TrustManager that trusts the CAs in our KeyStore</span></span><br><span class="line">  String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();</span><br><span class="line">  TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmfAlgorithm);</span><br><span class="line">  tmf.init(keyStore);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create an SSLContext that uses our TrustManager</span></span><br><span class="line">  SSLContext context = SSLContext.getInstance(<span class="string">"TLSv1"</span>,<span class="string">"AndroidOpenSSL"</span>);</span><br><span class="line">  context.init(<span class="keyword">null</span>, tmf.getTrustManagers(), <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">  URL url = <span class="keyword">new</span> URL(<span class="string">"https://certs.cac.washington.edu/CAtest/"</span>);</span><br><span class="line">  HttpsURLConnection urlConnection =</span><br><span class="line">          (HttpsURLConnection)url.openConnection();</span><br><span class="line">  urlConnection.setSSLSocketFactory(context.getSocketFactory());</span><br><span class="line">  InputStream in = urlConnection.getInputStream();</span><br><span class="line">  copyInputStreamToOutputStream(in, System.out);</span><br><span class="line">&#125; <span class="keyword">catch</span> (CertificateException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (KeyStoreException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (KeyManagementException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchProviderException e) &#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方案2"><a href="#方案2" class="headerlink" title="方案2"></a>方案2</h5><p>同方案1，打包一份到证书到 app 内部，但不通过<code>KeyStore</code>去引导生成的<code>TrustManager</code>，而是干脆直接自定义一个<code>TrustManager</code>，自己实现校验逻辑；校验逻辑主要包括：</p><ul><li>服务器证书是否过期</li><li>证书签名是否合法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchProviderException;</span><br><span class="line"><span class="keyword">import</span> java.security.SignatureException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.X509TrustManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by chenfeiyue on 2018/6/1.</span></span><br><span class="line"><span class="comment"> * Description ：自定义TrustManager 校验服务端证书，有效期等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SafeTrustManager</span> <span class="keyword">implements</span> <span class="title">X509TrustManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Context mContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SafeTrustManager</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mContext = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 此处存放服务器证书密钥 */</span></span><br><span class="line"><span class="comment">//    private static final String PUB_KEY =</span></span><br><span class="line"><span class="comment">//            "30820122300d06092a864886f70d01010105000382010f003082010a0282010100add086cfc3df3bcf54bffb4e044a911cc0eadbab61ead529a96525833a1a00f75df3d746e11666dbdf4ed8594c4f9194456a49a32a3dce999d9679d2cbc59cf9082935517e35a0706f1041ad053b727c9c92a47507d0313cf5b3788c609733255a89d40c6a8b8d1a90f0761e7dacf117e43fe1b5ae093e160f902a42433ebd57f91cf27b88cd46dcebb85aa0b33c6a48771ca445ace6f6668626d60156eecd1fc2feb282809f8f835b5f5c457890694f495fbf1620070b4a18094c44680beafac05c59ba062b2e889cc8e6a5feca13c3e473700858aceeac0e25f2ba0bfdf44b1040a9ecb15a3f7ea91a366baeeed02f0af78f982d5d0db854bf9476db5f15c10203010001";</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (X509Certificate cert : chain) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Make sure that it hasn't expired.</span></span><br><span class="line">            cert.checkValidity();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Verify the certificate's public key chain.</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                X509Certificate x509Certificate = TLSSocketFactory.getX509Certificate(mContext);</span><br><span class="line">                cert.verify(x509Certificate.getPublicKey());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvalidKeyException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchProviderException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SignatureException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样上述代码只能访问 certs.cac.washington.edu 相关域名地址，如果访问 <a href="https://www.taobao.com/" target="_blank" rel="noopener">https://www.taobao.com/</a> 或者 <a href="https://www.baidu.com/" target="_blank" rel="noopener">https://www.baidu.com/</a> ，则会在cert.verify(((X509Certificate) ca).getPublicKey());处抛异常，导致连接失败。</p><ul><li>自定义HostnameVerifier，简单的话就是根据域名进行字符串匹配校验；业务复杂的话，还可以结合配置中心、白名单、黑名单、正则匹配等多级别动态校验；总体来说逻辑还是比较简单的，反正只要正确地实现那个方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">HostnameVerifier hnv = <span class="keyword">new</span> HostnameVerifier() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String hostname, SSLSession session)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//示例</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">"yourhostname"</span>.equals(hostname))&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      HostnameVerifier hv =</span><br><span class="line">            HttpsURLConnection.getDefaultHostnameVerifier();</span><br><span class="line">      <span class="keyword">return</span> hv.verify(hostname, session);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://pingguohe.net/2016/02/26/Android-App-secure-ssl.html" target="_blank" rel="noopener">苹果核 - Android App 安全的HTTPS 通信</a><br><a href="https://developer.android.com/training/articles/security-ssl" target="_blank" rel="noopener">通过 HTTPS 和 SSL 确保安全</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;漏洞描述&quot;&gt;&lt;a href=&quot;#漏洞描述&quot; class=&quot;headerlink&quot; title=&quot;漏洞描述&quot;&gt;&lt;/a&gt;漏洞描述&lt;/h5&gt;&lt;p&gt;对于数字证书相关概念、Android 里 https 通信代码就不再复述了，直接讲问题。缺少相应的安全校验很容易导致中间人攻击，而漏洞的形式主要有以下3种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义&lt;code&gt;X509TrustManager&lt;/code&gt;。&lt;br&gt;在使用HttpsURLConnection发起 HTTPS 请求的时候，提供了一个自定义的X509TrustManager，&lt;br&gt;未实现安全校验逻辑，下面片段就是常见的容易犯错的代码片段。如果不提供自定义的X509TrustManager，&lt;br&gt;代码运行起来可能会报异常（原因下文解释），初学者就很容易在不明真相的情况下提供了一个自定义的X509TrustManager，&lt;br&gt;却忘记正确地实现相应的方法。本文重点介绍这种场景的处理方式。
    
    </summary>
    
      <category term="HTTPS" scheme="http://android9527.com/categories/HTTPS/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="HTTPS" scheme="http://android9527.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>SSL单向认证和双向认证说明</title>
    <link href="http://android9527.com/2018/06/01/2018-06-01-SSL%E5%8D%95%E5%90%91%E8%AE%A4%E8%AF%81%E5%92%8C%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81%E8%AF%B4%E6%98%8E/"/>
    <id>http://android9527.com/2018/06/01/2018-06-01-SSL单向认证和双向认证说明/</id>
    <published>2018-05-31T16:00:00.000Z</published>
    <updated>2018-06-01T08:10:49.589Z</updated>
    
    <content type="html"><![CDATA[<h4 id="SSL单向认证具体过程"><a href="#SSL单向认证具体过程" class="headerlink" title="SSL单向认证具体过程"></a>SSL单向认证具体过程</h4><ul><li>客户端的浏览器向服务器传送客户端SSL协议的版本号，加密算法的种类，产生的随机数，以及其他服务器和客户端之间通讯所需要的各种信息。</li><li>服务器向客户端传送SSL协议的版本号，加密算法的种类，随机数以及其他相关信息，同时服务器还将向客户端传 送自己的证书。</li><li>客户利用服务器传过来的信息验证服务器的合法性，服务器的合法性包括：证书是否过期，发行服务器证书的CA是否可靠，发行者证书的公钥能否正确解开服务器证书的”发行者的数字签名，服务器证书的域名是否和服务器的<a id="more"></a></li><li>实际域名相匹配。如果合法性验证没有通过，通讯将断开;如果合法性验证通过，将继续进行第四步。</li><li>用户端随机产生一个用于后面通讯的”对称密码”，然后用服务器的公钥(服务器的公钥从第二步中的服务器的证书中获得)对其加密，然后将加密后的”预主密码”传给服务器。</li><li>如果服务器要求客户的身份认证(在握手过程中为可选)，用户可以建立一个随机数然后对其进行数据签名，将这个含有签名的随机数和客户自己的证书以及加密过的”预主密码”一起传给服务器。</li></ul><h4 id="SSL双向认证具体过程"><a href="#SSL双向认证具体过程" class="headerlink" title="SSL双向认证具体过程"></a>SSL双向认证具体过程</h4><ul><li>浏览器发送一个连接请求给安全服务器。</li><li>服务器将自己的证书，以及同证书相关的信息发送给客户浏览器。</li><li>客户浏览器检查服务器送过来的证书是否是由自己信赖的CA中心所签发的。如果是，就继续执行协议; 如果不是，客户浏览器就给客户一个警告消息：警告客户这个证书不是可以信赖的，询问客户是否需要继续。</li><li>接着客户浏览器比较证书里的消息，例如域名和公钥，与服务器刚刚发送的相关消息是否一致，如果是一致的，</li><li>客户浏览器认可这个服务器的合法身份。</li><li>服务器要求客户发送客户自己的证书。收到后，服务器验证客户的证书，如果没有通过验证，拒绝连接;如果通过验证，服务器获得用户的公钥。</li><li>客户浏览器告诉服务器自己所能够支持的通讯对称密码方案。</li><li>服务器从客户发送过来的密码方案中，选择一种加密程度最高的密码方案，用客户的公钥加过密后通知浏览器。</li><li>浏览器针对这个密码方案，选择一个通话密钥，接着用服务器的公钥加过密后发送给服务器。</li><li>服务器接收到浏览器送过来的消息，用自己的私钥解密，获得通话密钥。</li><li>服务器、浏览器接下来的通讯都是用对称密码方案，对称密钥是加过密的。</li></ul><p>双向认证则是需要服务端与客户端提供身份认证，只能是服务端允许的客户能去访问，安全性相对较高一些</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;SSL单向认证具体过程&quot;&gt;&lt;a href=&quot;#SSL单向认证具体过程&quot; class=&quot;headerlink&quot; title=&quot;SSL单向认证具体过程&quot;&gt;&lt;/a&gt;SSL单向认证具体过程&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;客户端的浏览器向服务器传送客户端SSL协议的版本号，加密算法的种类，产生的随机数，以及其他服务器和客户端之间通讯所需要的各种信息。&lt;/li&gt;
&lt;li&gt;服务器向客户端传送SSL协议的版本号，加密算法的种类，随机数以及其他相关信息，同时服务器还将向客户端传 送自己的证书。&lt;/li&gt;
&lt;li&gt;客户利用服务器传过来的信息验证服务器的合法性，服务器的合法性包括：证书是否过期，发行服务器证书的CA是否可靠，发行者证书的公钥能否正确解开服务器证书的”发行者的数字签名，服务器证书的域名是否和服务器的
    
    </summary>
    
      <category term="HTTPS" scheme="http://android9527.com/categories/HTTPS/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="HTTPS" scheme="http://android9527.com/tags/HTTPS/"/>
    
      <category term="SSL" scheme="http://android9527.com/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>Fiddler抓取HTTPS原理</title>
    <link href="http://android9527.com/2018/05/21/2018-05-21-%EF%BB%BFFiddler%E6%8A%93%E5%8F%96HTTPS%E5%8E%9F%E7%90%86/"/>
    <id>http://android9527.com/2018/05/21/2018-05-21-﻿Fiddler抓取HTTPS原理/</id>
    <published>2018-05-20T16:00:00.000Z</published>
    <updated>2018-06-01T08:23:18.483Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Fiddler抓取HTTPS原理"><a href="#Fiddler抓取HTTPS原理" class="headerlink" title="Fiddler抓取HTTPS原理"></a>Fiddler抓取HTTPS原理</h4><ul><li>首先fiddler截获客户端浏览器发送给服务器的https请求， 此时还未建立握手。</li><li>fiddler向服务器发送请求进行握手， 获取到服务器的CA证书， 用根证书公钥进行解密， 验证服务器数据签名， 获取到服务器CA证书公钥。</li><li>fiddler伪造自己的CA证书， 冒充服务器证书传递给客户端浏览器， 客户端浏览器做跟fiddler一样的事。</li><li>客户端浏览器生成https通信用的对称密钥， 用fiddler伪造的证书公钥加密后传递给服务器， 被fiddler截获。<a id="more"></a></li><li>fiddler将截获的密文用自己伪造证书的私钥解开， 获得https通信用的对称密钥。</li><li>fiddler将对称密钥用服务器证书公钥加密传递给服务器， 服务器用私钥解开后建立信任， 握手完成， 用对称密钥加密消息， 开始通信。</li><li>fiddler接收到服务器发送的密文， 用对称密钥解开， 获得服务器发送的明文。再次加密， 发送给客户端浏览器。</li><li>客户端向服务器发送消息， 用对称密钥加密， 被fidller截获后， 解密获得明文。由于fiddler一直拥有通信用对称密钥， 所以在整个https通信过程中信息对其透明。</li></ul><h4 id="为什么使用了HTTPS还是可以被抓包"><a href="#为什么使用了HTTPS还是可以被抓包" class="headerlink" title="﻿为什么使用了HTTPS还是可以被抓包"></a>﻿为什么使用了HTTPS还是可以被抓包</h4><ul><li>https把流量加密了，正常抓包，你看到的内容是一堆乱码。</li><li>https的加密没有安全问题，但它只是用来防止通信过程中被第三方获取明文。如果黑客能直接控制通信的双方（你的电脑，或服务器)，那么黑客肯定能看到https明文的。</li><li>所以，你用charles之所以能看到https明文，是因为你允许了charles在你的电脑上做手脚，关键就是你同意charles在你电脑上安装证书。</li><li>具体一点，charles通过使用了https代理功能，来完成查看https明文的目的，也就是SSL中间人攻击。简单来说，你并不是直接与https的另一端通信，而是与charles通信，charles再与另一端通信，这种结构下，charles才能看到通信明文。这个问题的原理比较复杂，涉及到整套RSA系统，想了解原理的话，建议去看【信息安全】相关书籍，但这类书籍的门槛非常高。另外Fiddle也有这个功能，而且原理也一样。</li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.zhihu.com/question/24484809/answer/70126366" target="_blank" rel="noopener">Fiddler抓取HTTPS原理</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Fiddler抓取HTTPS原理&quot;&gt;&lt;a href=&quot;#Fiddler抓取HTTPS原理&quot; class=&quot;headerlink&quot; title=&quot;Fiddler抓取HTTPS原理&quot;&gt;&lt;/a&gt;Fiddler抓取HTTPS原理&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;首先fiddler截获客户端浏览器发送给服务器的https请求， 此时还未建立握手。&lt;/li&gt;
&lt;li&gt;fiddler向服务器发送请求进行握手， 获取到服务器的CA证书， 用根证书公钥进行解密， 验证服务器数据签名， 获取到服务器CA证书公钥。&lt;/li&gt;
&lt;li&gt;fiddler伪造自己的CA证书， 冒充服务器证书传递给客户端浏览器， 客户端浏览器做跟fiddler一样的事。&lt;/li&gt;
&lt;li&gt;客户端浏览器生成https通信用的对称密钥， 用fiddler伪造的证书公钥加密后传递给服务器， 被fiddler截获。
    
    </summary>
    
      <category term="HTTPS" scheme="http://android9527.com/categories/HTTPS/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="HTTPS" scheme="http://android9527.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin语法小结(3)-面向对象</title>
    <link href="http://android9527.com/2018/04/10/2018-04-10-Kotlin%E8%AF%AD%E6%B3%95%E5%B0%8F%E7%BB%93(3)-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://android9527.com/2018/04/10/2018-04-10-Kotlin语法小结(3)-面向对象/</id>
    <published>2018-04-09T16:00:00.000Z</published>
    <updated>2018-12-05T09:12:30.117Z</updated>
    
    <content type="html"><![CDATA[<h4 id="三、-面向对象"><a href="#三、-面向对象" class="headerlink" title="三、 面向对象"></a>三、 面向对象</h4><h5 id="类和继承"><a href="#类和继承" class="headerlink" title="类和继承"></a>类和继承</h5><p>Kotlin 中使⽤关键字 <code>class</code> 声明类<br>类声明由类名、 类头 （指定其类型参数、 主构造函数等） 和由⼤括号包围的类体构成。 类头和类体都是可选的； 如果⼀个类没有类体， 可以省略花括号。</p><ul><li>构造函数</li></ul><p>在 Kotlin 中的⼀个类可以有⼀个主构造函数和⼀个或多个次构造函数。 主构造函数是类头的⼀部分： 它跟在类名 （和可选的类型参数） 后。<br><a id="more"></a><br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规用法</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">constructor</span></span>(firstName: String) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果主构造函数没有任何注解或者可⻅性修饰符， 可以省略这个 constructor 关键字。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当主构造函数有注解或者可见性修饰符，需加 constructor 关键字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People2</span> <span class="keyword">public</span> <span class="meta">@Inject</span> <span class="keyword">constructor</span></span>(name: String) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若主构造函数中，不进行初始化, 可放在init&#123;&#125;中</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People3</span></span>(name: String) &#123;</span><br><span class="line">    <span class="keyword">val</span> name: String</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        println(<span class="string">"initialize"</span>)</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果类有一个主构造函数（无论有无参数），每个次构造函数需要直接或间接委托给主构造函数，用this关键字</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        println(<span class="string">"constructor"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(name: String) : <span class="keyword">this</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">constructor</span>(name: String, age: <span class="built_in">Int</span>) : <span class="keyword">this</span>(name) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>局部函数和顶层函数<br>Kotlin 支持局部函数，即一个函数在另一个函数内部<br>Kotlin中通过使用顶层函数和顶层属性减少Java中常见的静态工具类，使我们的代码更加整洁</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(i: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(m :<span class="type">Int</span>, n : <span class="type">Int</span>)</span></span> : <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m + n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> result = add(i, <span class="number">5</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>局部函数可以访问外部函数的局部变量，所以在上例中，n 可以是局部变量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(i: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> n = <span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(m :<span class="type">Int</span>)</span></span> : <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> m + n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">val</span> result = add(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>抽象类<br>类和其中的某些成员可以声明为 abstract。 抽象成员在本类中可以不⽤实现。 需要注意的是， 我们并不需要⽤ open 标注⼀个抽象类或者抽象函数</li></ul><h5 id="open"><a href="#open" class="headerlink" title="open"></a>open</h5><p>open 关键字与java 中的 final相反:它允许别的类继承这个类。默认情形下，kotlin 中所有的类和函数都是 final</p><ul><li>覆盖⽅法</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">nv</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span></span>() : Base() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">v</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Derived.v() 函数上必须加上 <code>override</code>标注。 如果没写， 编译器将会报错。 如果函数没有标注 open 如 Base.nv() ， 则⼦类中不允许定义相同签名的函数，不论加不加 override。 在⼀个 final 类中 （没有⽤ open 标注的类） ， 开放成员是禁⽌的</p><ul><li>覆盖属性<br>属性覆盖与⽅法覆盖类似； 在超类中声明然后在派⽣类中重新声明的属性必须以 override 开头， 并且它们必须具有兼容的类型。 每个声明的属性可以由<br>具有初始化器的属性或者具有 getter ⽅法的属性覆盖。</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="keyword">val</span> x: <span class="built_in">Int</span> <span class="keyword">get</span>() = <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar1</span> : <span class="type">Foo</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> x: <span class="built_in">Int</span> = <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><p>Kotlin 的接口与 Java 8 类似，既包含抽象方法的声明，也包含实现。与抽象类不同的是，接口无法保存状态。它可以有属性但必须声明为抽象或提供访问器实现。<br>使用关键字 interface 来定义接口</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">      <span class="comment">// 可选的方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现接口</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">MyInterface &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TODO函数<br>调用含有<code>TODO</code>关键字的方法将直接抛出异常</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">        TODO(<span class="string">"not implemented!"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    test()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口中的属性</li></ul><p>你可以在接口中定义属性。在接口中声明的属性要么是抽象的，要么提供访问器的实现。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> prop: <span class="built_in">Int</span> <span class="comment">// 抽象的,需要子类重写</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> propertyWithImplementation: String</span><br><span class="line">        <span class="keyword">get</span>() = <span class="string">"foo"</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        print(prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> : <span class="type">MyInterface &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> prop: <span class="built_in">Int</span> = <span class="number">29</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>解决覆盖冲突</li></ul><p>实现多个接口时，可能会遇到同一方法继承多个实现的问题。例如</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; print(<span class="string">"A"</span>) &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123; print(<span class="string">"B"</span>) &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; print(<span class="string">"bar"</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> : <span class="type">A &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123; print(<span class="string">"bar"</span>) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> : <span class="type">A</span>, <span class="type">B &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;A&gt;.foo()</span><br><span class="line">        <span class="keyword">super</span>&lt;B&gt;.foo()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">bar</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>&lt;B&gt;.bar()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，接口 A 和 B 都定义了方法 foo() 和 bar()。 两者都实现了 foo(), 但是只有 B 实现了 bar()，(bar() 在 A 中没有标记为抽象， 因为没有方法体时默认为抽象）。因为 C 是一个实现了 A 的具体类，所以必须要重写 bar() 并实现这个抽象方法。<br>然而，如果我们从 A 和 B 派生 D，我们需要实现我们从多个接口继承的所有方法，并指明 D 应该如何实现它们。这一规则既适用于继承单个实现（bar()）的方法也适用于继承多个实现（foo()）的方法。</p><h5 id="data-class，object-class，伴生对象和内部类"><a href="#data-class，object-class，伴生对象和内部类" class="headerlink" title="data class，object class，伴生对象和内部类"></a>data class，object class，伴生对象和内部类</h5><ul><li>data class</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 减少样板代码</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br></pre></td></tr></table></figure><ul><li>object class</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象声明是定义单例的一种形式</span></span><br><span class="line"><span class="comment"> * object class 等同于java 饿汉式单例</span></span><br><span class="line"><span class="comment"> * public static final ObjectTest INSTANCE = new ObjectTest();</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">object</span> ObjectTest : ArrayList&lt;String&gt;() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与 Java 或 C# 不同， 在 Kotlin 中类没有静态⽅法。 在⼤多数情况下，它建议简单地使⽤包级函数。</p><ul><li><p>伴生对象和静态成员</p></li><li><p>内部类 静态非静态，匿名内部类</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内部类</span></span><br><span class="line"><span class="comment"> * 1.kotlin 默认内部类为public static final，不能持有外部类的状态（属性、方法等）</span></span><br><span class="line"><span class="comment"> * 2.给内部类加上inner关键词之后，就会变成非静态内部类，可以访问外部类的属性和方法</span></span><br><span class="line"><span class="comment"> * 3.非静态内部类想访问外部类的属性，可以使用 this@外部类名.外部类属性名 的形式访问</span></span><br><span class="line"><span class="comment"> * 4.非静态内部类可以访问到外部静态内部类的方法和属性，静态内部类访问不到外部所有的属性和方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意调用方式及内存泄漏相关</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 对象表达式用来替代Java的匿名内部类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">     <span class="keyword">val</span> helloWorld = <span class="string">"Hello World"</span></span><br><span class="line">     <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">         <span class="function"><span class="keyword">fun</span> <span class="title">getOuter</span><span class="params">()</span></span>: Outer &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">this</span><span class="symbol">@Outer</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">     <span class="keyword">val</span> outer = Outer()</span><br><span class="line">     <span class="keyword">val</span> innerClass = outer.Inner()</span><br><span class="line">     <span class="keyword">val</span> view = View()</span><br><span class="line">     <span class="comment">// kotlin匿名内部类，可以继承一个类，实现多个接口</span></span><br><span class="line">     view.setOnClickListener(<span class="keyword">object</span> : Any(), View.OnClickListener &#123;</span><br><span class="line">         <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onClick</span><span class="params">(view: <span class="type">View</span>)</span></span> &#123;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h5><ul><li>函数重载overload和默认参数</li></ul><p>Kotlin允许包级函数一级函数参数存在默认值<br>函数参数可以有默认值，当省略相应的参数时使用默认值。与其他语言相比，这可以减少重载数量。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">read</span><span class="params">(b: <span class="type">Array</span>&lt;<span class="type">Byte</span>&gt;, off: <span class="type">Int</span> = <span class="number">0</span>, len: <span class="type">Int</span> = b.size)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认值通过类型后面的 = 及给出的值来定义。<br>覆盖方法总是使用与基类型方法相同的默认参数值。 当覆盖一个带有默认参数值的方法时，必须从签名中省略默认参数值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(i: <span class="type">Int</span> = <span class="number">10</span>)</span></span> &#123;  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> : <span class="type">A</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">(i: <span class="type">Int</span>)</span></span> &#123;  &#125;  <span class="comment">// 不能有默认值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>具名参数<br>调用函数时, 可以通过参数名来指定参数. 当函数参数很多, 或者存在默认参数时, 指定参数名是一种非常便利的功能</li></ul><p>可以在调用函数时使用命名的函数参数。当一个函数有大量的参数或默认参数时这会非常方便。<br>给定以下函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">reformat</span><span class="params">(str: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             normalizeCase: <span class="type">Boolean</span> = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             upperCaseFirstLetter: <span class="type">Boolean</span> = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             divideByCamelHumps: <span class="type">Boolean</span> = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">             wordSeparator: <span class="type">Char</span> = <span class="string">' '</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们可以使用默认参数来调用它</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 我们可以使用默认参数来调用它</span></span><br><span class="line">    reformat(str)</span><br><span class="line">    <span class="comment">// 然而，当使用非默认参数调用它时，该调用看起来就像</span></span><br><span class="line">    reformat(str, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>, <span class="string">'_'</span>)</span><br><span class="line">    <span class="comment">// 使用命名参数我们可以使代码更具有可读性</span></span><br><span class="line">    reformat(str,</span><br><span class="line">            normalizeCase = <span class="literal">true</span>,</span><br><span class="line">            upperCaseFirstLetter = <span class="literal">true</span>,</span><br><span class="line">            divideByCamelHumps = <span class="literal">false</span>,</span><br><span class="line">            wordSeparator = <span class="string">'_'</span>)</span><br><span class="line">    <span class="comment">// 并且如果我们不需要所有的参数</span></span><br><span class="line">    reformat(str, wordSeparator = <span class="string">'_'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，在调用 Java 函数时不能使用命名参数语法，因为 Java 字节码并不总是保留函数参数的名称。</p><ul><li><p>中缀表示法 （函数还可以用中缀表示法调，当满足以下条件时）</p></li><li><p>他们是成员函数或扩展函数</p></li><li>他们只有一个参数</li><li>他们用 infix 关键字标注</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给 Int 定义扩展</span></span><br><span class="line"><span class="keyword">infix</span> <span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">shl</span><span class="params">(x: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用中缀表示法调用扩展函数</span></span><br><span class="line"><span class="number">1</span> shl <span class="number">2</span></span><br><span class="line"><span class="comment">// 等同于这样</span></span><br><span class="line"><span class="number">1</span>.shl(<span class="number">2</span>)</span><br></pre></td></tr></table></figure><ul><li>Kotlin 支持函数扩展和属性扩展<br>扩展实际上并没有修改它所扩展的类。定义一个扩展，你并没有在类中插入一个新的成员，只是让这个类的实例对象能够通过.调用新的函数。<br>注意，由于扩展并不会真正给类添加了成员属性，因此也没有办法让扩展属性拥有一个备份字段(backing field).这也是为什么初始化函数不允许有扩展属性。扩展属性只能够通过明确提供 getter 和 setter方法来进行定义.<br>如果有同名同参数的成员函数和扩展函数，调用的时候必然会使用成员函数</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> bd = <span class="string">"3"</span>.bd</span><br><span class="line">    <span class="keyword">val</span> d = <span class="number">4.00</span>.bd</span><br><span class="line">    println(bd.add(d))</span><br><span class="line">    println(bd.addAndMul(d))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对Double属性扩展</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> <span class="built_in">Double</span>.bd : BigDecimal</span><br><span class="line">    <span class="keyword">get</span>() = BigDecimal(<span class="keyword">this</span>.toString())</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> String.bd : BigDecimal</span><br><span class="line">    <span class="keyword">get</span>() = BigDecimal(<span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对BigDecimal函数扩展,增加相加然后相乘的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> BigDecimal.<span class="title">addAndMul</span><span class="params">(parm: <span class="type">BigDecimal</span>)</span></span> : BigDecimal &#123;</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="keyword">this</span> + parm</span><br><span class="line">    temp *= parm</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="属性代理"><a href="#属性代理" class="headerlink" title="属性代理"></a>属性代理</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by chenfeiyue on 18/2/12.</span></span><br><span class="line"><span class="comment"> * Description: 属性代理</span></span><br><span class="line"><span class="comment"> * 语法结构是： val/var &lt;property name&gt;: &lt;Type&gt; by &lt;expression&gt; 在 by 后面的属性就是代理，</span></span><br><span class="line"><span class="comment"> * 这样这个属性的 get() 和 set() 方法就代理给了它。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 系统提供的代理</span></span><br><span class="line">    <span class="keyword">val</span> hello <span class="keyword">by</span> lazy(LazyThreadSafetyMode.SYNCHRONIZED) &#123;</span><br><span class="line">        println(<span class="string">"hello by lazy"</span>)</span><br><span class="line">        <span class="string">"Hello World"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> x: String <span class="keyword">by</span> Delegate()</span><br><span class="line">    <span class="keyword">var</span> y <span class="keyword">by</span> Delegate()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> test = Test()</span><br><span class="line">    println(test.x)</span><br><span class="line">    test.y = <span class="string">"y"</span></span><br><span class="line">    println(test.y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Delegate</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value: String? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">getValue</span><span class="params">(thisRef: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;)</span></span>: String &#123;</span><br><span class="line">        <span class="comment">// 读取缓存、数据库等</span></span><br><span class="line">        <span class="keyword">return</span> value ?: <span class="string">"default value"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="title">setValue</span><span class="params">(any: <span class="type">Any</span>?, property: <span class="type">KProperty</span>&lt;*&gt;, value: <span class="type">String</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value</span><br><span class="line">        <span class="comment">// 写入缓存等</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Kotlin的inline内联函数"><a href="#Kotlin的inline内联函数" class="headerlink" title="Kotlin的inline内联函数"></a>Kotlin的inline内联函数</h5><ul><li><p>方法调用流程<br>调用一个方法是一个压栈和出栈的过程，调用方法时将栈针压入方法栈，然后执行方法体，方法结束时将栈针出栈，这个压栈和出栈的过程会耗费资源，这个过程中传递形参也会耗费资源。</p></li><li><p>为什么需要inline<br>有些简单的方法会被频繁调用，会增加方法调用的开销，内联函数在编译器直接将方法体插入在函数调用的地方。</p></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.kotlincn.net/" target="_blank" rel="noopener">Kotlin中文站</a></p><p><a href="http://blog.csdn.net/jhj_24/article/details/53896224" target="_blank" rel="noopener">Kotlin控制流</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;三、-面向对象&quot;&gt;&lt;a href=&quot;#三、-面向对象&quot; class=&quot;headerlink&quot; title=&quot;三、 面向对象&quot;&gt;&lt;/a&gt;三、 面向对象&lt;/h4&gt;&lt;h5 id=&quot;类和继承&quot;&gt;&lt;a href=&quot;#类和继承&quot; class=&quot;headerlink&quot; title=&quot;类和继承&quot;&gt;&lt;/a&gt;类和继承&lt;/h5&gt;&lt;p&gt;Kotlin 中使⽤关键字 &lt;code&gt;class&lt;/code&gt; 声明类&lt;br&gt;类声明由类名、 类头 （指定其类型参数、 主构造函数等） 和由⼤括号包围的类体构成。 类头和类体都是可选的； 如果⼀个类没有类体， 可以省略花括号。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构造函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Kotlin 中的⼀个类可以有⼀个主构造函数和⼀个或多个次构造函数。 主构造函数是类头的⼀部分： 它跟在类名 （和可选的类型参数） 后。&lt;br&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://android9527.com/categories/Kotlin/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://android9527.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin语法小结(2)-程序结构</title>
    <link href="http://android9527.com/2018/04/10/2018-04-10-Kotlin%E8%AF%AD%E6%B3%95%E5%B0%8F%E7%BB%93(2)-%E7%A8%8B%E5%BA%8F%E7%BB%93%E6%9E%84/"/>
    <id>http://android9527.com/2018/04/10/2018-04-10-Kotlin语法小结(2)-程序结构/</id>
    <published>2018-04-09T16:00:00.000Z</published>
    <updated>2018-12-05T09:11:32.213Z</updated>
    
    <content type="html"><![CDATA[<h4 id="二、程序结构"><a href="#二、程序结构" class="headerlink" title="二、程序结构"></a>二、程序结构</h4><h5 id="1、Kotlin访问控制修饰符"><a href="#1、Kotlin访问控制修饰符" class="headerlink" title="1、Kotlin访问控制修饰符"></a>1、Kotlin访问控制修饰符</h5><p>在Kotlin中拥有public、internal、protected、private修饰符，作用也和Java几乎一样，与Java不同的是，在Kotlin中，类的声明默认是public的。</p><table><thead><tr><th>修饰符</th><th>类成员</th><th>顶级声明</th></tr></thead><tbody><tr><td>public(default)</td><td>任何地方可见</td><td>任何地方可见</td></tr><tr><td>internal</td><td>在同一module中可见</td><td>在同一module中可见</td></tr><tr><td>protected</td><td>在子类中可见</td><td>-</td></tr><tr><td>private</td><td>在类内部可见</td><td>在当前文件中可见</td></tr></tbody></table><a id="more"></a><h5 id="2、控制流：-if、-when、-for、-while、-do-while"><a href="#2、控制流：-if、-when、-for、-while、-do-while" class="headerlink" title="2、控制流： if、 when、 for、 while、 do while"></a>2、控制流： if、 when、 for、 while、 do while</h5><ul><li>if表达式</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testIf</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> a : <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">val</span> b : <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">var</span> max = <span class="keyword">if</span> (a &gt; b) a <span class="keyword">else</span> b</span><br><span class="line">    <span class="keyword">if</span> (a &gt; b)</span><br><span class="line">        max = a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>when表达式，替代Java switch</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testWhen</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 1、简单用法</span></span><br><span class="line">    <span class="keyword">val</span> x: <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">when</span> (x) &#123;</span><br><span class="line">        <span class="number">1</span> -&gt; println(<span class="string">"x == 1"</span>)</span><br><span class="line">        <span class="number">2</span> -&gt; println(<span class="string">"x == 2"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">            println(<span class="string">"x is neither 1 nor 2"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、如果很多分支需要相同的方式处理，则可以把多个分支条件放在一起，用逗号分隔：</span></span><br><span class="line">    <span class="keyword">when</span> (x) &#123;</span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span> -&gt; println(<span class="string">"x == 0 or x == 1"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">"otherwise"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、可以用任意表达式（而不只是常量）作为分支条件</span></span><br><span class="line">    <span class="keyword">when</span> (x) &#123;</span><br><span class="line">        parseInt(<span class="string">"10"</span>) -&gt; println(<span class="string">"s encodes x"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">"s does not encode x"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、可以检测一个值在（in）或者不在（!in）某个区间或者集合</span></span><br><span class="line">    <span class="keyword">val</span> y: Any = <span class="string">"a"</span></span><br><span class="line">    <span class="keyword">when</span> (y) &#123;</span><br><span class="line">        <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span> -&gt; println(<span class="string">"x is in the range"</span>)</span><br><span class="line">        !<span class="keyword">in</span> <span class="number">10</span>..<span class="number">20</span> -&gt; println(<span class="string">"x is outside the range"</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">"none of the above"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5、检测一个值是（is）或者不是（!is）某个特定类型的值，由于智能转换，你可以访问该类型的方法和属性而需任何额外的检测。</span></span><br><span class="line">    <span class="keyword">val</span> result = <span class="keyword">when</span> (y) &#123;</span><br><span class="line">        <span class="keyword">is</span> String -&gt; y.startsWith(<span class="string">"prefix"</span>)</span><br><span class="line">        <span class="keyword">is</span> <span class="built_in">Int</span> -&gt; y + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span> -&gt; <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>for循环</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">testFor</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 1、遍历某个区间</span></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">0</span>..<span class="number">4</span>)<span class="comment">//为闭区间[0,4]</span></span><br><span class="line">        println(i)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、通过索引遍历一个数组或者一个 list，你可以这么做：</span></span><br><span class="line">    <span class="keyword">val</span> array = arrayOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> array.indices)</span><br><span class="line">        println(array[i])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、Arrays库函数 withIndex ：</span></span><br><span class="line">    <span class="keyword">for</span> ((index, value) <span class="keyword">in</span> array.withIndex()) &#123;</span><br><span class="line">        println(<span class="string">"the element at <span class="variable">$index</span> is <span class="variable">$value</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>while、 do while使用方法不变</li></ul><h5 id="3、返回和跳转"><a href="#3、返回和跳转" class="headerlink" title="3、返回和跳转"></a>3、返回和跳转</h5><p>Kotlin 有三种结构化跳转表达式：<br>return。默认从最直接包围它的函数或者匿名函数返回。<br>break。终止最直接包围它的循环。<br>continue。继续下一次最直接包围它的循环。</p><h5 id="4、lateinit-延迟初始化成员变量"><a href="#4、lateinit-延迟初始化成员变量" class="headerlink" title="4、lateinit 延迟初始化成员变量"></a>4、lateinit 延迟初始化成员变量</h5><p>Java 定义的类成员变量如果不初始化，那么基本类型被初始化为其默认值，比如 int 初始化为 0，boolean 初始化为 false，非基本类型的成员则会被初始化为 null。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> name: String? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了可空类型，副作用就是后面每次你想要用 name 的时候，都需要判断其是否为 null。如果不使用可空类型，需要加 lateinit 关键字：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> name: String</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lateinit</code> 是用来告诉编译器，name 这个变量后续会妥善处置的。</p><p>对于 final 的成员变量，Java 要求它们必须在构造方法或者构造块当中对他们进行初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name = <span class="string">"Peter"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，如果我要想定义一个可以延迟到一定实际再使用并初始化的 final 变量，这在 Java 中是做不到的。</p><p>Kotlin 有办法，使用 lazy 这个 delegate 即可：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> name <span class="keyword">by</span> lazy (LazyThreadSafetyMode.SYNCHRONIZED)&#123;</span><br><span class="line">        NameProvider.getName()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只有使用到 name 这个属性的时候，lazy 后面的 Lambda 才会执行，name 的值才会真正计算出来。</p><h5 id="5、异常捕获"><a href="#5、异常捕获" class="headerlink" title="5、异常捕获"></a>5、异常捕获</h5><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by chenfeiyue on 2018/4/13.</span></span><br><span class="line"><span class="comment"> * Description: Exception</span></span><br><span class="line"><span class="comment"> * Kotlin中的try关键字就像 if 和 when 一样，引入了一个表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Throws(Exception::class)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(string: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    string.toInt()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> result = <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="number">10</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        e.printStackTrace()</span><br><span class="line">        -<span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    print(result)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * kotlin不区分受检异常和未受检异常，不必指定函数抛出的异常，可以处理也可以不处理异常。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">write</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> file = File(<span class="string">"test.txt"</span>)</span><br><span class="line">    <span class="keyword">var</span> outputStream: OutputStream? = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file.createNewFile()</span><br><span class="line">        outputStream = FileOutputStream(file)</span><br><span class="line">        <span class="keyword">val</span> b = <span class="string">"Hello World"</span>.toByteArray(charset(<span class="string">"UTF-8"</span>))</span><br><span class="line">        outputStream.write(b)</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (outputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">            outputStream.close()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.kotlincn.net/" target="_blank" rel="noopener">Kotlin中文站</a></p><p><a href="http://blog.csdn.net/jhj_24/article/details/53896224" target="_blank" rel="noopener">Kotlin控制流</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;二、程序结构&quot;&gt;&lt;a href=&quot;#二、程序结构&quot; class=&quot;headerlink&quot; title=&quot;二、程序结构&quot;&gt;&lt;/a&gt;二、程序结构&lt;/h4&gt;&lt;h5 id=&quot;1、Kotlin访问控制修饰符&quot;&gt;&lt;a href=&quot;#1、Kotlin访问控制修饰符&quot; class=&quot;headerlink&quot; title=&quot;1、Kotlin访问控制修饰符&quot;&gt;&lt;/a&gt;1、Kotlin访问控制修饰符&lt;/h5&gt;&lt;p&gt;在Kotlin中拥有public、internal、protected、private修饰符，作用也和Java几乎一样，与Java不同的是，在Kotlin中，类的声明默认是public的。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;修饰符&lt;/th&gt;
&lt;th&gt;类成员&lt;/th&gt;
&lt;th&gt;顶级声明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;public(default)&lt;/td&gt;
&lt;td&gt;任何地方可见&lt;/td&gt;
&lt;td&gt;任何地方可见&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;internal&lt;/td&gt;
&lt;td&gt;在同一module中可见&lt;/td&gt;
&lt;td&gt;在同一module中可见&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;protected&lt;/td&gt;
&lt;td&gt;在子类中可见&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;private&lt;/td&gt;
&lt;td&gt;在类内部可见&lt;/td&gt;
&lt;td&gt;在当前文件中可见&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Kotlin" scheme="http://android9527.com/categories/Kotlin/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://android9527.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin语法小结(1)-基础语法</title>
    <link href="http://android9527.com/2018/04/10/2018-04-10-Kotlin%E8%AF%AD%E6%B3%95%E5%B0%8F%E7%BB%93(1)-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://android9527.com/2018/04/10/2018-04-10-Kotlin语法小结(1)-基础语法/</id>
    <published>2018-04-09T16:00:00.000Z</published>
    <updated>2018-12-05T09:11:42.476Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Kotlin语法特点"><a href="#Kotlin语法特点" class="headerlink" title="Kotlin语法特点"></a>Kotlin语法特点</h4><ul><li>兼容性：Kotlin 与 JDK 6 完全兼容，保障了 Kotlin 应用程序可以在较旧的 Android 设备上运行而无任何问题。Kotlin 工具在 Android Studio 中会完全支持，并且兼容 Android 构建系统。</li><li>性能：由于非常相似的字节码结构，Kotlin 应用程序的运行速度与 Java 类似。 随着 Kotlin 对内联函数的支持，使用 lambda 表达式的代码通常比用 Java 写的代码运行得更快。<a id="more"></a></li><li>互操作性：Kotlin 可与 Java 进行 100％ 的互操作，允许在 Kotlin 应用程序中使用所有现有的 Android 库 。这包括注解处理，所以数据绑定和 Dagger 也是一样。</li><li>占用：Kotlin 具有非常紧凑的运行时库，可以通过使用 ProGuard 进一步减少。 在实际应用程序中，Kotlin 运行时只增加几百个方法以及 .apk 文件不到 100K 大小。</li><li>编译时长：Kotlin 支持高效的增量编译，所以对于清理构建会有额外的开销，增量构建通常与 Java 一样快或者更快。</li></ul><h4 id="为什么选择-Kotlin？"><a href="#为什么选择-Kotlin？" class="headerlink" title="为什么选择 Kotlin？"></a>为什么选择 Kotlin？</h4><ul><li>简洁</li></ul><p>使用一行代码创建一个包含 getters、 setters、 equals()、 hashCode()、 toString() 以及 copy() 的 POJO：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> email: String, <span class="keyword">val</span> company: String)</span><br></pre></td></tr></table></figure><p>或者使用 lambda 表达式来过滤列表：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> positiveNumbers = list.filter &#123; it &gt; <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure><p>想要单例？创建一个 object 就可以了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> ThisIsASingleton &#123;</span><br><span class="line">    <span class="keyword">val</span> companyName: String = <span class="string">"JetBrains"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>安全</li></ul><p>彻底告别那些烦人的 NPE(NullPointerException)。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> output: String</span><br><span class="line">output = <span class="literal">null</span>   <span class="comment">// 编译错误</span></span><br></pre></td></tr></table></figure><p>Kotlin 可以保护你避免对可空类型的误操作。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> name: String? = <span class="literal">null</span>    <span class="comment">// 可空类型</span></span><br><span class="line">println(name.length())      <span class="comment">// 编译错误</span></span><br></pre></td></tr></table></figure><p>智能类型转换，编译器会为你做自动类型转换。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getStringLength</span><span class="params">(obj: <span class="type">Any</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">is</span> String) &#123;</span><br><span class="line">        <span class="comment">// `obj` 在该条件分⽀内⾃动转换成 `String`</span></span><br><span class="line">        <span class="keyword">return</span> obj.length</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在离开类型检测分⽀后，`obj` 仍然是 `Any` 类型</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>互操作性</li></ul><p>使用 JVM 上的任何现有库，因为有 100％ 的兼容性，包括 SAM(Single Abstract Method) 支持。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io.reactivex.Flowable</span><br><span class="line"><span class="keyword">import</span> io.reactivex.schedulers.Schedulers</span><br><span class="line"></span><br><span class="line">Flowable</span><br><span class="line">    .fromCallable &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>) <span class="comment">//  模仿高开销的计算</span></span><br><span class="line">        <span class="string">"Done"</span></span><br><span class="line">    &#125;</span><br><span class="line">    .subscribeOn(Schedulers.io())</span><br><span class="line">    .observeOn(Schedulers.single())</span><br><span class="line">    .subscribe(::println, Throwable::printStackTrace)</span><br></pre></td></tr></table></figure><p>无论是 JVM 还是 JavaScript 目标平台，都可用 Kotlin 写代码然后部署到你想要的地方</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> kotlin.browser.window</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">onLoad</span><span class="params">()</span></span> &#123;</span><br><span class="line">    window.document.body!!.innerHTML += <span class="string">"&lt;br/&gt;Hello, Kotlin!"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>工具友好</li></ul><p>一门语言需要工具化，而在 JetBrains，这正是我们做得最好的地方！<br><img src="/images/kotlin/kotlin1.png" alt="TCP"></p><p><img src="/images/kotlin/kotlin2.png" alt="TCP"></p><p>Kotlin相关知识</p><h4 id="一、基础语法"><a href="#一、基础语法" class="headerlink" title="一、基础语法"></a>一、基础语法</h4><h5 id="1、数据类型"><a href="#1、数据类型" class="headerlink" title="1、数据类型"></a>1、数据类型</h5><ul><li>基本数据类型<br>在 Kotlin 中，所有东西都是对象，在这个意义上讲我们可以在任何变量上调⽤成员函数和属性。<br>Kotlin 处理数字在某种程度上接近 Java， 但是并不完全相同。 例如， 对于数字没有隐式拓宽转换 （如 Java 中 int 可以隐式转换为 long)， 另外有些情况的字⾯值略有不同。<br>Kotlin 提供了如下的内置类型来表⽰数字 （与 Java 很相近）</li></ul><style>table th:first-of-type {    width: 100px;}th:nth-of-type(2) {    width: 200px;}</style><table><thead><tr><th style="text-align:left">Type</th><th style="text-align:left">Bit width</th></tr></thead><tbody><tr><td style="text-align:left">Double</td><td style="text-align:left">64</td></tr><tr><td style="text-align:left">Float</td><td style="text-align:left">32</td></tr><tr><td style="text-align:left">Long</td><td style="text-align:left">64</td></tr><tr><td style="text-align:left">Int</td><td style="text-align:left">32</td></tr><tr><td style="text-align:left">Short</td><td style="text-align:left">16</td></tr><tr><td style="text-align:left">Byte</td><td style="text-align:left">8</td></tr></tbody></table><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// kotlin 没有隐式转换</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(l: <span class="type">Long</span>)</span></span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> i = <span class="number">10</span></span><br><span class="line">    test(i.toLong())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字符串<br>字符串⽤ String 类型表⽰。 字符串是不可变的。 字符串的元素⸺字符可以使⽤索引运算符访问: s[i] 。 可以⽤ for 循环迭代字符串:</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (c <span class="keyword">in</span> name) &#123;</span><br><span class="line">    println(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Kotlin 有两种类型的字符串字⾯值: 转义字符串, 以及原⽣字符串可以包含换⾏和任意⽂本。转义字符串很像 Java 字符串:</span></span><br><span class="line"><span class="keyword">val</span> s = <span class="string">"Hello, world!\n"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用原⽣字符串 使⽤三个引号（ """ ） 分界符括起来， 内部没有转义并且可以包含换⾏和任何其他字符:</span></span><br><span class="line"><span class="keyword">val</span> text = <span class="string">""" \n</span></span><br><span class="line"><span class="string">    for (c in "foo")</span></span><br><span class="line"><span class="string">        print(c) """</span></span><br></pre></td></tr></table></figure><p>你可以通过 trimMargin() 函数去除前导空格：</p><ul><li>字符串模板<br>字符串可以包含模板表达式 ， 即⼀些⼩段代码， 会求值并把结果合并到字符串中。 模板表达式以美元符 （ $ ） 开头， 由⼀个简单的名字构成:</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> string = <span class="string">"Hello World"</span></span><br><span class="line">println(<span class="string">"result is <span class="variable">$string</span>"</span>)</span><br><span class="line">println(<span class="string">"result is <span class="subst">$&#123;string.replace(" ", "")&#125;</span>"</span>)</span><br></pre></td></tr></table></figure><h5 id="2、语法定义"><a href="#2、语法定义" class="headerlink" title="2、语法定义"></a>2、语法定义</h5><ul><li>定义包、定义函数、定义常量、变量、变长参数vararg</li></ul><p>（1）定义包：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> my.demo</span><br><span class="line"><span class="keyword">import</span> java.util.*</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>包名不必和文件夹路径一致：源文件可以放在任意位置。</p><p>（2）定义函数</p><p>定义一个函数接受两个 int 型参数，返回值为 int ：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span> , b: <span class="type">Int</span>)</span></span> : <span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数只有一个表达式函数体以及一个自推导型的返回值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> = a + b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">  println(<span class="string">"sum of 19 and 23 is <span class="subst">$&#123;sum(<span class="number">19</span>, <span class="number">23</span>)&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kotlin没有void关键字，用Unit表示返回一个没有意义的值， Unit 的返回类型可以省略：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span>: <span class="built_in">Unit</span> &#123;</span><br><span class="line">   println(<span class="string">"sum of <span class="variable">$a</span> and <span class="variable">$b</span> is <span class="subst">$&#123;a + b&#125;</span>"</span>)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">printSum</span><span class="params">(a: <span class="type">Int</span>, b: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">   println(<span class="string">"sum of <span class="variable">$a</span> and <span class="variable">$b</span> is <span class="subst">$&#123;a + b&#125;</span>"</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>（3）定义变量、常量</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">val</span> a: <span class="built_in">Int</span> = <span class="number">1</span>  <span class="comment">// 立即初始化</span></span><br><span class="line">   <span class="keyword">val</span> b = <span class="number">2</span>   <span class="comment">// 推导出Int型</span></span><br><span class="line">   <span class="keyword">val</span> c: <span class="built_in">Int</span>  <span class="comment">// 当没有初始化值时必须声明类型</span></span><br><span class="line">   c = <span class="number">3</span>       <span class="comment">// 赋值</span></span><br><span class="line">   println(<span class="string">"a = <span class="variable">$a</span>, b = <span class="variable">$b</span>, c = <span class="variable">$c</span>"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">   <span class="keyword">var</span> x = <span class="number">5</span> <span class="comment">// 推导出Int类型</span></span><br><span class="line">   x += <span class="number">1</span></span><br><span class="line">   println(<span class="string">"x = <span class="variable">$x</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（4）变长参数 vararg</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * kotlin 变长参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">(<span class="keyword">vararg</span> arg: <span class="type">Int</span>, string: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">    arg.forEach &#123; n -&gt;</span><br><span class="line">        sum += n</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, string = <span class="string">""</span>)</span><br></pre></td></tr></table></figure><p>在java中变长参数必须放在所有参数的后面，kotlin由于具名参数的存在可以放在任何位置</p><ul><li>注释</li></ul><p>注释正如Java 和 JavaScript， Kotlin ⽀持⾏注释及块注释。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是⼀个⾏注释</span></span><br><span class="line"><span class="comment">/* 这是⼀个多⾏的</span></span><br><span class="line"><span class="comment"> 块注释。 */</span></span><br><span class="line"><span class="comment">/** /** */</span> */</span><br></pre></td></tr></table></figure><p>  与 Java 不同的是， Kotlin 的块注释可以嵌套。</p><ul><li>可空类型 String?<br>当某个变量的值可以为 null 的时候， 必须在声明处的类型后添加 ? 来标识该引⽤可为空。<br>如果 str 的内容不是数字返回 null：</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">parseInt</span><span class="params">(str: <span class="type">String</span>)</span></span>: <span class="built_in">Int</span>? &#123;</span><br><span class="line">    <span class="comment">// ……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、import引用，区间使用（参见控制流）"><a href="#3、import引用，区间使用（参见控制流）" class="headerlink" title="3、import引用，区间使用（参见控制流）"></a>3、import引用，区间使用（参见控制流）</h5><p>源⽂件通常以包声明开头:package foo.bar</p><ul><li>默认导⼊</li></ul><p>有多个包会默认导⼊到每个 Kotlin ⽂件中：<br>kotlin.<em><br>kotlin.annotation.</em><br>…<br>kotlin.io.<em><br>kotlin.text.</em><br>根据⽬标平台还会导⼊额外的包：<br>JVM:<br>java.lang.<em><br>kotlin.jvm.</em><br>JS:<br>kotlin.js.*</p><ul><li><p>也可以导⼊⼀个作⽤域下的所有内容 （包、 类、 对象等） :<br>import foo.* // “foo”中的⼀切都可访问<br>如果出现名字冲突， 可以使⽤ as 关键字在本地重命名冲突项来消歧义：<br>import foo.Bar // Bar 可访问<br>import bar.Bar as bBar // bBar 代表“bar.Bar”</p></li><li><p>import 并不仅限于导⼊类； 也可⽤它来导⼊其他声明：<br>顶层函数及属性；<br>在对象声明中声明的函数和属性;<br>枚举常量。</p></li><li><p>与 Java 不同， Kotlin 没有单独的 “import static” 语法； 所有这些声明都⽤ import 关键字导⼊。</p></li></ul><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://www.kotlincn.net/" target="_blank" rel="noopener">Kotlin中文站</a></p><p><a href="http://blog.csdn.net/jhj_24/article/details/53896224" target="_blank" rel="noopener">Kotlin控制流</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Kotlin语法特点&quot;&gt;&lt;a href=&quot;#Kotlin语法特点&quot; class=&quot;headerlink&quot; title=&quot;Kotlin语法特点&quot;&gt;&lt;/a&gt;Kotlin语法特点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;兼容性：Kotlin 与 JDK 6 完全兼容，保障了 Kotlin 应用程序可以在较旧的 Android 设备上运行而无任何问题。Kotlin 工具在 Android Studio 中会完全支持，并且兼容 Android 构建系统。&lt;/li&gt;
&lt;li&gt;性能：由于非常相似的字节码结构，Kotlin 应用程序的运行速度与 Java 类似。 随着 Kotlin 对内联函数的支持，使用 lambda 表达式的代码通常比用 Java 写的代码运行得更快。
    
    </summary>
    
      <category term="Kotlin" scheme="http://android9527.com/categories/Kotlin/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="Kotlin" scheme="http://android9527.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Android财富星球APP改进部分</title>
    <link href="http://android9527.com/2018/03/15/2018-03-15-Android%E6%94%B9%E8%BF%9B%E9%83%A8%E5%88%86/"/>
    <id>http://android9527.com/2018/03/15/2018-03-15-Android改进部分/</id>
    <published>2018-03-14T16:00:00.000Z</published>
    <updated>2018-04-12T10:53:00.735Z</updated>
    
    <content type="html"><![CDATA[<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>主要回顾一下项目中修改的地方，以及目前存在的问题和改进的方向</p><a id="more"></a><h4 id="一、gradle依赖库版本统一管理，所有support包使用同一版本v4、v7、RecycleView减少冲突"><a href="#一、gradle依赖库版本统一管理，所有support包使用同一版本v4、v7、RecycleView减少冲突" class="headerlink" title="一、gradle依赖库版本统一管理，所有support包使用同一版本v4、v7、RecycleView减少冲突"></a>一、gradle依赖库版本统一管理，所有support包使用同一版本v4、v7、RecycleView减少冲突</h4><p>依赖库版本不同容易引起冲突</p><h4 id="二、所有接口json数据序列化修改"><a href="#二、所有接口json数据序列化修改" class="headerlink" title="二、所有接口json数据序列化修改"></a>二、所有接口json数据序列化修改</h4><p>增加YKResponseDataWrapper<t>类，增加统一的成功、错误处理，TokenError等</t></p><p>YKJsonUtil实体类数据解析功能，使用泛型解决数据类型转换问题</p><p>修改前后对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YKMyInfoParser</span> <span class="keyword">extends</span> <span class="title">YKBaseJsonParser</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"YKMyInfoParser"</span>;</span><br><span class="line">    <span class="keyword">private</span> YKUserInfo userInfo = <span class="keyword">new</span> YKUserInfo();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">parseData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JsonObject dataObj = getResultJsonObject();</span><br><span class="line">        <span class="keyword">if</span> (dataObj.has(<span class="string">"headPortraitUrl"</span>)) &#123;</span><br><span class="line">            userInfo.headPortraitUrl = dataObj.get(<span class="string">"headPortraitUrl"</span>).getAsString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dataObj.has(<span class="string">"nickName"</span>)) &#123;</span><br><span class="line">            userInfo.nickName = dataObj.get(<span class="string">"nickName"</span>).getAsString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dataObj.has(<span class="string">"mobile"</span>)) &#123;</span><br><span class="line">            userInfo.mobile = dataObj.get(<span class="string">"mobile"</span>).getAsString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (dataObj.has(<span class="string">"realName"</span>)) &#123;</span><br><span class="line">            userInfo.userName = dataObj.get(<span class="string">"realName"</span>).getAsString();</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> YKUserInfo <span class="title">getUserInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 个人信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">handleUserData</span><span class="params">(<span class="keyword">data</span>: <span class="type">ByteArray</span>, encode: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> dataWrapper = YKJsonUtil.parseResponse(<span class="keyword">data</span>, YKNewMineDataEntity::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>, <span class="type">encode) ?: return</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// TODO 使用MOCK数据</span></span><br><span class="line">    <span class="comment">// val dataWrapper = YKJsonUtil.parseResponse(MineDataMock.getMockData(), YKNewMineDataEntity::class.java)</span></span><br><span class="line">    <span class="keyword">if</span> (!dataWrapper.isSuccess) &#123;</span><br><span class="line">        YKToastUtil.showShort(dataWrapper.message)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>1、要特别注意数据字段类型和字段名要和服务端对应</li><li>2、使用-keep class 防止字段名混淆</li></ul><h4 id="三、把一些常用功能以及基础UI和工具库（网络模块、缓存管理、线程池管理、主题样式、自定义控件等）提取到单独的module中"><a href="#三、把一些常用功能以及基础UI和工具库（网络模块、缓存管理、线程池管理、主题样式、自定义控件等）提取到单独的module中" class="headerlink" title="三、把一些常用功能以及基础UI和工具库（网络模块、缓存管理、线程池管理、主题样式、自定义控件等）提取到单独的module中"></a>三、把一些常用功能以及基础UI和工具库（网络模块、缓存管理、线程池管理、主题样式、自定义控件等）提取到单独的module中</h4><p>ykdata、ykcommon等可以直接移植到其他项目中使用，也是进行项目模块化的第一步</p><p>部分依赖库上传至maven服务器，使用aar集成形式，一定程度上加快编译速度</p><h4 id="四、模块化（参考https-zhuanlan-zhihu-com-p-26744821）"><a href="#四、模块化（参考https-zhuanlan-zhihu-com-p-26744821）" class="headerlink" title="四、模块化（参考https://zhuanlan.zhihu.com/p/26744821）"></a>四、模块化（参考<a href="https://zhuanlan.zhihu.com/p/26744821）" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26744821）</a></h4><p><img src="http://android9527.github.io/images/app_optimize/image3.png" alt="image"></p><p>（1）整个项目分为三层，从下至上分别是：<br>Basic Component Layer: 基础组件层，顾名思义就是一些基础组件，包含了各种开源库以及和业务无关的各种自研工具库；<br>Business Component Layer: 业务组件层，这一层的所有组件都是业务相关的，例如上图中的支付组件 AnjukePay、数据模拟组件 DataSimulator 等等；<br>Business Module Layer: 业务 Module 层，在 Android Studio 中每块业务对应一个单独的 Module。例如安居客用户 App 我们就可以拆分成新房 Module、二手房 Module、IM Module 等等，每个单独的 Business Module 都必须准遵守我们自己的 MVP 架构。</p><p>对于模块化项目，每个单独的 Business Module 都可以单独编译成 APK。在开发阶段需要单独打包编译，项目发布的时候又需要它作为项目的一个 Module 来整体编译打包。简单的说就是开发时是 Application，发布时是 Library。因此需要在 Business Module 的 build.gradle 中加入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (IsBuildModule.toBoolean()) &#123;</span><br><span class="line">    apply plugin: &apos;com.android.application&apos;</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    apply plugin: &apos;com.android.library&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>isBuildModule 在项目根目录的 gradle.properties 中定义:<br>isBuildModule=false<br>同样 Manifest.xml 也需要有两套：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        jniLibs.srcDirs = [&apos;libs&apos;]</span><br><span class="line">        if (IsBuildModule.toBoolean()) &#123;</span><br><span class="line">            manifest.srcFile &apos;src/main/module/AndroidManifest.xml&apos;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            manifest.srcFile &apos;src/main/AndroidManifest.xml&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）问题及建议</p><h5 id="1、重复依赖"><a href="#1、重复依赖" class="headerlink" title="1、重复依赖"></a>1、重复依赖</h5><p>模块化的过程中我们常常会遇到重复依赖的问题，如果是通过 aar 依赖， gradle 会自动帮我们找出新版本，而抛弃老版本的重复依赖。如果是以 project 的方式依赖，则在打包的时候会出现重复类。对于这种情况我们可以在 build.gradle 中将 compile 改为 provided，只在最终的项目中 compile 对应的 library ；<br>其实从前面的安居客模块化设计图上能看出来，我们的设计方案能一定程度上规避重复依赖的问题。比如我们所有的第三方库的依赖都会放到 OpenSourceLibraries 中，其他需要用到相关类库的项目，只需要依赖 OpenSourceLibraries 就好了。</p><h5 id="2、模块化过程中的建议"><a href="#2、模块化过程中的建议" class="headerlink" title="2、模块化过程中的建议"></a>2、模块化过程中的建议</h5><p>对于大型的商业项目，在重构过程中可能会遇到业务耦合严重，难以拆分的问题。我们需要先理清业务，再动手拆分业务模块。比如可以先在原先的项目中根据业务分包，在一定程度上将各业务解耦后拆分到不同的 package 中。比如之前新房和二手房由于同属于 app module，因此他们之前是通过隐式的 intent 跳转的，现在可以先将他们改为通过 Router 来实现跳转。又比如新房和二手房中公用的模块可以先下放到 Business Component Layer 或者 Basic Component Layer 中。在这一系列工作完成后再将各个业务拆分成多个 module 。<br>模块化重构需要渐进式的展开，不可一触而就，不要想着将整个项目推翻重写。线上成熟稳定的业务代码，是经过了时间和大量用户考验的；全部推翻重写往往费时费力，实际的效果通常也很不理想，各种问题层出不穷得不偿失。对于这种项目的模块化重构，我们需要一点点的改进重构，可以分散到每次的业务迭代中去，逐步淘汰掉陈旧的代码。<br>各业务模块间肯定会有公用的部分，按照我前面的设计图，公用的部分我们会根据业务相关性下放到业务组件层（Business Component Layer）或者基础组件层（Common Component Layer）。对于太小的公有模块不足以构成单独组件或者模块的，我们先放到类似于 CommonBusiness 的组件中，在后期不断的重构迭代中视情况进行进一步的拆分。过程中完美主义可以有，切记不可过度。<br>以上就是我在模块化探索实践方面的一些经验，不住之处还望大家指出。<br>模块化示例项目 ModularizationProject 源码地址：<a href="https://github.com/BaronZ88/ModularizationProject" target="_blank" rel="noopener">https://github.com/BaronZ88/ModularizationProject</a><br>路由框架 Router 源码地址：<a href="https://github.com/BaronZ88/Router" target="_blank" rel="noopener">https://github.com/BaronZ88/Router</a></p><h4 id="五、模块间跳转通讯（Router）"><a href="#五、模块间跳转通讯（Router）" class="headerlink" title="五、模块间跳转通讯（Router）"></a>五、模块间跳转通讯（Router）</h4><p>目前采用阿里ARouter实现页面跳转以及传值问题<br>ARouter使用及问题（<a href="https://github.com/alibaba/ARouter）" target="_blank" rel="noopener">https://github.com/alibaba/ARouter）</a><br>EventBus消息模型</p><h4 id="六、Module间资源名冲突"><a href="#六、Module间资源名冲突" class="headerlink" title="六、Module间资源名冲突"></a>六、Module间资源名冲突</h4><p>对于多个Module 中资源名冲突的问题，可以通过在 build.gradle 定义前缀的方式解决：<br>defaultConfig { … resourcePrefix “common_” … }</p><h4 id="七、项目结构梳理"><a href="#七、项目结构梳理" class="headerlink" title="七、项目结构梳理"></a>七、项目结构梳理</h4><p>之前项目存在问题：</p><ul><li>1、Activity/Fragment过于臃肿</li><li>2、包含网络请求以及业务处理、UI显示逻辑、用户交互事件</li><li>3、一个YKMineLoginFragment页面有近千行代码，给重构及增加功能带来很大困难</li></ul><h5 id="参考MVP模式，改进步骤："><a href="#参考MVP模式，改进步骤：" class="headerlink" title="参考MVP模式，改进步骤："></a>参考MVP模式，改进步骤：</h5><p>（1）引入简易MVP结构</p><ul><li>1、增加BaseFragment、BasePresenter关联，增加相关的生命周期管理</li><li>2、逐步分离Activity/Fragment以及业务逻辑，使用Fragment主要是用于解决碎片化问题 、更加轻量级</li><li>3、增加BaseView 接口，增加startLoading() finishLoading() showToast()等通用接口以及默认实现<br>View接口是Fragment与Presenter层的中间层，它的作用是根据具体业务的需要，为Presenter提供调用Fragment中具体UI逻辑操作的方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YKBaseFragmentJava</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">YKBasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">        <span class="title">HasComponent</span>, <span class="title">BaseMVPContract</span>.<span class="title">IBaseView</span>, <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> T mPresenter;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        <span class="keyword">if</span> (mPresenter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mPresenter.create();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onResume();</span><br><span class="line">        <span class="keyword">if</span> (mPresenter != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mPresenter.resume();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>YKBasePresenter.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">YKBasePresenter</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BaseMVPContract</span>.<span class="title">IBaseView</span>&gt; <span class="keyword">implements</span> <span class="title">BaseMVPContract</span>.<span class="title">Presenter</span>, <span class="title">YKConnectionItemListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T mView;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setView</span><span class="params">(T view)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mView = view;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resume</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(YKNetworkError networkError, YKConnectionItem connectionItem)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// view判断</span></span><br><span class="line">        <span class="keyword">if</span> (mView == <span class="keyword">null</span> || !mView.isViewAdd()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mView.finishLoading();</span><br><span class="line">        handleResponse(networkError, connectionItem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理请求结果，子类重写</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> networkError networkError</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionItem connectionItem</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(YKNetworkError networkError, YKConnectionItem connectionItem)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        YKNetInterface.getInstance().removeConnectionItem(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样基本完成一个简单的V-MP的结构，存在的问题：</p><ul><li>1、结构不完善、未增加Model层逻辑</li><li>2、将网络请求及数据解析等逻辑放在了Presenter层，导致Presenter过重</li><li>3、重用性不友好，对于包含部分相同业务逻辑的场景需要多次编写相同代码<br>如：多个页面需要获取用户信息做不同处理的场景</li></ul><p>同样无法优雅处理在一个Fragment引用多个Presenter业务逻辑<br>如果需要对数据做不同处理，这样很有可能需要修改presenterA、PresenterB的逻辑，容易引起错误</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentC</span> <span class="keyword">extends</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">ViewA</span>,<span class="title">ViewB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> PresenterA presenterA;</span><br><span class="line">  <span class="keyword">private</span> PresenterB presenterB;</span><br><span class="line">  ...</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      presenterA.getData();</span><br><span class="line">      presenterB.getData();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（2）增加简单Model层逻辑</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by chenfeiyue on 17/12/11.</span></span><br><span class="line"><span class="comment"> * Description ：主页接口相关</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MainRepository</span> : <span class="type">BaseRepository &#123;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">MainRequestListener</span> : <span class="type">RepositoryRequestListener</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取启动屏幕配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getSplashPic</span><span class="params">(listener: <span class="type">MainRequestListener</span>, activity: <span class="type">Activity</span>)</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取首页数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getHomeData</span><span class="params">(listener: <span class="type">MainRequestListener</span>)</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Presenter引用相应的多个Model就好，各自单独处理数据</p><p><img src="http://android9527.github.io/images/app_optimize/mvp1.png" alt="image"></p><ul><li>（3）继续优化改进<br><img src="http://android9527.github.io/images/app_optimize/mvp2.png" alt="image"></li></ul><p>优化之后的Model层是一个庞大而且独立的模块，对外提供统一的请求数据方法与请求规则，这样做的好处有很多：</p><ul><li>1、数据请求单独编写，无需配合上层界面测试。</li><li>2、同一个模块统一管理，修改方便。</li><li>3、实现不同数据源(NetAPI,cache,database)的无缝切换。</li></ul><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><ul><li>1、各个层次之间的职责更加单一清晰，同时也很大程度上降低了代码的耦合度（可配合使用dagger2）目前的Presenter和Repository是由dagger2注入生成的</li><li>2、各个层次单独编写、测试，无需依赖其他。</li><li>3、实现不同数据源(cache，database)的无缝切换。</li><li>4、复用性高 各个层次均可一定程度的复用</li></ul><h5 id="弊端："><a href="#弊端：" class="headerlink" title="弊端："></a>弊端：</h5><ul><li>1、可读性降低 各层之间大量依赖接口调用，不方便调试</li><li>2、代码量增加 简单的功能按照MVP模式会增加许多代码</li></ul><h4 id="其他改进部分："><a href="#其他改进部分：" class="headerlink" title="其他改进部分："></a>其他改进部分：</h4><p>增加glide使用volley网络请求框架，配置缓存等，volley默认最大连接数是4<br>BaseListFragment统一控制列表加载和刷新组件<br>接口YKJsonBuilder约束，自动增加useId、token等参数</p><h4 id="一些需要注意的地方："><a href="#一些需要注意的地方：" class="headerlink" title="一些需要注意的地方："></a>一些需要注意的地方：</h4><ul><li>1、添加的监听器及时移除，add/remove，register/unregister等</li><li>2、在Android library中不能使用switch-case语句访问资源ID<br>ButterKnife在library中的使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindView</span>(R2.id.tab_tv_left)</span><br><span class="line">TextView mTabTvLeft;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = view.getId();</span><br><span class="line">    <span class="keyword">if</span> (i == R.id.act_base_back_ib) &#123;</span><br><span class="line">        mClickListener.onLeftViewClicked();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == R.id.act_base_right_view_tv) &#123;</span><br><span class="line">        mClickListener.onRightViewClicked();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3、有些时候不能使用Application的Context，不然会报错（比如启动Activity，显示Dialog等）</li><li>4、不要通过Bundle和Msg传递大的对象，尽量避免传递Serializable类型数据（集合类除外）</li><li>5、在引入一个地方库的时候，一定要看文档在proguard文件中加入混淆配置，并且打release安装验证</li></ul><h4 id="待处理问题："><a href="#待处理问题：" class="headerlink" title="待处理问题："></a>待处理问题：</h4><ul><li>1、Glide图片库中间层，图片框架升级</li><li>2、事件连续点击处理</li><li>3、单个Request定制HTTP Header信息以及其他信息</li><li>4、增加同步请求方式，将网络请求和数据解析由调用者自由控制切换线程</li><li>5、目前所有分页数据接口部分存在逻辑漏洞</li></ul><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://zhuanlan.zhihu.com/p/26744821" target="_blank" rel="noopener">Android 模块化探索与实践</a><br><a href="https://blog.csdn.net/baron_leizhang/article/details/58071773" target="_blank" rel="noopener">安居客Android项目架构演进</a><br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/2017/1020/8625.html" target="_blank" rel="noopener">Android MVP架构搭建</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h4&gt;&lt;p&gt;主要回顾一下项目中修改的地方，以及目前存在的问题和改进的方向&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Android多屏幕设计</title>
    <link href="http://android9527.com/2017/11/12/2017-11-12-Android%E5%A4%9A%E5%B1%8F%E5%B9%95%E8%AE%BE%E8%AE%A1/"/>
    <id>http://android9527.com/2017/11/12/2017-11-12-Android多屏幕设计/</id>
    <published>2017-11-11T16:00:00.000Z</published>
    <updated>2017-11-20T14:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>Android 可在各种具有不同屏幕尺寸和密度的设备上运行。对于应用，Android 系统在不同设备中提供一致的开发环境，可以处理大多数工作，将每个应用的用户界面调整为适应其显示的屏幕。 同时，系统提供 API，可用于控制应用适用于特定屏幕尺寸和密度的 UI，以针对不同屏幕配置优化 UI 设计。 例如，您可能想要不同于手机 UI 的平板电脑 UI。</p><p>虽然系统为使您的应用适用于不同的屏幕，会进行缩放和大小调整，但您应针对不同的屏幕尺寸和密度优化应用。 这样可以最大程度优化所有设备上的用户体验，用户会 认为您的应用实际上是专为他们的设备而设计，而不是 简单地拉伸以适应其设备屏幕。<br><a id="more"></a></p><h4 id="术语和概念"><a href="#术语和概念" class="headerlink" title="术语和概念"></a>术语和概念</h4><h5 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h5><p>屏幕尺寸指屏幕的对角线的长度，单位是英寸，1英寸=2.54厘米</p><p>比如常见的屏幕尺寸有4.0、5.0、5.5、6.0等</p><p>为简便起见，Android 将所有实际屏幕尺寸分组为四种通用尺寸：小、 正常、大和超大。</p><ul><li>超大屏幕至少为 960dp x 720dp</li><li>大屏幕至少为 640dp x 480dp</li><li>正常屏幕至少为 470dp x 320dp</li><li>小屏幕至少为 426dp x 320dp</li></ul><p><img src="/images/multi_screen/multi_screen_1.jpg" alt="multi_screen"></p><h5 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h5><p>屏幕上物理像素的总数。单位是px，1px=1个像素点。一般以纵向像素*横向像素，如1960*1080。<br>添加对多种屏幕的支持时， 应用不会直接使用分辨率；而只应关注通用尺寸和密度组指定的屏幕尺寸及密度。</p><h5 id="屏幕密度-dpi"><a href="#屏幕密度-dpi" class="headerlink" title="屏幕密度 (dpi)"></a>屏幕密度 (dpi)</h5><p>屏幕像素密度是指每英寸上的像素点数，单位是dpi，即“dot per inch”的缩写。屏幕像素密度与屏幕尺寸和屏幕分辨率有关，在单一变化条件下，屏幕尺寸越小、分辨率越高，像素密度越大，反之越小。<br>为简便起见，Android 将所有屏幕密度分组为六种通用密度： 低、中、高、超高、超超高和超超超高。</p><h5 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h5><p>从用户视角看屏幕的方向，即横屏还是 竖屏，分别表示屏幕的纵横比是宽还是高。请注意， 不仅不同的设备默认以不同的方向操作，而且 方向在运行时可随着用户旋转设备而改变。</p><h5 id="密度无关像素-dip"><a href="#密度无关像素-dip" class="headerlink" title="密度无关像素 (dip)"></a>密度无关像素 (dip)</h5><p>是Density independent pixel的缩写，指的是抽象意义上的像素。跟设备的屏幕密度有关系。<br>在定义 UI 布局时应使用的虚拟像素单位，用于以密度无关方式表示布局维度 或位置。<br>密度无关像素等于 160 dpi 屏幕上的一个物理像素，这是 系统为“中”密度屏幕假设的基线密度。在运行时，系统 根据使用中屏幕的实际密度按需要以透明方式处理 dp 单位的任何缩放 。dp 单位转换为屏幕像素很简单： px = dp * (dpi / 160)。 例如，在 240 dpi 屏幕上，1 dp 等于 1.5 物理像素。在定义应用的 UI 时应始终使用 dp 单位 ，以确保在不同密度的屏幕上正常显示 UI。</p><h5 id="dp、dip、dpi、sp、px"><a href="#dp、dip、dpi、sp、px" class="headerlink" title="dp、dip、dpi、sp、px"></a>dp、dip、dpi、sp、px</h5><p>px我们应该是比较熟悉的，前面的分辨率就是用的像素为单位，大多数情况下，比如UI设计、Android原生API都会以px作为统一的计量单位，像是获取屏幕宽高等。</p><p>dip和dp是一个意思，都是Density Independent Pixels的缩写，即密度无关像素，上面我们说过，dpi是屏幕像素密度，假如一英寸里面有160个像素，这个屏幕的像素密度就是160dpi，那么在这种情况下，dp和px如何换算呢？在Android中，规定以160dpi为基准，1dip=1px，如果密度是320dpi，则1dip=2px，以此类推。</p><p>假如同样都是画一条320px的线，在480<em>800分辨率手机上显示为2/3屏幕宽度，在320</em>480的手机上则占满了全屏，如果使用dp为单位，在这两种分辨率下，160dp都显示为屏幕一半的长度。这也是为什么在Android开发中，写布局的时候要尽量使用dp而不是px的原因。</p><p>而sp，即scale-independent pixels，与dp类似，但是可以根据文字大小首选项进行放缩，是设置字体大小的御用单位。</p><h5 id="支持的屏幕范围"><a href="#支持的屏幕范围" class="headerlink" title="支持的屏幕范围"></a>支持的屏幕范围</h5><p>从 Android 1.6（API 级别 4）开始，Android 支持多种屏幕尺寸和密度，反映设备可能具有的多种不同屏幕配置。 您可以使用 Android 系统的功能优化应用在各种屏幕配置下的用户界面 ，确保应用不仅正常渲染，而且在每个屏幕上提供 最佳的用户体验。</p><p>为简化您为多种屏幕设计用户界面的方式，Android 将实际屏幕尺寸和密度的范围 分为：<br>几种通用的密度：</p><ul><li>mdpi（中）120dpi~160dpi</li><li>hdpi（高）160dpi~240dpi</li><li>xhdpi（超高）240dpi~320dpi</li><li>xxhdpi（超超高）320dpi~480dpi</li><li>xxxhdpi（超超超高）480dpi~640dpi</li></ul><p>要针对不同的屏幕尺寸和密度优化应用的 UI，可为任何通用的尺寸和密度提供备用资源。 通常，应为某些不同的屏幕尺寸提供替代布局，为不同的屏幕密度提供替代位图图像。 在运行时，系统会根据当前设备屏幕的通用 尺寸或密度对应用使用适当的资源。</p><p>无需为屏幕尺寸和 密度的每个组合提供备用资源。系统提供强大的兼容性功能，可处理在任何设备屏幕上 渲染应用的大多数工作，前提是您已经使用 可以适当调整大小的技术实现 UI（如下面的最佳做法所述）。</p><p>在设计图标时，对于五种主流的像素密度（mdpi、hdpi、xhdpi、xxhdpi 和 xxxhdpi）应按照 1:1.5:2:3:4 的比例进行缩放。</p><p><img src="/images/multi_screen/multi_screen_2.jpg" alt="multi_screen"></p><h5 id="密度独立性"><a href="#密度独立性" class="headerlink" title="密度独立性"></a>密度独立性</h5><p>应用显示在密度不同的屏幕上时，如果它保持用户界面元素的物理尺寸（从 用户的视角），便可实现“密度独立性” 。</p><p>保持密度独立性很重要，因为如果没有此功能，UI 元素（例如 按钮）在低密度屏幕上看起来较大，在高密度屏幕上看起来较小。这些 密度相关的大小变化可能给应用布局和易用性带来问题。图 2 和 3 分别显示了应用不提供密度独立性和 提供密度独立性时的差异。</p><p>Android 系统可帮助您的应用以两种方式实现密度独立性：</p><ul><li>系统根据当前屏幕密度扩展 dp 单位数</li><li>系统在必要时可根据当前屏幕 密度将可绘制对象资源扩展到适当的大小</li></ul><p>大多数情况下，确保应用中的屏幕独立性很简单，只需以适当的密度独立像素（dp 单位）或 “wrap_content” 指定所有 布局尺寸值。系统然后根据适用于当前屏幕密度的缩放比例适当地缩放位图可绘制对象，以 适当的大小显示。</p><p>但位图缩放可能导致模糊或像素化位图，您或许已经在上面的屏幕截图中 发现了这些问题。为避免这些伪影，应为 不同的密度提供替代的位图资源。例如，应为高密度 屏幕提供分辨率较高的位图，然后系统对中密度 屏幕将使用这些位图，而无需调整位图大小。下一节详细说明如何为 不同的屏幕配置提供备用资源。</p><h4 id="主要解决方案"><a href="#主要解决方案" class="headerlink" title="主要解决方案"></a>主要解决方案</h4><h4 id="1-支持不同屏幕尺寸"><a href="#1-支持不同屏幕尺寸" class="headerlink" title="(1)支持不同屏幕尺寸"></a>(1)支持不同屏幕尺寸</h4><p>介绍如何让设计的布局能够适应多种不同的屏幕尺寸（为视图、 RelativeLayout、屏幕尺寸和屏幕方向限定符、别名过滤器和九宫格位图使用灵活的尺寸）。</p><h4 id="2-支持不同屏幕密度"><a href="#2-支持不同屏幕密度" class="headerlink" title="(2)支持不同屏幕密度"></a>(2)支持不同屏幕密度</h4><p>介绍如何支持具有不同像素密度的屏幕（使用密度无关像素并提供与每一种密度相适的位图）。</p><h4 id="3-实现自适应用户界面"><a href="#3-实现自适应用户界面" class="headerlink" title="(3)实现自适应用户界面"></a>(3)实现自适应用户界面</h4><p>介绍如何让实现的 UI 流自行适应多种屏幕尺寸/密度组合（运行时检测活动布局、根据当前布局作出反应、处理屏幕配置变更）。</p><p>Android 支持多种屏幕的基础是它能够管理针对当前屏幕配置 以适当方式渲染应用的布局和位图 可绘制对象。系统可处理大多数工作，通过适当地 缩放布局以适应屏幕尺寸/密度和根据屏幕密度缩放位图可绘制对象 ，在每种屏幕配置中渲染您的应用。但是，为了更适当地处理不同的屏幕配置 ，还应该：</p><h5 id="一、支持不同屏幕尺寸"><a href="#一、支持不同屏幕尺寸" class="headerlink" title="一、支持不同屏幕尺寸"></a>一、支持不同屏幕尺寸</h5><h6 id="1-在清单中显式声明声明屏幕尺寸支持"><a href="#1-在清单中显式声明声明屏幕尺寸支持" class="headerlink" title="1. 在清单中显式声明声明屏幕尺寸支持"></a>1. 在清单中显式声明声明屏幕尺寸支持</h6><p>通过声明您的应用支持哪些屏幕尺寸，可确保只有 其屏幕受支持的设备才能下载您的应用。声明对 不同屏幕尺寸的支持也可影响系统如何在较大 屏幕上绘制您的应用 — 特别是，您的应用是否在屏幕兼容模式中运行。<br>要声明应用支持的屏幕尺寸，应在清单文件中包含 <supports-screens> 元素。</supports-screens></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;supports-screens android:smallScreens=[&quot;true&quot; | &quot;false&quot;]</span><br><span class="line">                  android:normalScreens=[&quot;true&quot; | &quot;false&quot;]</span><br><span class="line">                  android:largeScreens=[&quot;true&quot; | &quot;false&quot;]</span><br><span class="line">                  android:xlargeScreens=[&quot;true&quot; | &quot;false&quot;]</span><br><span class="line">                  android:anyDensity=[&quot;true&quot; | &quot;false&quot;]</span><br><span class="line">                  android:requiresSmallestWidthDp=&quot;integer&quot;</span><br><span class="line">                  android:compatibleWidthLimitDp=&quot;integer&quot;</span><br><span class="line">                  android:largestWidthLimitDp=&quot;integer&quot;/&gt;</span><br></pre></td></tr></table></figure><p>在对不同的屏幕尺寸实现您的布局后，在 清单文件中声明您的应用支持哪些屏幕相当重要。</p><p>与用于屏幕尺寸的新配置限定符一起，Android 3.2 为 <supports-screens> 清单元素引入了新的属性：</supports-screens></p><p>android:requiresSmallestWidthDp<br>指定需要的最小 smallestWidth。smallestWidth 是必须为您的应用 UI 提供的 屏幕空间的最短尺寸（dp 单位）—即 可用屏幕的两个尺寸中的最短者。因此，为使设备 与您的应用兼容，设备的 smallestWidth 必须等于或大于此 值。（通常，无论屏幕的当前方向如何， 此值都是布局支持的“最小宽度”。）<br>例如，如果您的应用只用于最小可用宽度为 600dp 的平板电脑样式设备：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;manifest ... &gt;</span><br><span class="line">    &lt;supports-screens android:requiresSmallestWidthDp=&quot;600&quot; /&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><p>但是，如果您的应用支持 Android 支持的所有屏幕尺寸（小至 426dp x 320dp），则无需声明此属性，因为应用 需要的最小宽度就是任何设备上可以实现的最小宽度。</p><p>注意：Android 系统不关注此 属性，因为它不影响应用在运行时的行为，而是被用于 在服务（例如 Google Play）上过滤您的应用。但是， Google Play 目前不支持此属性用于过滤（在 Android 3.2 上），因此如果您的应用不支持 小屏幕，您应继续使用其他尺寸属性。</p><p>android:compatibleWidthLimitDp<br>此属性可让您指定用户支持的最大“最小宽度”，将屏幕兼容性模式用作 用户可选的功能 。如果设备可用屏幕的最小边大于您在这里的值， 用户仍可安装您的应用，但提议在屏幕兼容性模式下运行。默认 情况下，屏幕兼容性模式会停用，并且您的布局照例会调整大小以 适应屏幕，但按钮会显示在系统栏中，可让用户打开和关闭屏幕兼容性 模式。<br>注：如果您的应用可针对大 屏幕正确调整大小，则无需使用此属性。建议不要使用此 属性，而是按照本文档的 建议，确保您的布局针对较大屏幕调整大小。</p><p>android:largestWidthLimitDp<br>此属性可让您指定应用支持的最大“最小宽度”来强制启用屏幕兼容性模式。 如果设备可用屏幕的最小 边大于您在这里的值，应用将在屏幕 兼容性模式下运行，且用户无法停用该模式。<br>注：如果您的应用可针对大 屏幕正确调整大小，则无需使用此属性。建议不要使用此 属性，而是按照本文档的 建议，确保您的布局针对较大屏幕调整大小。</p><p>注意：针对 Android 3.2 及更高版本开发时，您 应改为将旧屏幕尺寸属性与上列 属性结合使用。同时使用新属性和旧尺寸属性可能导致 非预期的行为。</p><p>如需了解每个属性的更多信息，请跟随上面各自的链接。</p><h6 id="2-线性布局LinearLayout"><a href="#2-线性布局LinearLayout" class="headerlink" title="2. 线性布局LinearLayout"></a>2. 线性布局LinearLayout</h6><p>使用<code>wrap_content</code>、<code>match_parent</code>、<code>layout_weight</code> 等属性和值</p><p>要确保布局的灵活性并适应各种尺寸的屏幕，应使用 “wrap_content” 和 “match_parent” 控制某些视图组件的宽度和高度。</p><p>使用 “wrap_content”，系统就会将视图的宽度或高度设置成所需的最小尺寸以适应视图中的内容，而 “match_parent”（在低于 API 级别 8 的级别中称为 “fill_parent”）则会展开组件以匹配其父视图的尺寸。</p><p>如果使用 “wrap_content” 和 “match_parent” 尺寸值而不是硬编码的尺寸，视图就会相应地仅使用自身所需的空间或展开以填满可用空间。此方法可让布局正确适应各种屏幕尺寸和屏幕方向。</p><p><img src="/images/multi_screen/multi_screen_3.jpg" alt="multi_screen"></p><p>下图是在横纵屏切换的时候的显示效果，我们可以看到这样可以很好的适配屏幕尺寸的变化。</p><p><img src="/images/multi_screen/multi_screen_4.jpg" alt="multi_screen"></p><p><code>layout_weight</code>是线性布局的一个独特的属性，我们可以使用这个属性来按照比例对界面进行分配，完成一些特殊的需求。</p><p><img src="/images/multi_screen/multi_screen_5.jpg" alt="multi_screen"></p><p>我们在布局里面设置为线性布局，横向排列，然后放置两个宽度为0dp的按钮，分别设置weight为1和2，在效果图中，我们可以看到两个按钮按照1：2的宽度比例正常排列了，这也是我们经常使用到的场景，这是时候很好理解，Button1的宽度就是1/(1+2) = 1/3，Button2的宽度则是2/(1+2) = 2/3，我们可以很清楚的明白这种情景下的占比如何计算。</p><p>如果是垂直方向，那么我们应该改变的是layout_height的属性，下面是0dp的显示效果</p><p><img src="/images/multi_screen/multi_screen_6.jpg" alt="multi_screen"></p><h6 id="3-使用相对布局RelativeLayout"><a href="#3-使用相对布局RelativeLayout" class="headerlink" title="3. 使用相对布局RelativeLayout"></a>3. 使用相对布局RelativeLayout</h6><p>在开发中，我们大部分时候使用的都是线性布局、相对布局和帧布局，绝对布局由于适配性极差，所以极少使用。</p><p>由于各种布局的特点不一样，所以不能说哪个布局好用，到底应该使用什么布局只能根据实际需求来确定。我们可以使用 LinearLayout 的嵌套实例并结合 “wrap_content” 和 “match_parent”，以便构建相当复杂的布局。不过，我们无法通过 LinearLayout 精确控制子视图的特殊关系；系统会将 LinearLayout 中的视图直接并排列出。</p><p>如果我们需要将子视图排列出各种效果而不是一条直线，通常更合适的解决方法是使用 RelativeLayout，这样就可以根据各组件之间的特殊关系指定布局了。例如，我们可以将某个子视图对齐到屏幕左侧，同时将另一个视图对齐到屏幕右侧。</p><p>在小尺寸屏幕的显示<br><img src="/images/multi_screen/multi_screen_7.jpg" alt="multi_screen"></p><p>在平板的大尺寸上的显示效果<br><img src="/images/multi_screen/multi_screen_8.jpg" alt="multi_screen"></p><p>虽然控件的大小由于屏幕尺寸的增加而发生了改变，但是我们可以看到，由于使用了相对布局，所以控件之前的位置关系并没有发生什么变化，这说明我们的适配成功了。</p><h6 id="4-使用百分比布局-PercentRelativeLayout-PercentFrameLayout"><a href="#4-使用百分比布局-PercentRelativeLayout-PercentFrameLayout" class="headerlink" title="4. 使用百分比布局 PercentRelativeLayout  PercentFrameLayout"></a>4. 使用百分比布局 PercentRelativeLayout  PercentFrameLayout</h6><p>android-support-percent</p><p>app:layout_heightPercent=”20%”<br>app:layout_widthPercent=”70%” </p><p>app:layout_marginLeftPercent<br>app:layout_marginTopPercent<br>app:layout_marginRightPercent<br>app:layout_marginBottomPercent</p><p><img src="/images/multi_screen/percent_preview_1.png" alt="multi_screen"></p><h6 id="5-使用约束布局-ConstraintLayout"><a href="#5-使用约束布局-ConstraintLayout" class="headerlink" title="5. 使用约束布局 ConstraintLayout"></a>5. 使用约束布局 ConstraintLayout</h6><h6 id="6-为不同屏幕尺寸提供不同的布局"><a href="#6-为不同屏幕尺寸提供不同的布局" class="headerlink" title="6. 为不同屏幕尺寸提供不同的布局"></a>6. 为不同屏幕尺寸提供不同的布局</h6><p>默认情况下，Android 会调整应用布局的大小以适应当前设备屏幕。大多数 情况下效果很好。但有时 UI 可能看起来不太好，需要针对 不同的屏幕尺寸进行调整。例如，在较大屏幕上，您可能要调整 某些元素的位置和大小，以利用其他屏幕空间，或者在较小屏幕上， 可能需要调整大小以使所有内容纳入屏幕。<br>可用于提供尺寸特定资源的配置限定符包括 small、normal、large 和 xlarge。例如，超大屏幕的布局应使用 layout-xlarge/。<br>从 Android 3.2（API 级别 13）开始，以上尺寸组已弃用，您 应改为使用 sw<n>dp 配置限定符来定义布局资源 可用的最小宽度。例如，如果多窗格平板电脑布局 需要至少 600dp 的屏幕宽度，应将其放在 layout-sw600dp/ 中。声明适用于 Android 3.2 的平板电脑布局一节将进一步讨论如何使用新技术声明布局资源。</n></p><h6 id="7-使用资源限定符"><a href="#7-使用资源限定符" class="headerlink" title="7. 使用资源限定符"></a>7. 使用资源限定符</h6><p>Android 支持多种配置限定符，可让您控制系统 如何根据当前设备屏幕的特性选择备用资源。配置限定符是可以附加到 Android 项目中资源目录的字符串，用于指定在其中设计资源的配置。</p><p>要使用配置限定符：</p><p>在项目的 res/ 目录中新建一个目录，并使用以下 格式命名： &lt;resources_name&gt;-<qualifier></qualifier></p><p>&lt;resources_name&gt; 是标准资源名称（例如 drawable 或 layout）。</p><p><qualifier> 是下表 1 中的配置限定符，用于指定 要使用这些资源的屏幕配置（例如 hdpi 或 xlarge）。<br>您可以一次使用多个 <qualifier> — 只需使用短划线分隔每个 限定符。<br>将适当的配置特定资源保存在此新目录下。这些资源 文件的名称必须与默认资源文件完全一样。<br>例如，xlarge 是超大屏幕的配置限定符。将 此字符串附加到资源目录名称（例如 layout-xlarge）时，它指向 要在具有超大屏幕的设备上使用这些资源的系统。</qualifier></qualifier></p><p>表 1. 可用于为 不同屏幕配置提供特殊资源的配置限定符。</p><p><img src="/images/multi_screen/multi_screen_11.jpg" alt="multi_screen"></p><p>请注意，当 Android 系统在运行时选择使用哪些资源时，它会使用 特定逻辑确定“最佳匹配”资源。也就是说，您使用的限定符无 需在所有情况下精确匹配当前屏幕配置，系统也可 使用它们。特别是，根据屏幕尺寸限定符选择资源时，如果没有更好的匹配资源，则系统将 使用专为小于当前屏幕的屏幕而设计的 资源（例如，如有必要，大尺寸屏幕将使用标准尺寸的屏幕 资源）。但是，如果唯一可用的资源大于当前屏幕， 则系统不会使用这些资源，并且如果没有其他资源与设备 配置匹配，应用将会崩溃（例如，如果所有布局资源均用 xlarge 限定符标记， 但设备是标准尺寸的屏幕）</p><ul><li>使用尺寸限定符</li></ul><p>虽然这些布局可以拉伸组件内外的空间以适应各种屏幕，但它们不一定能为每种屏幕都提供最佳的用户体验。因此，我们的应用不仅仅只实施灵活布局，还应该应针对各种屏幕配置提供一些备用布局。</p><p>如何做到这一点呢？我们可以通过使用配置限定符，在运行时根据当前的设备配置自动选择合适的资源了，例如根据各种屏幕尺寸选择不同的布局。</p><p>很多应用会在较大的屏幕上实施“双面板”模式，即在一个面板上显示项目列表，而在另一面板上显示对应内容。平板电脑和电视的屏幕已经大到可以同时容纳这两个面板了，但手机屏幕就需要分别显示。因此，我们可以使用以下文件以便实施这些布局：</p><p>res/layout/main.xml，单面板（默认）布局：</p><p>res/layout-large/main.xml，双面板布局：</p><ul><li>使用最小宽度限定符</li></ul><p>最小宽度限定符可让您通过指定某个最小宽度（以 dp 为单位）来定位屏幕。例如，标准 7 英寸平板电脑的最小宽度为 600 dp，因此如果您要在此类屏幕上的用户界面中使用双面板（但在较小的屏幕上只显示列表），您可以使用上文中所述的单面板和双面板这两种布局，但您应使用 sw600dp 指明双面板布局仅适用于最小宽度为 600 dp 的屏幕，而不是使用 large 尺寸限定符。</p><p>res/layout-sw600dp/main.xml，双面板布局：  smallestWidth</p><p>也就是说，对于最小宽度大于等于 600 dp 的设备，系统会选择 layout-sw600dp/main.xml（双面板）布局，否则系统就会选择 layout/main.xml（单面板）布局。</p><ul><li>使用布局别名</li></ul><p>最小宽度限定符仅适用于 Android 3.2 及更高版本。因此，如果我们仍需使用与较低版本兼容的概括尺寸范围（小、正常、大和特大）。例如，如果要将用户界面设计成在手机上显示单面板，但在 7 英寸平板电脑、电视和其他较大的设备上显示多面板，那么我们就需要提供以下文件：</p><p>res/layout/main.xml: 单面板布局<br>res/layout-large: 多面板布局<br>res/layout-sw600dp: 多面板布局<br>后两个文件是相同的，因为其中一个用于和 Android 3.2 设备匹配，而另一个则是为使用较低版本 Android 的平板电脑和电视准备的。</p><p>要避免平板电脑和电视的文件出现重复（以及由此带来的维护问题），您可以使用别名文件。例如，您可以定义以下布局：</p><p>res/layout/main.xml，单面板布局<br>res/layout/main_twopanes.xml，双面板布局<br>然后添加这两个文件：</p><p>res/values-large/layout.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;item name=&quot;main_layout&quot; type=&quot;layout&quot;&gt;@layout/twopanes&lt;/item&gt;</span><br><span class="line">    &lt;bool name=&quot;has_two_panes&quot;&gt;true&lt;/bool&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure><p>res/values-sw600dp/layout.xml:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">    &lt;item name=&quot;main_layout&quot; type=&quot;layout&quot;&gt;@layout/twopanes&lt;/item&gt;</span><br><span class="line">    &lt;bool name=&quot;has_two_panes&quot;&gt;true&lt;/bool&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure><p>它们只是将 main 设置成了twopanes 的别名。</p><ul><li>使用屏幕方向限定符</li></ul><p>values-large-land values-large-port</p><h6 id="8-使用自动拉伸位图-9图"><a href="#8-使用自动拉伸位图-9图" class="headerlink" title="8. 使用自动拉伸位图 .9图"></a>8. 使用自动拉伸位图 .9图</h6><p>支持不同屏幕尺寸通常意味着您的图像资源也必须能够适应不同的尺寸。 例如，按钮背景必须能够适应其所应用到的任何一种按钮形状。</p><p>如果您在可能改变尺寸的组件上使用简单图像，您很快会发现效果有些差强人意，因为运行组件会均匀地拉伸或缩小您的图像。 解决方案是使用九宫格位图，这种特殊格式的 PNG 文件会指示哪些区域可以拉伸，哪些区域不可以拉伸。</p><p>因此，在设计将用于尺寸可变组件的位图时，请一律使用九宫格位图。</p><p><img src="/images/multi_screen/multi_screen_9.jpg" alt="multi_screen"></p><h6 id="9-使用矢量图"><a href="#9-使用矢量图" class="headerlink" title="9. 使用矢量图"></a>9. 使用矢量图</h6><p>SVG是指可伸缩矢量图形 (Scalable Vector Graphics)，它不同于传统的位图，不是通过存储图像中每一点的像素值来保存与使用图形，而是通过 XML 文件来定义一个图形，通过一些特定的语法和规则来绘制出我们所需的图像——同样是使用一张图片，SVG 的方式是事先定义好怎么去画这个图，然后等要用的时候再把它去画出来，而使用传统的位图的话就是已经有了画出来的图，然后要用的时候直接把画好的图拿出来用。这样一来的话我们就很容易可以分析出它们两种方式之间的优劣之处：</p><ul><li>SVG 是在要用图的时候再把图画出来，所以理所当然的在图片显示的时候会花费更多的时间消耗更多的资源。</li><li>同样由于上一个原因， SVG并不太适合层次过于复杂细节过于繁多的图片。</li><li>位图是事先已经画好的图片，所以适应性必然没有 SVG 好，同一张图片在不同分辨率下显示会有差异。</li><li>SVG 的文件里存储了绘制图片的相关信息，所以我们能够对图片的线条有一个非常清晰的感知，这在做动画的时候特别有用。</li><li>SVG 没有存储任何图像的像素信息，所以 SVG 的文件体积远小于传统的位图文件。</li><li>SVG 的文件画出来的图像是矢量图，所以不会存在失真的问题，理论上支持任何级别的缩放。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        vectorDrawables.useSupportLibrary = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">dependencies &#123;</span><br><span class="line">  compile &apos;com.android.support:appcompat-v7:23.2.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="二、支持各种屏幕密度"><a href="#二、支持各种屏幕密度" class="headerlink" title="二、支持各种屏幕密度"></a>二、支持各种屏幕密度</h5><h6 id="1-使用非密度制约像素"><a href="#1-使用非密度制约像素" class="headerlink" title="1. 使用非密度制约像素"></a>1. 使用非密度制约像素</h6><p>由于各种屏幕的像素密度都有所不同，因此相同数量的像素在不同设备上的实际大小也有所差异，这样使用像素定义布局尺寸就会产生问题。因此，请务必使用 dp 或 sp 单位指定尺寸。</p><h6 id="2-提供备用图片资源"><a href="#2-提供备用图片资源" class="headerlink" title="2. 提供备用图片资源"></a>2. 提供备用图片资源</h6><p>由于运行 Android 的设备具有多种屏幕密度，您应始终提供能够根据各种通用密度级别（低密度、中密度、高密度和超高密度）进行定制的位图资源。这有助于您在所有屏幕密度上获得良好的图形质量和性能。</p><p>目标设备 xxhdpi</p><p>xxhdpi    jpg解码<br>bmp.width —- &gt; 1080<br>bmp.height —- &gt; 1920<br>bmp.rowBytes * bmp.height —- &gt; 4147200     4050KB</p><p>xhdpi  </p><p>bmp.width —- &gt; 1620              1.5<br>bmp.height —- &gt; 2880             1.5<br>bmp.rowBytes * bmp.height —- &gt; 9331200     2.25倍</p><p>hdpi   4倍</p><p>mdpi   9倍</p><p>基本上每个应用都应该具有不同密度的替代可绘制对象 资源，因为基本上每个应用都有启动器图标，而且该图标应该在 所有屏幕密度中看起来都很好。同样，如果您的应用中包含其他位图可绘制对象（例如 应用中的菜单图标或其他图形），则应该为不同密度提供替代版本或 每种密度一个版本。</p><p>默认情况下，Android 会缩放位图可绘制对象（.png、.jpg 和 .gif 文件）和九宫格可绘制对象（.9.png 文件），使它们以适当的 物理尺寸显示在每部设备上。例如，如果您的应用只为 基线中密度屏幕 (mdpi) 提供位图可绘制对象，则在高密度 屏幕上会增大位图，在低密度屏幕上会缩小位图。这种缩放可能在 位图中造成伪影。为确保位图的最佳显示效果，应针对 不同屏幕密度加入不同分辨率的替代版本。<br>可用于密度特定资源的配置限定符（在下面详述） 包括 ldpi（低）、mdpi（中）、 hdpi（高）、xhdpi（超高）、xxhdpi （超超高）和 xxxhdpi（超超超高）。例如，高密度屏幕的位图应使用 drawable-hdpi/。<br>注：仅当要在 xxhdpi 设备上提供比正常位图大的启动器图标时才需要提供 mipmap-xxxhdpi 限定符。无需为所有应用的图像提供 xxxhdpi 资源。</p><p>有些设备会将启动器图标增大 25%。例如，如果您的最高 密度启动器图标已是超超高密度，缩放处理会降低其 清晰度。因此应在 mipmap-xxxhdpi 目录中提供更高密度的启动器图标，系统将改为增大较小 的图标。<br>请参阅提供 xxx-高密度启动器图标以了解详细信息。对启动程序图标以外的 UI 元素不应使用 xxxhdpi 限定符。<br>注：将您的所有启动器图标放在 res/mipmap-[density]/ 文件夹中，而非 res/drawable-[density]/ 文件夹中。无论安装应用的设备屏幕分辨率如何，Android 系统都会将资源保留在这些密度特定的文件夹中，例如 mipmap-xxxhdpi。此 行为可让启动器应用为您的应用选择要显示在主 屏幕上的最佳分辨率图标。</p><p>尺寸和密度配置限定符对应于 前面支持的屏幕范围中所述的通用尺寸和密度。</p><p>在运行时，系统通过 以下程序确保任何给定资源在当前屏幕上都能保持尽可能最佳的显示效果：</p><ul><li><p>系统使用适当的备用资源</p><p>根据当前屏幕的尺寸和密度，系统将使用您的应用中提供的任何尺寸和 密度特定资源。例如，如果设备有 高密度屏幕，并且应用请求可绘制对象资源，系统将查找 与设备配置最匹配的可绘制对象资源目录。根据可用的其他 备用资源，包含 hdpi 限定符（例如 drawable-hdpi/）的资源目录可能是最佳匹配项，因此系统将使用此 目录中的可绘制对象资源。</p></li><li><p>如果没有匹配的资源，系统将使用默认资源，并按需要向上 或向下扩展，以匹配当前的屏幕尺寸和密度。</p></li></ul><p>“默认”资源是指未标记配置限定符的资源。例如，drawable/ 中的资源是默认可绘制资源。 系统假设默认资源设计用于基线屏幕尺寸和密度，即 正常屏幕尺寸和中密度。 因此，系统对于高密度屏幕向上扩展默认密度 资源，对于低密度屏幕向下扩展。<br>当系统查找密度特定的资源但在 密度特定目录中未找到时，不一定会使用默认资源。系统在缩放时可能 改用其他密度特定资源提供更好的 效果。例如，查找低密度资源但该资源不可用时， 系统会缩小资源的高密度版本，因为 系统可轻松以 0.5 为系数将高密度资源缩小至低密度资源，与以 0.75 为系数 缩小中密度资源相比，伪影更少。<br>如需有关 Android 如何通过使配置限定符与设备配置匹配来选择备用资源的更多信息，请参阅Android 如何查找最佳匹配资源。</p><h5 id="三、实施自适应用户界面流程"><a href="#三、实施自适应用户界面流程" class="headerlink" title="三、实施自适应用户界面流程"></a>三、实施自适应用户界面流程</h5><p>UI 流可能视您的应用当前显示的布局而有所不同。例如，如果您的应用处于双窗格模式，点击左侧窗格中的某个项目会直接在右侧窗格中显示内容；如果是处于单窗格模式，内容应该会独立显示（在不同的 Activity 中）。</p><ul><li>确定当前布局</li></ul><p>由于您对每个布局的实现都略有差异，您需要优先完成的一项工作可能是确定用户目前查看的布局。 例如，您可能想了解用户是处于“单窗格”模式还是“双窗格”模式。 您可以通过查询给定视图是否存在并且是否可见来实现此目的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NewsReaderActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>&#123;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记当前面板类型    </span></span><br><span class="line">    <span class="keyword">boolean</span> mIsDualPane;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.main_layout);</span><br><span class="line">        </span><br><span class="line">        View articleView = findViewById(R.id.article);</span><br><span class="line">        mIsDualPane = articleView != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        articleView.getVisibility() == View.VISIBLE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请注意，这段代码用于查询“article”面板是否可用，与针对具体布局的硬编码查询相比，这段代码的灵活性要大得多。</p><ul><li>根据当前布局作出反应</li></ul><p>某些操作可能视当前布局而有不同的结果。例如，在 News Reader 示例应用中，如果 UI 处于双窗格模式，则点击标题列表中的某个标题会在右侧窗格中打开该文章，但如果 UI 处于单窗格模式，则会启动不同的 Activity：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onHeadlineSelected</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    mArtIndex = index;</span><br><span class="line">    <span class="keyword">if</span> (mIsDualPane) &#123;</span><br><span class="line">        <span class="comment">/* display article on the right pane */</span></span><br><span class="line">        mArticleFragment.displayArticle(mCurrentCat.getArticle(index));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* start a separate activity */</span></span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, ArticleActivity.class);</span><br><span class="line">        intent.putExtra(<span class="string">"catIndex"</span>, mCatIndex);</span><br><span class="line">        intent.putExtra(<span class="string">"artIndex"</span>, index);</span><br><span class="line">        startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在其他 Activity 中重复使用 Fragment</li></ul><p>在面向多种屏幕的设计中采用的一种固定模式是，让界面的某一部分在一些屏幕配置下以窗格形式实现，在其他配置下则以一个单独 Activity 的形式实现。 例如，在 News Reader 示例应用中，新闻文章文字在较大屏幕上显示在右侧窗格中，但在较小屏幕上则显示在一个单独的 Activity 内。</p><p>在这类情况下，您通常可以通过在几个 Activity 中重复使用同一 Fragment 子类来避免代码重复。例如，双窗格布局中使用了 ArticleFragment：</p><p>并在适用于较小屏幕的 Activity 布局 (ArticleActivity) 中重复使用ArticleFragment</p><ul><li>处理屏幕配置变更</li></ul><p>如果您要使用不同的 Activity 来实现界面的不同部分，您需要牢记的是，可能需要对某些配置变更（如旋转变化）作出反应，以便保持界面的一致性。</p><p>例如，在一台运行 Android 3.0 或更高版本的典型 7 英寸平板电脑上，当平板电脑在纵向模式下运行时，News Reader 示例应用使用单独的 Activity 来显示新闻文章，但在横向模式下则使用双窗格布局。</p><p>这意味着当用户处于纵向模式，并且用于查看文章的 Activity 位于屏幕上时，您需要检测屏幕方向已变为横向模式的情况并作出相应的反应：结束该 Activity 并返回主 Activity，以便内容可以显示在双窗格布局中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> mCatIndex, mArtIndex;</span><br><span class="line">        </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        mCatIndex = getIntent().getExtras().getInt(<span class="string">"catIndex"</span>, <span class="number">0</span>);</span><br><span class="line">        mArtIndex = getIntent().getExtras().getInt(<span class="string">"artIndex"</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If should be in two-pane mode, finish to return to main activity</span></span><br><span class="line">        <span class="keyword">if</span> (getResources().getBoolean(R.bool.has_two_panes)) &#123;</span><br><span class="line">            finish();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="最佳做法"><a href="#最佳做法" class="headerlink" title="最佳做法"></a>最佳做法</h4><h5 id="1-对布局尺寸使用-wrap-content、match-parent-或-dp-单位"><a href="#1-对布局尺寸使用-wrap-content、match-parent-或-dp-单位" class="headerlink" title="1. 对布局尺寸使用 wrap_content、match_parent 或 dp 单位"></a>1. 对布局尺寸使用 wrap_content、match_parent 或 dp 单位</h5><p>为 XML 布局文件中的视图定义 android:layout_width 和 android:layout_height 时，使用 “wrap_content”、 “match_parent” 或 dp 单位可确保在当前设备屏幕上为 视图提供适当的尺寸。</p><p>例如，layout_width=”100dp” 的视图在 中密度屏幕上测出宽度为 100 像素，在高密度屏幕上系统会将其扩展至 150 像素宽， 因此视图在屏幕上占用的物理空间大约相同。</p><p>类似地，您应选择 sp（缩放独立的像素）来定义文本 大小。sp 缩放系数取决于用户设置，系统 会像处理 dp 一样缩放大小。</p><h5 id="2-不要在应用代码中使用硬编码的像素值"><a href="#2-不要在应用代码中使用硬编码的像素值" class="headerlink" title="2. 不要在应用代码中使用硬编码的像素值"></a>2. 不要在应用代码中使用硬编码的像素值</h5><p>由于性能的原因和简化代码的需要，Android 系统使用像素作为 表示尺寸或坐标值的标准单位。这意味着， 视图的尺寸在代码中始终以像素表示，但始终基于当前的屏幕密度。 例如，如果 myView.getWidth() 返回 10，则表示视图在 当前屏幕上为 10 像素宽，但在更高密度的屏幕上，返回的值可能是 15。如果 在应用代码中使用像素值来处理预先未针对 当前屏幕密度缩放的位图，您可能需要缩放代码中使用的像素值，以与 未缩放的位图来源匹配。</p><p>如果应用在运行时操作位图或处理像素值，请参阅 下面有关其他密度注意事项的一节。</p><h5 id="3-使用RelativeLayout、ConstraintLayout等"><a href="#3-使用RelativeLayout、ConstraintLayout等" class="headerlink" title="3. 使用RelativeLayout、ConstraintLayout等"></a>3. 使用RelativeLayout、ConstraintLayout等</h5><p>与其他布局小工具不同，AbsoluteLayout 会强制 使用固定位置放置其子视图，很容易导致 在不同显示屏上显示效果不好的用户界面。因此，AbsoluteLayout 在 Android 1.5（API 级别 3）上便已弃用。</p><p>您应改用 RelativeLayout，它会使用相对定位 来放置其子视图。例如，您可以指定按钮小部件显示在文本小工具的“右边”。</p><h5 id="4-使用尺寸和密度特定资源"><a href="#4-使用尺寸和密度特定资源" class="headerlink" title="4. 使用尺寸和密度特定资源"></a>4. 使用尺寸和密度特定资源</h5><h5 id="5-为不同屏幕密度提供替代位图可绘制对象"><a href="#5-为不同屏幕密度提供替代位图可绘制对象" class="headerlink" title="5. 为不同屏幕密度提供替代位图可绘制对象"></a>5. 为不同屏幕密度提供替代位图可绘制对象</h5><p>虽然系统会根据当前屏幕 配置扩展布局，但您在不同的屏幕尺寸上可能要调整 UI，以及提供 针对不同密度优化的可绘制对象。这基本上是重申 本文档前面的信息。</p><p>如果需要精确控制应用在不同 屏幕配置上的外观，请在配置特定的 资源目录中调整您的布局和位图可绘制对象。例如，考虑要显示在 中密度和高密度屏幕上的图标。只需创建两种不同大小的图标 （例如中密度使用 100x100，高密度使用 150x150），然后使用适当的限定符 以适当的方向放置两个 变体：</p><p>res/drawable-mdpi/icon.png   //for medium-density screens<br>res/drawable-hdpi/icon.png   //for high-density screens<br>注：如果密度限定符在目录名称中未定义， 系统会假设该目录中的资源是针对基线中 密度而设计，对于其他密度将会适当地缩放。</p><h5 id="6-动态自适应用户界面"><a href="#6-动态自适应用户界面" class="headerlink" title="6. 动态自适应用户界面"></a>6. 动态自适应用户界面</h5><h4 id="其他密度注意事项"><a href="#其他密度注意事项" class="headerlink" title="其他密度注意事项"></a>其他密度注意事项</h4><p>本节详细说明 Android 如何在不同 屏幕密度上对位图可绘制对象执行缩放，以及如何进一步控制在不同密度屏幕上位图的绘制。 本节信息对大多数应用应该不怎么重要，除非您的 应用在不同屏幕密度上运行或 操控图形时遇到了问题。</p><p>为更好地了解在运行时 操控图形时如何支持多种密度，您应该先了解，系统通过以下方式帮助确保正确 缩放位图：</p><h5 id="1-资源（例如位图可绘制对象）的预缩放"><a href="#1-资源（例如位图可绘制对象）的预缩放" class="headerlink" title="1. 资源（例如位图可绘制对象）的预缩放"></a>1. 资源（例如位图可绘制对象）的预缩放</h5><p>根据当前屏幕的密度，系统将使用您的应用中提供的任何尺寸或 密度特定资源，并且不加缩放而显示它们。如果没有可用于正确密度 的资源，系统将加载默认资源，并按需要向上或向下扩展，以 匹配当前屏幕的密度。系统假设默认资源（ 没有配置限定符的目录中的资源）针对基线屏幕密度 (mdpi) 而设计， 除非它们加载自密度特定的资源目录。因此，系统 会执行预缩放，以将位图调整至适应当前屏幕 密度的大小。<br>如果您请求预缩放的资源的尺寸，系统将返回 代表缩放后尺寸的值。例如，针对 mdpi 屏幕以 50x50 像素 设计的位图在 hdpi 屏幕上将扩展至 75x75 像素（如果没有 用于 hdpi 的备用资源），并且系统会这样报告大小。<br>有时您可能不希望 Android 预缩放 资源。避免预缩放最简单的方法是将资源放在 有 nodpi 配置限定符的资源目录中。例如：<br>res/drawable-nodpi/icon.png<br>当系统使用此文件夹中的 icon.png 位图时，不会 根据当前设备密度缩放。</p><h5 id="2-像素尺寸和坐标的自动缩放"><a href="#2-像素尺寸和坐标的自动缩放" class="headerlink" title="2. 像素尺寸和坐标的自动缩放"></a>2. 像素尺寸和坐标的自动缩放</h5><p>应用可通过在清单中将 android:anyDensity 设置为 “false” 或者通过将 inScaled 设置为 “false” 对 Bitmap 编程来停用预缩放。在此情况下，系统在绘制时会自动缩放任何绝对的像素坐标和像素 尺寸值。缩放的目的是确保像素定义的屏幕元素仍 以它们在基线屏幕密度 (mdpi) 下的大致相同物理尺寸显示。系统会对应用透明地处理此缩放，并且 向应用报告缩放后的像素尺寸，而不是物理像素尺寸。<br>例如，假设设备具有 480x800 的 WVGA 高密度屏幕，大约 与传统 HVGA 屏幕的尺寸一样，但它运行的应用停用了 预缩放。在此情况下，系统在查询屏幕尺寸时会对应用“撒谎” ，报告 320x533（屏幕密度的近似 mdpi 转换值）。然后，当 应用执行绘制操作时，例如作废从 (10,10) 到 (100, 100) 的矩形，系统会将它们缩放适当的量以转变坐标，并且实际 作废区域 (15,15) 到 (150, 150)。如果应用直接操控缩放的位图， 此差异可能会导致非预期的行为，但这被视为 确保应用最佳性能所需的合理权衡。如果遇到此 情况，请参阅将 dp 单位转换为像素 单位一节。<br>通常，不应停用预缩放。支持多种 屏幕的最佳方法是采用上面如何支持 多种屏幕中所述的基本技术。<br>如果您的应用操控位图或以某种其他方式直接与 屏幕上的像素交互，您可能需要采取其他步骤支持不同的屏幕密度。例 如，如果您通过计算手指滑过的像素数 来响应触控手势，则需使用适当的密度独立像素值，而不是实际 像素。</p><h5 id="3-缩放运行时创建的位图对象"><a href="#3-缩放运行时创建的位图对象" class="headerlink" title="3.缩放运行时创建的位图对象"></a>3.缩放运行时创建的位图对象</h5><p>如果您的应用创建内存中位图（Bitmap 对象）， 系统在默认情况下假设位图是针对基线中密度屏幕而设计，然后 在绘制时自动缩放位图。当位图具有不明的密度属性时，系统会对 Bitmap 应用“自动缩放”。如果未正确 考虑当前设备的屏幕密度和指定位图的密度属性， 自动缩放可能导致缩放伪影，就像未提供备用资源一样。</p><h5 id="4-将-dp-单位转换为像素单位"><a href="#4-将-dp-单位转换为像素单位" class="headerlink" title="4.将 dp 单位转换为像素单位"></a>4.将 dp 单位转换为像素单位</h5><p>在某些情况下，您需要以 dp 表示尺寸，然后将它们转换为 像素。设想一个在用户 手指移动至少 16 像素之后可以识别滚动或滑动手势的应用。在基线屏幕上，用户必须移动 16 pixels / 160 dpi（等于一英寸的 1/10 或 2.5 毫米），然后才会识别该手势。在 具有高密度显示屏 (240dpi) 的设备上，用户必须移动 16 pixels / 240 dpi（等于 一英寸的 1/15 或 1.7 毫米）。此距离更短，应用因此 似乎对用户更灵敏。<br>要修复此问题，手势阈值必须在代码中以 dp 表示，然后 转换为实际像素。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://developer.android.com/about/dashboards/index.html#Screens" target="_blank" rel="noopener">Android屏幕尺寸和密度</a><br><a href="https://developer.android.com/training/multi_screen/index.html" target="_blank" rel="noopener">针对Android多种屏幕的设计</a><br><a href="https://developer.android.com/guide/practices/screens_support.html" target="_blank" rel="noopener">支持多种屏幕</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h4&gt;&lt;p&gt;Android 可在各种具有不同屏幕尺寸和密度的设备上运行。对于应用，Android 系统在不同设备中提供一致的开发环境，可以处理大多数工作，将每个应用的用户界面调整为适应其显示的屏幕。 同时，系统提供 API，可用于控制应用适用于特定屏幕尺寸和密度的 UI，以针对不同屏幕配置优化 UI 设计。 例如，您可能想要不同于手机 UI 的平板电脑 UI。&lt;/p&gt;
&lt;p&gt;虽然系统为使您的应用适用于不同的屏幕，会进行缩放和大小调整，但您应针对不同的屏幕尺寸和密度优化应用。 这样可以最大程度优化所有设备上的用户体验，用户会 认为您的应用实际上是专为他们的设备而设计，而不是 简单地拉伸以适应其设备屏幕。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="分辨率" scheme="http://android9527.com/tags/%E5%88%86%E8%BE%A8%E7%8E%87/"/>
    
      <category term="布局" scheme="http://android9527.com/tags/%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>Android界面性能调优手册(1)</title>
    <link href="http://android9527.com/2017/11/06/2017-11-06-Android%E7%95%8C%E9%9D%A2%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E6%89%8B%E5%86%8C(1)/"/>
    <id>http://android9527.com/2017/11/06/2017-11-06-Android界面性能调优手册(1)/</id>
    <published>2017-11-05T16:00:00.000Z</published>
    <updated>2017-11-08T03:56:51.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>界面是 Android 应用中直接影响用户体验最关键的部分。如果代码实现得不好，界面容易发生卡顿且导致应用占用大量内存。<br><a id="more"></a></p><h4 id="Android渲染知识"><a href="#Android渲染知识" class="headerlink" title="Android渲染知识"></a>Android渲染知识</h4><h5 id="1-1-绘制原理"><a href="#1-1-绘制原理" class="headerlink" title="1.1 绘制原理"></a>1.1 绘制原理</h5><p>Android系统要求每一帧都要在 16ms 内绘制完成，平滑的完成一帧意味着任何特殊的帧需要执行所有的渲染代码（包括 framework 发送给 GPU 和 CPU 绘制到缓冲区的命令）都要在 16ms 内完成，保持流畅的体验。这个速度允许系统在动画和输入事件的过程中以约 60 帧每秒（ 1秒 / 0.016帧每秒 = 62.5帧/秒 ）的平滑帧率来渲染。<br><img src="/images/draw/draw_1.png" alt="draw"></p><p>如果你的应用没有在 16ms 内完成这一帧的绘制，假设你花了 24ms 来绘制这一帧，那么就会出现掉帧的情况。<br><img src="/images/draw/draw_2.png" alt="draw"></p><p>系统准备将新的一帧绘制到屏幕上，但是这一帧并没有准备好，所有就不会有绘制操作，画面也就不会刷新。反馈到用户身上，就是用户盯着同一张图看了 32ms 而不是 16ms ，也就是说掉帧发生了。</p><h5 id="1-2-掉帧"><a href="#1-2-掉帧" class="headerlink" title="1.2 掉帧"></a>1.2 掉帧</h5><p>掉帧是用户体验中一个非常核心的问题。丢弃了当前帧，并且之后不能够延续之前的帧率，这种不连续的间隔会容易会引起用户的注意，也就是我们常说的卡顿、不流畅。</p><p>引起掉帧的原因非常多，比如：</p><ul><li><p>花了非常多时间重新绘制界面中的大部分东西，这样非常浪费CPU周期；<br><img src="/images/draw/draw_3.png" alt="draw"></p></li><li><p>过度绘制严重，在绘制用户看不到的对象上花费了太多的时间</p></li><li><p>有一大堆动画重复了一遍又一遍，消耗 CPU 、 GPU 资源；</p></li><li><p>频繁的触发垃圾回收；</p></li></ul><h5 id="1-3-为什么是60Fps？"><a href="#1-3-为什么是60Fps？" class="headerlink" title="1.3 为什么是60Fps？"></a>1.3 为什么是60Fps？</h5><p>Android系统要求每一帧都要在 16ms 内绘制完成，那么1秒的帧率就是约 60 帧每秒（ 1秒 / 0.016帧每秒 = 62.5帧/秒 ），那为什么要以 60 Fps来作为 App 性能的衡量标准呢？这是因为人眼和大脑之间的协作无法感知到超过 60 Fps的画面更新。</p><p>市面上绝大多数Android设备的屏幕刷新频率是 60 HZ。当然，超过 60 Fps 是没有意义的，人眼感知不到区别。24 Fps 是人眼能感知的连续线性的运动，所以是电影胶圈的常用帧率，因为这个帧率已经足够支撑大部分电影画面所要表达的内容，同时能最大限度地减少费用支出。但是，低于 30 Fps 是无法顺畅表现绚丽的画面内容的，此时就需要用到 60 Fps 来达到想要表达的效果。</p><p>应用的界面性能目标就是保持 60 Fps，这意味着每一帧你只有 16 ms（1秒 / 60帧率）的时间来处理所有的任务。</p><h5 id="1-4-垃圾回收"><a href="#1-4-垃圾回收" class="headerlink" title="1.4 垃圾回收"></a>1.4 垃圾回收</h5><p>垃圾回收器是一个在应用运行期间自动释放那些不再引用的内存的机制，常称 GC 。频繁的 GC 也是导致严重性能问题的罪魁祸首之一。<br>前面提到，平滑的完成一帧意味着所有渲染代码都必须在 16ms 内完成。频繁的 GC 会严重限制一帧时间内的剩余时间，如果 GC 所做的工作超过了那些必须的工作，那么留给应用平滑的帧率的时间就越少。越接近 16ms ，在垃圾回收事件触发的时候，就越容易导致卡顿。</p><p>注意，Android4.4 引进了新的 ART 虚拟机来取代 Dalvik 虚拟机。它们的机制大有不同，简单而言：</p><ul><li>Dalvik 虚拟机的 GC 是非常耗资源的，并且在正常的情况下一个硬件性能不错的Android设备也会很容易耗费掉 10 – 20 ms 的时间；</li><li>ART 虚拟机的GC会动态提升垃圾回收的效率，在 ART 中的中断，通常在 2 – 3 ms 间。 比 Dalvik 虚拟机有很大的性能提升；<br>ART 虚拟机相对于 Dalvik 虚拟机来说的垃圾回收来说有一个很大的性能提升，但 2 – 3 ms 的回收时间对于超过16ms帧率的界限也是足够的。因此，尽管垃圾回收在 Android 5.0 之后不再是耗资源的行为，但也是始终需要尽可能避免的，特别是在执行动画的情况下，可能会导致一些让用户明显感觉的丢帧。 </li></ul><h5 id="1-5-UI-线程"><a href="#1-5-UI-线程" class="headerlink" title="1.5 UI 线程"></a>1.5 UI 线程</h5><p>UI 线程是应用的主线程，很多的性能和卡顿问题是由于我们在主线程中做了大量的工作。<br>所以，所有耗资源的操作，比如 IO 操作、网络操作、SQL 操作、列表刷新等，都应该用后台进程去实现，不能占用主线程，主线程是 UI 线程，是保持程序流畅的关键；<br>在 Android 5.0 版本里，Android 框架层引入了 “ Render Thread ” ，用于向 GPU 发送实际渲染的操作。这个线程减轻了一些 UI 线程减少的操作。但是输入、滚动和动画仍然在 UI thread，因为 Thread 必须能够响应操作。</p><h5 id="1-6-垂直同步"><a href="#1-6-垂直同步" class="headerlink" title="1.6 垂直同步"></a>1.6 垂直同步</h5><p>垂直同步是 Android4.1 通过 Project Butter 在 UI 架构中引入的新技术，同期引入的还有 Triple Buffer 和 HWComposer 等技术，都是为提高 UI 的流畅性而生。</p><p>举个例子，你拍了一张照片，然后旋转5度再拍另外一张照片，将两照片的中间剪开并拼接在一起，得到下图：<br>中间这部分有明显区别的部分，等价于设备刷新率和帧速率不一致的结果。</p><p>一般而言， GPU 的帧速率应高于刷新率，才不会卡顿或掉帧。如果屏幕刷新率比帧速率还快，屏幕会在两帧中显示同一个画面，这种断断续续情况持续发生时，用户将会很明显地感觉到动画的卡顿或者掉帧，然后又恢复正常，我们常称之为闪屏、跳帧、延迟。应用应避免这些帧率下降的情况，以确保 GPU 能在屏幕刷新之前完成数据的获取及写入，保证动画流畅。</p><h5 id="1-7-UI-绘制机制与栅格化"><a href="#1-7-UI-绘制机制与栅格化" class="headerlink" title="1.7 UI 绘制机制与栅格化"></a>1.7 UI 绘制机制与栅格化</h5><p>绝大多数渲染操作都依赖两个硬件： CPU 、 GPU 。 CPU 负责 Measure 、 layout 、 Record 、 Execute 的计算操作， GPU 负责栅格化（ Rasterization ）操作。 非必需的视图组件会带来多余的 CPU 计算操作，还会占用多余的 GPU 资源。</p><p>栅格化（ Rasterization ）能将 Button 、 Shape 、 Path 、 Bitmap 等资源组件拆分到不同的像素上进行显示。这个操作很费时，所以引入了 GPU 来加快栅格化的操作。</p><p>CPU 负责把 UI 组件计算成多边形（ Polygons ），纹理（ Texture ），然后交给 GPU 进行栅格化渲染，再将处理结果传到屏幕上显示</p><p>在 Android 里的那些资源组件的显示（比如 Bitmaps 、 Drawable ），都是一起打包到统一的纹理（ Texture ）当中，然后再传递到 GPU 里面。</p><p>图片的显示，则是先经过 CPU 的计算加载到内存中，再传给 GPU 进行渲染。文字的显示，则是先经过 CPU 换算成纹理（ Texture ），再传给 GPU 进行渲染，返回到 CPU 绘制单个字符的时候，再重新引用经过 GPU 渲染的内容。动画的显示更加复杂，我们需要在 16 ms 内处理完所有 CPU 和 GPU 的计算、绘制、渲染等操作，才能获得应用的流畅体验。</p><h4 id="二-To检测和解决"><a href="#二-To检测和解决" class="headerlink" title="二. To检测和解决"></a>二. To检测和解决</h4><h5 id="2-1-检测维度"><a href="#2-1-检测维度" class="headerlink" title="2.1 检测维度"></a>2.1 检测维度</h5><p>根据业务的不同与所需要的测试粒度的不同，就会有不同的检测维度。目前我所在业务所需的界面性能检测维度如下：</p><ul><li>界面过度绘制；（检测过度绘制）</li><li>渲染性能；（检测严格模式下的UI渲染性能呈现）</li><li>布局边界合理性；（检测元素显示的合理性）</li><li>还有专项测试中某些用户场景可能还包含着另外一些隐形的检测维度，比如：</li><li>OpenGL 跟踪分析；</li><li>GPU 视图更新合理性；</li><li>Flash 硬件层更新合理性；</li><li>动画加 / 减速状态问题点检测；</li><li>……</li></ul><h5 id="2-2-调试工具"><a href="#2-2-调试工具" class="headerlink" title="2.2 调试工具"></a>2.2 调试工具</h5><p>检测和解决界面性能问题很大程度上依赖于你的应用程序架构，幸运的是，Andorid 提供了很多调试工具，知道并学会使用这些工具很重要，它们可以帮助我们调试和分析界面性能问题，以让应用拥有更好的性能体验。下面列举Android常见的界面性能调试工具：</p><h6 id="2-2-1-Hierarchy-View"><a href="#2-2-1-Hierarchy-View" class="headerlink" title="2.2.1  Hierarchy View"></a>2.2.1  Hierarchy View</h6><p>Hierarchy View 在Android SDK里自带，常用来查看界面的视图结构是否过于复杂，用于了解哪些视图过度绘制，又该如何进行改进</p><h6 id="2-2-2-Lint"><a href="#2-2-2-Lint" class="headerlink" title="2.2.2 Lint"></a>2.2.2 Lint</h6><p>Lint 是 ADT 自带的静态代码扫描工具，可以给 XML 布局文件和 项目代码中不合理的或存在风险的模块提出改善性建议。官方关于 Lint 的实际使用的提示，列举几点如下：</p><ul><li>包含无用的分支，建议去除；</li><li>包含无用的父控件，建议去除；</li><li>警告该布局深度过深；</li><li>建议使用 compound drawables ；</li><li>建议使用 merge 标签</li><li>……</li></ul><h6 id="2-2-3-Systrace"><a href="#2-2-3-Systrace" class="headerlink" title="2.2.3 Systrace"></a>2.2.3 Systrace</h6><p> Systrace 在Android DDMS 里自带，可以用来跟踪 graphics 、view 和 window 的信息，发现一些深层次的问题。很麻烦，限制大，实际调试中我基本用不到。</p><h6 id="2-2-4-Track"><a href="#2-2-4-Track" class="headerlink" title="2.2.4 Track"></a>2.2.4 Track</h6><p> Track 在 Android DDMS里自带，是个很棒的用来跟踪构造视图的时候哪些方法费时，精确到每一个函数，无论是应用函数还是系统函数，我们可以很容易地看到掉帧的地方以及那一帧所有函数的调用情况，找出问题点进行优化。</p><h6 id="2-2-5-OverDraw"><a href="#2-2-5-OverDraw" class="headerlink" title="2.2.5 OverDraw"></a>2.2.5 OverDraw</h6><p> 通过在 Android 设备的设置 APP 的开发者选项里打开 “ 调试 GPU 过度绘制 ” ，来查看应用所有界面及分支界面下的过度绘制情况，方便进行优化。</p><h6 id="2-2-6-GPU-呈现模式分析"><a href="#2-2-6-GPU-呈现模式分析" class="headerlink" title="2.2.6 GPU 呈现模式分析"></a>2.2.6 GPU 呈现模式分析</h6><p>通过在 Android 设备的设置 APP 的开发者选项里启动 “ GPU 呈现模式分析 ” ，可以得到最近 128 帧 每一帧渲染的时间，分析性能渲染的性能及性能瓶颈。</p><h6 id="2-2-7-StrictMode"><a href="#2-2-7-StrictMode" class="headerlink" title="2.2.7 StrictMode　　"></a>2.2.7 StrictMode　　</h6><p>通过在 Android 设备的设置 APP 的开发者选项里启动 “ 严格模式 ” ，来查看应用哪些操作在主线程上执行时间过长。当一些操作违背了严格模式时屏幕的四周边界会闪烁红色，同时输出 StrictMode 的相关信息到 LOGCAT 日志中。</p><h6 id="2-2-8-Animator-duration-scale"><a href="#2-2-8-Animator-duration-scale" class="headerlink" title="2.2.8 Animator duration scale　　"></a>2.2.8 Animator duration scale　　</h6><p>通过在 Android 设备的设置 APP 的开发者选项里打开 “ 窗口动画缩放 ” / “ 过渡动画缩放 ” / “ 动画程序时长缩放 ”，来加速或减慢动画的时间，以查看加速或减慢状态下的动画是否会有问题。</p><h5 id="2-3-如何解决"><a href="#2-3-如何解决" class="headerlink" title="2.3 如何解决　　"></a>2.3 如何解决　　</h5><p>前面提到过我司的目前所需的测试维度如下：</p><ul><li>界面过度绘制；（检测过度绘制）</li><li>渲染性能；（检测严格模式下的UI渲染性能呈现） 故接下来将围绕这两点，分别从概念、追踪、挖掘根源以及排查的工具来具体讲述如何解决，以及给开发的优化建议。</li></ul><h4 id="三-界面过度绘制（OverDraw）"><a href="#三-界面过度绘制（OverDraw）" class="headerlink" title="三. 界面过度绘制（OverDraw）"></a>三. 界面过度绘制（OverDraw）</h4><h5 id="3-1-过度绘制概念"><a href="#3-1-过度绘制概念" class="headerlink" title="3.1 过度绘制概念"></a>3.1 过度绘制概念</h5><p>过度绘制是一个术语，表示某些组件在屏幕上的一个像素点的绘制次数超过 1 次。</p><p>通俗来讲，绘制界面可以类比成一个涂鸦客涂鸦墙壁，涂鸦是一件工作量很大的事情，墙面的每个点在涂鸦过程中可能被涂了各种各样的颜色，但最终呈现的颜色却只可能是 1 种。这意味着我们花大力气涂鸦过程中那些非最终呈现的颜色对路人是不可见的，是一种对时间、精力和资源的浪费，存在很大的改善空间。绘制界面同理，花了太多的时间去绘制那些堆叠在下面的、用户看不到的东西，这样是在浪费CPU周期和渲染时间！</p><p>官方例子，被用户激活的卡片在最上面,而那些没有激活的卡片在下面，在绘制用户看不到的对象上花费了太多的时间。</p><h5 id="3-2-追踪过度绘制"><a href="#3-2-追踪过度绘制" class="headerlink" title="3.2 追踪过度绘制"></a>3.2 追踪过度绘制</h5><p>通过在 Android 设备的设置 APP 的开发者选项里打开 “ 调试 GPU 过度绘制 ” ，来查看应用所有界面及分支界面下的过度绘制情况，方便进行优化。</p><p>Android 会在屏幕上显示不同深浅的颜色来表示过度绘制：</p><ul><li>没颜色：没有过度绘制，即一个像素点绘制了 1 次，显示应用本来的颜色；</li><li>蓝色：1倍过度绘制，即一个像素点绘制了 2 次；</li><li>绿色：2倍过度绘制，即一个像素点绘制了 3 次；</li><li>浅红色：3倍过度绘制，即一个像素点绘制了 4 次；</li><li>深红色：4倍过度绘制及以上，即一个像素点绘制了 5 次及以上； 设备的硬件性能是有限的，当过度绘制导致应用需要消耗更多资源（超过了可用资源）的时候性能就会降低，表现为卡顿、不流畅、ANR 等。为了最大限度地提高应用的性能和体验，就需要尽可能地减少过度绘制，即更多的蓝色色块而不是红色色块。 　　<br>实际测试，常用以下两点来作为过度绘制的测试指标，将过度绘制控制在一个约定好的合理范围内：</li><li>应用所有界面以及分支界面均不存在超过4X过度绘制（深红色区域）；</li><li>应用所有界面以及分支界面下，3X过度绘制总面积（浅红色区域）不超过屏幕可视区域的1/4；</li></ul><h5 id="3-3-过度绘制的根源"><a href="#3-3-过度绘制的根源" class="headerlink" title="3.3 过度绘制的根源"></a>3.3 过度绘制的根源</h5><p>过度绘制很大程度上来自于视图相互重叠的问题，其次还有不必要的背景重叠。</p><p>官方例子，比如一个应用所有的View都有背景的话，就会看起来像第一张图中那样，而在去除这些不必要的背景之后（指的是Window的默认背景、Layout的背景、文字以及图片的可能存在的背景），效果就像第二张图那样，基本没有过度绘制的情况。</p><h5 id="3-4-不合理的xml布局对绘制的影响"><a href="#3-4-不合理的xml布局对绘制的影响" class="headerlink" title="3.4 不合理的xml布局对绘制的影响"></a>3.4 不合理的xml布局对绘制的影响</h5><p>当布局文件的节点树的深度越深，XML 中的标签和属性设置越多，对界面的显示有灾难性影响。</p><p>一个界面要显示出来，第一步会进行解析布局，在 requestLayout 之后还要进行一系列的 measure 、 layout 、 draw 操作，若布局文件嵌套过深、拥有的标签属性过于臃肿，每一步的执行时间都会受到影响，而界面的显示是进行完这些操作后才会显示的，所以每一步操作的时间增长，最终显示的时间就会越长。</p><h5 id="3-5-源码相关"><a href="#3-5-源码相关" class="headerlink" title="3.5 源码相关"></a>3.5 源码相关</h5><p>有能力且有兴趣看源码的童鞋，过度绘制的源码位置在: /frameworks/base/libs/hwui/OpenGLRenderer.cpp ，有兴趣的可以去研究查看。</p><h4 id="四-渲染性能（Rendering）"><a href="#四-渲染性能（Rendering）" class="headerlink" title="四. 渲染性能（Rendering）"></a>四. 渲染性能（Rendering）</h4><h5 id="4-1-渲染性能概念"><a href="#4-1-渲染性能概念" class="headerlink" title="4.1 渲染性能概念"></a>4.1 渲染性能概念</h5><p>渲染性能往往是掉帧的罪魁祸首，这种问题很常见，让人头疼。好在 Android 给我们提供了一个强大的工具，帮助我们非常容易追踪性能渲染问题，看到究竟是什么导致你的应用出现卡顿、掉帧。</p><h5 id="4-2-追踪渲染性能"><a href="#4-2-追踪渲染性能" class="headerlink" title="4.2 追踪渲染性能"></a>4.2 追踪渲染性能</h5><p>通过在 Android 设备的设置 APP 的开发者选项里打开 “ GPU 呈现模式分析 ” 选项，选择 ” 在屏幕上显示为条形图 “ 。</p><p>这个工具会在Android 设备的屏幕上实时显示当前界面的最近 128 帧 的 GPU 绘制图形数据，包括 StatusBar 、 NavBar 、 当前界面的 GPU 绘制图形柱状图数据。我们一般只需关心当前界面的 GPU 绘制图形数据即可。</p><p>界面上一共有 128 个小柱状图，代表的是当前界面最近的 128 帧 GPU 绘制图形数据。一个小柱状图代表的这一帧画面渲染的耗时，柱状图越高代表耗时越长。随着界面的刷新，柱状图信息也会实时滚动刷新。</p><p>中间有一条绿线，代表 16 ms ，保持动画流畅的关键就在于让这些垂直的柱状条尽可能地保持在绿线下面,任何时候超过绿线,你就有可能丢失一帧的内容。</p><p>每一个柱状图都是由三种颜色构成：蓝、红、黄。</p><ul><li>蓝色代表的是这一帧绘制 Display List 的时间。通俗来说，就是记录了需要花费多长时间在屏幕上更新视图。用代码语言来说，就是执行视图的 onDraw 方法，创建或更新每一个视图的 Display List 的时间。</li><li>红色代表的是这一帧 OpenGL 渲染 Display List 所需要的时间。通俗来说，就是记录了执行视图绘制的耗时。用代码语言来说，就是 Android 用 OpenGL ES 的 API 接口进行 2D 渲染 Display List 的时间。</li><li>黄色代表的是这一帧 CPU 等待 GPU 处理的时间。通俗来说，就是 CPU 等待 GPU 发出接到命令的回复的等待时间。用代码语言来说，就是这是一个阻塞调用。 　　<br>实际测试，常用以下两点来作为渲染性能的测试指标，将渲染性能控制在一个约定好的合理范围内：</li><li>执行应用的所有功能及分支功能，操作过程中涉及的柱状条区域应至少 90 % 保持到绿线下面；</li><li>从用户体检的角度主观判断应用在 512 M 内存的 Android 设备下所有操作过程中的卡顿感是否能接受，不会感觉突兀怪异；<h5 id="4-3-渲染性能差的根源"><a href="#4-3-渲染性能差的根源" class="headerlink" title="4.3 渲染性能差的根源"></a>4.3 渲染性能差的根源</h5></li></ul><p>当你看到蓝色的线较高的时候，可能是由于你的视图突然无效了需要重新绘制，或者是自定义的视图过于复杂耗时过长。</p><p>当你看到红色的线较高的时候，可能是由于你的视图重新提交了需要重新绘制导致的（比如屏幕从竖屏旋转成横屏后当前界面重新创建），或者是自定义的视图很复杂，绘制起来很麻烦，导致耗时过长。比如下面这种视图：</p><p>当你看到黄色的线较高的时候，那就意味着你给 GPU 太多的工作，太多的负责视图需要 OpenGL 命令去绘制和处理，导致 CPU 迟迟没等到 GPU 发出接到命令的回复。</p><h5 id="4-4-检测说明"><a href="#4-4-检测说明" class="headerlink" title="4.4 检测说明"></a>4.4 检测说明</h5><p>这个工具能够很好地帮助你找到渲染相关的问题，帮助你找到卡顿的性能瓶颈，追踪究竟是什么导致被测应用出现卡顿、变慢的情况，以便在代码层面进行优化。甚至让负责产品设计的人去改善他的设计，以获得良好的用户体验。</p><p>检测渲染性能时，常伴随着开启“ 严格模式 ” 查看应用哪些情景在 UI 线程（主线程）上执行时间过长。</p><p>另外有些强大但可能少用的工具在测试性能渲染时辅助分析，比如：</p><ul><li><p>HierarchyViewer：这个工具常用来查看界面的视图结构是否过于复杂，用于了解哪些视图过度绘制，又该如何进行改进；</p></li><li><p>Tracer for OpenGL：这个工具收集了所有UI界面发给GPU的绘制命令。常用于辅助开发人员 DEBUG 、定位一些 HierarchyViewer 工具定位不了的疑难渲染细节问题。</p></li></ul><h4 id="五-给开发的界面优化-Advice"><a href="#五-给开发的界面优化-Advice" class="headerlink" title="五. 给开发的界面优化 Advice"></a>五. 给开发的界面优化 Advice</h4><h5 id="5-1-优化布局的结构"><a href="#5-1-优化布局的结构" class="headerlink" title="5.1 优化布局的结构"></a>5.1 优化布局的结构</h5><p>布局结构太复杂，会减慢渲染的速度，造成性能瓶颈。我们可以通过以下这些惯用、有效的布局原则来优化：</p><ul><li>避免复杂的View层级。布局越复杂就越臃肿，就越容易出现性能问题，寻找最节省资源的方式去展示嵌套的内容；</li><li>尽量避免在视图层级的顶层使用相对布局 RelativeLayout 。相对布局 RelativeLayout 比较耗资源，因为一个相对布局 RelativeLayout 需要两次度量来确保自己处理了所有的布局关系，而且这个问题会伴随着视图层级中的相对布局 RelativeLayout 的增多，而变得更严重；</li><li>布局层级一样的情况建议使用线性布局 LinearLayout 代替相对布局 RelativeLayout，因为线性布局 LinearLayout 性能要更高一些；确实需要对分支进行相对布局 RelativeLayout 的时候，可以考虑更优化的网格布局 GridLayout ，它已经预处理了分支视图的关系，可以避免两次度量的问题；</li><li>相对复杂的布局建议采用相对布局 RelativeLayout ，相对布局 RelativeLayout 可以简单实现线性布局 LinearLayout 嵌套才能实现的布局；</li><li>不要使用绝对布局 AbsoluteLayout ；</li><li>将可重复使用的组件抽取出来并用 标签进行重用。如果应用多个地方的 UI 用到某个布局，就将其写成一个布局部件，便于各个 UI 重用。</li><li>使用 merge 标签减少布局的嵌套层次。</li><li>去掉多余的不可见背景。有多层背景颜色的布局，只留最上层的对用户可见的颜色即可，其他用户不可见的底层颜色可以去掉，减少无效的绘制操作；</li><li>尽量避免使用 layout_weight 属性。使用包含 layout_weight 属性的线性布局 LinearLayout 每一个子组件都需要被测量两次，会消耗过多的系统资源。在使用 ListView 标签与 GridView 标签的时候，这个问题显的尤其重要，因为子组件会重复被创建。平分布局可以使用相对布局 RelativeLayout 里一个 0dp 的 view 做分割线来搞定，如果不行，那就……；</li><li>合理的界面的布局结构应是宽而浅，而不是窄而深；<h5 id="5-2-优化处理逻辑"><a href="#5-2-优化处理逻辑" class="headerlink" title="5.2 优化处理逻辑"></a>5.2 优化处理逻辑</h5></li><li>按需载入视图。某些不怎么重用的耗资源视图，可以等到需要的时候再加载，提高UI渲染速度；</li><li>使用 ViewStub 标签来加载一些不常用的布局；</li><li>动态地 inflation view 性能要比用 ViewStub 标签的 setVisiblity 性能要好，当然某些功能的实现采用 ViewStub 标签更合适；</li><li>尽量避免不必要的耗资源操作，节省宝贵的运算时间；</li><li>避免在 UI 线程进行繁重的操作。耗资源的操作（比如 IO 操作、网络操作、SQL 操作、列表刷新等）耗资源的操作应用后台进程去实现，不能占用 UI 线程，UI 线程是主线程，主线程是保持程序流畅的关键，应该只操作那些核心的 UI 操作，比如处理视图的属性和绘制；</li><li>最小化唤醒机制。我们常用广播来接收那些期望响应的消息和事件，但过多的响应超过本身需求的话，会消耗多余的 Android 设备性能和资源。所以应该最小化唤醒机制，当应用不关心这些消失和事件时，就关闭广播，并慎重选择那些要响应的 Intent 。</li><li>为低端设备考虑，比如 512M 内存、双核 CPU 、低分辨率，确保你的应用可以满足不同水平的设备。</li><li>优化应用的启动速度。当应用启动一个应用时，界面的尽快反馈显示可以给用户一个良好的体验。为了启动更快，可以延迟加载一些 UI 以及避免在应用 Application 层级初始化代码。<h5 id="5-3-善用-DEBUG-工具"><a href="#5-3-善用-DEBUG-工具" class="headerlink" title="5.3 善用 DEBUG 工具"></a>5.3 善用 DEBUG 工具</h5></li><li>多使用Android提供的一些调试工具去追踪应用主要功能的性能情况；</li><li>多使用Android提供的一些调试工具去追踪应用主要功能的内存分配情况；</li></ul><p>ps：本文转载自听云博客</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://yq.aliyun.com/articles/152066?spm=5176.8067842.tagmain.57.1K9u3l&amp;do=login" target="_blank" rel="noopener">Android界面性能调优手册</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h4&gt;&lt;p&gt;界面是 Android 应用中直接影响用户体验最关键的部分。如果代码实现得不好，界面容易发生卡顿且导致应用占用大量内存。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="布局" scheme="http://android9527.com/tags/%E5%B8%83%E5%B1%80/"/>
    
      <category term="性能" scheme="http://android9527.com/tags/%E6%80%A7%E8%83%BD/"/>
    
  </entry>
  
  <entry>
    <title>简析TCP的三次握手与四次分手</title>
    <link href="http://android9527.com/2017/09/15/2017-09-15-%E7%AE%80%E6%9E%90TCP%E7%9A%84%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E5%88%86%E6%89%8B/"/>
    <id>http://android9527.com/2017/09/15/2017-09-15-简析TCP的三次握手与四次分手/</id>
    <published>2017-09-14T16:00:00.000Z</published>
    <updated>2017-09-26T09:31:54.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="TCP是什么"><a href="#TCP是什么" class="headerlink" title="TCP是什么"></a>TCP是什么</h4><p>TCP （传输控制协议）<br>本词条由“科普中国”百科科学词条编写与应用工作项目 审核 。<br>TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，用户数据报协议（UDP）是同一层内[1]  另一个重要的传输协议。在因特网协议族（Internet protocol suite）中，TCP层是位于IP层之上，应用层之下的中间层。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换。<br><a id="more"></a></p><p>首先来看看OSI的七层模型：<br><img src="/images/tcp/TCP1.jpg" alt="TCP"></p><p>我们需要知道TCP工作在网络OSI的七层模型中的第四层——Transport层，IP在第三层——Network层，ARP在第二层——Data Link层；在第二层上的数据，我们把它叫Frame，在第三层上的数据叫Packet，第四层的数据叫Segment。 同时，我们需要简单的知道，数据从应用层发下来，会在每一层都会加上头部信息，进行封装，然后再发送到数据接收端。这个基本的流程你需要知道，就是每个数据都会经过数据的封装和解封装的过程。 在OSI七层模型中，每一层的作用和对应的协议如下：<br><img src="/images/tcp/TCP2.jpg" alt="TCP"></p><p>TCP是一个协议，那这个协议是如何定义的，它的数据格式是什么样子的呢？要进行更深层次的剖析，就需要了解，甚至是熟记TCP协议中每个字段的含义。<br><img src="/images/tcp/TCP3.jpg" alt="TCP"></p><p>上面就是TCP协议头部的格式，由于它太重要了，是理解其它内容的基础，下面就将每个字段的信息都详细的说明一下。</p><ul><li>Source Port和Destination Port:分别占用16位，表示源端口号和目的端口号；用于区别主机中的不同进程，而IP地址是用来区分不同的主机的，源端口号和目的端口号配合上IP首部中的源IP地址和目的IP地址就能唯一的确定一个TCP连接；</li><li>Sequence Number:用来标识从TCP发端向TCP收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节在数据流中的序号；主要用来解决网络报乱序的问题；</li><li>Acknowledgment Number:32位确认序列号包含发送确认的一端所期望收到的下一个序号，因此，确认序号应当是上次已成功收到数据字节序号加1。不过，只有当标志位中的ACK标志（下面介绍）为1时该确认序列号的字段才有效。主要用来解决不丢包的问题；</li><li>Offset:给出首部中32 bit字的数目，需要这个值是因为任选字段的长度是可变的。这个字段占4bit（最多能表示15个32bit的的字，即4*15=60个字节的首部长度），因此TCP最多有60字节的首部。然而，没有任选字段，正常的长度是20字节；</li><li>TCP Flags:TCP首部中有6个标志比特，它们中的多个可同时被设置为1，主要是用于操控TCP的状态机的，依次为URG，ACK，PSH，RST，SYN，FIN。每个标志位的意思如下：<ul><li>URG：此标志表示TCP包的紧急指针域（后面马上就要说到）有效，用来保证TCP连接不被中断，并且督促中间层设备要尽快处理这些数据；</li><li>ACK：此标志表示应答域有效，就是说前面所说的TCP应答号将会包含在TCP数据包中；有两个取值：0和1，为1的时候表示应答域有效，反之为0；</li><li>PSH：这个标志位表示Push操作。所谓Push操作就是指在数据包到达接收端以后，立即传送给应用程序，而不是在缓冲区中排队；</li><li>RST：这个标志表示连接复位请求。用来复位那些产生错误的连接，也被用来拒绝错误和非法的数据包；</li><li>SYN：表示同步序号，用来建立连接。SYN标志位和ACK标志位搭配使用，当连接请求的时候，SYN=1，ACK=0；连接被响应的时候，SYN=1，ACK=1；这个标志的数据包经常被用来进行端口扫描。扫描者发送一个只有SYN的数据包，如果对方主机响应了一个数据包回来 ，就表明这台主机存在这个端口；但是由于这种扫描方式只是进行TCP三次握手的第一次握手，因此这种扫描的成功表示被扫描的机器不很安全，一台安全的主机将会强制要求一个连接严格的进行TCP的三次握手；</li><li>FIN： 表示发送端已经达到数据末尾，也就是说双方的数据传送完成，没有数据可以传送了，发送FIN标志位的TCP数据包后，连接将被断开。这个标志的数据包也经常被用于进行端口扫描。</li></ul></li><li>Window:窗口大小，也就是有名的滑动窗口，用来进行流量控制；这是一个复杂的问题，这篇博文中并不会进行总结的；<br>好了，基本知识都已经准备好了，开始下一段的征程吧。</li></ul><h4 id="三次握手又是什么？"><a href="#三次握手又是什么？" class="headerlink" title="三次握手又是什么？"></a>三次握手又是什么？</h4><p>TCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。这就是面试中经常会被问到的TCP三次握手。只是了解TCP三次握手的概念，对你获得一份工作是没有任何帮助的，你需要去了解TCP三次握手中的一些细节。先来看图说话。</p><p><img src="/images/tcp/TCP4.jpg" alt="TCP"></p><p>多么清晰的一张图，当然了，也不是我画的，我也只是引用过来说明问题了。</p><ul><li>第一次握手：建立连接。客户端发送连接请求报文段，将SYN位置为1，Sequence Number为x；然后，客户端进入SYN_SEND状态，等待服务器的确认；</li><li>第二次握手：服务器收到SYN报文段。服务器收到客户端的SYN报文段，需要对这个SYN报文段进行确认，设置Acknowledgment Number为x+1(Sequence Number+1)；同时，自己自己还要发送SYN请求信息，将SYN位置为1，Sequence Number为y；服务器端将上述所有信息放到一个报文段（即SYN+ACK报文段）中，一并发送给客户端，此时服务器进入SYN_RECV状态；</li><li>第三次握手：客户端收到服务器的SYN+ACK报文段。然后将Acknowledgment Number设置为y+1，向服务器发送ACK报文段，这个报文段发送完毕以后，客户端和服务器端都进入ESTABLISHED状态，完成TCP三次握手。</li><li>完成了三次握手，客户端和服务器端就可以开始传送数据。以上就是TCP三次握手的总体介绍。</li></ul><h4 id="那四次分手呢？"><a href="#那四次分手呢？" class="headerlink" title="那四次分手呢？"></a>那四次分手呢？</h4><p>当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。</p><ul><li>第一次分手：主机1（可以使客户端，也可以是服务器端），设置Sequence Number和Acknowledgment Number，向主机2发送一个FIN报文段；此时，主机1进入’FIN_WAIT_1’状态；这表示主机1没有数据要发送给主机2了；</li><li>第二次分手：主机2收到了主机1发送的FIN报文段，向主机1回一个ACK报文段，Acknowledgment Number为Sequence Number加1；主机1进入’FIN_WAIT_2’状态；主机2告诉主机1，我“同意”你的关闭请求；</li><li>第三次分手：主机2向主机1发送FIN报文段，请求关闭连接，同时主机2进入LAST_ACK状态；</li><li>第四次分手：主机1收到主机2发送的FIN报文段，向主机2发送ACK报文段，然后主机1进入TIME_WAIT状态；主机2收到主机1的ACK报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。<br>至此，TCP的四次分手就这么愉快的完成了。当你看到这里，你的脑子里会有很多的疑问，很多的不懂，感觉很凌乱；没事，我们继续总结。</li></ul><h4 id="为什么要三次握手"><a href="#为什么要三次握手" class="headerlink" title="为什么要三次握手"></a>为什么要三次握手</h4><p>既然总结了TCP的三次握手，那为什么非要三次呢？怎么觉得两次就可以完成了。那TCP为什么非要进行三次连接呢？在谢希仁的《计算机网络》中是这样说的：</p><p>为了防止已失效的连接请求报文段突然又传送到了服务端，因而产生错误。</p><p>在书中同时举了一个例子，如下：</p><p>“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间的滞留了，以致延误到连接释放以后的某个时间才到达server。本来这是一个早已失效的报文段。但server收到此失效的连接请求报文段后，就误认为是client再次发出的一个新的连接请求。于是就向client发出确认报文段，同意建立连接。假设不采用“三次握手”，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的运输连接已经建立，并一直等待client发来数据。这样，server的很多资源就白白浪费掉了。采用“三次握手”的办法可以防止上述现象发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。”</p><p>这就很明白了，防止了服务器端的一直等待而浪费资源。</p><h4 id="为什么要四次分手"><a href="#为什么要四次分手" class="headerlink" title="为什么要四次分手"></a>为什么要四次分手</h4><p>那四次分手又是为何呢？TCP协议是一种面向连接的、可靠的、基于字节流的运输层通信协议。TCP是全双工模式，这就意味着，当主机1发出FIN报文段时，只是表示主机1已经没有数据要发送了，主机1告诉主机2，它的数据已经全部发送完毕了；但是，这个时候主机1还是可以接受来自主机2的数据；当主机2返回ACK报文段时，表示它已经知道主机1没有数据发送了，但是主机2还是可以发送数据到主机1的；当主机2也发送了FIN报文段时，这个时候就表示主机2也没有数据要发送了，就会告诉主机1，我也没有数据要发送了，之后彼此就会愉快的中断这次TCP连接。如果要正确的理解四次分手的原理，就需要了解四次分手过程中的状态变化。</p><ul><li>‘FIN_WAIT_1’: 这个状态要好好解释一下，其实’FIN_WAIT_1’和’FIN_WAIT_2’状态的真正含义都是表示等待对方的FIN报文。而这两种状态的区别是：’FIN_WAIT_1’状态实际上是当SOCKET在ESTABLISHED状态时，它想主动关闭连接，向对方发送了FIN报文，此时该SOCKET即进入到’FIN_WAIT_1’状态。而当对方回应ACK报文后，则进入到’FIN_WAIT_2’状态，当然在实际的正常情况下，无论对方何种情况下，都应该马上回应ACK报文，所以’FIN_WAIT_1’状态一般是比较难见到的，而’FIN_WAIT_2’状态还有时常常可以用netstat看到。（主动方）</li><li>‘FIN_WAIT_2’：上面已经详细解释了这种状态，实际上’FIN_WAIT_2’状态下的SOCKET，表示半连接，也即有一方要求close连接，但另外还告诉对方，我暂时还有点数据需要传送给你(ACK信息)，稍后再关闭连接。（主动方）</li><li>CLOSE_WAIT：这种状态的含义其实是表示在等待关闭。怎么理解呢？当对方close一个SOCKET后发送FIN报文给自己，你系统毫无疑问地会回应一个ACK报文给对方，此时则进入到CLOSE_WAIT状态。接下来呢，实际上你真正需要考虑的事情是察看你是否还有数据发送给对方，如果没有的话，那么你也就可以 close这个SOCKET，发送FIN报文给对方，也即关闭连接。所以你在CLOSE_WAIT状态下，需要完成的事情是等待你去关闭连接。（被动方）</li><li>LAST_ACK: 这个状态还是比较容易好理解的，它是被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。当收到ACK报文后，也即可以进入到CLOSED可用状态了。（被动方）</li><li>TIME_WAIT: 表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。如果FINWAIT1状态下，收到了对方同时带FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过’FIN_WAIT_2’状态。（主动方）</li><li>CLOSED: 表示连接中断。<br>我想你应该懂了</li></ul><p>总结到这里，也该结束了，但是对于TCP的学习远还没有结束。TCP是一个非常复杂的协议，这里稍微总结了一下TCP的连接与断开连接是发生的事情，其中还有很多的“坑”，让我们后续有时间再继续填吧</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="http://www.jellythink.com/archives/705" target="_blank" rel="noopener">简析TCP的三次握手与四次分手</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;TCP是什么&quot;&gt;&lt;a href=&quot;#TCP是什么&quot; class=&quot;headerlink&quot; title=&quot;TCP是什么&quot;&gt;&lt;/a&gt;TCP是什么&lt;/h4&gt;&lt;p&gt;TCP （传输控制协议）&lt;br&gt;本词条由“科普中国”百科科学词条编写与应用工作项目 审核 。&lt;br&gt;TCP（Transmission Control Protocol 传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。在简化的计算机网络OSI模型中，它完成第四层传输层所指定的功能，用户数据报协议（UDP）是同一层内[1]  另一个重要的传输协议。在因特网协议族（Internet protocol suite）中，TCP层是位于IP层之上，应用层之下的中间层。不同主机的应用层之间经常需要可靠的、像管道一样的连接，但是IP层不提供这样的流机制，而是提供不可靠的包交换。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="TCP" scheme="http://android9527.com/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>Gradle实战:发布包到maven仓库</title>
    <link href="http://android9527.com/2017/09/10/2017-09-10-Gradle%E5%AE%9E%E6%88%98:%E5%8F%91%E5%B8%83%E5%8C%85%E5%88%B0maven%E4%BB%93%E5%BA%931/"/>
    <id>http://android9527.com/2017/09/10/2017-09-10-Gradle实战:发布包到maven仓库1/</id>
    <published>2017-09-09T16:00:00.000Z</published>
    <updated>2017-09-26T09:19:07.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Gradle实战-发布包到maven仓库"><a href="#Gradle实战-发布包到maven仓库" class="headerlink" title="Gradle实战:发布包到maven仓库"></a>Gradle实战:发布包到maven仓库</h4><h4 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h4><h4 id="参考链接：http-xiedeliang-com-2017-07-30-Maven简介"><a href="#参考链接：http-xiedeliang-com-2017-07-30-Maven简介" class="headerlink" title="参考链接：http://xiedeliang.com/2017/07/30/Maven简介"></a>参考链接：<a href="http://xiedeliang.com/2017/07/30/Maven简介" target="_blank" rel="noopener">http://xiedeliang.com/2017/07/30/Maven简介</a></h4><h4 id="AAR简介"><a href="#AAR简介" class="headerlink" title="AAR简介"></a>AAR简介</h4><p>AAR文件是Google为Android开发所设计的一种library格式，全名为Android Archive Library，与Java Jar Library不同的是，aar除了java code之外还包含资源文件，即xml文件、图片、文字等。<br><a id="more"></a></p><h4 id="Jar简介"><a href="#Jar简介" class="headerlink" title="Jar简介"></a>Jar简介</h4><p>JAR 文件格式以流行的 ZIP 文件格式为基础。与 ZIP 文件不同的是，JAR 文件不仅用于压缩和发布，而且还用于部署和封装库、组件和插件程序，并可被像编译器和 JVM 这样的工具直接使用。在 JAR 中包含特殊的文件，如 manifests 和部署描述符，用来指示工具如何处理特定的 JAR。</p><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul><li>开发工具 Android Studio</li><li>Maven仓库</li><li>工程必须是lib工程，即该工程对应的build.gradle文件中要引用：apply plugin: ‘com.android.library’</li><li>在根目录的build.gradle文件中添加如下配置：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    apply plugin: &apos;idea&apos;</span><br><span class="line">    apply plugin: &apos;maven&apos;</span><br><span class="line">       configurations &#123;</span><br><span class="line">        deployerJars</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configurations.all &#123;</span><br><span class="line">       resolutionStrategy.cacheChangingModulesFor 0, &apos;seconds&apos;//不使用缓存，使用仓库中最新的包</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subprojects &#123;  //表示除主工程外所有子模块</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        deployerJars &quot;org.apache.maven.wagon:wagon-http:2.2&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext &#123; //仓库选择标记</span><br><span class="line">    repoType = &quot;remote&quot; //发布到远程仓库（下文中会用到）</span><br><span class="line">    // repoType = &quot;local&quot; //发布到本地仓库，方便调试，避免调试期间频繁上传到maven仓库（下文中会用到）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在gradle.properties文件中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">releaseRepositoryUrl=xxx  //正式包仓库地址（下文中会用到）</span><br><span class="line">snapshotRepositoryUrl=xxx //测试包仓库地址（下文中会用到）</span><br><span class="line">repositoryGroup=com.company.appname // 定义要上传的aar所在仓库的Group，可自定义，但后续引用处要与此一致</span><br></pre></td></tr></table></figure></li><li><p>在工程根目录下新建一个名为“mavenAccount.properties”文件，并将该文件加入到ignore 中，该文件用于存放访问maven仓库的账户和密码以及本地仓库地址，只有该模块的开发者才有权发布该aar包。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repositoryUserName=xxx</span><br><span class="line">repositoryPassword=xxx</span><br><span class="line">localRepositoryUrl=file:///Users/admin/Documents/Android/repo/</span><br></pre></td></tr></table></figure></li><li><p>编写上传脚本:</p></li><li><p>生成AAR包：在工程根目录下新建一个名为“release-as-aar.gradle”的文件，其中脚本如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">uploadArchives() &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenDeployer &#123;</span><br><span class="line">            configuration = configurations.deployerJars</span><br><span class="line">            println &apos;repoType : &apos; + rootProject.ext.repoType</span><br><span class="line">            if ((rootProject.ext.repoType).equals(&quot;remote&quot;)) &#123; //发布到远程仓库</span><br><span class="line">                snapshotRepository(url: snapshotRepositoryUrl) &#123; // 测试包</span><br><span class="line">                //从本地文件读取仓库账号和密码</span><br><span class="line">            def File propFile = new File(&apos;../mavenAccount.properties&apos;)</span><br><span class="line">            if (propFile.canRead()) &#123;</span><br><span class="line">                def Properties props = new Properties()</span><br><span class="line">                props.load(new FileInputStream(propFile))</span><br><span class="line">                    if (props != null &amp;&amp; props.containsKey(&apos;repositoryUserName&apos;) &amp;&amp; props.containsKey(&apos;repositoryPassword&apos;)) &#123;</span><br><span class="line">                   def repositoryUserName = props[&apos;repositoryUserName&apos;]</span><br><span class="line">                    def repositoryPassword = props[&apos;repositoryPassword&apos;]</span><br><span class="line">                    authentication(userName: repositoryUserName, password: repositoryPassword)</span><br><span class="line">                    println &apos;上传到远程仓库&apos;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                println &apos;没有发布权限&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                   println &apos;没有发布权限&apos;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            repository(url: releaseRepositoryUrl) &#123; // 正式包</span><br><span class="line">            def File propFile = new File(&apos;../mavenAccount.properties&apos;)</span><br><span class="line">            if (propFile.canRead()) &#123;</span><br><span class="line">                   def Properties props = new Properties()</span><br><span class="line">                props.load(new FileInputStream(propFile))</span><br><span class="line">                    if (props != null &amp;&amp; props.containsKey(&apos;repositoryUserName&apos;) &amp;&amp; props.containsKey(&apos;repositoryPassword&apos;)) &#123;</span><br><span class="line">                def repositoryUserName = props[&apos;repositoryUserName&apos;]</span><br><span class="line">                def repositoryPassword = props[&apos;repositoryPassword&apos;]</span><br><span class="line">                authentication(userName: repositoryUserName, password: repositoryPassword)</span><br><span class="line">                println &apos;上传到远程仓库&apos;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    println &apos;没有发布权限&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                println &apos;没有发布权限&apos;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            &#125; else &#123; // 发布到本地仓库</span><br><span class="line">                def localRepositoryUrl</span><br><span class="line">                def File propFile = new File(&apos;../mavenAccount.properties&apos;)</span><br><span class="line">                if (propFile.canRead()) &#123;</span><br><span class="line">                   def Properties props = new Properties()</span><br><span class="line">                props.load(new FileInputStream(propFile))</span><br><span class="line">                if (props != null &amp;&amp; props.containsKey(&apos;localRepositoryUrl&apos;)) &#123;</span><br><span class="line">                    localRepositoryUrl = props[&apos;localRepositoryUrl&apos;]</span><br><span class="line">                    snapshotRepository(url: localRepositoryUrl)</span><br><span class="line">                    repository(url: localRepositoryUrl)</span><br><span class="line">                    println &apos;上传到本地仓库&apos;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    println &apos;没有发布权限&apos;</span><br><span class="line">                &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                println &apos;没有发布权限&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>生成Jar包：在工程根目录下新建一个名为“release-as-jar.gradle”的文件，其中脚本如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">task androidJavadocs(type: Javadoc) &#123;</span><br><span class="line">    failOnError = false</span><br><span class="line">    source = android.sourceSets.main.java.srcDirs</span><br><span class="line">    ext.androidJar = &quot;$&#123;android.sdkDirectory&#125;/platforms/$&#123;android.compileSdkVersion&#125;/android.jar&quot;</span><br><span class="line">    classpath += files(ext.androidJar)</span><br><span class="line">&#125;</span><br><span class="line">task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) &#123;</span><br><span class="line">    classifier = &apos;javadoc&apos;</span><br><span class="line">    from androidJavadocs.destinationDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task androidSourcesJar(type: Jar) &#123;</span><br><span class="line">    classifier = &apos;sources&apos;</span><br><span class="line">    from android.sourceSets.main.java.srcDirs</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uploadArchives &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenDeployer &#123;</span><br><span class="line">            configuration = configurations.deployerJars</span><br><span class="line">            println &apos;repoType : &apos; + rootProject.ext.repoType</span><br><span class="line">            if ((rootProject.ext.repoType).equals(&quot;remote&quot;)) &#123; //发布到远程仓库</span><br><span class="line">                snapshotRepository(url: snapshotRepositoryUrl) &#123;</span><br><span class="line">                    def File propFile = new File(&apos;../mavenAccount.properties&apos;)</span><br><span class="line">                    if (propFile.canRead()) &#123;</span><br><span class="line">                        def Properties props = new Properties()</span><br><span class="line">                        props.load(new FileInputStream(propFile))</span><br><span class="line">                        if (props != null &amp;&amp; props.containsKey(&apos;repositoryUserName&apos;) &amp;&amp; props.containsKey(&apos;repositoryPassword&apos;)) &#123;</span><br><span class="line">                            def repositoryUserName = props[&apos;repositoryUserName&apos;]</span><br><span class="line">                            def repositoryPassword = props[&apos;repositoryPassword&apos;]</span><br><span class="line">                            authentication(userName: repositoryUserName, password: repositoryPassword)</span><br><span class="line">                            println &apos;上传到远程仓库&apos;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            println &apos;sorry，你没有上传aar包的权限&apos;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        println &apos;sorry，你没有上传aar包的权限&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                repository(url: releaseRepositoryUrl) &#123;</span><br><span class="line">                    def File propFile = new File(&apos;../mavenAccount.properties&apos;)</span><br><span class="line">                    if (propFile.canRead()) &#123;</span><br><span class="line">                        def Properties props = new Properties()</span><br><span class="line">                        props.load(new FileInputStream(propFile))</span><br><span class="line"></span><br><span class="line">                        if (props != null &amp;&amp; props.containsKey(&apos;repositoryUserName&apos;) &amp;&amp; props.containsKey(&apos;repositoryPassword&apos;)) &#123;</span><br><span class="line">                            def repositoryUserName = props[&apos;repositoryUserName&apos;]</span><br><span class="line">                            def repositoryPassword = props[&apos;repositoryPassword&apos;]</span><br><span class="line">                            authentication(userName: repositoryUserName, password: repositoryPassword)</span><br><span class="line">                            println &apos;上传到远程仓库&apos;</span><br><span class="line">                        &#125; else &#123;</span><br><span class="line">                            println &apos;sorry，你没有上传aar包的权限&apos;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        println &apos;sorry，你没有上传aar包的权限&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;//发布到本地仓库</span><br><span class="line">                def localRepositoryUrl</span><br><span class="line">                def File propFile = new File(&apos;../mavenAccount.properties&apos;)</span><br><span class="line">                if (propFile.canRead()) &#123;</span><br><span class="line">                    def Properties props = new Properties()</span><br><span class="line">                    props.load(new FileInputStream(propFile))</span><br><span class="line">                    if (props != null &amp;&amp; props.containsKey(&apos;localRepositoryUrl&apos;)) &#123;</span><br><span class="line">                        localRepositoryUrl = props[&apos;localRepositoryUrl&apos;]</span><br><span class="line">                        snapshotRepository(url: localRepositoryUrl)</span><br><span class="line">                        repository(url: localRepositoryUrl)</span><br><span class="line">                        println &apos;上传到本地仓库&apos;</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        println &apos;sorry，本地仓库路径不存在&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    println &apos;sorry，本地仓库路径不存在&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">artifacts &#123;</span><br><span class="line">    archives androidSourcesJar</span><br><span class="line">    archives androidJavadocsJar</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><p>子模块中相关配置：在子模块的build.gradle文件中添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">group repositoryGroup</span><br><span class="line">//version &apos;0.0.1&apos;</span><br><span class="line">version &apos;0.0.1-SNAPSHOT&apos; //表示测试版，正式发版时去掉“-SNAPSHOT”</span><br><span class="line">//打成aar格式</span><br><span class="line">apply from: &apos;../release-as-aar.gradle&apos; //引用上传插件</span><br><span class="line">//打成jar格式</span><br><span class="line">//apply from: &apos;../release-as-jar.gradle&apos;</span><br><span class="line">打包上传</span><br></pre></td></tr></table></figure></li><li><p>编译通过后，打开android studio自带的终端，进入相应的module目录下，输入：</p></li></ul><p>gradle uploadArchives<br>主项目引用</p><p>在根目录的build.gradle文件中添加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">maven &#123;</span><br><span class="line">  url &apos;http://maven.xxxx.xxxx:1111/nexus/content/groups/public/&apos;</span><br><span class="line">   &#125; </span><br><span class="line">在项目的build.gradle文件中添加如下引用：</span><br><span class="line"></span><br><span class="line">debugCompile &apos;groupId:lib-name:version-SNAPSHOT&apos;</span><br><span class="line">releaseCompile &apos;groupId:lib-name:version&apos;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;Gradle实战-发布包到maven仓库&quot;&gt;&lt;a href=&quot;#Gradle实战-发布包到maven仓库&quot; class=&quot;headerlink&quot; title=&quot;Gradle实战:发布包到maven仓库&quot;&gt;&lt;/a&gt;Gradle实战:发布包到maven仓库&lt;/h4&gt;&lt;h4 id=&quot;Maven简介&quot;&gt;&lt;a href=&quot;#Maven简介&quot; class=&quot;headerlink&quot; title=&quot;Maven简介&quot;&gt;&lt;/a&gt;Maven简介&lt;/h4&gt;&lt;h4 id=&quot;参考链接：http-xiedeliang-com-2017-07-30-Maven简介&quot;&gt;&lt;a href=&quot;#参考链接：http-xiedeliang-com-2017-07-30-Maven简介&quot; class=&quot;headerlink&quot; title=&quot;参考链接：http://xiedeliang.com/2017/07/30/Maven简介&quot;&gt;&lt;/a&gt;参考链接：&lt;a href=&quot;http://xiedeliang.com/2017/07/30/Maven简介&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://xiedeliang.com/2017/07/30/Maven简介&lt;/a&gt;&lt;/h4&gt;&lt;h4 id=&quot;AAR简介&quot;&gt;&lt;a href=&quot;#AAR简介&quot; class=&quot;headerlink&quot; title=&quot;AAR简介&quot;&gt;&lt;/a&gt;AAR简介&lt;/h4&gt;&lt;p&gt;AAR文件是Google为Android开发所设计的一种library格式，全名为Android Archive Library，与Java Jar Library不同的是，aar除了java code之外还包含资源文件，即xml文件、图片、文字等。&lt;br&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="maven" scheme="http://android9527.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Gradle maven配置</title>
    <link href="http://android9527.com/2017/09/10/2017-09-10-Gradle%20maven%E9%85%8D%E7%BD%AE/"/>
    <id>http://android9527.com/2017/09/10/2017-09-10-Gradle maven配置/</id>
    <published>2017-09-09T16:00:00.000Z</published>
    <updated>2017-09-26T09:19:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gradle-maven配置"><a href="#gradle-maven配置" class="headerlink" title="gradle maven配置"></a>gradle maven配置</h3><h4 id="1、上传library到maven仓库"><a href="#1、上传library到maven仓库" class="headerlink" title="1、上传library到maven仓库"></a>1、上传library到maven仓库</h4><p>library module 中配置build.gradle增加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;maven&apos;</span><br><span class="line"></span><br><span class="line">uploadArchives &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenDeployer &#123;</span><br><span class="line">            // maven仓库地址，使用本地相对路径maven仓库</span><br><span class="line">            repository(url: uri(&apos;../maven&apos;))</span><br><span class="line">            pom.version = &apos;1.0-release&apos;</span><br><span class="line">            // 包名</span><br><span class="line">            pom.groupId = &apos;groupId&apos;</span><br><span class="line">            // sdk名</span><br><span class="line">            pom.artifactId = &apos;artifactId&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>执行 gradlew uploadArchives 上传到远程仓库</p><h4 id="2、引用"><a href="#2、引用" class="headerlink" title="2、引用"></a>2、引用</h4><ul><li><p>在项目级build.gradle 中配置maven仓库地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenLocal()</span><br><span class="line">        jcenter()</span><br><span class="line">        // 使用本地相对路径maven仓库</span><br><span class="line">        maven &#123;</span><br><span class="line">            url uri(&apos;../maven&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在module级build.gradle中引用，重新同步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile(&apos;groupId:artifactId:1.0-release@aar&apos;) &#123; transitive = true &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;gradle-maven配置&quot;&gt;&lt;a href=&quot;#gradle-maven配置&quot; class=&quot;headerlink&quot; title=&quot;gradle maven配置&quot;&gt;&lt;/a&gt;gradle maven配置&lt;/h3&gt;&lt;h4 id=&quot;1、上传library到maven仓库&quot;&gt;&lt;a href=&quot;#1、上传library到maven仓库&quot; class=&quot;headerlink&quot; title=&quot;1、上传library到maven仓库&quot;&gt;&lt;/a&gt;1、上传library到maven仓库&lt;/h4&gt;&lt;p&gt;library module 中配置build.gradle增加&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;apply plugin: &amp;apos;maven&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uploadArchives &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    repositories &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mavenDeployer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // maven仓库地址，使用本地相对路径maven仓库&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            repository(url: uri(&amp;apos;../maven&amp;apos;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pom.version = &amp;apos;1.0-release&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // 包名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pom.groupId = &amp;apos;groupId&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            // sdk名&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pom.artifactId = &amp;apos;artifactId&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="maven" scheme="http://android9527.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>如何正确地写出单例模式</title>
    <link href="http://android9527.com/2017/07/29/2017-07-29-how-to-correctly-write-singleton-pattern/"/>
    <id>http://android9527.com/2017/07/29/2017-07-29-how-to-correctly-write-singleton-pattern/</id>
    <published>2017-07-28T16:00:00.000Z</published>
    <updated>2017-08-15T06:01:21.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="如何正确地写出单例模式"><a href="#如何正确地写出单例模式" class="headerlink" title="如何正确地写出单例模式"></a>如何正确地写出单例模式</h4><p>单例模式算是设计模式中最容易理解，也是最容易手写代码的模式了吧。但是其中的坑却不少，所以也常作为面试题来考。本文主要对几种单例写法的整理，并分析其优缺点。很多都是一些老生常谈的问题，但如果你不知道如何创建一个线程安全的单例，不知道什么是双检锁，那这篇文章可能会帮助到你。<br><a id="more"></a></p><h4 id="懒汉式，线程不安全"><a href="#懒汉式，线程不安全" class="headerlink" title="懒汉式，线程不安全"></a>懒汉式，线程不安全</h4><p>当被问到要实现一个单例模式时，很多人的第一反应是写出如下的代码，包括教科书上也是这样教我们的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">         instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码简单明了，而且使用了懒加载模式，但是却存在致命的问题。当有多个线程并行调用 getInstance() 的时候，就会创建多个实例。也就是说在多线程下不能正常工作。</p><h4 id="懒汉式，线程安全"><a href="#懒汉式，线程安全" class="headerlink" title="懒汉式，线程安全"></a>懒汉式，线程安全</h4><p>为了解决上面的问题，最简单的方法是将整个 getInstance() 方法设为同步（synchronized）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public static synchronized Singleton getInstance() &#123;</span><br><span class="line">    if (instance == null) &#123;</span><br><span class="line">        instance = new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然做到了线程安全，并且解决了多实例的问题，但是它并不高效。因为在任何时候只能有一个线程调用 getInstance() 方法。但是同步操作只需要在第一次调用时才被需要，即第一次创建单例实例对象时。这就引出了双重检验锁。</p><h4 id="双重检验锁"><a href="#双重检验锁" class="headerlink" title="双重检验锁"></a>双重检验锁</h4><p>双重检验锁模式（double checked locking pattern），是一种使用同步块加锁的方法。程序员称其为双重检查锁，因为会有两次检查 instance == null，一次是在同步块外，一次是在同步块内。为什么在同步块内还要再检验一次？因为可能会有多个线程一起进入同步块外的 if，如果在同步块内不进行二次检验的话就会生成多个实例了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public static Singleton getSingleton() &#123;</span><br><span class="line">    if (instance == null) &#123;                         //Single Checked</span><br><span class="line">        synchronized (Singleton.class) &#123;</span><br><span class="line">            if (instance == null) &#123;                 //Double Checked</span><br><span class="line">                instance = new Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码看起来很完美，很可惜，它是有问题。主要在于<code>instance = new Singleton()</code>这句，这并非是一个原子操作，事实上在 JVM 中这句话大概做了下面 3 件事情。</p><ul><li>给 instance 分配内存</li><li>调用 Singleton 的构造函数来初始化成员变量</li><li>将instance对象指向分配的内存空间（执行完这步 instance 就为非 null 了） </li></ul><p>但是在 JVM 的即时编译器中存在指令重排序的优化。也就是说上面的第二步和第三步的顺序是不能保证的，最终的执行顺序可能是 1-2-3 也可能是 1-3-2。如果是后者，则在 3 执行完毕、2 未执行之前，被线程二抢占了，这时 instance 已经是非 null 了（但却没有初始化），所以线程二会直接返回 instance，然后使用，然后顺理成章地报错。</p><p>我们只需要将 instance 变量声明成 volatile 就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance; <span class="comment">//声明成 volatile</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;                         </span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;       </span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有些人认为使用 volatile 的原因是可见性，也就是可以保证线程在本地不会存有 instance 的副本，每次都是去主内存中读取。但其实是不对的。使用 volatile 的主要原因是其另一个特性：禁止指令重排序优化。也就是说，在 volatile 变量的赋值操作后面会有一个内存屏障（生成的汇编代码上），读操作不会被重排序到内存屏障之前。比如上面的例子，取操作必须在执行完 1-2-3 之后或者 1-3-2 之后，不存在执行到 1-3 然后取到值的情况。从「先行发生原则」的角度理解的话，就是对于一个 volatile 变量的写操作都先行发生于后面对这个变量的读操作（这里的“后面”是时间上的先后顺序）。</p><p>但是特别注意在 Java 5 以前的版本使用了 volatile 的双检锁还是有问题的。其原因是 Java 5 以前的 JMM （Java 内存模型）是存在缺陷的，即时将变量声明成 volatile 也不能完全避免重排序，主要是 volatile 变量前后的代码仍然存在重排序问题。这个 volatile 屏蔽重排序的问题在 Java 5 中才得以修复，所以在这之后才可以放心使用 volatile。</p><p>相信你不会喜欢这种复杂又隐含问题的方式，当然我们有更好的实现线程安全的单例模式的办法。</p><h4 id="饿汉式-static-final-field"><a href="#饿汉式-static-final-field" class="headerlink" title="饿汉式 static final field"></a>饿汉式 static final field</h4><p>这种方法非常简单，因为单例的实例被声明成 static 和 final 变量了，在第一次加载类到内存中时就会初始化，所以创建实例本身是线程安全的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line">    <span class="comment">//类加载时就初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法如果完美的话，就没必要在啰嗦那么多双检锁的问题了。缺点是它不是一种懒加载模式（lazy initialization），单例会在加载类后一开始就被初始化，即使客户端没有调用 getInstance()方法。饿汉式的创建方式在一些场景中将无法使用：譬如 Singleton 实例的创建是依赖参数或者配置文件的，在 getInstance() 之前必须调用某个方法设置参数给它，那样这种单例写法就无法使用了。</p><h4 id="静态内部类-static-nested-class"><a href="#静态内部类-static-nested-class" class="headerlink" title="静态内部类 static nested class"></a>静态内部类 static nested class</h4><p>我比较倾向于使用静态内部类的方法，这种方法也是《Effective Java》上所推荐的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton instance = <span class="keyword">new</span> Singleton();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE; </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法仍然使用JVM本身机制保证了线程安全问题；由于 SingletonHolder 是私有的，除了 getInstance() 之外没有办法访问它，因此它是懒汉式的；同时读取实例的时候不会进行同步，没有性能缺陷；也不依赖 JDK 版本。</p><h4 id="枚举-Enum"><a href="#枚举-Enum" class="headerlink" title="枚举 Enum"></a>枚举 Enum</h4><p>用枚举写单例实在太简单了！这也是它最大的优点。下面这段代码就是声明枚举实例的通常做法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EasySingleton&#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以通过EasySingleton.INSTANCE来访问实例，这比调用getInstance()方法简单多了。创建枚举默认就是线程安全的，所以不需要担心double checked locking，而且还能防止反序列化导致重新创建新的对象。但是还是很少看到有人这样写。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>一般来说，单例模式有五种写法：懒汉、饿汉、双重检验锁、静态内部类、枚举。上述所说都是线程安全的实现，文章开头给出的第一种方法不算正确的写法。</p><p>就我个人而言，一般情况下直接使用饿汉式就好了，如果明确要求要懒加载（lazy initialization）会倾向于使用静态内部类，如果涉及到反序列化创建对象时会试着使用枚举的方式来实现单例。</p><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://wuchong.me/blog/2014/08/28/how-to-correctly-write-singleton-pattern" target="_blank" rel="noopener">如何正确地写出单例模式</a></p><p><a href="http://javarevisited.blogspot.sg/2014/05/double-checked-locking-on-singleton-in-java.html" target="_blank" rel="noopener">Double Checked Locking on Singleton Class in Java</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;如何正确地写出单例模式&quot;&gt;&lt;a href=&quot;#如何正确地写出单例模式&quot; class=&quot;headerlink&quot; title=&quot;如何正确地写出单例模式&quot;&gt;&lt;/a&gt;如何正确地写出单例模式&lt;/h4&gt;&lt;p&gt;单例模式算是设计模式中最容易理解，也是最容易手写代码的模式了吧。但是其中的坑却不少，所以也常作为面试题来考。本文主要对几种单例写法的整理，并分析其优缺点。很多都是一些老生常谈的问题，但如果你不知道如何创建一个线程安全的单例，不知道什么是双检锁，那这篇文章可能会帮助到你。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://android9527.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="Java" scheme="http://android9527.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Aop技术在Android中的应用</title>
    <link href="http://android9527.com/2017/07/27/2017-07-27-Aop%E6%8A%80%E6%9C%AF%E5%9C%A8Android%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://android9527.com/2017/07/27/2017-07-27-Aop技术在Android中的应用/</id>
    <published>2017-07-26T16:00:00.000Z</published>
    <updated>2017-08-15T02:36:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="AOP概念"><a href="#AOP概念" class="headerlink" title="AOP概念"></a>AOP概念</h4><p>百度百科中对AOP的解释如下:<br>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。 <a id="more"></a>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><p>说白了，AOP其实就是OOP的补充，OOP从横向上区分出一个个的类来，而AOP则从纵向上向对象中加入特定的代码。</p><h4 id="AOP-和-OOP"><a href="#AOP-和-OOP" class="headerlink" title="AOP 和 OOP"></a>AOP 和 OOP</h4><p>面向对象的特点是继承、多态和封装。为了符合单一职责的原则，OOP将功能分散到不同的对象中去。让不同的类设计不同的方法，这样代码就分散到一个个的类中。可以降低代码的复杂程度，提高类的复用性。</p><p>但是在分散代码的同时，也增加了代码的重复性。比如说，我们在两个类中，可能都需要在每个方法中做日志。按照OOP的设计方法，我们就必须在两个类的方法中都加入日志的内容。也许他们是完全相同的，但是因为OOP的设计让类与类之间无法联系，而不能将这些重复的代码统一起来。然而AOP就是为了解决这类问题而产生的，它是在运行时动态地将代码切入到类的指定方法、指定位置上的编程思想。</p><p>如果说，面向过程的编程是一维的，那么面向对象的编程就是二维的。OOP从横向上区分出一个个的类，相比过程式增加了一个维度。而面向切面结合面向对象编程是三维的，相比单单的面向对象编程则又增加了“方面”的维度。从技术上来说，AOP基本上是通过代理机制实现的。</p><h4 id="在Android项目中使用AspectJ"><a href="#在Android项目中使用AspectJ" class="headerlink" title="在Android项目中使用AspectJ"></a>在Android项目中使用AspectJ</h4><p>本文采用上海沪江公司徐宜生团队开源的gradle插件<br>以下引用部分原文</p><p>AOP的用处非常广，从spring到Android，各个地方都有使用，特别是在后端，Spring中已经使用的非常方便了，而且功能非常强大，但是在Android中，AspectJ的实现是略阉割的版本，并不是所有功能都支持，但对于一般的客户端开发来说，已经完全足够用了。</p><p>在Android上集成AspectJ实际上是比较复杂的，不是一句话就能compile，但是，鄙司已经给大家把这个问题解决了，大家现在直接使用这个SDK就可以很方便的在Android Studio中使用AspectJ了。Github地址如下：<br><a href="https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx" target="_blank" rel="noopener">https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx</a><br>另外一个比较成功的使用AOP的库是JakeWharton大神的Hugo：<br><a href="https://github.com/JakeWharton/hugo" target="_blank" rel="noopener">https://github.com/JakeWharton/hugo</a></p><h4 id="接入说明"><a href="#接入说明" class="headerlink" title="接入说明"></a>接入说明</h4><ul><li><p>首先，需要在项目根目录的build.gradle中增加依赖：<br>完整代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:2.3.3&apos;</span><br><span class="line">        classpath &apos;com.hujiang.aspectjx:gradle-android-plugin-aspectjx:1.0.10&apos;</span><br><span class="line"></span><br><span class="line">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class="line">        // in the individual module build.gradle files</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后再主项目或者库的build.gradle中增加AspectJ的依赖：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile &apos;org.aspectj:aspectjrt:1.8.10&apos;</span><br></pre></td></tr></table></figure></li><li><p>同时在build.gradle中加入AspectJX模块：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: &apos;android-aspectjx&apos;</span><br></pre></td></tr></table></figure><p>这样就把整个Android Studio中的AspectJ的环境配置完毕了，如果在编译的时候，遇到一些『can’t determine superclass of missing type xxxxx』这样的错误，请参考项目README中关于excludeJarFilter的使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aspectjx &#123;</span><br><span class="line">    //includes the libs that you want to weave</span><br><span class="line">    includeJarFilter &apos;universal-image-loader&apos;, &apos;AspectJX-Demo/library&apos;</span><br><span class="line"></span><br><span class="line">    //excludes the libs that you don&apos;t want to weave</span><br><span class="line">    excludeJarFilter &apos;universal-image-loader&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>运行时如果出现<code>Task &#39;transformClassesWithExtractJarsForDebug&#39; not found in project &#39;:app&#39;.</code>的错误,需要关闭Instant Run功能<br><a href="https://github.com/HujiangTechnology/AspectJX-Demo/issues/1" target="_blank" rel="noopener">https://github.com/HujiangTechnology/AspectJX-Demo/issues/1</a></p><p>具体配置参见github地址 <a href="https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx" target="_blank" rel="noopener">https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx</a></p><h4 id="AspectJ入门"><a href="#AspectJ入门" class="headerlink" title="AspectJ入门"></a>AspectJ入门</h4><p>我们通过一段简单的代码来了解下基本的使用方法和功能，新建一个AspectTest类文件，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"xuyisheng"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* android.app.Activity.on**(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityMethodBefore</span><span class="params">(JoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String key = joinPoint.getSignature().toString();</span><br><span class="line">        Log.d(TAG, <span class="string">"onActivityMethodBefore: "</span> + key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在类的最开始，我们使用@Aspect注解来定义这样一个AspectJ文件，编译器在编译的时候，就会自动去解析，并不需要主动去调用AspectJ类里面的代码。</p><p>我的原始代码很简单：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过这种方式编译后，我们来看下生成的代码是怎样的。AspectJ的原理实际上是在编译的时候，根据一定的规则解析，然后插入一些代码，通过aspectj生成的代码，会在Build目录下：<br> <img src="/images/aspectj/aspectj1.jpeg" alt="aspectj-1"></p><p>通过反编译工具查看下生成内容：<br> <img src="/images/aspectj/aspectj2.png" alt="aspectj-2"></p><p>我们可以发现，在onCreate的最前面，插入了一行AspectJ的代码。这个就是AspectJ的主要功能，抛开AOP的思想来说，我们想做的，实际上就是『在不侵入原有代码的基础上，增加新的代码』。</p><h4 id="使用AOP防止按钮连续点击"><a href="#使用AOP防止按钮连续点击" class="headerlink" title="使用AOP防止按钮连续点击"></a>使用AOP防止按钮连续点击</h4><ul><li><p>首先定义一个防止多次点击的工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoDoubleClickUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> lastClickTime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SPACE_TIME = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isDoubleClick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> currentTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">boolean</span> isClick2 = currentTime - lastClickTime &lt;= SPACE_TIME;</span><br><span class="line">        lastClickTime = currentTime;</span><br><span class="line">        <span class="keyword">return</span> isClick2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后使用AspectJ对OnclickListener进行插桩，</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Around(&quot;execution(* android.view.View.OnClickListener.onClick(..))&quot;)</span><br><span class="line">public void onClickListener(ProceedingJoinPoint proceedingJoinPoint) throws Throwable &#123;</span><br><span class="line">    Log.e(TAG, &quot;OnClick&quot;);</span><br><span class="line">    if (!NoDoubleClickUtils.isDoubleClick()) &#123;</span><br><span class="line">        proceedingJoinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行程序，多次点击按钮后，log如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">07-27 12:38:37.789 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</span><br><span class="line">07-27 12:38:37.789 24084-24084/com.example.androidaspectjdemo E/MainActivity: execute click</span><br><span class="line">07-27 12:38:38.053 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</span><br><span class="line">07-27 12:38:38.290 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</span><br><span class="line">07-27 12:38:38.538 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</span><br><span class="line">07-27 12:38:38.771 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</span><br><span class="line">07-27 12:38:39.006 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</span><br><span class="line">07-27 12:38:39.257 24084-24084/com.example.androidaspectjdemo E/AspectTest: OnClick</span><br></pre></td></tr></table></figure></li></ul><p>通过log可以看出onClickListener执行了多次，但使用click的的地方只执行了一次。这样，就可以在不改变原来代码的情况下，实现防止连续点击的功能。</p><ul><li><p>但是当又有需求：要求部分按钮是可以连续点击的，该怎么办呢？这个时候只要加个注解文件就好。</p></li><li><p>首先定义个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.CLASS)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DoubleClick &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>并且修改之前的AspectTest文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">private View mLastView;</span><br><span class="line">private boolean canDoubleClick = false;</span><br><span class="line"></span><br><span class="line">@Before(&quot;@annotation(com.example.spectjde.annotation.DoubleClick)&quot;)</span><br><span class="line">public void beforeEnableDoubleClick(JoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">    canDoubleClick = true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Around(&quot;execution(* android.view.View.OnClickListener.onClick(..))  &amp;&amp; target(Object) &amp;&amp; this(Object)&quot;)</span><br><span class="line">public void onDoubleClickListener(ProceedingJoinPoint joinPoint) throws Throwable &#123;</span><br><span class="line">    Object[] objects = joinPoint.getArgs();</span><br><span class="line">    View view = objects.length == 0 ? null : (View) objects[0];</span><br><span class="line">    if (view != mLastView || canDoubleClick || !NoDoubleClickUtils.isDoubleClick()) &#123;</span><br><span class="line">        joinPoint.proceed();</span><br><span class="line">        canDoubleClick = false;</span><br><span class="line">    &#125;</span><br><span class="line">    mLastView = view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>现在只要在可以连续点击的按钮的onclick前加一个@DoubleClick的注解就好</p><h4 id="使用注解实现方法运行在异步线程"><a href="#使用注解实现方法运行在异步线程" class="headerlink" title="使用注解实现方法运行在异步线程"></a>使用注解实现方法运行在异步线程</h4><ul><li><p>首先定义注解作用在Method上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(CLASS)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Async &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建AsyncAspect.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(!synthetic * *(..)) &amp;&amp; onAsyncMethod()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAsyncMethod</span><span class="params">(<span class="keyword">final</span> ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        asyncMethod(joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@within(com.example.spectjde.annotation.Async)||@annotation(com.example.spectjde.annotation.Async)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAsyncMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">asyncMethod</span><span class="params">(<span class="keyword">final</span> ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用Rxjava实现线程切换</span></span><br><span class="line">        Flowable.create(<span class="keyword">new</span> FlowableOnSubscribe&lt;Object&gt;() &#123;</span><br><span class="line">                            <span class="meta">@Override</span></span><br><span class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(FlowableEmitter&lt;Object&gt; e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                                <span class="keyword">try</span> &#123;</span><br><span class="line">                                    joinPoint.proceed();</span><br><span class="line">                                &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">                                    throwable.printStackTrace();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                , BackpressureStrategy.BUFFER)</span><br><span class="line">                .subscribeOn(Schedulers.io())</span><br><span class="line">                .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">                .subscribe();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在要切换的方法上加上注解即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Async</span><br><span class="line">void testAsync() &#123;</span><br><span class="line">    Log.e(TAG, Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="实现所有方法耗时统计"><a href="#实现所有方法耗时统计" class="headerlink" title="实现所有方法耗时统计"></a>实现所有方法耗时统计</h4><ul><li><p>创建Aspect class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AspectJSpectControler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = AspectJSpectControler.class.getSimpleName();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(value = <span class="string">"execution(* com.example..*.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">weavePatchLogic</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (BuildConfig.DEBUG) &#123; <span class="comment">//debug    状态下计算方法耗时</span></span><br><span class="line">            <span class="keyword">long</span> startT = System.currentTimeMillis();</span><br><span class="line">            Object proceed = joinPoint.proceed();</span><br><span class="line">            <span class="keyword">long</span> consume = System.currentTimeMillis() - startT;</span><br><span class="line">            Log.d(TAG, <span class="string">"AspectJSpectControler: "</span> + consume + <span class="string">" ms "</span> + joinPoint.getSignature());</span><br><span class="line">            <span class="keyword">return</span> proceed;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> joinPoint.proceed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行app，过滤log查看方法耗时,打印log过滤关键字</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">D/AspectTest: AspectJSpectControler: 127 ms void com.example.androidaspectjdemo.MainActivity.onCreate(Bundle)</span><br><span class="line">D/AspectTest: AspectJSpectControler: 20 ms void com.example.spectjde.AsyncAspect.asyncMethod</span><br></pre></td></tr></table></figure></li></ul><p>Demo地址  <a href="https://github.com/android9527/AndroidAspectjDemo" target="_blank" rel="noopener">https://github.com/android9527/AndroidAspectjDemo</a></p><h4 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h4><p><a href="http://www.cnblogs.com/yxx123/p/6675567.html" target="_blank" rel="noopener">Android防止按钮连续点击方案之AOP</a></p><p><a href="http://www.jianshu.com/p/2779e3bb1f14" target="_blank" rel="noopener">归纳AOP在Android开发中的几种常见用法</a></p><p><a href="http://blog.csdn.net/eclipsexys/article/details/54425414" target="_blank" rel="noopener">看AspectJ在Android中的强势插入</a></p><p><a href="http://glanwang.com/2017/07/18/Android/AOP%E6%8A%80%E6%9C%AF%E5%9C%A8%E7%BD%91%E6%98%93%E6%96%B0%E9%97%BB%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/" target="_blank" rel="noopener">AOP技术在网易新闻中的应用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;AOP概念&quot;&gt;&lt;a href=&quot;#AOP概念&quot; class=&quot;headerlink&quot; title=&quot;AOP概念&quot;&gt;&lt;/a&gt;AOP概念&lt;/h4&gt;&lt;p&gt;百度百科中对AOP的解释如下:&lt;br&gt;在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。
    
    </summary>
    
      <category term="Android" scheme="http://android9527.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://android9527.com/tags/Android/"/>
    
      <category term="Aop" scheme="http://android9527.com/tags/Aop/"/>
    
      <category term="Aspectj" scheme="http://android9527.com/tags/Aspectj/"/>
    
      <category term="面向切面编程" scheme="http://android9527.com/tags/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
